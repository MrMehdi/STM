
STemWin_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  08008c60  08008c60  00018c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  24000000  08009b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .GUI_NUMBYTES_section 0002d000  2400003c  08009b44  0002003c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006dc  2402d040  08036b44  0004d040  2**3
                  ALLOC
  8 ._user_heap_stack 00006204  2402d71c  08036b44  0004d71c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004d03c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000e82c  00000000  00000000  0004d06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00028474  00000000  00000000  0005b896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003c62  00000000  00000000  00083d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c50  00000000  00000000  00087970  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00182cc7  00000000  00000000  000885c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  0020b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00007caf  00000000  00000000  0020c108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003be45  00000000  00000000  00213db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  0024fbfc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000022c8  00000000  00000000  0024fce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2402d040 	.word	0x2402d040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008c44 	.word	0x08008c44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2402d044 	.word	0x2402d044
 80002d4:	08008c44 	.word	0x08008c44

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002de:	e003      	b.n	80002e8 <LoopCopyDataInit>

080002e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002e6:	3104      	adds	r1, #4

080002e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f0:	d3f6      	bcc.n	80002e0 <CopyDataInit>
  ldr  r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002f4:	e002      	b.n	80002fc <LoopFillZerobss>

080002f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002f8:	f842 3b04 	str.w	r3, [r2], #4

080002fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000300:	d3f9      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000302:	f000 fb15 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000306:	f007 fe27 	bl	8007f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 f811 	bl	8000330 <main>
  bx  lr    
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000314:	08009b08 	.word	0x08009b08
  ldr  r0, =_sdata
 8000318:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800031c:	2400003c 	.word	0x2400003c
  ldr  r2, =_sbss
 8000320:	2402d040 	.word	0x2402d040
  ldr  r3, = _ebss
 8000324:	2402d71c 	.word	0x2402d71c

08000328 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>
 800032a:	0000      	movs	r0, r0
 800032c:	0000      	movs	r0, r0
	...

08000330 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000330:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000334:	b09f      	sub	sp, #124	; 0x7c
static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 8000336:	f000 fc19 	bl	8000b6c <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800033a:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.BaseAddress      = SDRAM_DEVICE_ADDR;
 800033e:	f04f 4c50 	mov.w	ip, #3489660928	; 0xd0000000
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000342:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000344:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.BaseAddress      = SDRAM_DEVICE_ADDR;
 8000348:	4b83      	ldr	r3, [pc, #524]	; (8000558 <main+0x228>)
 800034a:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800034e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000352:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000354:	f000 fc2c 	bl	8000bb0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000358:	2004      	movs	r0, #4
 800035a:	f000 fc17 	bl	8000b8c <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800035e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000362:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000366:	4b7d      	ldr	r3, [pc, #500]	; (800055c <main+0x22c>)
 8000368:	2100      	movs	r1, #0
 800036a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800036e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000372:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000376:	695a      	ldr	r2, [r3, #20]
 8000378:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800037c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800037e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000382:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000386:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800038a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800038e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000392:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000396:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800039a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800039e:	07a5      	lsls	r5, r4, #30
 80003a0:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003a2:	ea02 0c06 	and.w	ip, r2, r6
 80003a6:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003a8:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003aa:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003ae:	3901      	subs	r1, #1
 80003b0:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003b4:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80003b8:	1c4f      	adds	r7, r1, #1
 80003ba:	d1f6      	bne.n	80003aa <main+0x7a>
 80003bc:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80003be:	f112 0f20 	cmn.w	r2, #32
 80003c2:	d1ee      	bne.n	80003a2 <main+0x72>
 80003c4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003d4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80003d8:	f000 fb12 	bl	8000a00 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003dc:	2002      	movs	r0, #2
 80003de:	f001 f88f 	bl	8001500 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e2:	2300      	movs	r3, #0
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	4b5e      	ldr	r3, [pc, #376]	; (8000560 <main+0x230>)
 80003e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ea:	f022 0201 	bic.w	r2, r2, #1
 80003ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80003f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	4b5a      	ldr	r3, [pc, #360]	; (8000564 <main+0x234>)
 80003fa:	699a      	ldr	r2, [r3, #24]
 80003fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000400:	619a      	str	r2, [r3, #24]
 8000402:	699a      	ldr	r2, [r3, #24]
 8000404:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000408:	9201      	str	r2, [sp, #4]
 800040a:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800040c:	699a      	ldr	r2, [r3, #24]
 800040e:	0491      	lsls	r1, r2, #18
 8000410:	d5fc      	bpl.n	800040c <main+0xdc>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLN = 160;
 800041a:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800041c:	f04f 0904 	mov.w	r9, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000420:	f04f 0808 	mov.w	r8, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000424:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000426:	9718      	str	r7, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000428:	971a      	str	r7, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800042a:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800042e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000432:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000436:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000438:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800043a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800043c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800043e:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000440:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000442:	e9cd 7714 	strd	r7, r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000446:	e9cd 6216 	strd	r6, r2, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800044a:	f001 f87d 	bl	8001548 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800044e:	b100      	cbz	r0, 8000452 <main+0x122>
 8000450:	e7fe      	b.n	8000450 <main+0x120>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	233f      	movs	r3, #63	; 0x3f
 8000454:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000456:	f44f 6280 	mov.w	r2, #1024	; 0x400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800045a:	4649      	mov	r1, r9
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000460:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000462:	e9cd 0805 	strd	r0, r8, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000466:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 8000468:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800046c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000470:	f001 fb9e 	bl	8001bb0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000474:	4682      	mov	sl, r0
 8000476:	b100      	cbz	r0, 800047a <main+0x14a>
 8000478:	e7fe      	b.n	8000478 <main+0x148>
  __HAL_RCC_CSI_ENABLE() ;
 800047a:	4c3b      	ldr	r4, [pc, #236]	; (8000568 <main+0x238>)
 800047c:	6823      	ldr	r3, [r4, #0]
 800047e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000482:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000484:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000490:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000494:	f003 0302 	and.w	r3, r3, #2
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();  
 800049c:	f000 faf6 	bl	8000a8c <HAL_EnableCompensationCell>
  BSP_SDRAM_Init(0);  
 80004a0:	4650      	mov	r0, sl
  x_size=LCD_GetXSize();
 80004a2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8000570 <main+0x240>
  BSP_SDRAM_Init(0);  
 80004a6:	f000 f939 	bl	800071c <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80004aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80004ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004b2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80004b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  	  d_int.spessore_bordo = 5;
 80004ba:	4c2c      	ldr	r4, [pc, #176]	; (800056c <main+0x23c>)
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80004bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80004c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GUI_Init();  
 80004c4:	f003 fb56 	bl	8003b74 <GUI_Init>
  x_size=LCD_GetXSize();
 80004c8:	f004 fa42 	bl	8004950 <LCD_GetXSize>
 80004cc:	f8ca 0000 	str.w	r0, [sl]
  y_size=LCD_GetYSize();
 80004d0:	f004 fa46 	bl	8004960 <LCD_GetYSize>
  	  d_int.raggio_cerchio_centrale = (x_size/4);
 80004d4:	f8da 3000 	ldr.w	r3, [sl]
  y_size=LCD_GetYSize();
 80004d8:	4684      	mov	ip, r0
 80004da:	f8ca 0004 	str.w	r0, [sl, #4]
  	  d_int.spessore_bordo = 5;
 80004de:	6026      	str	r6, [r4, #0]
  	  d_int.dim_barra_x = (x_size/8);
 80004e0:	fb93 f8f8 	sdiv	r8, r3, r8
  	  d_int.dim_barra_y =  2*(y_size/3);
 80004e4:	fb9c fef5 	sdiv	lr, ip, r5
  	  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 80004e8:	fb93 f5f5 	sdiv	r5, r3, r5
 80004ec:	eba5 0508 	sub.w	r5, r5, r8
  	  d_int.dim_barra_y =  2*(y_size/3);
 80004f0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  	  d_int.dim_barra_x = (x_size/8);
 80004f4:	f8c4 8020 	str.w	r8, [r4, #32]
  	  d_int.dim_barra_y =  2*(y_size/3);
 80004f8:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
  	  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 80004fc:	fb95 f5f7 	sdiv	r5, r5, r7
 8000500:	62a5      	str	r5, [r4, #40]	; 0x28
  	  d_int.dim_quadrato_piu_meno=(x_size/16);
 8000502:	2510      	movs	r5, #16
  	  d_int.centro_y_cerchio_centrale = (y_size/2);
 8000504:	fb9c f1f7 	sdiv	r1, ip, r7
  	  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 8000508:	ebac 0c0e 	sub.w	ip, ip, lr
  	  d_int.centro_x_cerchio_centrale = (x_size/2);
 800050c:	fb93 f0f7 	sdiv	r0, r3, r7
  	  d_int.raggio_cerchio_centrale = (x_size/4);
 8000510:	fb93 f2f9 	sdiv	r2, r3, r9
  	  d_int.dim_quadrato_piu_meno=(x_size/16);
 8000514:	fb93 f3f5 	sdiv	r3, r3, r5
  	  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 8000518:	fb9c f7f7 	sdiv	r7, ip, r7
  	  d_int.angolo = (2*M_PI)/3;
 800051c:	f20f 0b30 	addw	fp, pc, #48	; 0x30
 8000520:	e9db ab00 	ldrd	sl, fp, [fp]
  	  d_int.dim_riquadro_etichetta_x=(x_size/8);
 8000524:	e9c4 380c 	strd	r3, r8, [r4, #48]	; 0x30
  	  d_int.dim_riquadro_etichetta_y=d_int.dim_quadrato_piu_meno;
 8000528:	63a3      	str	r3, [r4, #56]	; 0x38
  	  disegna_cerchio_centrale(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.raggio_cerchio_centrale, d_int.spessore_bordo);
 800052a:	4633      	mov	r3, r6
  	  d_int.raggio_cerchio_centrale = (x_size/4);
 800052c:	6062      	str	r2, [r4, #4]
  	  d_int.centro_x_cerchio_centrale = (x_size/2);
 800052e:	60a0      	str	r0, [r4, #8]
  	  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 8000530:	62e7      	str	r7, [r4, #44]	; 0x2c
  	  d_int.raggio_indicatore_cerchio = 5;
 8000532:	e9c4 1603 	strd	r1, r6, [r4, #12]
  	  d_int.angolo = (2*M_PI)/3;
 8000536:	e9c4 ab06 	strd	sl, fp, [r4, #24]
  	  disegna_cerchio_centrale(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.raggio_cerchio_centrale, d_int.spessore_bordo);
 800053a:	f002 fa99 	bl	8002a70 <disegna_cerchio_centrale>
  	  disegna_indicatore_cerchio(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.angolo, d_int.raggio_cerchio_centrale, d_int.raggio_indicatore_cerchio);
 800053e:	6923      	ldr	r3, [r4, #16]
 8000540:	6862      	ldr	r2, [r4, #4]
 8000542:	ed94 0b06 	vldr	d0, [r4, #24]
 8000546:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800054a:	f002 faaa 	bl	8002aa2 <disegna_indicatore_cerchio>
 800054e:	e7fe      	b.n	800054e <main+0x21e>
 8000550:	382d7365 	.word	0x382d7365
 8000554:	4000c152 	.word	0x4000c152
 8000558:	03000018 	.word	0x03000018
 800055c:	e000ed00 	.word	0xe000ed00
 8000560:	58000400 	.word	0x58000400
 8000564:	58024800 	.word	0x58024800
 8000568:	58024400 	.word	0x58024400
 800056c:	2402d448 	.word	0x2402d448
 8000570:	2402d05c 	.word	0x2402d05c

08000574 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000574:	4770      	bx	lr

08000576 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler>

08000578 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler>

0800057a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800057a:	e7fe      	b.n	800057a <BusFault_Handler>

0800057c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler>

0800057e <DebugMon_Handler>:
 800057e:	4770      	bx	lr

08000580 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000580:	b508      	push	{r3, lr}
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 8000582:	f000 fa6b 	bl	8000a5c <HAL_IncTick>
  
  OS_TimeMS++;
 8000586:	4a02      	ldr	r2, [pc, #8]	; (8000590 <SysTick_Handler+0x10>)
 8000588:	6813      	ldr	r3, [r2, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bd08      	pop	{r3, pc}
 8000590:	2402d4c0 	.word	0x2402d4c0

08000594 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 8000594:	4801      	ldr	r0, [pc, #4]	; (800059c <LTDC_IRQHandler+0x8>)
 8000596:	f000 bd5b 	b.w	8001050 <HAL_LTDC_IRQHandler>
 800059a:	bf00      	nop
 800059c:	2402d4c4 	.word	0x2402d4c4

080005a0 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 80005a0:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 80005a2:	2201      	movs	r2, #1
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <IS42S32800G_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80005a6:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80005aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80005ac:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005ae:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80005b0:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	f002 f999 	bl	80028ec <HAL_SDRAM_SendCommand>
 80005ba:	3000      	adds	r0, #0
 80005bc:	bf18      	it	ne
 80005be:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80005c0:	4240      	negs	r0, r0
 80005c2:	bd08      	pop	{r3, pc}
 80005c4:	2402d064 	.word	0x2402d064

080005c8 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 80005c8:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 80005ca:	2202      	movs	r2, #2
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <IS42S32800G_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80005ce:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80005d2:	2101      	movs	r1, #1
 80005d4:	2200      	movs	r2, #0
 80005d6:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005de:	4619      	mov	r1, r3
 80005e0:	f002 f984 	bl	80028ec <HAL_SDRAM_SendCommand>
 80005e4:	3000      	adds	r0, #0
 80005e6:	bf18      	it	ne
 80005e8:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80005ea:	4240      	negs	r0, r0
 80005ec:	bd08      	pop	{r3, pc}
 80005ee:	bf00      	nop
 80005f0:	2402d064 	.word	0x2402d064

080005f4 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80005f4:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005f6:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80005fa:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005fc:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80005fe:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8000600:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8000602:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8000604:	6991      	ldr	r1, [r2, #24]
 8000606:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000608:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800060a:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800060c:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 800060e:	4907      	ldr	r1, [pc, #28]	; (800062c <IS42S32800G_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8000610:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8000612:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8000614:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8000616:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800061a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800061e:	f002 f965 	bl	80028ec <HAL_SDRAM_SendCommand>
 8000622:	3000      	adds	r0, #0
 8000624:	bf18      	it	ne
 8000626:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000628:	4240      	negs	r0, r0
 800062a:	bd10      	pop	{r4, pc}
 800062c:	2402d064 	.word	0x2402d064

08000630 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8000630:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <IS42S32800G_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8000634:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8000638:	2108      	movs	r1, #8
 800063a:	2200      	movs	r2, #0
 800063c:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000644:	4619      	mov	r1, r3
 8000646:	f002 f951 	bl	80028ec <HAL_SDRAM_SendCommand>
 800064a:	3000      	adds	r0, #0
 800064c:	bf18      	it	ne
 800064e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000650:	4240      	negs	r0, r0
 8000652:	bd08      	pop	{r3, pc}
 8000654:	2402d064 	.word	0x2402d064

08000658 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8000658:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800065a:	f002 f966 	bl	800292a <HAL_SDRAM_ProgramRefreshRate>
 800065e:	3000      	adds	r0, #0
 8000660:	bf18      	it	ne
 8000662:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000664:	4240      	negs	r0, r0
 8000666:	bd08      	pop	{r3, pc}

08000668 <IS42S32800G_Init>:
{
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	460c      	mov	r4, r1
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 800066c:	6809      	ldr	r1, [r1, #0]
{
 800066e:	4605      	mov	r5, r0
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000670:	f7ff ff96 	bl	80005a0 <IS42S32800G_ClockEnable>
 8000674:	b110      	cbz	r0, 800067c <IS42S32800G_Init+0x14>
  int32_t ret = IS42S32800G_ERROR;
 8000676:	f04f 30ff 	mov.w	r0, #4294967295
}
 800067a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800067c:	f000 f9fa 	bl	8000a74 <HAL_GetTick>
 8000680:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000682:	f000 f9f7 	bl	8000a74 <HAL_GetTick>
 8000686:	4286      	cmp	r6, r0
 8000688:	d0fb      	beq.n	8000682 <IS42S32800G_Init+0x1a>
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 800068a:	6821      	ldr	r1, [r4, #0]
 800068c:	4628      	mov	r0, r5
 800068e:	f7ff ff9b 	bl	80005c8 <IS42S32800G_Precharge>
 8000692:	2800      	cmp	r0, #0
 8000694:	d1ef      	bne.n	8000676 <IS42S32800G_Init+0xe>
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8000696:	4628      	mov	r0, r5
 8000698:	e9d4 1200 	ldrd	r1, r2, [r4]
 800069c:	f7ff ffc8 	bl	8000630 <IS42S32800G_RefreshMode>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d1e8      	bne.n	8000676 <IS42S32800G_Init+0xe>
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 80006a4:	4621      	mov	r1, r4
 80006a6:	4628      	mov	r0, r5
 80006a8:	f7ff ffa4 	bl	80005f4 <IS42S32800G_ModeRegConfig>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d1e2      	bne.n	8000676 <IS42S32800G_Init+0xe>
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 80006b0:	68a1      	ldr	r1, [r4, #8]
 80006b2:	4628      	mov	r0, r5
 80006b4:	f7ff ffd0 	bl	8000658 <IS42S32800G_RefreshRate>
 80006b8:	3000      	adds	r0, #0
 80006ba:	bf18      	it	ne
 80006bc:	2001      	movne	r0, #1
 80006be:	4240      	negs	r0, r0
  return ret;
 80006c0:	e7db      	b.n	800067a <IS42S32800G_Init+0x12>
	...

080006c4 <MX_SDRAM_BANK2_Init>:

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80006c4:	2201      	movs	r2, #1
 80006c6:	4914      	ldr	r1, [pc, #80]	; (8000718 <MX_SDRAM_BANK2_Init+0x54>)
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 80006c8:	2302      	movs	r3, #2
{
 80006ca:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80006cc:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80006d0:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80006d2:	2104      	movs	r1, #4
 80006d4:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80006d6:	2440      	movs	r4, #64	; 0x40
{
 80006d8:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80006da:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80006de:	f44f 72c0 	mov.w	r2, #384	; 0x180
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80006e2:	9307      	str	r3, [sp, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80006e4:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80006ee:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80006f2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80006f6:	e9c0 4209 	strd	r4, r2, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80006fa:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 80006fc:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8000700:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 8000702:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8000706:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800070a:	f002 f8c7 	bl	800289c <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
}
 800070e:	3000      	adds	r0, #0
 8000710:	bf18      	it	ne
 8000712:	2001      	movne	r0, #1
 8000714:	b008      	add	sp, #32
 8000716:	bd10      	pop	{r4, pc}
 8000718:	52004140 	.word	0x52004140

0800071c <BSP_SDRAM_Init>:
{
 800071c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(Instance >= SDRAM_INSTANCES_NBR)
 8000720:	4605      	mov	r5, r0
{
 8000722:	b08e      	sub	sp, #56	; 0x38
  if(Instance >= SDRAM_INSTANCES_NBR)
 8000724:	2800      	cmp	r0, #0
 8000726:	f040 80e9 	bne.w	80008fc <BSP_SDRAM_Init+0x1e0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800072a:	4b77      	ldr	r3, [pc, #476]	; (8000908 <BSP_SDRAM_Init+0x1ec>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800072c:	f04f 0803 	mov.w	r8, #3

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000730:	ac0e      	add	r4, sp, #56	; 0x38
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000732:	4876      	ldr	r0, [pc, #472]	; (800090c <BSP_SDRAM_Init+0x1f0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000734:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8000738:	4f75      	ldr	r7, [pc, #468]	; (8000910 <BSP_SDRAM_Init+0x1f4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800073a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800073e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000742:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000746:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800074a:	9201      	str	r2, [sp, #4]
 800074c:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800074e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800075a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800075e:	f002 0201 	and.w	r2, r2, #1
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800076a:	f042 0208 	orr.w	r2, r2, #8
 800076e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000772:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000776:	f002 0208 	and.w	r2, r2, #8
 800077a:	9203      	str	r2, [sp, #12]
 800077c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000782:	f042 0210 	orr.w	r2, r2, #16
 8000786:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800078a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800078e:	f002 0210 	and.w	r2, r2, #16
 8000792:	9204      	str	r2, [sp, #16]
 8000794:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800079a:	f042 0220 	orr.w	r2, r2, #32
 800079e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007a6:	f002 0220 	and.w	r2, r2, #32
 80007aa:	9205      	str	r2, [sp, #20]
 80007ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007be:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80007c2:	9206      	str	r2, [sp, #24]
 80007c4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007da:	9207      	str	r2, [sp, #28]
 80007dc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80007ea:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007f4:	9308      	str	r3, [sp, #32]
 80007f6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80007fe:	230c      	movs	r3, #12
 8000800:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000804:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000808:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800080c:	4621      	mov	r1, r4
 800080e:	f000 fa35 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000812:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000816:	4621      	mov	r1, r4
 8000818:	483e      	ldr	r0, [pc, #248]	; (8000914 <BSP_SDRAM_Init+0x1f8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800081a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800081c:	f000 fa2e 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000820:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000824:	4621      	mov	r1, r4
 8000826:	483c      	ldr	r0, [pc, #240]	; (8000918 <BSP_SDRAM_Init+0x1fc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000828:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800082a:	f000 fa27 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 800082e:	f248 133f 	movw	r3, #33087	; 0x813f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000832:	4621      	mov	r1, r4
 8000834:	4839      	ldr	r0, [pc, #228]	; (800091c <BSP_SDRAM_Init+0x200>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 8000836:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000838:	f000 fa20 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800083c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000840:	4621      	mov	r1, r4
 8000842:	4837      	ldr	r0, [pc, #220]	; (8000920 <BSP_SDRAM_Init+0x204>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000844:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000846:	f000 fa19 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800084a:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800084e:	4621      	mov	r1, r4
 8000850:	4834      	ldr	r0, [pc, #208]	; (8000924 <BSP_SDRAM_Init+0x208>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000852:	4c35      	ldr	r4, [pc, #212]	; (8000928 <BSP_SDRAM_Init+0x20c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000854:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000856:	f000 fa11 	bl	8000c7c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800085a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800085e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000862:	f240 2002 	movw	r0, #514	; 0x202
 8000866:	f640 0208 	movw	r2, #2056	; 0x808
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800086a:	4626      	mov	r6, r4
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 800086c:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000870:	e9c4 131c 	strd	r1, r3, [r4, #112]	; 0x70
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000874:	e9c4 0220 	strd	r0, r2, [r4, #128]	; 0x80
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000878:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800087a:	2220      	movs	r2, #32
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800087c:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000880:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
  mdma_handle.Init.BufferTransferLength     = 128;
 8000884:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <BSP_SDRAM_Init+0x210>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800088e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000892:	f846 3f6c 	str.w	r3, [r6, #108]!

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8000896:	4630      	mov	r0, r6
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8000898:	633e      	str	r6, [r7, #48]	; 0x30
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800089a:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800089e:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
  HAL_MDMA_DeInit(&mdma_handle);
 80008a2:	f000 fe0e 	bl	80014c2 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 80008a6:	4630      	mov	r0, r6
 80008a8:	f000 fd9c 	bl	80013e4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80008ac:	462a      	mov	r2, r5
 80008ae:	210f      	movs	r1, #15
 80008b0:	207a      	movs	r0, #122	; 0x7a
 80008b2:	f000 f905 	bl	8000ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80008b6:	207a      	movs	r0, #122	; 0x7a
 80008b8:	f000 f934 	bl	8000b24 <HAL_NVIC_EnableIRQ>
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 80008bc:	4638      	mov	r0, r7
 80008be:	f7ff ff01 	bl	80006c4 <MX_SDRAM_BANK2_Init>
 80008c2:	b9f0      	cbnz	r0, 8000902 <BSP_SDRAM_Init+0x1e6>
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80008c4:	2308      	movs	r3, #8
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80008c6:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80008ca:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 80008ce:	e9c4 3836 	strd	r3, r8, [r4, #216]	; 0xd8
        pRegMode.RefreshRate     = REFRESH_COUNT;
 80008d2:	f240 6303 	movw	r3, #1539	; 0x603
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 80008d6:	e9c4 3038 	strd	r3, r0, [r4, #224]	; 0xe0
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 80008da:	2330      	movs	r3, #48	; 0x30
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 80008dc:	e9c4 303b 	strd	r3, r0, [r4, #236]	; 0xec
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80008e4:	4638      	mov	r0, r7
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80008e6:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80008ea:	f7ff febd 	bl	8000668 <IS42S32800G_Init>
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf18      	it	ne
 80008f2:	f06f 0004 	mvnne.w	r0, #4
}
 80008f6:	b00e      	add	sp, #56	; 0x38
 80008f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80008fc:	f06f 0001 	mvn.w	r0, #1
 8000900:	e7f9      	b.n	80008f6 <BSP_SDRAM_Init+0x1da>
        ret = BSP_ERROR_NO_INIT;
 8000902:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000906:	e7f6      	b.n	80008f6 <BSP_SDRAM_Init+0x1da>
 8000908:	58024400 	.word	0x58024400
 800090c:	58020c00 	.word	0x58020c00
 8000910:	2402d488 	.word	0x2402d488
 8000914:	58021000 	.word	0x58021000
 8000918:	58021400 	.word	0x58021400
 800091c:	58021800 	.word	0x58021800
 8000920:	58021c00 	.word	0x58021c00
 8000924:	58022000 	.word	0x58022000
 8000928:	2402d074 	.word	0x2402d074
 800092c:	52000040 	.word	0x52000040

08000930 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000930:	491a      	ldr	r1, [pc, #104]	; (800099c <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000932:	481b      	ldr	r0, [pc, #108]	; (80009a0 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000934:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800093c:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800093e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <SystemInit+0x74>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f042 0201 	orr.w	r2, r2, #1
 800094a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000950:	681c      	ldr	r4, [r3, #0]
 8000952:	4020      	ands	r0, r4
 8000954:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000956:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000958:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800095a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800095c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000964:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000966:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000968:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800096a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000972:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000974:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <SystemInit+0x78>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	0c1b      	lsrs	r3, r3, #16
 800097c:	041b      	lsls	r3, r3, #16
 800097e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000982:	d202      	bcs.n	800098a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <SystemInit+0x7c>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <SystemInit+0x80>)
 800098c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000990:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000992:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000996:	608b      	str	r3, [r1, #8]
#endif  


}
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80009a4:	58024400 	.word	0x58024400
 80009a8:	5c001000 	.word	0x5c001000
 80009ac:	51008108 	.word	0x51008108
 80009b0:	52004000 	.word	0x52004000

080009b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009b4:	4770      	bx	lr
	...

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009ba:	4e0f      	ldr	r6, [pc, #60]	; (80009f8 <HAL_InitTick+0x40>)
{
 80009bc:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80009be:	7830      	ldrb	r0, [r6, #0]
 80009c0:	b908      	cbnz	r0, 80009c6 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <HAL_InitTick+0x44>)
 80009cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80009d0:	6810      	ldr	r0, [r2, #0]
 80009d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80009d6:	f000 f8b3 	bl	8000b40 <HAL_SYSTICK_Config>
 80009da:	4604      	mov	r4, r0
 80009dc:	2800      	cmp	r0, #0
 80009de:	d1f0      	bne.n	80009c2 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	2d0f      	cmp	r5, #15
 80009e2:	d8ee      	bhi.n	80009c2 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	4602      	mov	r2, r0
 80009e6:	4629      	mov	r1, r5
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f868 	bl	8000ac0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	6075      	str	r5, [r6, #4]
 80009f2:	4620      	mov	r0, r4
 80009f4:	e7e6      	b.n	80009c4 <HAL_InitTick+0xc>
 80009f6:	bf00      	nop
 80009f8:	24000008 	.word	0x24000008
 80009fc:	24000000 	.word	0x24000000

08000a00 <HAL_Init>:
{
 8000a00:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a02:	2003      	movs	r0, #3
 8000a04:	f000 f84a 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a08:	f001 f836 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8000a0c:	490f      	ldr	r1, [pc, #60]	; (8000a4c <HAL_Init+0x4c>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_Init+0x50>)
 8000a10:	698b      	ldr	r3, [r1, #24]
 8000a12:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a1e:	698b      	ldr	r3, [r1, #24]
 8000a20:	f003 030f 	and.w	r3, r3, #15
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_Init+0x54>)
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_Init+0x58>)
 8000a34:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	200f      	movs	r0, #15
 8000a38:	f7ff ffbe 	bl	80009b8 <HAL_InitTick>
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	b918      	cbnz	r0, 8000a48 <HAL_Init+0x48>
  HAL_MspInit();
 8000a40:	f7ff ffb8 	bl	80009b4 <HAL_MspInit>
}
 8000a44:	4620      	mov	r0, r4
 8000a46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a48:	2401      	movs	r4, #1
 8000a4a:	e7fb      	b.n	8000a44 <HAL_Init+0x44>
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	08008c60 	.word	0x08008c60
 8000a54:	24000004 	.word	0x24000004
 8000a58:	24000000 	.word	0x24000000

08000a5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <HAL_IncTick+0x10>)
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_IncTick+0x14>)
 8000a60:	6811      	ldr	r1, [r2, #0]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	440b      	add	r3, r1
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	2402d4bc 	.word	0x2402d4bc
 8000a70:	24000008 	.word	0x24000008

08000a74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a74:	4b01      	ldr	r3, [pc, #4]	; (8000a7c <HAL_GetTick+0x8>)
 8000a76:	6818      	ldr	r0, [r3, #0]
}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2402d4bc 	.word	0x2402d4bc

08000a80 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000a80:	4b01      	ldr	r3, [pc, #4]	; (8000a88 <HAL_GetREVID+0x8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
}
 8000a84:	0c00      	lsrs	r0, r0, #16
 8000a86:	4770      	bx	lr
 8000a88:	5c001000 	.word	0x5c001000

08000a8c <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000a8c:	4a02      	ldr	r2, [pc, #8]	; (8000a98 <HAL_EnableCompensationCell+0xc>)
 8000a8e:	6a13      	ldr	r3, [r2, #32]
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6213      	str	r3, [r2, #32]
}
 8000a96:	4770      	bx	lr
 8000a98:	58000400 	.word	0x58000400

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000aaa:	041b      	lsls	r3, r3, #16
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ab6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ab8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac2:	b570      	push	{r4, r5, r6, lr}
 8000ac4:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac6:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aca:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ace:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	2d04      	cmp	r5, #4
 8000ad6:	bf28      	it	cs
 8000ad8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae0:	bf8c      	ite	hi
 8000ae2:	3c03      	subhi	r4, #3
 8000ae4:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	ea21 0303 	bic.w	r3, r1, r3
 8000aec:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	fa06 f404 	lsl.w	r4, r6, r4
 8000af4:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	ea43 0304 	orr.w	r3, r3, r4
 8000afc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000b00:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000b02:	db06      	blt.n	8000b12 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b08:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b0c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	f000 000f 	and.w	r0, r0, #15
 8000b16:	4a02      	ldr	r2, [pc, #8]	; (8000b20 <HAL_NVIC_SetPriority+0x60>)
 8000b18:	5413      	strb	r3, [r2, r0]
 8000b1a:	e7f9      	b.n	8000b10 <HAL_NVIC_SetPriority+0x50>
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	e000ed14 	.word	0xe000ed14

08000b24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b24:	2800      	cmp	r0, #0
 8000b26:	db08      	blt.n	8000b3a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b28:	0942      	lsrs	r2, r0, #5
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f000 001f 	and.w	r0, r0, #31
 8000b30:	fa03 f000 	lsl.w	r0, r3, r0
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <HAL_NVIC_EnableIRQ+0x18>)
 8000b36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	3801      	subs	r0, #1
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d20a      	bcs.n	8000b5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	21f0      	movs	r1, #240	; 0xf0
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b6c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_MPU_Disable+0x18>)
 8000b72:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b78:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <HAL_MPU_Disable+0x1c>)
 8000b7e:	605a      	str	r2, [r3, #4]
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	e000ed90 	.word	0xe000ed90

08000b8c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b8e:	f040 0001 	orr.w	r0, r0, #1
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MPU_Enable+0x20>)
 8000b94:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b96:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ba2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	e000ed90 	.word	0xe000ed90

08000bb0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bb0:	7843      	ldrb	r3, [r0, #1]
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_MPU_ConfigRegion+0x4c>)
{
 8000bb4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8000bb6:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000bb8:	7801      	ldrb	r1, [r0, #0]
 8000bba:	b1d9      	cbz	r1, 8000bf4 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000bbc:	6843      	ldr	r3, [r0, #4]
 8000bbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bc0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bc2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bc4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bc6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bca:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bcc:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bce:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bd2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bd4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bd8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bda:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bde:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000be0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000be4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000be6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000bea:	7a01      	ldrb	r1, [r0, #8]
 8000bec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bf0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000bf2:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8000bf4:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8000bf6:	6111      	str	r1, [r2, #16]
}
 8000bf8:	e7fb      	b.n	8000bf2 <HAL_MPU_ConfigRegion+0x42>
 8000bfa:	bf00      	nop
 8000bfc:	e000ed90 	.word	0xe000ed90

08000c00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000c00:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000c02:	4604      	mov	r4, r0
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d036      	beq.n	8000c76 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c08:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8000c0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c10:	b91b      	cbnz	r3, 8000c1a <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c12:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c16:	f002 f83b 	bl	8002c90 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c1a:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000c1c:	69e0      	ldr	r0, [r4, #28]
 8000c1e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c20:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000c28:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000c2a:	6819      	ldr	r1, [r3, #0]
 8000c2c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8000c30:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c3a:	68a2      	ldr	r2, [r4, #8]
 8000c3c:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8000c40:	4302      	orrs	r2, r0
 8000c42:	f021 0101 	bic.w	r1, r1, #1
 8000c46:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c48:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4e:	0c12      	lsrs	r2, r2, #16
 8000c50:	0412      	lsls	r2, r2, #16
 8000c52:	430a      	orrs	r2, r1
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c58:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8000c5c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000c60:	0552      	lsls	r2, r2, #21
 8000c62:	ea42 5200 	orr.w	r2, r2, r0, lsl #20


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c66:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c6c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c6e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c70:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8000c74:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000c76:	2001      	movs	r0, #1
 8000c78:	e7fc      	b.n	8000c74 <HAL_DMA2D_Init+0x74>
	...

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c80:	680b      	ldr	r3, [r1, #0]
{
 8000c82:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e48 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c88:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c8c:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000c8e:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8000c90:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000e4c <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c94:	9a01      	ldr	r2, [sp, #4]
 8000c96:	40da      	lsrs	r2, r3
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8000c9a:	b005      	add	sp, #20
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ca0:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8000ca2:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ca4:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8000ca6:	ea17 0502 	ands.w	r5, r7, r2
 8000caa:	f000 80b6 	beq.w	8000e1a <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	684a      	ldr	r2, [r1, #4]
 8000cb0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cb4:	2403      	movs	r4, #3
 8000cb6:	f022 0a10 	bic.w	sl, r2, #16
 8000cba:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cbe:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000cc2:	43e4      	mvns	r4, r4
 8000cc4:	2e01      	cmp	r6, #1
 8000cc6:	d810      	bhi.n	8000cea <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000cc8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cca:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	68ce      	ldr	r6, [r1, #12]
 8000cd0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cd4:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000cd8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cda:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cdc:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ce0:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000ce4:	409e      	lsls	r6, r3
 8000ce6:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000ce8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cea:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cec:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf2:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cfa:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8000cfe:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d00:	d114      	bne.n	8000d2c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8000d02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d06:	f003 0b07 	and.w	fp, r3, #7
 8000d0a:	270f      	movs	r7, #15
 8000d0c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000d10:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d18:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d1c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d20:	690e      	ldr	r6, [r1, #16]
 8000d22:	fa06 f60b 	lsl.w	r6, r6, fp
 8000d26:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000d28:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8000d2c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d2e:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	f002 0603 	and.w	r6, r2, #3
 8000d34:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000d38:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8000d3c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3e:	00d4      	lsls	r4, r2, #3
 8000d40:	d56b      	bpl.n	8000e1a <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000d46:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d4a:	f003 0703 	and.w	r7, r3, #3
 8000d4e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	f044 0402 	orr.w	r4, r4, #2
 8000d56:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d5a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000d60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d64:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000d68:	f004 0402 	and.w	r4, r4, #2
 8000d6c:	9403      	str	r4, [sp, #12]
 8000d6e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d70:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d74:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d78:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d7c:	4c31      	ldr	r4, [pc, #196]	; (8000e44 <HAL_GPIO_Init+0x1c8>)
 8000d7e:	42a0      	cmp	r0, r4
 8000d80:	d04d      	beq.n	8000e1e <HAL_GPIO_Init+0x1a2>
 8000d82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d86:	42a0      	cmp	r0, r4
 8000d88:	d04b      	beq.n	8000e22 <HAL_GPIO_Init+0x1a6>
 8000d8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d8e:	42a0      	cmp	r0, r4
 8000d90:	d049      	beq.n	8000e26 <HAL_GPIO_Init+0x1aa>
 8000d92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d96:	42a0      	cmp	r0, r4
 8000d98:	d047      	beq.n	8000e2a <HAL_GPIO_Init+0x1ae>
 8000d9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d9e:	42a0      	cmp	r0, r4
 8000da0:	d045      	beq.n	8000e2e <HAL_GPIO_Init+0x1b2>
 8000da2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000da6:	42a0      	cmp	r0, r4
 8000da8:	d043      	beq.n	8000e32 <HAL_GPIO_Init+0x1b6>
 8000daa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dae:	42a0      	cmp	r0, r4
 8000db0:	d041      	beq.n	8000e36 <HAL_GPIO_Init+0x1ba>
 8000db2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000db6:	42a0      	cmp	r0, r4
 8000db8:	d03f      	beq.n	8000e3a <HAL_GPIO_Init+0x1be>
 8000dba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dbe:	42a0      	cmp	r0, r4
 8000dc0:	d03d      	beq.n	8000e3e <HAL_GPIO_Init+0x1c2>
 8000dc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dc6:	42a0      	cmp	r0, r4
 8000dc8:	bf14      	ite	ne
 8000dca:	240a      	movne	r4, #10
 8000dcc:	2409      	moveq	r4, #9
 8000dce:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd0:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dd2:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd6:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000dd8:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8000ddc:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8000de0:	bf54      	ite	pl
 8000de2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000de4:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de6:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000de8:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000dec:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000df0:	bf54      	ite	pl
 8000df2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000df4:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df6:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000df8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000dfc:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000e00:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000e04:	bf54      	ite	pl
 8000e06:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e08:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0a:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000e0c:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000e0e:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000e10:	bf54      	ite	pl
 8000e12:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e14:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000e16:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	e73a      	b.n	8000c94 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e1e:	2400      	movs	r4, #0
 8000e20:	e7d5      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e22:	2401      	movs	r4, #1
 8000e24:	e7d3      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e26:	2402      	movs	r4, #2
 8000e28:	e7d1      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e2a:	2403      	movs	r4, #3
 8000e2c:	e7cf      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e2e:	2404      	movs	r4, #4
 8000e30:	e7cd      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e32:	2405      	movs	r4, #5
 8000e34:	e7cb      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e36:	2406      	movs	r4, #6
 8000e38:	e7c9      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e3a:	2407      	movs	r4, #7
 8000e3c:	e7c7      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e3e:	2408      	movs	r4, #8
 8000e40:	e7c5      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000e42:	bf00      	nop
 8000e44:	58020000 	.word	0x58020000
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58000080 	.word	0x58000080

08000e50 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e50:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e52:	f8d1 c000 	ldr.w	ip, [r1]
{
 8000e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e5a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e5c:	6804      	ldr	r4, [r0, #0]
 8000e5e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e60:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e64:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e66:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000e68:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8000e6c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e70:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e72:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e76:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e7a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e7c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e7e:	68e0      	ldr	r0, [r4, #12]
 8000e80:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8000e84:	4430      	add	r0, r6
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000e8a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e8c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000e8e:	68e0      	ldr	r0, [r4, #12]
 8000e90:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000e94:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000e96:	6898      	ldr	r0, [r3, #8]
 8000e98:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8000e9c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000e9e:	6888      	ldr	r0, [r1, #8]
 8000ea0:	68e6      	ldr	r6, [r4, #12]
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8000ea8:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000eaa:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000eac:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eb0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000eb2:	6918      	ldr	r0, [r3, #16]
 8000eb4:	f020 0007 	bic.w	r0, r0, #7
 8000eb8:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000eba:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000ebc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8000ebe:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000ec2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000ec6:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000eca:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000ece:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000ed2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000ed6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000eda:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000edc:	6958      	ldr	r0, [r3, #20]
 8000ede:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000ee2:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000ee4:	6948      	ldr	r0, [r1, #20]
 8000ee6:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000ee8:	69d8      	ldr	r0, [r3, #28]
 8000eea:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000eee:	f020 0007 	bic.w	r0, r0, #7
 8000ef2:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000ef4:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8000ef8:	4305      	orrs	r5, r0
 8000efa:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000efc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000efe:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000f00:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000f04:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000f06:	b31e      	cbz	r6, 8000f50 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000f08:	2e01      	cmp	r6, #1
 8000f0a:	d023      	beq.n	8000f54 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000f0c:	1eb0      	subs	r0, r6, #2
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d922      	bls.n	8000f58 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000f12:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000f14:	bf0c      	ite	eq
 8000f16:	2002      	moveq	r0, #2
 8000f18:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000f1a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000f1c:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000f20:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8000f24:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000f26:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000f28:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000f2a:	4345      	muls	r5, r0
 8000f2c:	4378      	muls	r0, r7
 8000f2e:	3007      	adds	r0, #7
 8000f30:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f34:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000f36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f38:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000f3c:	f020 0007 	bic.w	r0, r0, #7
 8000f40:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000f42:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000f44:	58a3      	ldr	r3, [r4, r2]
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	50a3      	str	r3, [r4, r2]
}
 8000f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000f50:	2004      	movs	r0, #4
 8000f52:	e7e2      	b.n	8000f1a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000f54:	2003      	movs	r0, #3
 8000f56:	e7e0      	b.n	8000f1a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000f58:	2002      	movs	r0, #2
 8000f5a:	e7de      	b.n	8000f1a <LTDC_SetConfig+0xca>

08000f5c <HAL_LTDC_Init>:
{
 8000f5c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8000f5e:	4604      	mov	r4, r0
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d063      	beq.n	800102c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000f64:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000f68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f6c:	b91b      	cbnz	r3, 8000f76 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000f6e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000f72:	f001 fe9f 	bl	8002cb4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	699a      	ldr	r2, [r3, #24]
 8000f80:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000f84:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f86:	6999      	ldr	r1, [r3, #24]
 8000f88:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000f92:	6920      	ldr	r0, [r4, #16]
 8000f94:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000f96:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f98:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000f9a:	4925      	ldr	r1, [pc, #148]	; (8001030 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f9c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000faa:	69a0      	ldr	r0, [r4, #24]
 8000fac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000fae:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000fb0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	400a      	ands	r2, r1
 8000fb6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fbe:	6a20      	ldr	r0, [r4, #32]
 8000fc0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000fc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000fc4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	400a      	ands	r2, r1
 8000fca:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	4011      	ands	r1, r2
 8000fdc:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000fde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000fee:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000ff2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000ff6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000ffa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ffe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001002:	430a      	orrs	r2, r1
 8001004:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001008:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800100c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001012:	f042 0206 	orr.w	r2, r2, #6
 8001016:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001020:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001022:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001026:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800102a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
 800102e:	e7fc      	b.n	800102a <HAL_LTDC_Init+0xce>
 8001030:	f000f800 	.word	0xf000f800

08001034 <HAL_LTDC_DeInit>:
{
 8001034:	b510      	push	{r4, lr}
 8001036:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 8001038:	f001 feb0 	bl	8002d9c <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800103c:	2000      	movs	r0, #0
 800103e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 8001042:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 8001046:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 800104a:	bd10      	pop	{r4, pc}

0800104c <HAL_LTDC_ErrorCallback>:
 800104c:	4770      	bx	lr

0800104e <HAL_LTDC_ReloadEventCallback>:
 800104e:	4770      	bx	lr

08001050 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001050:	6803      	ldr	r3, [r0, #0]
{
 8001052:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001054:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8001056:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001058:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800105a:	0772      	lsls	r2, r6, #29
 800105c:	d514      	bpl.n	8001088 <HAL_LTDC_IRQHandler+0x38>
 800105e:	0769      	lsls	r1, r5, #29
 8001060:	d512      	bpl.n	8001088 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001064:	f022 0204 	bic.w	r2, r2, #4
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800106a:	2204      	movs	r2, #4
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800106e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800107a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800107c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001080:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001084:	f7ff ffe2 	bl	800104c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001088:	07b2      	lsls	r2, r6, #30
 800108a:	d516      	bpl.n	80010ba <HAL_LTDC_IRQHandler+0x6a>
 800108c:	07ab      	lsls	r3, r5, #30
 800108e:	d514      	bpl.n	80010ba <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001090:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8001092:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001096:	f022 0202 	bic.w	r2, r2, #2
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800109c:	2202      	movs	r2, #2
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80010a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80010a4:	4313      	orrs	r3, r2
 80010a6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80010b0:	2300      	movs	r3, #0
 80010b2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80010b6:	f7ff ffc9 	bl	800104c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80010ba:	07f0      	lsls	r0, r6, #31
 80010bc:	d510      	bpl.n	80010e0 <HAL_LTDC_IRQHandler+0x90>
 80010be:	07e9      	lsls	r1, r5, #31
 80010c0:	d50e      	bpl.n	80010e0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80010c2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80010c4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80010c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80010ce:	2201      	movs	r2, #1
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80010d2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80010d4:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80010d8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80010dc:	f001 fe6e 	bl	8002dbc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80010e0:	0732      	lsls	r2, r6, #28
 80010e2:	d511      	bpl.n	8001108 <HAL_LTDC_IRQHandler+0xb8>
 80010e4:	072b      	lsls	r3, r5, #28
 80010e6:	d50f      	bpl.n	8001108 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80010e8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80010ea:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80010ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ee:	f022 0208 	bic.w	r2, r2, #8
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80010f4:	2208      	movs	r2, #8
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80010fe:	2300      	movs	r3, #0
 8001100:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001104:	f7ff ffa3 	bl	800104e <HAL_LTDC_ReloadEventCallback>
}
 8001108:	bd70      	pop	{r4, r5, r6, pc}

0800110a <HAL_LTDC_ConfigLayer>:
{
 800110a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800110c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8001110:	4606      	mov	r6, r0
 8001112:	468c      	mov	ip, r1
 8001114:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 8001116:	2b01      	cmp	r3, #1
 8001118:	f04f 0002 	mov.w	r0, #2
 800111c:	d01d      	beq.n	800115a <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800111e:	2434      	movs	r4, #52	; 0x34
 8001120:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001122:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8001126:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001128:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800112c:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001130:	3438      	adds	r4, #56	; 0x38
 8001132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001140:	4630      	mov	r0, r6
 8001142:	4672      	mov	r2, lr
 8001144:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001146:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001148:	f7ff fe82 	bl	8000e50 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800114c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800114e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001150:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001152:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001156:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800115c <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 800115c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001160:	2b01      	cmp	r3, #1
 8001162:	f04f 0302 	mov.w	r3, #2
{
 8001166:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8001168:	d013      	beq.n	8001192 <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800116a:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800116c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8001170:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8001174:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001178:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001180:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8001182:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001186:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001188:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800118c:	2300      	movs	r3, #0
 800118e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001192:	4618      	mov	r0, r3
}
 8001194:	bd10      	pop	{r4, pc}

08001196 <HAL_LTDC_ConfigCLUT>:
{
 8001196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800119a:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
{
 800119e:	4690      	mov	r8, r2
  __HAL_LOCK(hltdc);
 80011a0:	2c01      	cmp	r4, #1
 80011a2:	f04f 0402 	mov.w	r4, #2
 80011a6:	d033      	beq.n	8001210 <HAL_LTDC_ConfigCLUT+0x7a>
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80011a8:	01df      	lsls	r7, r3, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80011aa:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80011ae:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80011b0:	2501      	movs	r5, #1
 80011b2:	3784      	adds	r7, #132	; 0x84
  for (counter = 0U; (counter < CLUTSize); counter++)
 80011b4:	2600      	movs	r6, #0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80011b6:	fb04 0303 	mla	r3, r4, r3, r0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011ba:	f04f 5c88 	mov.w	ip, #285212672	; 0x11000000
  __HAL_LOCK(hltdc);
 80011be:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  for (counter = 0U; (counter < CLUTSize); counter++)
 80011c2:	4546      	cmp	r6, r8
 80011c4:	d108      	bne.n	80011d8 <HAL_LTDC_ConfigCLUT+0x42>
  hltdc->State = HAL_LTDC_STATE_READY;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80011cc:	2300      	movs	r3, #0
 80011ce:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80011d2:	4618      	mov	r0, r3
}
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80011d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011da:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 80011de:	2a06      	cmp	r2, #6
 80011e0:	f404 057f 	and.w	r5, r4, #16711680	; 0xff0000
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011e4:	bf0e      	itee	eq
 80011e6:	fb0c fe06 	muleq.w	lr, ip, r6
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011ea:	b2a4      	uxthne	r4, r4
 80011ec:	ea45 6506 	orrne.w	r5, r5, r6, lsl #24
  for (counter = 0U; (counter < CLUTSize); counter++)
 80011f0:	f106 0601 	add.w	r6, r6, #1
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011f4:	bf01      	itttt	eq
 80011f6:	ea4e 0505 	orreq.w	r5, lr, r5
 80011fa:	fa5f fe84 	uxtbeq.w	lr, r4
 80011fe:	f404 447f 	andeq.w	r4, r4, #65280	; 0xff00
 8001202:	ea45 050e 	orreq.w	r5, r5, lr
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8001206:	432c      	orrs	r4, r5
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001208:	6805      	ldr	r5, [r0, #0]
 800120a:	443d      	add	r5, r7
 800120c:	642c      	str	r4, [r5, #64]	; 0x40
 800120e:	e7d8      	b.n	80011c2 <HAL_LTDC_ConfigCLUT+0x2c>
  __HAL_LOCK(hltdc);
 8001210:	4620      	mov	r0, r4
 8001212:	e7df      	b.n	80011d4 <HAL_LTDC_ConfigCLUT+0x3e>

08001214 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8001214:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001218:	2b01      	cmp	r3, #1
 800121a:	f04f 0302 	mov.w	r3, #2
 800121e:	d00f      	beq.n	8001240 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8001220:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001222:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8001226:	6803      	ldr	r3, [r0, #0]
 8001228:	3184      	adds	r1, #132	; 0x84
 800122a:	585a      	ldr	r2, [r3, r1]
 800122c:	f042 0202 	orr.w	r2, r2, #2
 8001230:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001232:	2201      	movs	r2, #1
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8001236:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001238:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800123c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001240:	4618      	mov	r0, r3
}
 8001242:	4770      	bx	lr

08001244 <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 8001244:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001248:	2b01      	cmp	r3, #1
 800124a:	f04f 0302 	mov.w	r3, #2
 800124e:	d00f      	beq.n	8001270 <HAL_LTDC_DisableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001250:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001252:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001256:	6803      	ldr	r3, [r0, #0]
 8001258:	3184      	adds	r1, #132	; 0x84
 800125a:	585a      	ldr	r2, [r3, r1]
 800125c:	f022 0202 	bic.w	r2, r2, #2
 8001260:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001262:	2201      	movs	r2, #1
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8001266:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001268:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800126c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001270:	4618      	mov	r0, r3
}
 8001272:	4770      	bx	lr

08001274 <HAL_LTDC_EnableCLUT>:
  __HAL_LOCK(hltdc);
 8001274:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001278:	2b01      	cmp	r3, #1
 800127a:	f04f 0302 	mov.w	r3, #2
 800127e:	d00f      	beq.n	80012a0 <HAL_LTDC_EnableCLUT+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8001280:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001282:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8001286:	6803      	ldr	r3, [r0, #0]
 8001288:	3184      	adds	r1, #132	; 0x84
 800128a:	585a      	ldr	r2, [r3, r1]
 800128c:	f042 0210 	orr.w	r2, r2, #16
 8001290:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001292:	2201      	movs	r2, #1
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8001296:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001298:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800129c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80012a0:	4618      	mov	r0, r3
}
 80012a2:	4770      	bx	lr

080012a4 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 80012a4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f04f 0302 	mov.w	r3, #2
 80012ae:	d00c      	beq.n	80012ca <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80012b2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80012b6:	6993      	ldr	r3, [r2, #24]
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80012be:	2301      	movs	r3, #1
 80012c0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80012c4:	2300      	movs	r3, #0
 80012c6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80012ca:	4618      	mov	r0, r3
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	50001000 	.word	0x50001000

080012d4 <HAL_LTDC_SetWindowPosition>:
{
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80012d6:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
{
 80012da:	4605      	mov	r5, r0
 80012dc:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
 80012de:	2c01      	cmp	r4, #1
 80012e0:	f04f 0402 	mov.w	r4, #2
 80012e4:	d01d      	beq.n	8001322 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80012e6:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 80012ea:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80012ec:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
 80012ee:	435c      	muls	r4, r3
  __HAL_LOCK(hltdc);
 80012f0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 80012f4:	1906      	adds	r6, r0, r4
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80012f6:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 80012f8:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80012fa:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 80012fc:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001300:	6e71      	ldr	r1, [r6, #100]	; 0x64
 8001302:	4411      	add	r1, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001304:	4662      	mov	r2, ip
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001306:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001308:	f104 0138 	add.w	r1, r4, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800130c:	4401      	add	r1, r0
 800130e:	f7ff fd9f 	bl	8000e50 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001312:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(hltdc);
 8001314:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001316:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001318:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800131c:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
}
 8001320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8001322:	4620      	mov	r0, r4
 8001324:	e7fc      	b.n	8001320 <HAL_LTDC_SetWindowPosition+0x4c>

08001326 <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 8001326:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800132a:	2b01      	cmp	r3, #1
 800132c:	f04f 0302 	mov.w	r3, #2
{
 8001330:	b570      	push	{r4, r5, r6, lr}
 8001332:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001334:	d015      	beq.n	8001362 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001336:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 800133a:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 800133c:	2501      	movs	r5, #1
  pLayerCfg->Alpha = Alpha;
 800133e:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8001340:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 8001344:	18c6      	adds	r6, r0, r3
 8001346:	64f1      	str	r1, [r6, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001348:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800134c:	4401      	add	r1, r0
 800134e:	f7ff fd7f 	bl	8000e50 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001352:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8001354:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001356:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001358:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800135c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8001360:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8001362:	4618      	mov	r0, r3
 8001364:	e7fc      	b.n	8001360 <HAL_LTDC_SetAlpha+0x3a>

08001366 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8001366:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800136a:	2b01      	cmp	r3, #1
 800136c:	f04f 0302 	mov.w	r3, #2
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001374:	d015      	beq.n	80013a2 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001376:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 800137a:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 800137c:	2501      	movs	r5, #1
  pLayerCfg->FBStartAdress = Address;
 800137e:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8001380:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8001384:	18c6      	adds	r6, r0, r3
 8001386:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001388:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800138c:	4401      	add	r1, r0
 800138e:	f7ff fd5f 	bl	8000e50 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001392:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8001394:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001396:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001398:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800139c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80013a2:	4618      	mov	r0, r3
 80013a4:	e7fc      	b.n	80013a0 <HAL_LTDC_SetAddress+0x3a>
	...

080013a8 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80013a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f04f 0302 	mov.w	r3, #2
 80013b2:	d012      	beq.n	80013da <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80013b4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_LTDC_ProgramLineEvent+0x38>)
 80013c4:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80013c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80013d4:	2300      	movs	r3, #0
 80013d6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80013da:	4618      	mov	r0, r3
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	50001000 	.word	0x50001000

080013e4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff fb44 	bl	8000a74 <HAL_GetTick>
 80013ec:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d061      	beq.n	80014b6 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80013f2:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80013f4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80013f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8001400:	68d3      	ldr	r3, [r2, #12]
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	07d2      	lsls	r2, r2, #31
 800140e:	d448      	bmi.n	80014a2 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8001410:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8001414:	430a      	orrs	r2, r1
 8001416:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8001418:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800141c:	430a      	orrs	r2, r1
 800141e:	69e1      	ldr	r1, [r4, #28]
 8001420:	430a      	orrs	r2, r1
 8001422:	6a21      	ldr	r1, [r4, #32]
 8001424:	430a      	orrs	r2, r1
 8001426:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001428:	430a      	orrs	r2, r1
 800142a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800142c:	430a      	orrs	r2, r1
 800142e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001430:	430a      	orrs	r2, r1
 8001432:	68a1      	ldr	r1, [r4, #8]
 8001434:	430a      	orrs	r2, r1
 8001436:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001438:	3901      	subs	r1, #1
 800143a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800143e:	6861      	ldr	r1, [r4, #4]
 8001440:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8001444:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8001446:	d103      	bne.n	8001450 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800144e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8001454:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001456:	2a00      	cmp	r2, #0
 8001458:	da04      	bge.n	8001464 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800145a:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800145c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800145e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8001462:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8001464:	b292      	uxth	r2, r2
 8001466:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8001468:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800146a:	2a00      	cmp	r2, #0
 800146c:	da25      	bge.n	80014ba <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800146e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8001470:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8001472:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8001476:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001478:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800147a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800147e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001482:	621a      	str	r2, [r3, #32]
 8001484:	f04f 0200 	mov.w	r2, #0
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8001488:	d019      	beq.n	80014be <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800148a:	b2c9      	uxtb	r1, r1
 800148c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8001490:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8001492:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001494:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8001496:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8001498:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800149c:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80014a2:	f7ff fae7 	bl	8000a74 <HAL_GetTick>
 80014a6:	1b40      	subs	r0, r0, r5
 80014a8:	2805      	cmp	r0, #5
 80014aa:	d9ad      	bls.n	8001408 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80014ac:	2340      	movs	r3, #64	; 0x40
 80014ae:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	e7f2      	b.n	80014a0 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80014ba:	6a18      	ldr	r0, [r3, #32]
 80014bc:	e7dd      	b.n	800147a <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
 80014c0:	e7e5      	b.n	800148e <HAL_MDMA_Init+0xaa>

080014c2 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80014c2:	b1d8      	cbz	r0, 80014fc <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 80014c4:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80014c6:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 80014c8:	68d3      	ldr	r3, [r2, #12]
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80014d4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80014d6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80014d8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80014da:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80014dc:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80014de:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80014e0:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80014e4:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80014e6:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80014e8:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80014ea:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 80014ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80014f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80014f4:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 80014f8:	4618      	mov	r0, r3
 80014fa:	4770      	bx	lr
    return HAL_ERROR;
 80014fc:	2001      	movs	r0, #1
}
 80014fe:	4770      	bx	lr

08001500 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001500:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001502:	4c10      	ldr	r4, [pc, #64]	; (8001544 <HAL_PWREx_ConfigSupply+0x44>)
 8001504:	68e3      	ldr	r3, [r4, #12]
 8001506:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800150a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800150c:	d105      	bne.n	800151a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800150e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001512:	1a18      	subs	r0, r3, r0
 8001514:	bf18      	it	ne
 8001516:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001518:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800151a:	f023 0307 	bic.w	r3, r3, #7
 800151e:	4318      	orrs	r0, r3
 8001520:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8001522:	f7ff faa7 	bl	8000a74 <HAL_GetTick>
 8001526:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001528:	6863      	ldr	r3, [r4, #4]
 800152a:	049b      	lsls	r3, r3, #18
 800152c:	d501      	bpl.n	8001532 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 800152e:	2000      	movs	r0, #0
 8001530:	e7f2      	b.n	8001518 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001532:	f7ff fa9f 	bl	8000a74 <HAL_GetTick>
 8001536:	1b40      	subs	r0, r0, r5
 8001538:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800153c:	d9f4      	bls.n	8001528 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800153e:	2001      	movs	r0, #1
 8001540:	e7ea      	b.n	8001518 <HAL_PWREx_ConfigSupply+0x18>
 8001542:	bf00      	nop
 8001544:	58024800 	.word	0x58024800

08001548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154a:	4604      	mov	r4, r0
 800154c:	b908      	cbnz	r0, 8001552 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
 8001550:	e08e      	b.n	8001670 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	6803      	ldr	r3, [r0, #0]
 8001554:	07dd      	lsls	r5, r3, #31
 8001556:	d45e      	bmi.n	8001616 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	0798      	lsls	r0, r3, #30
 800155c:	f100 80b0 	bmi.w	80016c0 <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	06da      	lsls	r2, r3, #27
 8001564:	d527      	bpl.n	80015b6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001566:	4baa      	ldr	r3, [pc, #680]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 8001568:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800156a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001570:	2a08      	cmp	r2, #8
 8001572:	d007      	beq.n	8001584 <HAL_RCC_OscConfig+0x3c>
 8001574:	2a18      	cmp	r2, #24
 8001576:	f040 810e 	bne.w	8001796 <HAL_RCC_OscConfig+0x24e>
 800157a:	f001 0203 	and.w	r2, r1, #3
 800157e:	2a01      	cmp	r2, #1
 8001580:	f040 8109 	bne.w	8001796 <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	05db      	lsls	r3, r3, #23
 8001588:	d502      	bpl.n	8001590 <HAL_RCC_OscConfig+0x48>
 800158a:	69e3      	ldr	r3, [r4, #28]
 800158c:	2b80      	cmp	r3, #128	; 0x80
 800158e:	d1de      	bne.n	800154e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001590:	f7ff fa76 	bl	8000a80 <HAL_GetREVID>
 8001594:	f241 0303 	movw	r3, #4099	; 0x1003
 8001598:	6a21      	ldr	r1, [r4, #32]
 800159a:	4298      	cmp	r0, r3
 800159c:	4b9c      	ldr	r3, [pc, #624]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 800159e:	f200 80f3 	bhi.w	8001788 <HAL_RCC_OscConfig+0x240>
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	2920      	cmp	r1, #32
 80015a6:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80015aa:	bf0c      	ite	eq
 80015ac:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80015b0:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80015b4:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	0719      	lsls	r1, r3, #28
 80015ba:	f100 812d 	bmi.w	8001818 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	069a      	lsls	r2, r3, #26
 80015c2:	f100 814e 	bmi.w	8001862 <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	075d      	lsls	r5, r3, #29
 80015ca:	d51e      	bpl.n	800160a <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 80015cc:	4d91      	ldr	r5, [pc, #580]	; (8001814 <HAL_RCC_OscConfig+0x2cc>)
 80015ce:	682b      	ldr	r3, [r5, #0]
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80015d6:	f7ff fa4d 	bl	8000a74 <HAL_GetTick>
 80015da:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	05da      	lsls	r2, r3, #23
 80015e0:	f140 8164 	bpl.w	80018ac <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	68a3      	ldr	r3, [r4, #8]
 80015e6:	4d8a      	ldr	r5, [pc, #552]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	f040 8166 	bne.w	80018ba <HAL_RCC_OscConfig+0x372>
 80015ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015fa:	f7ff fa3b 	bl	8000a74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015fe:	4e84      	ldr	r6, [pc, #528]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001600:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001602:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001604:	079b      	lsls	r3, r3, #30
 8001606:	f140 817e 	bpl.w	8001906 <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800160c:	2800      	cmp	r0, #0
 800160e:	f040 8181 	bne.w	8001914 <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 8001612:	2000      	movs	r0, #0
 8001614:	e02c      	b.n	8001670 <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001616:	4b7e      	ldr	r3, [pc, #504]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 8001618:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800161a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001620:	2a10      	cmp	r2, #16
 8001622:	d005      	beq.n	8001630 <HAL_RCC_OscConfig+0xe8>
 8001624:	2a18      	cmp	r2, #24
 8001626:	d10a      	bne.n	800163e <HAL_RCC_OscConfig+0xf6>
 8001628:	f001 0203 	and.w	r2, r1, #3
 800162c:	2a02      	cmp	r2, #2
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0399      	lsls	r1, r3, #14
 8001634:	d590      	bpl.n	8001558 <HAL_RCC_OscConfig+0x10>
 8001636:	6863      	ldr	r3, [r4, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d18d      	bne.n	8001558 <HAL_RCC_OscConfig+0x10>
 800163c:	e787      	b.n	800154e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	4d73      	ldr	r5, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 8001642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001646:	d114      	bne.n	8001672 <HAL_RCC_OscConfig+0x12a>
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164e:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001654:	f7ff fa0e 	bl	8000a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001658:	4e6d      	ldr	r6, [pc, #436]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800165a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800165c:	6833      	ldr	r3, [r6, #0]
 800165e:	039a      	lsls	r2, r3, #14
 8001660:	f53f af7a 	bmi.w	8001558 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fa06 	bl	8000a74 <HAL_GetTick>
 8001668:	1bc0      	subs	r0, r0, r7
 800166a:	42a8      	cmp	r0, r5
 800166c:	d9f6      	bls.n	800165c <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
}
 8001670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001672:	b9b3      	cbnz	r3, 80016a2 <HAL_RCC_OscConfig+0x15a>
 8001674:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001676:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	602b      	str	r3, [r5, #0]
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001688:	f7ff f9f4 	bl	8000a74 <HAL_GetTick>
 800168c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	039b      	lsls	r3, r3, #14
 8001692:	f57f af61 	bpl.w	8001558 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff f9ed 	bl	8000a74 <HAL_GetTick>
 800169a:	1b80      	subs	r0, r0, r6
 800169c:	42b8      	cmp	r0, r7
 800169e:	d9f6      	bls.n	800168e <HAL_RCC_OscConfig+0x146>
 80016a0:	e7e5      	b.n	800166e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	d103      	bne.n	80016b2 <HAL_RCC_OscConfig+0x16a>
 80016aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ae:	602b      	str	r3, [r5, #0]
 80016b0:	e7ca      	b.n	8001648 <HAL_RCC_OscConfig+0x100>
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	602b      	str	r3, [r5, #0]
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	e7c6      	b.n	800164e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 80016c2:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016c6:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80016ca:	d003      	beq.n	80016d4 <HAL_RCC_OscConfig+0x18c>
 80016cc:	2a18      	cmp	r2, #24
 80016ce:	d120      	bne.n	8001712 <HAL_RCC_OscConfig+0x1ca>
 80016d0:	078e      	lsls	r6, r1, #30
 80016d2:	d11e      	bne.n	8001712 <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	075d      	lsls	r5, r3, #29
 80016d8:	d503      	bpl.n	80016e2 <HAL_RCC_OscConfig+0x19a>
 80016da:	68e3      	ldr	r3, [r4, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f43f af36 	beq.w	800154e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	f7ff f9cd 	bl	8000a80 <HAL_GetREVID>
 80016e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80016ea:	6921      	ldr	r1, [r4, #16]
 80016ec:	4298      	cmp	r0, r3
 80016ee:	4b48      	ldr	r3, [pc, #288]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	d809      	bhi.n	8001708 <HAL_RCC_OscConfig+0x1c0>
 80016f4:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80016f8:	2940      	cmp	r1, #64	; 0x40
 80016fa:	bf0c      	ite	eq
 80016fc:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8001700:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	e72b      	b.n	8001560 <HAL_RCC_OscConfig+0x18>
 8001708:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800170c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001710:	e7f8      	b.n	8001704 <HAL_RCC_OscConfig+0x1bc>
 8001712:	4d3f      	ldr	r5, [pc, #252]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001714:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001716:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	b332      	cbz	r2, 8001768 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800171a:	f023 0319 	bic.w	r3, r3, #25
 800171e:	4313      	orrs	r3, r2
 8001720:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001722:	f7ff f9a7 	bl	8000a74 <HAL_GetTick>
 8001726:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	0758      	lsls	r0, r3, #29
 800172c:	d511      	bpl.n	8001752 <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	f7ff f9a7 	bl	8000a80 <HAL_GetREVID>
 8001732:	f241 0303 	movw	r3, #4099	; 0x1003
 8001736:	6922      	ldr	r2, [r4, #16]
 8001738:	4298      	cmp	r0, r3
 800173a:	686b      	ldr	r3, [r5, #4]
 800173c:	d80f      	bhi.n	800175e <HAL_RCC_OscConfig+0x216>
 800173e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001742:	2a40      	cmp	r2, #64	; 0x40
 8001744:	bf0c      	ite	eq
 8001746:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800174a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800174e:	606b      	str	r3, [r5, #4]
 8001750:	e706      	b.n	8001560 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff f98f 	bl	8000a74 <HAL_GetTick>
 8001756:	1b80      	subs	r0, r0, r6
 8001758:	2802      	cmp	r0, #2
 800175a:	d9e5      	bls.n	8001728 <HAL_RCC_OscConfig+0x1e0>
 800175c:	e787      	b.n	800166e <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001762:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001766:	e7f2      	b.n	800174e <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800176e:	f7ff f981 	bl	8000a74 <HAL_GetTick>
 8001772:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	0759      	lsls	r1, r3, #29
 8001778:	f57f aef2 	bpl.w	8001560 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff f97a 	bl	8000a74 <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	2802      	cmp	r0, #2
 8001784:	d9f6      	bls.n	8001774 <HAL_RCC_OscConfig+0x22c>
 8001786:	e772      	b.n	800166e <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800178e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	e70f      	b.n	80015b6 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001796:	69e3      	ldr	r3, [r4, #28]
 8001798:	4d1d      	ldr	r5, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x2c8>)
 800179a:	b343      	cbz	r3, 80017ee <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017a4:	f7ff f966 	bl	8000a74 <HAL_GetTick>
 80017a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	05df      	lsls	r7, r3, #23
 80017ae:	d511      	bpl.n	80017d4 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017b0:	f7ff f966 	bl	8000a80 <HAL_GetREVID>
 80017b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80017b8:	6a22      	ldr	r2, [r4, #32]
 80017ba:	4298      	cmp	r0, r3
 80017bc:	d810      	bhi.n	80017e0 <HAL_RCC_OscConfig+0x298>
 80017be:	686b      	ldr	r3, [r5, #4]
 80017c0:	2a20      	cmp	r2, #32
 80017c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017c6:	bf0c      	ite	eq
 80017c8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80017cc:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80017d0:	606b      	str	r3, [r5, #4]
 80017d2:	e6f0      	b.n	80015b6 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017d4:	f7ff f94e 	bl	8000a74 <HAL_GetTick>
 80017d8:	1b80      	subs	r0, r0, r6
 80017da:	2802      	cmp	r0, #2
 80017dc:	d9e5      	bls.n	80017aa <HAL_RCC_OscConfig+0x262>
 80017de:	e746      	b.n	800166e <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017e0:	68eb      	ldr	r3, [r5, #12]
 80017e2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80017e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ea:	60eb      	str	r3, [r5, #12]
 80017ec:	e6e3      	b.n	80015b6 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017f6:	f7ff f93d 	bl	8000a74 <HAL_GetTick>
 80017fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	05d8      	lsls	r0, r3, #23
 8001800:	f57f aed9 	bpl.w	80015b6 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001804:	f7ff f936 	bl	8000a74 <HAL_GetTick>
 8001808:	1b80      	subs	r0, r0, r6
 800180a:	2802      	cmp	r0, #2
 800180c:	d9f6      	bls.n	80017fc <HAL_RCC_OscConfig+0x2b4>
 800180e:	e72e      	b.n	800166e <HAL_RCC_OscConfig+0x126>
 8001810:	58024400 	.word	0x58024400
 8001814:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001818:	6963      	ldr	r3, [r4, #20]
 800181a:	4d96      	ldr	r5, [pc, #600]	; (8001a74 <HAL_RCC_OscConfig+0x52c>)
 800181c:	b183      	cbz	r3, 8001840 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 800181e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001826:	f7ff f925 	bl	8000a74 <HAL_GetTick>
 800182a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800182c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800182e:	079b      	lsls	r3, r3, #30
 8001830:	f53f aec5 	bmi.w	80015be <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff f91e 	bl	8000a74 <HAL_GetTick>
 8001838:	1b80      	subs	r0, r0, r6
 800183a:	2802      	cmp	r0, #2
 800183c:	d9f6      	bls.n	800182c <HAL_RCC_OscConfig+0x2e4>
 800183e:	e716      	b.n	800166e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8001840:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001848:	f7ff f914 	bl	8000a74 <HAL_GetTick>
 800184c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800184e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001850:	079f      	lsls	r7, r3, #30
 8001852:	f57f aeb4 	bpl.w	80015be <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff f90d 	bl	8000a74 <HAL_GetTick>
 800185a:	1b80      	subs	r0, r0, r6
 800185c:	2802      	cmp	r0, #2
 800185e:	d9f6      	bls.n	800184e <HAL_RCC_OscConfig+0x306>
 8001860:	e705      	b.n	800166e <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001862:	69a3      	ldr	r3, [r4, #24]
 8001864:	4d83      	ldr	r5, [pc, #524]	; (8001a74 <HAL_RCC_OscConfig+0x52c>)
 8001866:	b183      	cbz	r3, 800188a <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800186e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001870:	f7ff f900 	bl	8000a74 <HAL_GetTick>
 8001874:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	0498      	lsls	r0, r3, #18
 800187a:	f53f aea4 	bmi.w	80015c6 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800187e:	f7ff f8f9 	bl	8000a74 <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	2802      	cmp	r0, #2
 8001886:	d9f6      	bls.n	8001876 <HAL_RCC_OscConfig+0x32e>
 8001888:	e6f1      	b.n	800166e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001890:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001892:	f7ff f8ef 	bl	8000a74 <HAL_GetTick>
 8001896:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	0499      	lsls	r1, r3, #18
 800189c:	f57f ae93 	bpl.w	80015c6 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018a0:	f7ff f8e8 	bl	8000a74 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d9f6      	bls.n	8001898 <HAL_RCC_OscConfig+0x350>
 80018aa:	e6e0      	b.n	800166e <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018ac:	f7ff f8e2 	bl	8000a74 <HAL_GetTick>
 80018b0:	1b80      	subs	r0, r0, r6
 80018b2:	2864      	cmp	r0, #100	; 0x64
 80018b4:	f67f ae92 	bls.w	80015dc <HAL_RCC_OscConfig+0x94>
 80018b8:	e6d9      	b.n	800166e <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ba:	b9b3      	cbnz	r3, 80018ea <HAL_RCC_OscConfig+0x3a2>
 80018bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	672b      	str	r3, [r5, #112]	; 0x70
 80018c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018d0:	f7ff f8d0 	bl	8000a74 <HAL_GetTick>
 80018d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d8:	0798      	lsls	r0, r3, #30
 80018da:	f57f ae96 	bpl.w	800160a <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f8c9 	bl	8000a74 <HAL_GetTick>
 80018e2:	1b80      	subs	r0, r0, r6
 80018e4:	42b8      	cmp	r0, r7
 80018e6:	d9f6      	bls.n	80018d6 <HAL_RCC_OscConfig+0x38e>
 80018e8:	e6c1      	b.n	800166e <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ee:	d103      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3b0>
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	672b      	str	r3, [r5, #112]	; 0x70
 80018f6:	e67a      	b.n	80015ee <HAL_RCC_OscConfig+0xa6>
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	672b      	str	r3, [r5, #112]	; 0x70
 80018fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	e676      	b.n	80015f4 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff f8b5 	bl	8000a74 <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	42a8      	cmp	r0, r5
 800190e:	f67f ae78 	bls.w	8001602 <HAL_RCC_OscConfig+0xba>
 8001912:	e6ac      	b.n	800166e <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001914:	4d57      	ldr	r5, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x52c>)
 8001916:	692b      	ldr	r3, [r5, #16]
 8001918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191c:	2b18      	cmp	r3, #24
 800191e:	d07a      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8001920:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001928:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	d167      	bne.n	80019fc <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 800192c:	f7ff f8a2 	bl	8000a74 <HAL_GetTick>
 8001930:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	0199      	lsls	r1, r3, #6
 8001936:	d45b      	bmi.n	80019f0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001938:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800193a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800193c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001940:	f023 0303 	bic.w	r3, r3, #3
 8001944:	4313      	orrs	r3, r2
 8001946:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001948:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800194c:	62ab      	str	r3, [r5, #40]	; 0x28
 800194e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001950:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001952:	3b01      	subs	r3, #1
 8001954:	3a01      	subs	r2, #1
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	b29b      	uxth	r3, r3
 800195c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001960:	4313      	orrs	r3, r2
 8001962:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001964:	3a01      	subs	r2, #1
 8001966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800196a:	4313      	orrs	r3, r2
 800196c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800196e:	3a01      	subs	r2, #1
 8001970:	0612      	lsls	r2, r2, #24
 8001972:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001976:	4313      	orrs	r3, r2
 8001978:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800197a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001982:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001984:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800198a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800198e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001992:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001994:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001996:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001998:	f023 030c 	bic.w	r3, r3, #12
 800199c:	4313      	orrs	r3, r2
 800199e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019a4:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a8:	4c32      	ldr	r4, [pc, #200]	; (8001a74 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019aa:	4313      	orrs	r3, r2
 80019ac:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80019c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019d6:	f7ff f84d 	bl	8000a74 <HAL_GetTick>
 80019da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	019a      	lsls	r2, r3, #6
 80019e0:	f53f ae17 	bmi.w	8001612 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f846 	bl	8000a74 <HAL_GetTick>
 80019e8:	1b40      	subs	r0, r0, r5
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x494>
 80019ee:	e63e      	b.n	800166e <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f840 	bl	8000a74 <HAL_GetTick>
 80019f4:	1b80      	subs	r0, r0, r6
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d99b      	bls.n	8001932 <HAL_RCC_OscConfig+0x3ea>
 80019fa:	e638      	b.n	800166e <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 80019fc:	f7ff f83a 	bl	8000a74 <HAL_GetTick>
 8001a00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	019b      	lsls	r3, r3, #6
 8001a06:	f57f ae04 	bpl.w	8001612 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f833 	bl	8000a74 <HAL_GetTick>
 8001a0e:	1b00      	subs	r0, r0, r4
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9f6      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4ba>
 8001a14:	e62b      	b.n	800166e <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a16:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1c:	f43f ae28 	beq.w	8001670 <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a20:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a26:	4281      	cmp	r1, r0
 8001a28:	f47f ad91 	bne.w	800154e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a2c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a32:	428a      	cmp	r2, r1
 8001a34:	f47f ad8b 	bne.w	800154e <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a3a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001a3e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a40:	4291      	cmp	r1, r2
 8001a42:	f47f ad84 	bne.w	800154e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a48:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8001a4c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a4e:	4291      	cmp	r1, r2
 8001a50:	f47f ad7d 	bne.w	800154e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a56:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001a5a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a5c:	4291      	cmp	r1, r2
 8001a5e:	f47f ad76 	bne.w	800154e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a64:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001a68:	3801      	subs	r0, #1
    return HAL_ERROR;
 8001a6a:	1a18      	subs	r0, r3, r0
 8001a6c:	bf18      	it	ne
 8001a6e:	2001      	movne	r0, #1
 8001a70:	e5fe      	b.n	8001670 <HAL_RCC_OscConfig+0x128>
 8001a72:	bf00      	nop
 8001a74:	58024400 	.word	0x58024400

08001a78 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a78:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001a80:	2a10      	cmp	r2, #16
{
 8001a82:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a84:	f000 8084 	beq.w	8001b90 <HAL_RCC_GetSysClockFreq+0x118>
 8001a88:	2a18      	cmp	r2, #24
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x2e>
 8001a8c:	b10a      	cbz	r2, 8001a92 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a8e:	4842      	ldr	r0, [pc, #264]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001a90:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4841      	ldr	r0, [pc, #260]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x124>)
 8001a96:	f012 0f20 	tst.w	r2, #32
 8001a9a:	d0f9      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001aa2:	40d8      	lsrs	r0, r3
 8001aa4:	e7f4      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aa6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001aa8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001aac:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ab0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d0ec      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x18>
 8001ab6:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001aba:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001abe:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 8001ac2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ac6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aca:	4342      	muls	r2, r0
 8001acc:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ad0:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8001ad4:	2a01      	cmp	r2, #1
 8001ad6:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8001ada:	d002      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6a>
 8001adc:	d30f      	bcc.n	8001afe <HAL_RCC_GetSysClockFreq+0x86>
 8001ade:	2a02      	cmp	r2, #2
 8001ae0:	d048      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae8:	ee07 3a10 	vmov	s14, r3
 8001aec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001af8:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8001ba0 <HAL_RCC_GetSysClockFreq+0x128>
 8001afc:	e037      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	0692      	lsls	r2, r2, #26
 8001b02:	d527      	bpl.n	8001b54 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x124>)
 8001b08:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b0e:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b14:	ee07 2a10 	vmov	s14, r2
 8001b18:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001b1c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001b20:	ee06 3a90 	vmov	s13, r3
 8001b24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b2c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b32:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001b3c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001b3e:	ee07 3a10 	vmov	s14, r3
 8001b42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001b46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001b4e:	ee17 0a90 	vmov	r0, s15
 8001b52:	e79d      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5a:	ee07 3a10 	vmov	s14, r3
 8001b5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b6a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001ba4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b6e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001b72:	e7dd      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7a:	ee07 3a10 	vmov	s14, r3
 8001b7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b8a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8001ba8 <HAL_RCC_GetSysClockFreq+0x130>
 8001b8e:	e7ee      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <HAL_RCC_GetSysClockFreq+0x134>)
 8001b92:	e77d      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x18>
 8001b94:	58024400 	.word	0x58024400
 8001b98:	003d0900 	.word	0x003d0900
 8001b9c:	03d09000 	.word	0x03d09000
 8001ba0:	4a742400 	.word	0x4a742400
 8001ba4:	4c742400 	.word	0x4c742400
 8001ba8:	4bbebc20 	.word	0x4bbebc20
 8001bac:	017d7840 	.word	0x017d7840

08001bb0 <HAL_RCC_ClockConfig>:
{
 8001bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	b910      	cbnz	r0, 8001bc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
}
 8001bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4a88      	ldr	r2, [pc, #544]	; (8001de4 <HAL_RCC_ClockConfig+0x234>)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	428b      	cmp	r3, r1
 8001bca:	f0c0 8093 	bcc.w	8001cf4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	075f      	lsls	r7, r3, #29
 8001bd2:	f100 809b 	bmi.w	8001d0c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	071e      	lsls	r6, r3, #28
 8001bd8:	d50b      	bpl.n	8001bf2 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bda:	4983      	ldr	r1, [pc, #524]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001bdc:	6966      	ldr	r6, [r4, #20]
 8001bde:	69c8      	ldr	r0, [r1, #28]
 8001be0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001be4:	4286      	cmp	r6, r0
 8001be6:	d904      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001be8:	69ca      	ldr	r2, [r1, #28]
 8001bea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bee:	4332      	orrs	r2, r6
 8001bf0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	06d8      	lsls	r0, r3, #27
 8001bf4:	d50b      	bpl.n	8001c0e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bf6:	497c      	ldr	r1, [pc, #496]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001bf8:	69a6      	ldr	r6, [r4, #24]
 8001bfa:	69c8      	ldr	r0, [r1, #28]
 8001bfc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001c00:	4286      	cmp	r6, r0
 8001c02:	d904      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c04:	69ca      	ldr	r2, [r1, #28]
 8001c06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c0a:	4332      	orrs	r2, r6
 8001c0c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c0e:	0699      	lsls	r1, r3, #26
 8001c10:	d50b      	bpl.n	8001c2a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c12:	4975      	ldr	r1, [pc, #468]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001c14:	69e6      	ldr	r6, [r4, #28]
 8001c16:	6a08      	ldr	r0, [r1, #32]
 8001c18:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001c1c:	4286      	cmp	r6, r0
 8001c1e:	d904      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c20:	6a0a      	ldr	r2, [r1, #32]
 8001c22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c26:	4332      	orrs	r2, r6
 8001c28:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2a:	079a      	lsls	r2, r3, #30
 8001c2c:	d50b      	bpl.n	8001c46 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c2e:	496e      	ldr	r1, [pc, #440]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001c30:	68e6      	ldr	r6, [r4, #12]
 8001c32:	6988      	ldr	r0, [r1, #24]
 8001c34:	f000 000f 	and.w	r0, r0, #15
 8001c38:	4286      	cmp	r6, r0
 8001c3a:	d904      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	698a      	ldr	r2, [r1, #24]
 8001c3e:	f022 020f 	bic.w	r2, r2, #15
 8001c42:	4332      	orrs	r2, r6
 8001c44:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	07df      	lsls	r7, r3, #31
 8001c48:	d46e      	bmi.n	8001d28 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	079e      	lsls	r6, r3, #30
 8001c4e:	f100 80a1 	bmi.w	8001d94 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c52:	4964      	ldr	r1, [pc, #400]	; (8001de4 <HAL_RCC_ClockConfig+0x234>)
 8001c54:	680a      	ldr	r2, [r1, #0]
 8001c56:	f002 020f 	and.w	r2, r2, #15
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	f200 80a8 	bhi.w	8001db0 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c60:	0758      	lsls	r0, r3, #29
 8001c62:	f100 80b1 	bmi.w	8001dc8 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	0719      	lsls	r1, r3, #28
 8001c68:	d50b      	bpl.n	8001c82 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c6a:	495f      	ldr	r1, [pc, #380]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001c6c:	6965      	ldr	r5, [r4, #20]
 8001c6e:	69c8      	ldr	r0, [r1, #28]
 8001c70:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001c74:	4285      	cmp	r5, r0
 8001c76:	d204      	bcs.n	8001c82 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c78:	69ca      	ldr	r2, [r1, #28]
 8001c7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c7e:	432a      	orrs	r2, r5
 8001c80:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	06da      	lsls	r2, r3, #27
 8001c84:	d50b      	bpl.n	8001c9e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c86:	4958      	ldr	r1, [pc, #352]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001c88:	69a5      	ldr	r5, [r4, #24]
 8001c8a:	69c8      	ldr	r0, [r1, #28]
 8001c8c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001c90:	4285      	cmp	r5, r0
 8001c92:	d204      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c94:	69ca      	ldr	r2, [r1, #28]
 8001c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c9a:	432a      	orrs	r2, r5
 8001c9c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	d50b      	bpl.n	8001cba <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ca2:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001ca4:	69e0      	ldr	r0, [r4, #28]
 8001ca6:	6a11      	ldr	r1, [r2, #32]
 8001ca8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001cac:	4288      	cmp	r0, r1
 8001cae:	d204      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cb0:	6a13      	ldr	r3, [r2, #32]
 8001cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb6:	4303      	orrs	r3, r0
 8001cb8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cba:	f7ff fedd 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001cbe:	494a      	ldr	r1, [pc, #296]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_RCC_ClockConfig+0x23c>)
 8001cc2:	698b      	ldr	r3, [r1, #24]
 8001cc4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cd0:	698b      	ldr	r3, [r1, #24]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	4a45      	ldr	r2, [pc, #276]	; (8001df0 <HAL_RCC_ClockConfig+0x240>)
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	fa20 f303 	lsr.w	r3, r0, r3
 8001ce2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_ClockConfig+0x248>)
}
 8001cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	f7fe be62 	b.w	80009b8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf4:	6813      	ldr	r3, [r2, #0]
 8001cf6:	f023 030f 	bic.w	r3, r3, #15
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	428b      	cmp	r3, r1
 8001d06:	f47f af58 	bne.w	8001bba <HAL_RCC_ClockConfig+0xa>
 8001d0a:	e760      	b.n	8001bce <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d0c:	4936      	ldr	r1, [pc, #216]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001d0e:	6926      	ldr	r6, [r4, #16]
 8001d10:	6988      	ldr	r0, [r1, #24]
 8001d12:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001d16:	4286      	cmp	r6, r0
 8001d18:	f67f af5d 	bls.w	8001bd6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d1c:	698a      	ldr	r2, [r1, #24]
 8001d1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d22:	4332      	orrs	r2, r6
 8001d24:	618a      	str	r2, [r1, #24]
 8001d26:	e756      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001d2a:	68a1      	ldr	r1, [r4, #8]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001d32:	430a      	orrs	r2, r1
 8001d34:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d38:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	2902      	cmp	r1, #2
 8001d3c:	d11d      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d3e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d42:	f43f af3a 	beq.w	8001bba <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4c:	4e26      	ldr	r6, [pc, #152]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	f022 0207 	bic.w	r2, r2, #7
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001d56:	f7fe fe8d 	bl	8000a74 <HAL_GetTick>
 8001d5a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5c:	6933      	ldr	r3, [r6, #16]
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d64:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001d68:	f43f af6f 	beq.w	8001c4a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7fe fe82 	bl	8000a74 <HAL_GetTick>
 8001d70:	1bc0      	subs	r0, r0, r7
 8001d72:	4540      	cmp	r0, r8
 8001d74:	d9f2      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001d76:	2003      	movs	r0, #3
 8001d78:	e720      	b.n	8001bbc <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7a:	2903      	cmp	r1, #3
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d7e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d82:	e7de      	b.n	8001d42 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d84:	2901      	cmp	r1, #1
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d88:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d8c:	e7d9      	b.n	8001d42 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d8e:	f012 0f04 	tst.w	r2, #4
 8001d92:	e7d6      	b.n	8001d42 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d94:	4914      	ldr	r1, [pc, #80]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001d96:	68e6      	ldr	r6, [r4, #12]
 8001d98:	6988      	ldr	r0, [r1, #24]
 8001d9a:	f000 000f 	and.w	r0, r0, #15
 8001d9e:	4286      	cmp	r6, r0
 8001da0:	f4bf af57 	bcs.w	8001c52 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	698a      	ldr	r2, [r1, #24]
 8001da6:	f022 020f 	bic.w	r2, r2, #15
 8001daa:	4332      	orrs	r2, r6
 8001dac:	618a      	str	r2, [r1, #24]
 8001dae:	e750      	b.n	8001c52 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	680a      	ldr	r2, [r1, #0]
 8001db2:	f022 020f 	bic.w	r2, r2, #15
 8001db6:	432a      	orrs	r2, r5
 8001db8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	680a      	ldr	r2, [r1, #0]
 8001dbc:	f002 020f 	and.w	r2, r2, #15
 8001dc0:	42aa      	cmp	r2, r5
 8001dc2:	f47f aefa 	bne.w	8001bba <HAL_RCC_ClockConfig+0xa>
 8001dc6:	e74b      	b.n	8001c60 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <HAL_RCC_ClockConfig+0x238>)
 8001dca:	6925      	ldr	r5, [r4, #16]
 8001dcc:	6988      	ldr	r0, [r1, #24]
 8001dce:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001dd2:	4285      	cmp	r5, r0
 8001dd4:	f4bf af47 	bcs.w	8001c66 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dd8:	698a      	ldr	r2, [r1, #24]
 8001dda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dde:	432a      	orrs	r2, r5
 8001de0:	618a      	str	r2, [r1, #24]
 8001de2:	e740      	b.n	8001c66 <HAL_RCC_ClockConfig+0xb6>
 8001de4:	52002000 	.word	0x52002000
 8001de8:	58024400 	.word	0x58024400
 8001dec:	08008c60 	.word	0x08008c60
 8001df0:	24000004 	.word	0x24000004
 8001df4:	24000000 	.word	0x24000000
 8001df8:	2400000c 	.word	0x2400000c

08001dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001dfe:	4c3a      	ldr	r4, [pc, #232]	; (8001ee8 <RCCEx_PLL2_Config+0xec>)
{
 8001e00:	4606      	mov	r6, r0
 8001e02:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d069      	beq.n	8001ee2 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e16:	f7fe fe2d 	bl	8000a74 <HAL_GetTick>
 8001e1a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	011a      	lsls	r2, r3, #4
 8001e20:	d44b      	bmi.n	8001eba <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e24:	6832      	ldr	r2, [r6, #0]
 8001e26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e2a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001e2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e30:	68b3      	ldr	r3, [r6, #8]
 8001e32:	68f2      	ldr	r2, [r6, #12]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	3a01      	subs	r2, #1
 8001e38:	025b      	lsls	r3, r3, #9
 8001e3a:	0412      	lsls	r2, r2, #16
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001e42:	4313      	orrs	r3, r2
 8001e44:	6872      	ldr	r2, [r6, #4]
 8001e46:	3a01      	subs	r2, #1
 8001e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	6932      	ldr	r2, [r6, #16]
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0612      	lsls	r2, r2, #24
 8001e54:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001e5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e5e:	6972      	ldr	r2, [r6, #20]
 8001e60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e64:	4313      	orrs	r3, r2
 8001e66:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e6a:	69b2      	ldr	r2, [r6, #24]
 8001e6c:	f023 0320 	bic.w	r3, r3, #32
 8001e70:	4313      	orrs	r3, r2
 8001e72:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001e74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e76:	f023 0310 	bic.w	r3, r3, #16
 8001e7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7e:	69f2      	ldr	r2, [r6, #28]
 8001e80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e8c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001e8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001e98:	b9b5      	cbnz	r5, 8001ec8 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001ea0:	4c11      	ldr	r4, [pc, #68]	; (8001ee8 <RCCEx_PLL2_Config+0xec>)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ea8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eaa:	f7fe fde3 	bl	8000a74 <HAL_GetTick>
 8001eae:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	d50f      	bpl.n	8001ed6 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e005      	b.n	8001ec6 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001eba:	f7fe fddb 	bl	8000a74 <HAL_GetTick>
 8001ebe:	1bc0      	subs	r0, r0, r7
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9ab      	bls.n	8001e1c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001ec4:	2003      	movs	r0, #3
}
 8001ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001ec8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001eca:	bf0c      	ite	eq
 8001ecc:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001ed0:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001ed4:	e7e3      	b.n	8001e9e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001ed6:	f7fe fdcd 	bl	8000a74 <HAL_GetTick>
 8001eda:	1b40      	subs	r0, r0, r5
 8001edc:	2802      	cmp	r0, #2
 8001ede:	d9e7      	bls.n	8001eb0 <RCCEx_PLL2_Config+0xb4>
 8001ee0:	e7f0      	b.n	8001ec4 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	e7ef      	b.n	8001ec6 <RCCEx_PLL2_Config+0xca>
 8001ee6:	bf00      	nop
 8001ee8:	58024400 	.word	0x58024400

08001eec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001eee:	4c3a      	ldr	r4, [pc, #232]	; (8001fd8 <RCCEx_PLL3_Config+0xec>)
{
 8001ef0:	4606      	mov	r6, r0
 8001ef2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d069      	beq.n	8001fd2 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f06:	f7fe fdb5 	bl	8000a74 <HAL_GetTick>
 8001f0a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	009a      	lsls	r2, r3, #2
 8001f10:	d44b      	bmi.n	8001faa <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001f12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f14:	6832      	ldr	r2, [r6, #0]
 8001f16:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001f1a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001f1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f20:	68b3      	ldr	r3, [r6, #8]
 8001f22:	68f2      	ldr	r2, [r6, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	3a01      	subs	r2, #1
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	0412      	lsls	r2, r2, #16
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001f32:	4313      	orrs	r3, r2
 8001f34:	6872      	ldr	r2, [r6, #4]
 8001f36:	3a01      	subs	r2, #1
 8001f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	6932      	ldr	r2, [r6, #16]
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0612      	lsls	r2, r2, #24
 8001f44:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f4e:	6972      	ldr	r2, [r6, #20]
 8001f50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f54:	4313      	orrs	r3, r2
 8001f56:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001f58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f5a:	69b2      	ldr	r2, [r6, #24]
 8001f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f60:	4313      	orrs	r3, r2
 8001f62:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001f6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f6e:	69f2      	ldr	r2, [r6, #28]
 8001f70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f7c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001f7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001f88:	b9b5      	cbnz	r5, 8001fb8 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001f90:	4c11      	ldr	r4, [pc, #68]	; (8001fd8 <RCCEx_PLL3_Config+0xec>)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9a:	f7fe fd6b 	bl	8000a74 <HAL_GetTick>
 8001f9e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	d50f      	bpl.n	8001fc6 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	e005      	b.n	8001fb6 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001faa:	f7fe fd63 	bl	8000a74 <HAL_GetTick>
 8001fae:	1bc0      	subs	r0, r0, r7
 8001fb0:	2802      	cmp	r0, #2
 8001fb2:	d9ab      	bls.n	8001f0c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001fb4:	2003      	movs	r0, #3
}
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001fb8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001fba:	bf0c      	ite	eq
 8001fbc:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001fc0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	e7e3      	b.n	8001f8e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001fc6:	f7fe fd55 	bl	8000a74 <HAL_GetTick>
 8001fca:	1b40      	subs	r0, r0, r5
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d9e7      	bls.n	8001fa0 <RCCEx_PLL3_Config+0xb4>
 8001fd0:	e7f0      	b.n	8001fb4 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	e7ef      	b.n	8001fb6 <RCCEx_PLL3_Config+0xca>
 8001fd6:	bf00      	nop
 8001fd8:	58024400 	.word	0x58024400

08001fdc <HAL_RCCEx_PeriphCLKConfig>:
{
 8001fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fe0:	6806      	ldr	r6, [r0, #0]
{
 8001fe2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fe4:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001fe8:	d023      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001fea:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff0:	d018      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001ff2:	d802      	bhi.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ff4:	b183      	cbz	r3, 8002018 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001ff6:	2601      	movs	r6, #1
 8001ff8:	e01b      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ffe:	d023      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002004:	d1f7      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002006:	4a9f      	ldr	r2, [pc, #636]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002008:	2600      	movs	r6, #0
 800200a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800200c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800200e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002012:	430b      	orrs	r3, r1
 8002014:	6513      	str	r3, [r2, #80]	; 0x50
 8002016:	e00c      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002018:	4a9a      	ldr	r2, [pc, #616]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800201a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002022:	e7f0      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002024:	2102      	movs	r1, #2
 8002026:	3004      	adds	r0, #4
 8002028:	f7ff fee8 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800202c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800202e:	2800      	cmp	r0, #0
 8002030:	d0e9      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	05dd      	lsls	r5, r3, #23
 8002036:	d534      	bpl.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002038:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800203a:	2b04      	cmp	r3, #4
 800203c:	d830      	bhi.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800203e:	e8df f003 	tbb	[pc, r3]
 8002042:	0f08      	.short	0x0f08
 8002044:	0d29      	.short	0x0d29
 8002046:	0d          	.byte	0x0d
 8002047:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002048:	2102      	movs	r1, #2
 800204a:	3024      	adds	r0, #36	; 0x24
 800204c:	f7ff ff4e 	bl	8001eec <RCCEx_PLL3_Config>
 8002050:	e7ec      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002052:	4a8c      	ldr	r2, [pc, #560]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002054:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800205c:	4635      	mov	r5, r6
 800205e:	e004      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002060:	2100      	movs	r1, #0
 8002062:	1d20      	adds	r0, r4, #4
 8002064:	f7ff feca 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002068:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800206a:	b9e5      	cbnz	r5, 80020a6 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800206c:	4a85      	ldr	r2, [pc, #532]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800206e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002070:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	430b      	orrs	r3, r1
 8002078:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	0598      	lsls	r0, r3, #22
 800207e:	d521      	bpl.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002080:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002082:	2b80      	cmp	r3, #128	; 0x80
 8002084:	d03b      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002086:	d810      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002088:	b36b      	cbz	r3, 80020e6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d031      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 800208e:	2601      	movs	r6, #1
 8002090:	4635      	mov	r5, r6
 8002092:	e017      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002094:	2100      	movs	r1, #0
 8002096:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800209a:	f7ff ff27 	bl	8001eec <RCCEx_PLL3_Config>
 800209e:	e7e3      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 80020a0:	2601      	movs	r6, #1
 80020a2:	4635      	mov	r5, r6
 80020a4:	e7e9      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80020a6:	462e      	mov	r6, r5
 80020a8:	e7e7      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80020aa:	2bc0      	cmp	r3, #192	; 0xc0
 80020ac:	d002      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80020ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b2:	d1ec      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 80020b4:	bb4d      	cbnz	r5, 800210a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80020b6:	4a73      	ldr	r2, [pc, #460]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80020b8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80020ba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80020bc:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	0559      	lsls	r1, r3, #21
 80020c8:	d530      	bpl.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 80020ca:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80020ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d2:	d047      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80020d4:	d81b      	bhi.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x132>
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d038      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x170>
 80020da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020de:	d03b      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 80020e0:	2601      	movs	r6, #1
 80020e2:	4635      	mov	r5, r6
 80020e4:	e022      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e6:	4a67      	ldr	r2, [pc, #412]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80020e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ee:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80020f0:	e7e0      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020f2:	2100      	movs	r1, #0
 80020f4:	1d20      	adds	r0, r4, #4
 80020f6:	f7ff fe81 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020fa:	4605      	mov	r5, r0
      break;
 80020fc:	e7da      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020fe:	2100      	movs	r1, #0
 8002100:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002104:	f7ff fef2 	bl	8001eec <RCCEx_PLL3_Config>
 8002108:	e7f7      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800210a:	462e      	mov	r6, r5
 800210c:	e7da      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 800210e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002112:	d002      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002118:	d1e2      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 800211a:	bb4d      	cbnz	r5, 8002170 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800211c:	4a59      	ldr	r2, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800211e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002122:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002124:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002128:	430b      	orrs	r3, r1
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	051a      	lsls	r2, r3, #20
 8002130:	d52f      	bpl.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002132:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8002136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800213a:	d041      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800213c:	d81a      	bhi.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800213e:	b39b      	cbz	r3, 80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d036      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8002146:	2601      	movs	r6, #1
 8002148:	4635      	mov	r5, r6
 800214a:	e022      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800214c:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800214e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002156:	e7e0      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002158:	2100      	movs	r1, #0
 800215a:	1d20      	adds	r0, r4, #4
 800215c:	f7ff fe4e 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002160:	4605      	mov	r5, r0
      break;
 8002162:	e7da      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002164:	2100      	movs	r1, #0
 8002166:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800216a:	f7ff febf 	bl	8001eec <RCCEx_PLL3_Config>
 800216e:	e7f7      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002170:	462e      	mov	r6, r5
 8002172:	e7db      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002174:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002178:	d002      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800217a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800217e:	d1e2      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8002180:	bb25      	cbnz	r5, 80021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002182:	4a40      	ldr	r2, [pc, #256]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002184:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002188:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800218a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800218e:	430b      	orrs	r3, r1
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	d527      	bpl.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8002198:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800219a:	2b10      	cmp	r3, #16
 800219c:	d033      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800219e:	d817      	bhi.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80021a0:	b1d3      	cbz	r3, 80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 80021a2:	2601      	movs	r6, #1
 80021a4:	4635      	mov	r5, r6
 80021a6:	e01f      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021a8:	4a36      	ldr	r2, [pc, #216]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80021b2:	e7e5      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021b4:	2100      	movs	r1, #0
 80021b6:	1d20      	adds	r0, r4, #4
 80021b8:	f7ff fe20 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021bc:	4605      	mov	r5, r0
      break;
 80021be:	e7df      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021c0:	2100      	movs	r1, #0
 80021c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021c6:	f7ff fe91 	bl	8001eec <RCCEx_PLL3_Config>
 80021ca:	e7f7      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80021cc:	462e      	mov	r6, r5
 80021ce:	e7e0      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d01e      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80021d4:	2b30      	cmp	r3, #48	; 0x30
 80021d6:	d1e4      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 80021d8:	bb0d      	cbnz	r5, 800221e <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021da:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80021de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021e4:	430b      	orrs	r3, r1
 80021e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	04df      	lsls	r7, r3, #19
 80021ec:	d527      	bpl.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 80021ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f4:	d03e      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80021f6:	d814      	bhi.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80021f8:	b383      	cbz	r3, 800225c <HAL_RCCEx_PeriphCLKConfig+0x280>
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fe:	d033      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8002200:	2601      	movs	r6, #1
 8002202:	4635      	mov	r5, r6
 8002204:	e01b      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002208:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800220a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002210:	e7e2      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002212:	2102      	movs	r1, #2
 8002214:	1d20      	adds	r0, r4, #4
 8002216:	f7ff fdf1 	bl	8001dfc <RCCEx_PLL2_Config>
 800221a:	4605      	mov	r5, r0
      break;
 800221c:	e7dc      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800221e:	462e      	mov	r6, r5
 8002220:	e7e2      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002226:	d002      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222c:	d1e8      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 800222e:	bb3d      	cbnz	r5, 8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002232:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002234:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223a:	430b      	orrs	r3, r1
 800223c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	0498      	lsls	r0, r3, #18
 8002242:	d532      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002244:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800224a:	d044      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800224c:	d81c      	bhi.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800224e:	b323      	cbz	r3, 800229a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d039      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8002256:	2601      	movs	r6, #1
 8002258:	4635      	mov	r5, r6
 800225a:	e026      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800225e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002266:	e7e2      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002268:	2100      	movs	r1, #0
 800226a:	1d20      	adds	r0, r4, #4
 800226c:	f7ff fdc6 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002270:	4605      	mov	r5, r0
      break;
 8002272:	e7dc      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002274:	2100      	movs	r1, #0
 8002276:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800227a:	f7ff fe37 	bl	8001eec <RCCEx_PLL3_Config>
 800227e:	e7f7      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8002280:	462e      	mov	r6, r5
 8002282:	e7dc      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002284:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8002288:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800228c:	d005      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800228e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002292:	d002      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002294:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002298:	d1dd      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 800229a:	bb15      	cbnz	r5, 80022e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800229c:	4aa0      	ldr	r2, [pc, #640]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800229e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80022a0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80022a2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	0459      	lsls	r1, r3, #17
 80022ae:	d52d      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022b0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80022b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b8:	d04b      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022ba:	d814      	bhi.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80022bc:	b1e3      	cbz	r3, 80022f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80022be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022c2:	d040      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 80022c4:	2601      	movs	r6, #1
 80022c6:	4635      	mov	r5, r6
 80022c8:	e020      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022ca:	2101      	movs	r1, #1
 80022cc:	1d20      	adds	r0, r4, #4
 80022ce:	f7ff fd95 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022d2:	4605      	mov	r5, r0
      break;
 80022d4:	e7e1      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022d6:	2101      	movs	r1, #1
 80022d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022dc:	f7ff fe06 	bl	8001eec <RCCEx_PLL3_Config>
 80022e0:	e7f7      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80022e2:	462e      	mov	r6, r5
 80022e4:	e7e1      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d005      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f0:	d002      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80022f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80022f6:	d1e5      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	d130      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80022fc:	4a88      	ldr	r2, [pc, #544]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80022fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8002302:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002304:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002308:	430b      	orrs	r3, r1
 800230a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	041a      	lsls	r2, r3, #16
 8002310:	d50f      	bpl.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8002312:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002318:	d023      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800231a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800231e:	d026      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002320:	bb5b      	cbnz	r3, 800237a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8002322:	bb6d      	cbnz	r5, 8002380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002324:	4a7e      	ldr	r2, [pc, #504]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002326:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002328:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800232a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800232e:	430b      	orrs	r3, r1
 8002330:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	01db      	lsls	r3, r3, #7
 8002336:	d533      	bpl.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8002338:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800233a:	2b03      	cmp	r3, #3
 800233c:	d874      	bhi.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800233e:	e8df f003 	tbb	[pc, r3]
 8002342:	2126      	.short	0x2126
 8002344:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002346:	2101      	movs	r1, #1
 8002348:	1d20      	adds	r0, r4, #4
 800234a:	f7ff fd57 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800234e:	4605      	mov	r5, r0
      break;
 8002350:	e7d2      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002352:	2101      	movs	r1, #1
 8002354:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002358:	f7ff fdc8 	bl	8001eec <RCCEx_PLL3_Config>
 800235c:	e7f7      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800235e:	462e      	mov	r6, r5
 8002360:	e7d4      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002362:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002364:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800236c:	e7d9      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800236e:	2101      	movs	r1, #1
 8002370:	1d20      	adds	r0, r4, #4
 8002372:	f7ff fd43 	bl	8001dfc <RCCEx_PLL2_Config>
 8002376:	4605      	mov	r5, r0
      break;
 8002378:	e7d3      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 800237a:	2601      	movs	r6, #1
 800237c:	4635      	mov	r5, r6
 800237e:	e7d8      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002380:	462e      	mov	r6, r5
 8002382:	e7d6      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002384:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002386:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800238e:	2d00      	cmp	r5, #0
 8002390:	d14d      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002392:	4a63      	ldr	r2, [pc, #396]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002394:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002396:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002398:	f023 0303 	bic.w	r3, r3, #3
 800239c:	430b      	orrs	r3, r1
 800239e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	025f      	lsls	r7, r3, #9
 80023a4:	d54d      	bpl.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a6:	4f5f      	ldr	r7, [pc, #380]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80023b0:	f7fe fb60 	bl	8000a74 <HAL_GetTick>
 80023b4:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	05d8      	lsls	r0, r3, #23
 80023ba:	d53a      	bpl.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 80023bc:	2d00      	cmp	r5, #0
 80023be:	d161      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80023c2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80023c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023c8:	4042      	eors	r2, r0
 80023ca:	f412 7f40 	tst.w	r2, #768	; 0x300
 80023ce:	d00b      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80023dc:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80023e0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80023e4:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80023e6:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80023e8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80023ec:	d036      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ee:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80023f2:	494b      	ldr	r1, [pc, #300]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80023f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80023f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80023fc:	d13e      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80023fe:	6908      	ldr	r0, [r1, #16]
 8002400:	4a49      	ldr	r2, [pc, #292]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8002402:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8002406:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800240a:	4302      	orrs	r2, r0
 800240c:	610a      	str	r2, [r1, #16]
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002414:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002416:	430b      	orrs	r3, r1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	e012      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800241c:	2102      	movs	r1, #2
 800241e:	1d20      	adds	r0, r4, #4
 8002420:	f7ff fcec 	bl	8001dfc <RCCEx_PLL2_Config>
 8002424:	4605      	mov	r5, r0
      break;
 8002426:	e7b2      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8002428:	2601      	movs	r6, #1
 800242a:	4635      	mov	r5, r6
 800242c:	e7b8      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800242e:	462e      	mov	r6, r5
 8002430:	e7b6      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fb1f 	bl	8000a74 <HAL_GetTick>
 8002436:	eba0 0008 	sub.w	r0, r0, r8
 800243a:	2864      	cmp	r0, #100	; 0x64
 800243c:	d9bb      	bls.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 800243e:	2603      	movs	r6, #3
 8002440:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	07da      	lsls	r2, r3, #31
 8002446:	d52d      	bpl.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002448:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800244a:	2b10      	cmp	r3, #16
 800244c:	d03b      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800244e:	d81b      	bhi.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002450:	b303      	cbz	r3, 8002494 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002452:	2b08      	cmp	r3, #8
 8002454:	d031      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8002456:	2601      	movs	r6, #1
 8002458:	4635      	mov	r5, r6
 800245a:	e023      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 800245c:	f7fe fb0a 	bl	8000a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002460:	4f2f      	ldr	r7, [pc, #188]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8002462:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800246a:	0799      	lsls	r1, r3, #30
 800246c:	d4bf      	bmi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fb01 	bl	8000a74 <HAL_GetTick>
 8002472:	eba0 0008 	sub.w	r0, r0, r8
 8002476:	4548      	cmp	r0, r9
 8002478:	d9f6      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800247a:	e7e0      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247c:	690a      	ldr	r2, [r1, #16]
 800247e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002482:	e7c3      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002484:	462e      	mov	r6, r5
 8002486:	e7dc      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002488:	2b20      	cmp	r3, #32
 800248a:	d003      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800248c:	2b28      	cmp	r3, #40	; 0x28
 800248e:	d001      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002490:	2b18      	cmp	r3, #24
 8002492:	d1e0      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8002494:	b9ed      	cbnz	r5, 80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002496:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002498:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800249a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800249c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	079b      	lsls	r3, r3, #30
 80024a8:	d522      	bpl.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80024aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d831      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80024b0:	e8df f003 	tbb	[pc, r3]
 80024b4:	162a1116 	.word	0x162a1116
 80024b8:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024ba:	2101      	movs	r1, #1
 80024bc:	1d20      	adds	r0, r4, #4
 80024be:	f7ff fc9d 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024c2:	4605      	mov	r5, r0
      break;
 80024c4:	e7e6      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024c6:	2101      	movs	r1, #1
 80024c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024cc:	f7ff fd0e 	bl	8001eec <RCCEx_PLL3_Config>
 80024d0:	e7f7      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80024d2:	462e      	mov	r6, r5
 80024d4:	e7e6      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024d6:	2101      	movs	r1, #1
 80024d8:	1d20      	adds	r0, r4, #4
 80024da:	f7ff fc8f 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024e0:	b9dd      	cbnz	r5, 800251a <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80024e4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80024e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024e8:	f023 0307 	bic.w	r3, r3, #7
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	075f      	lsls	r7, r3, #29
 80024f4:	d528      	bpl.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80024f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d83a      	bhi.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80024fe:	e8df f003 	tbb	[pc, r3]
 8002502:	151a      	.short	0x151a
 8002504:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002508:	2101      	movs	r1, #1
 800250a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800250e:	f7ff fced 	bl	8001eec <RCCEx_PLL3_Config>
 8002512:	e7e4      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8002514:	2601      	movs	r6, #1
 8002516:	4635      	mov	r5, r6
 8002518:	e7ea      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800251a:	462e      	mov	r6, r5
 800251c:	e7e8      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
 8002524:	58024800 	.word	0x58024800
 8002528:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800252c:	2101      	movs	r1, #1
 800252e:	1d20      	adds	r0, r4, #4
 8002530:	f7ff fc64 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002534:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002536:	bb05      	cbnz	r5, 800257a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002538:	4a98      	ldr	r2, [pc, #608]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800253a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800253e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002540:	f023 0307 	bic.w	r3, r3, #7
 8002544:	430b      	orrs	r3, r1
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	0698      	lsls	r0, r3, #26
 800254c:	d529      	bpl.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800254e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002556:	d03a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002558:	d811      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800255a:	b1cb      	cbz	r3, 8002590 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800255c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002560:	d02f      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8002562:	2601      	movs	r6, #1
 8002564:	4635      	mov	r5, r6
 8002566:	e01c      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002568:	2101      	movs	r1, #1
 800256a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800256e:	f7ff fcbd 	bl	8001eec <RCCEx_PLL3_Config>
 8002572:	e7df      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8002574:	2601      	movs	r6, #1
 8002576:	4635      	mov	r5, r6
 8002578:	e7e6      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800257a:	462e      	mov	r6, r5
 800257c:	e7e4      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002582:	d005      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002588:	d002      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800258a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800258e:	d1e8      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8002590:	bb1d      	cbnz	r5, 80025da <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002592:	4a82      	ldr	r2, [pc, #520]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002594:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002598:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800259a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800259e:	430b      	orrs	r3, r1
 80025a0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	0659      	lsls	r1, r3, #25
 80025a6:	d52c      	bpl.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80025ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b0:	d03f      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x656>
 80025b2:	d814      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x602>
 80025b4:	b1e3      	cbz	r3, 80025f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d034      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 80025bc:	2601      	movs	r6, #1
 80025be:	4635      	mov	r5, r6
 80025c0:	e01f      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025c2:	2100      	movs	r1, #0
 80025c4:	1d20      	adds	r0, r4, #4
 80025c6:	f7ff fc19 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025ca:	4605      	mov	r5, r0
      break;
 80025cc:	e7e0      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025ce:	2102      	movs	r1, #2
 80025d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025d4:	f7ff fc8a 	bl	8001eec <RCCEx_PLL3_Config>
 80025d8:	e7f7      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80025da:	462e      	mov	r6, r5
 80025dc:	e7e1      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d005      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80025e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80025e8:	d002      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80025ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025ee:	d1e5      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 80025f0:	bb2d      	cbnz	r5, 800263e <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f2:	4a6a      	ldr	r2, [pc, #424]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80025f4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80025f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025fa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80025fe:	430b      	orrs	r3, r1
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	061a      	lsls	r2, r3, #24
 8002606:	d530      	bpl.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002608:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800260c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002610:	f000 80a4 	beq.w	800275c <HAL_RCCEx_PeriphCLKConfig+0x780>
 8002614:	d815      	bhi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8002616:	b1eb      	cbz	r3, 8002654 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	f000 8098 	beq.w	8002750 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 8002620:	2601      	movs	r6, #1
 8002622:	4635      	mov	r5, r6
 8002624:	e021      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002626:	2100      	movs	r1, #0
 8002628:	1d20      	adds	r0, r4, #4
 800262a:	f7ff fbe7 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800262e:	4605      	mov	r5, r0
      break;
 8002630:	e7de      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002632:	2102      	movs	r1, #2
 8002634:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002638:	f7ff fc58 	bl	8001eec <RCCEx_PLL3_Config>
 800263c:	e7f7      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800263e:	462e      	mov	r6, r5
 8002640:	e7df      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002646:	d005      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002648:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800264c:	d002      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800264e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002652:	d1e5      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8002654:	2d00      	cmp	r5, #0
 8002656:	f040 8087 	bne.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800265a:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800265c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002660:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002662:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002666:	430b      	orrs	r3, r1
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	d514      	bpl.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002670:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002678:	d107      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800267a:	2102      	movs	r1, #2
 800267c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002680:	f7ff fc34 	bl	8001eec <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002684:	2800      	cmp	r0, #0
 8002686:	bf18      	it	ne
 8002688:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800268a:	4a44      	ldr	r2, [pc, #272]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800268c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002690:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002696:	430b      	orrs	r3, r1
 8002698:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	06df      	lsls	r7, r3, #27
 800269e:	d514      	bpl.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80026a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a8:	d107      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80026aa:	2102      	movs	r1, #2
 80026ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026b0:	f7ff fc1c 	bl	8001eec <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bf18      	it	ne
 80026b8:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ba:	4a38      	ldr	r2, [pc, #224]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026bc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80026c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	0318      	lsls	r0, r3, #12
 80026ce:	d517      	bpl.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 80026d0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80026d4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80026d8:	d048      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x790>
 80026da:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80026de:	d005      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x710>
 80026e0:	2900      	cmp	r1, #0
 80026e2:	d149      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026e4:	1d20      	adds	r0, r4, #4
 80026e6:	f7ff fb89 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026ea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	d146      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f0:	4a2a      	ldr	r2, [pc, #168]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026f2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80026f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	0359      	lsls	r1, r3, #13
 8002704:	d518      	bpl.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 8002706:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800270a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800270e:	d038      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002714:	d007      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8002716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800271a:	d139      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271c:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800271e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002726:	bbb5      	cbnz	r5, 8002796 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002728:	4a1c      	ldr	r2, [pc, #112]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800272a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800272e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002730:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002734:	430b      	orrs	r3, r1
 8002736:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	03da      	lsls	r2, r3, #15
 800273c:	d53e      	bpl.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 800273e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002740:	b373      	cbz	r3, 80027a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	f000 808c 	beq.w	8002862 <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 800274a:	2601      	movs	r6, #1
 800274c:	4635      	mov	r5, r6
 800274e:	e035      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002750:	2100      	movs	r1, #0
 8002752:	1d20      	adds	r0, r4, #4
 8002754:	f7ff fb52 	bl	8001dfc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002758:	4605      	mov	r5, r0
      break;
 800275a:	e77b      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800275c:	2102      	movs	r1, #2
 800275e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002762:	f7ff fbc3 	bl	8001eec <RCCEx_PLL3_Config>
 8002766:	e7f7      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002768:	462e      	mov	r6, r5
 800276a:	e77e      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800276c:	2102      	movs	r1, #2
 800276e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002772:	f7ff fbbb 	bl	8001eec <RCCEx_PLL3_Config>
 8002776:	e7b8      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8002778:	2601      	movs	r6, #1
 800277a:	4635      	mov	r5, r6
 800277c:	e7c0      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x724>
 800277e:	462e      	mov	r6, r5
 8002780:	e7be      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002782:	2101      	movs	r1, #1
 8002784:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002788:	f7ff fbb0 	bl	8001eec <RCCEx_PLL3_Config>
 800278c:	4605      	mov	r5, r0
      break;
 800278e:	e7ca      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8002790:	2601      	movs	r6, #1
 8002792:	4635      	mov	r5, r6
 8002794:	e7d0      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002796:	462e      	mov	r6, r5
 8002798:	e7ce      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800279a:	bf00      	nop
 800279c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a0:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d15f      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80027ae:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027b0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80027b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b8:	430b      	orrs	r3, r1
 80027ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	d507      	bpl.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80027c2:	2102      	movs	r1, #2
 80027c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027c8:	f7ff fb90 	bl	8001eec <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80027cc:	2800      	cmp	r0, #0
 80027ce:	bf18      	it	ne
 80027d0:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	039f      	lsls	r7, r3, #14
 80027d6:	d50e      	bpl.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 80027d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80027da:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80027de:	d050      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80027e0:	d847      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x896>
 80027e2:	2900      	cmp	r1, #0
 80027e4:	d14b      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	d151      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027ea:	482a      	ldr	r0, [pc, #168]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80027ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027f2:	430a      	orrs	r2, r1
 80027f4:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027f6:	02dd      	lsls	r5, r3, #11
 80027f8:	d506      	bpl.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027fa:	4926      	ldr	r1, [pc, #152]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80027fe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002800:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002804:	4302      	orrs	r2, r0
 8002806:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002808:	00d8      	lsls	r0, r3, #3
 800280a:	d507      	bpl.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800280c:	4921      	ldr	r1, [pc, #132]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800280e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8002812:	690a      	ldr	r2, [r1, #16]
 8002814:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002818:	4302      	orrs	r2, r0
 800281a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800281c:	0299      	lsls	r1, r3, #10
 800281e:	d506      	bpl.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002820:	491c      	ldr	r1, [pc, #112]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002822:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002824:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002826:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800282a:	4302      	orrs	r2, r0
 800282c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800282e:	005a      	lsls	r2, r3, #1
 8002830:	d509      	bpl.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002832:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002834:	6911      	ldr	r1, [r2, #16]
 8002836:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800283a:	6111      	str	r1, [r2, #16]
 800283c:	6911      	ldr	r1, [r2, #16]
 800283e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8002842:	4301      	orrs	r1, r0
 8002844:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002846:	2b00      	cmp	r3, #0
 8002848:	da06      	bge.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800284c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800284e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002850:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002854:	430b      	orrs	r3, r1
 8002856:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002858:	1c30      	adds	r0, r6, #0
 800285a:	bf18      	it	ne
 800285c:	2001      	movne	r0, #1
 800285e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002862:	2102      	movs	r1, #2
 8002864:	1d20      	adds	r0, r4, #4
 8002866:	f7ff fac9 	bl	8001dfc <RCCEx_PLL2_Config>
 800286a:	4605      	mov	r5, r0
      break;
 800286c:	e79d      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800286e:	462e      	mov	r6, r5
 8002870:	e7a4      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8002872:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002876:	d0b6      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002878:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800287c:	d0b3      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 800287e:	2601      	movs	r6, #1
 8002880:	e7b9      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002882:	4804      	ldr	r0, [pc, #16]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002884:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002886:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800288a:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 800288c:	e7ab      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800288e:	462e      	mov	r6, r5
 8002890:	e7b1      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002892:	bf00      	nop
 8002894:	58024400 	.word	0x58024400

08002898 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8002898:	4770      	bx	lr
	...

0800289c <HAL_SDRAM_Init>:
{
 800289c:	b538      	push	{r3, r4, r5, lr}
 800289e:	460d      	mov	r5, r1
  if (hsdram == NULL)
 80028a0:	4604      	mov	r4, r0
 80028a2:	b1f0      	cbz	r0, 80028e2 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80028a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80028a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ac:	b91b      	cbnz	r3, 80028b6 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80028ae:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80028b2:	f7ff fff1 	bl	8002898 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028b6:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80028b8:	1d21      	adds	r1, r4, #4
 80028ba:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80028c0:	f000 f84b 	bl	800295a <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80028c4:	6862      	ldr	r2, [r4, #4]
 80028c6:	4629      	mov	r1, r5
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	f000 f881 	bl	80029d0 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80028ce:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 80028d0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028d8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80028da:	2301      	movs	r3, #1
 80028dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80028e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80028e2:	2001      	movs	r0, #1
 80028e4:	e7fc      	b.n	80028e0 <HAL_SDRAM_Init+0x44>
 80028e6:	bf00      	nop
 80028e8:	52004000 	.word	0x52004000

080028ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80028f0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80028f4:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80028f6:	b2c0      	uxtb	r0, r0
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d010      	beq.n	800291e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80028fc:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8002900:	2c01      	cmp	r4, #1
 8002902:	d110      	bne.n	8002926 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002904:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002906:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002908:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800290c:	f000 f896 	bl	8002a3c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002910:	6833      	ldr	r3, [r6, #0]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d104      	bne.n	8002920 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002916:	2305      	movs	r3, #5
 8002918:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800291c:	2000      	movs	r0, #0
}
 800291e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002920:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8002924:	e7fa      	b.n	800291c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8002926:	2001      	movs	r0, #1
 8002928:	e7f9      	b.n	800291e <HAL_SDRAM_SendCommand+0x32>

0800292a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800292a:	b538      	push	{r3, r4, r5, lr}
 800292c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800292e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002932:	b2c0      	uxtb	r0, r0
 8002934:	2802      	cmp	r0, #2
 8002936:	d00d      	beq.n	8002954 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002938:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 800293c:	b2ed      	uxtb	r5, r5
 800293e:	2d01      	cmp	r5, #1
 8002940:	d109      	bne.n	8002956 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002942:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002944:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002946:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800294a:	f000 f887 	bl	8002a5c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800294e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002950:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8002954:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	e7fc      	b.n	8002954 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800295a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800295a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800295e:	680a      	ldr	r2, [r1, #0]
 8002960:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8002964:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8002968:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800296c:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8002970:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8002974:	4323      	orrs	r3, r4
 8002976:	b9a2      	cbnz	r2, 80029a2 <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002978:	ea43 0209 	orr.w	r2, r3, r9
 800297c:	6801      	ldr	r1, [r0, #0]
 800297e:	432a      	orrs	r2, r5
 8002980:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002984:	ea42 0308 	orr.w	r3, r2, r8
 8002988:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800298c:	ea43 030e 	orr.w	r3, r3, lr
 8002990:	ea43 030c 	orr.w	r3, r3, ip
 8002994:	433b      	orrs	r3, r7
 8002996:	4333      	orrs	r3, r6
 8002998:	430b      	orrs	r3, r1
 800299a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800299c:	2000      	movs	r0, #0
 800299e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80029a2:	6802      	ldr	r2, [r0, #0]
 80029a4:	ea43 0309 	orr.w	r3, r3, r9
 80029a8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80029ac:	4313      	orrs	r3, r2
 80029ae:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80029b0:	ea45 0308 	orr.w	r3, r5, r8
 80029b4:	6842      	ldr	r2, [r0, #4]
 80029b6:	ea43 030e 	orr.w	r3, r3, lr
 80029ba:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80029be:	ea43 030c 	orr.w	r3, r3, ip
 80029c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80029c6:	433b      	orrs	r3, r7
 80029c8:	4333      	orrs	r3, r6
 80029ca:	4313      	orrs	r3, r2
 80029cc:	6043      	str	r3, [r0, #4]
 80029ce:	e7e5      	b.n	800299c <FMC_SDRAM_Init+0x42>

080029d0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80029d0:	68cb      	ldr	r3, [r1, #12]
 80029d2:	f103 3cff 	add.w	ip, r3, #4294967295
 80029d6:	694b      	ldr	r3, [r1, #20]
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	3b01      	subs	r3, #1
 80029dc:	680f      	ldr	r7, [r1, #0]
 80029de:	684c      	ldr	r4, [r1, #4]
 80029e0:	688e      	ldr	r6, [r1, #8]
 80029e2:	051b      	lsls	r3, r3, #20
 80029e4:	690d      	ldr	r5, [r1, #16]
 80029e6:	3c01      	subs	r4, #1
 80029e8:	6989      	ldr	r1, [r1, #24]
 80029ea:	3e01      	subs	r6, #1
 80029ec:	3d01      	subs	r5, #1
 80029ee:	3f01      	subs	r7, #1
 80029f0:	3901      	subs	r1, #1
 80029f2:	0124      	lsls	r4, r4, #4
 80029f4:	0236      	lsls	r6, r6, #8
 80029f6:	042d      	lsls	r5, r5, #16
 80029f8:	0609      	lsls	r1, r1, #24
 80029fa:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80029fe:	b95a      	cbnz	r2, 8002a18 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a00:	433b      	orrs	r3, r7
 8002a02:	6882      	ldr	r2, [r0, #8]
 8002a04:	4323      	orrs	r3, r4
 8002a06:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002a0a:	4333      	orrs	r3, r6
 8002a0c:	432b      	orrs	r3, r5
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	4313      	orrs	r3, r2
 8002a12:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8002a14:	2000      	movs	r0, #0
 8002a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a18:	6882      	ldr	r2, [r0, #8]
 8002a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a1e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002a22:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002a24:	ea44 0306 	orr.w	r3, r4, r6
 8002a28:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a2a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002a2c:	68c2      	ldr	r2, [r0, #12]
 8002a2e:	432b      	orrs	r3, r5
 8002a30:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002a34:	430b      	orrs	r3, r1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60c3      	str	r3, [r0, #12]
 8002a3a:	e7eb      	b.n	8002a14 <FMC_SDRAM_Timing_Init+0x44>

08002a3c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002a3c:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8002a3e:	e9d1 3400 	ldrd	r3, r4, [r1]
 8002a42:	6902      	ldr	r2, [r0, #16]
 8002a44:	4323      	orrs	r3, r4
 8002a46:	4313      	orrs	r3, r2
 8002a48:	68ca      	ldr	r2, [r1, #12]
 8002a4a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8002a4e:	688a      	ldr	r2, [r1, #8]
 8002a50:	3a01      	subs	r2, #1
 8002a52:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002a56:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8002a58:	2000      	movs	r0, #0
 8002a5a:	bd10      	pop	{r4, pc}

08002a5c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002a5c:	6943      	ldr	r3, [r0, #20]
 8002a5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a62:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8002a66:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002a6a:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	4770      	bx	lr

08002a70 <disegna_cerchio_centrale>:
  GUI_Clear();
}

/*ATTENZIONE! LO (0,0) è in alto a sx*/
void disegna_cerchio_centrale(int pos_x, int pos_y, int raggio, int spessore_bordo)
{
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	4616      	mov	r6, r2
	//UTIL_LCD_FillRect(pos_x-raggio-d_int.raggio_indicatore_cerchio, pos_y-raggio-d_int.raggio_indicatore_cerchio, raggio*2+d_int.raggio_indicatore_cerchio, raggio*2+d_int.raggio_indicatore_cerchio, COLORE_SFONDO);

	GUI_SetColor(GUI_GREEN);
 8002a78:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
{
 8002a7c:	461f      	mov	r7, r3
	GUI_SetColor(GUI_GREEN);
 8002a7e:	f000 ff6d 	bl	800395c <GUI_SetColor>
	GUI_FillCircle(pos_x, pos_y, raggio);
 8002a82:	4632      	mov	r2, r6
 8002a84:	4629      	mov	r1, r5
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 fea4 	bl	80037d4 <GUI_FillCircle>
	GUI_SetColor(COLORE_SFONDO);
 8002a8c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002a90:	f000 ff64 	bl	800395c <GUI_SetColor>
	GUI_FillCircle(pos_x, pos_y, raggio-spessore_bordo);
 8002a94:	1bf2      	subs	r2, r6, r7
 8002a96:	4629      	mov	r1, r5
 8002a98:	4620      	mov	r0, r4
}
 8002a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_FillCircle(pos_x, pos_y, raggio-spessore_bordo);
 8002a9e:	f000 be99 	b.w	80037d4 <GUI_FillCircle>

08002aa2 <disegna_indicatore_cerchio>:

void disegna_indicatore_cerchio(int pos_x, int pos_y, double alfa, int raggio_dal_centro, int raggio_dimensione_indicatore)
{
 8002aa2:	b510      	push	{r4, lr}
 8002aa4:	ed2d 8b08 	vpush	{d8-d11}
 8002aa8:	eeb0 bb40 	vmov.f64	d11, d0
  GUI_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore);
 8002aac:	ee07 2a90 	vmov	s15, r2
{
 8002ab0:	ee08 0a10 	vmov	s16, r0
 8002ab4:	ee08 1a90 	vmov	s17, r1
  GUI_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore);
 8002ab8:	eeb8 9be7 	vcvt.f64.s32	d9, s15
{
 8002abc:	461c      	mov	r4, r3
  GUI_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore);
 8002abe:	f005 fa9b 	bl	8007ff8 <cos>
 8002ac2:	eeb0 ab40 	vmov.f64	d10, d0
 8002ac6:	eeb0 0b4b 	vmov.f64	d0, d11
 8002aca:	f005 fb49 	bl	8008160 <sin>
 8002ace:	eeb8 6be8 	vcvt.f64.s32	d6, s17
 8002ad2:	eeb8 7bc8 	vcvt.f64.s32	d7, s16
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	eea0 6b49 	vfms.f64	d6, d0, d9
 8002adc:	eea9 7b0a 	vfma.f64	d7, d9, d10
}
 8002ae0:	ecbd 8b08 	vpop	{d8-d11}
  GUI_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore);
 8002ae4:	eefd 6bc6 	vcvt.s32.f64	s13, d6
}
 8002ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  GUI_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore);
 8002aec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002af0:	ee16 1a90 	vmov	r1, s13
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f000 be6c 	b.w	80037d4 <GUI_FillCircle>

08002afc <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8002afc:	4770      	bx	lr
	...

08002b00 <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) 
{
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8002b00:	f44f 3134 	mov.w	r1, #184320	; 0x2d000
 8002b04:	4801      	ldr	r0, [pc, #4]	; (8002b0c <GUI_X_Config+0xc>)
 8002b06:	f000 bc81 	b.w	800340c <GUI_ALLOC_AssignMemory>
 8002b0a:	bf00      	nop
 8002b0c:	2400003c 	.word	0x2400003c

08002b10 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8002b10:	b530      	push	{r4, r5, lr}
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002b12:	2800      	cmp	r0, #0
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002b14:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <DMA2D_CopyBuffer+0x3c>)
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2402      	moveq	r4, #2
 8002b1e:	2403      	movne	r4, #3
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002b20:	6005      	str	r5, [r0, #0]
  	
  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8002b22:	60c1      	str	r1, [r0, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8002b24:	63c2      	str	r2, [r0, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8002b26:	9a04      	ldr	r2, [sp, #16]
 8002b28:	6102      	str	r2, [r0, #16]
  DMA2D->OOR     = OffLineDst; 
 8002b2a:	9a05      	ldr	r2, [sp, #20]
 8002b2c:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8002b2e:	61c4      	str	r4, [r0, #28]
  
  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8002b30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002b34:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002b38:	6443      	str	r3, [r0, #68]	; 0x44
  
  DMA2D->CR     |= DMA2D_CR_START;   
 8002b3a:	6803      	ldr	r3, [r0, #0]
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6003      	str	r3, [r0, #0]
 
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 8002b42:	6803      	ldr	r3, [r0, #0]
 8002b44:	07db      	lsls	r3, r3, #31
 8002b46:	d4fc      	bmi.n	8002b42 <DMA2D_CopyBuffer+0x32>
  {
  }
}
 8002b48:	bd30      	pop	{r4, r5, pc}
 8002b4a:	bf00      	nop
 8002b4c:	52001000 	.word	0x52001000

08002b50 <CUSTOM_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 8002b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b54:	241c      	movs	r4, #28
 8002b56:	4e0e      	ldr	r6, [pc, #56]	; (8002b90 <CUSTOM_CopyRect+0x40>)
 8002b58:	4344      	muls	r4, r0
 8002b5a:	1935      	adds	r5, r6, r4
 8002b5c:	5936      	ldr	r6, [r6, r4]
 8002b5e:	696f      	ldr	r7, [r5, #20]
 8002b60:	68ec      	ldr	r4, [r5, #12]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002b62:	9d06      	ldr	r5, [sp, #24]
  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b64:	fb02 1104 	mla	r1, r2, r4, r1
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002b68:	fb05 3504 	mla	r5, r5, r4, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002b6c:	fb07 6101 	mla	r1, r7, r1, r6
 8002b70:	fb07 6205 	mla	r2, r7, r5, r6
{
 8002b74:	e9dd ce07 	ldrd	ip, lr, [sp, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002b78:	eba4 080c 	sub.w	r8, r4, ip
 8002b7c:	f8cd e018 	str.w	lr, [sp, #24]
 8002b80:	4663      	mov	r3, ip
 8002b82:	e9cd 8807 	strd	r8, r8, [sp, #28]
}
 8002b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002b8a:	f7ff bfc1 	b.w	8002b10 <DMA2D_CopyBuffer>
 8002b8e:	bf00      	nop
 8002b90:	2402d16c 	.word	0x2402d16c

08002b94 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 8002b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b98:	4605      	mov	r5, r0
 8002b9a:	4688      	mov	r8, r1
 8002b9c:	4617      	mov	r7, r2
 8002b9e:	4699      	mov	r9, r3
 8002ba0:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  /* Data Cahce management */
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8002ba4:	f000 fe5c 	bl	8003860 <GUI_GetDrawMode>
 8002ba8:	2801      	cmp	r0, #1
 8002baa:	d111      	bne.n	8002bd0 <CUSTOM_FillRect+0x3c>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2119      	movs	r1, #25
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f001 ffc8 	bl	8004b46 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8002bb6:	464a      	mov	r2, r9
 8002bb8:	4639      	mov	r1, r7
 8002bba:	4640      	mov	r0, r8
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	f001 faff 	bl	80041c0 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <CUSTOM_FillRect+0xac>)
 8002bc6:	2119      	movs	r1, #25
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
	}
}
 8002bc8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002bcc:	f001 bfbb 	b.w	8004b46 <LCD_SetDevFunc>
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002bd0:	211c      	movs	r1, #28
 8002bd2:	481c      	ldr	r0, [pc, #112]	; (8002c44 <CUSTOM_FillRect+0xb0>)
    xSize = x1 - x0 + 1;
 8002bd4:	eba9 0c08 	sub.w	ip, r9, r8
    ySize = y1 - y0 + 1;
 8002bd8:	1be4      	subs	r4, r4, r7
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002bda:	4369      	muls	r1, r5
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002bdc:	2d00      	cmp	r5, #0
    ySize = y1 - y0 + 1;
 8002bde:	f104 0401 	add.w	r4, r4, #1
    xSize = x1 - x0 + 1;
 8002be2:	f10c 0c01 	add.w	ip, ip, #1
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002be6:	eb00 0e01 	add.w	lr, r0, r1
 8002bea:	5841      	ldr	r1, [r0, r1]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002bec:	b2a4      	uxth	r4, r4
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002bee:	4816      	ldr	r0, [pc, #88]	; (8002c48 <CUSTOM_FillRect+0xb4>)
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002bf0:	f8de 9014 	ldr.w	r9, [lr, #20]
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002bf4:	4d15      	ldr	r5, [pc, #84]	; (8002c4c <CUSTOM_FillRect+0xb8>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002bf6:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002bfa:	e9de 2303 	ldrd	r2, r3, [lr, #12]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002bfe:	f8de e008 	ldr.w	lr, [lr, #8]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c02:	fb03 f302 	mul.w	r3, r3, r2
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002c06:	fb07 8802 	mla	r8, r7, r2, r8
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8002c0a:	eba2 020c 	sub.w	r2, r2, ip
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c0e:	fb09 f303 	mul.w	r3, r9, r3
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002c12:	fb09 f808 	mul.w	r8, r9, r8
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002c16:	6005      	str	r5, [r0, #0]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002c18:	fb0e 8303 	mla	r3, lr, r3, r8
  DMA2D->OCOLR   = ColorIndex;                     
 8002c1c:	6386      	str	r6, [r0, #56]	; 0x38
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002c1e:	440b      	add	r3, r1
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002c20:	bf0c      	ite	eq
 8002c22:	2102      	moveq	r1, #2
 8002c24:	2103      	movne	r1, #3
  DMA2D->OMAR    = (U32)pDst;                      
 8002c26:	63c3      	str	r3, [r0, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 8002c28:	6402      	str	r2, [r0, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 8002c2a:	6341      	str	r1, [r0, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002c2c:	6444      	str	r4, [r0, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START; 
 8002c2e:	6803      	ldr	r3, [r0, #0]
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6003      	str	r3, [r0, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 8002c36:	6803      	ldr	r3, [r0, #0]
 8002c38:	07db      	lsls	r3, r3, #31
 8002c3a:	d4fc      	bmi.n	8002c36 <CUSTOM_FillRect+0xa2>
}
 8002c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c40:	08002b95 	.word	0x08002b95
 8002c44:	2402d16c 	.word	0x2402d16c
 8002c48:	52001000 	.word	0x52001000
 8002c4c:	00030200 	.word	0x00030200

08002c50 <CUSTOM_CopyBuffer>:
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	4616      	mov	r6, r2
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c54:	221c      	movs	r2, #28
 8002c56:	4f0d      	ldr	r7, [pc, #52]	; (8002c8c <CUSTOM_CopyBuffer+0x3c>)
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8002c58:	b085      	sub	sp, #20
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c5a:	4342      	muls	r2, r0
 8002c5c:	18bc      	adds	r4, r7, r2
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 8002c5e:	58bf      	ldr	r7, [r7, r2]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002c60:	2200      	movs	r2, #0
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c62:	6965      	ldr	r5, [r4, #20]
 8002c64:	e9d4 3c03 	ldrd	r3, ip, [r4, #12]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002c68:	e9cd 2201 	strd	r2, r2, [sp, #4]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c6c:	fb0c fe03 	mul.w	lr, ip, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002c70:	f8cd c000 	str.w	ip, [sp]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c74:	fb05 f50e 	mul.w	r5, r5, lr
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002c78:	fb05 7206 	mla	r2, r5, r6, r7
 8002c7c:	fb05 7101 	mla	r1, r5, r1, r7
 8002c80:	f7ff ff46 	bl	8002b10 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8002c84:	60a6      	str	r6, [r4, #8]
}
 8002c86:	b005      	add	sp, #20
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2402d16c 	.word	0x2402d16c

08002c90 <HAL_DMA2D_MspInit>:
  __HAL_RCC_DMA2D_CLK_ENABLE();   
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_DMA2D_MspInit+0x20>)
{  
 8002c92:	b082      	sub	sp, #8
  __HAL_RCC_DMA2D_CLK_ENABLE();   
 8002c94:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c98:	f042 0210 	orr.w	r2, r2, #16
 8002c9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002ca0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	9b01      	ldr	r3, [sp, #4]
}
 8002cac:	b002      	add	sp, #8
 8002cae:	4770      	bx	lr
 8002cb0:	58024400 	.word	0x58024400

08002cb4 <HAL_LTDC_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_LTDC_MspInit+0xd8>)
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002cb6:	4836      	ldr	r0, [pc, #216]	; (8002d90 <HAL_LTDC_MspInit+0xdc>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002cb8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002cbc:	f042 0208 	orr.w	r2, r2, #8
{  
 8002cc0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002cc2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
{  
 8002cc6:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002cc8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ccc:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002cce:	2600      	movs	r6, #0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002cd0:	250e      	movs	r5, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002cd2:	f002 0208 	and.w	r2, r2, #8
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002cd6:	a905      	add	r1, sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002cdc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002ce0:	f042 0210 	orr.w	r2, r2, #16
 8002ce4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002ce8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002cec:	f002 0210 	and.w	r2, r2, #16
 8002cf0:	9201      	str	r2, [sp, #4]
 8002cf2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d04:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002d08:	9202      	str	r2, [sp, #8]
 8002d0a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002d20:	9203      	str	r2, [sp, #12]
 8002d22:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002d34:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	9304      	str	r3, [sp, #16]
 8002d3c:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d42:	e9cd 6407 	strd	r6, r4, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d46:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002d4a:	f7fd ff97 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002d52:	a905      	add	r1, sp, #20
 8002d54:	480f      	ldr	r0, [pc, #60]	; (8002d94 <HAL_LTDC_MspInit+0xe0>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002d56:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d58:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d5c:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002d60:	f7fd ff8c 	bl	8000c7c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002d64:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d66:	a905      	add	r1, sp, #20
 8002d68:	480b      	ldr	r0, [pc, #44]	; (8002d98 <HAL_LTDC_MspInit+0xe4>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002d6a:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d6c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d70:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d74:	f7fd ff82 	bl	8000c7c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8002d78:	4632      	mov	r2, r6
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	2058      	movs	r0, #88	; 0x58
 8002d7e:	f7fd fe9f 	bl	8000ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002d82:	2058      	movs	r0, #88	; 0x58
 8002d84:	f7fd fece 	bl	8000b24 <HAL_NVIC_EnableIRQ>
}
 8002d88:	b00a      	add	sp, #40	; 0x28
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	58022000 	.word	0x58022000
 8002d94:	58022400 	.word	0x58022400
 8002d98:	58022800 	.word	0x58022800

08002d9c <HAL_LTDC_MspDeInit>:
  __HAL_RCC_LTDC_FORCE_RESET();
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_LTDC_MspDeInit+0x1c>)
 8002d9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002da2:	f042 0208 	orr.w	r2, r2, #8
 8002da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002daa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dae:	f022 0208 	bic.w	r2, r2, #8
 8002db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002db6:	4770      	bx	lr
 8002db8:	58024400 	.word	0x58024400

08002dbc <HAL_LTDC_LineEventCallback>:
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8002dbc:	b538      	push	{r3, r4, r5, lr}
    if (layer_prop[layer].pending_buffer >= 0) 
 8002dbe:	4c11      	ldr	r4, [pc, #68]	; (8002e04 <HAL_LTDC_LineEventCallback+0x48>)
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8002dc0:	4605      	mov	r5, r0
    if (layer_prop[layer].pending_buffer >= 0) 
 8002dc2:	6863      	ldr	r3, [r4, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db16      	blt.n	8002df6 <HAL_LTDC_LineEventCallback+0x3a>
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8002dc8:	6863      	ldr	r3, [r4, #4]
 8002dca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8002dce:	434a      	muls	r2, r1
 8002dd0:	6961      	ldr	r1, [r4, #20]
 8002dd2:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 8002dd4:	6822      	ldr	r2, [r4, #0]
 8002dd6:	fb01 2303 	mla	r3, r1, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8002dda:	6802      	ldr	r2, [r0, #0]
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8002ddc:	2000      	movs	r0, #0
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8002dde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8002de2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8002dea:	6861      	ldr	r1, [r4, #4]
 8002dec:	f001 f864 	bl	8003eb8 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	6063      	str	r3, [r4, #4]
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8002df6:	4628      	mov	r0, r5
 8002df8:	2100      	movs	r1, #0
}
 8002dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8002dfe:	f7fe bad3 	b.w	80013a8 <HAL_LTDC_ProgramLineEvent>
 8002e02:	bf00      	nop
 8002e04:	2402d16c 	.word	0x2402d16c

08002e08 <LCD_X_Config>:
{
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_LTDC_DeInit(&hltdc);
 8002e0a:	4d4d      	ldr	r5, [pc, #308]	; (8002f40 <LCD_X_Config+0x138>)
  hltdc.Init.HorizontalSync = 29;
 8002e0c:	2702      	movs	r7, #2
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e0e:	4c4d      	ldr	r4, [pc, #308]	; (8002f44 <LCD_X_Config+0x13c>)
  hltdc.Init.TotalHeigh = 524;
 8002e10:	2600      	movs	r6, #0
  HAL_LTDC_DeInit(&hltdc);
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7fe f90e 	bl	8001034 <HAL_LTDC_DeInit>
  hltdc.Init.HorizontalSync = 29;
 8002e18:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedHBP = 143;
 8002e1a:	228f      	movs	r2, #143	; 0x8f
  hltdc.Init.AccumulatedActiveW = 783;
 8002e1c:	f240 310f 	movw	r1, #783	; 0x30f
  hltdc.Init.TotalWidth = 799;
 8002e20:	f240 301f 	movw	r0, #799	; 0x31f
  periph_clk_init_struct.PLL3.PLL3N = 160;
 8002e24:	f04f 0e05 	mov.w	lr, #5
  hltdc.Init.TotalHeigh = 524;
 8002e28:	86ae      	strh	r6, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002e2a:	f885 6036 	strb.w	r6, [r5, #54]	; 0x36
  periph_clk_init_struct.PLL3.PLL3FRACN = 0;
 8002e2e:	65e6      	str	r6, [r4, #92]	; 0x5c
  periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002e30:	65a6      	str	r6, [r4, #88]	; 0x58
  hltdc.Init.HorizontalSync = 29;
 8002e32:	e9c5 3705 	strd	r3, r7, [r5, #20]
  hltdc.Init.AccumulatedHBP = 143;
 8002e36:	2322      	movs	r3, #34	; 0x22
 8002e38:	e9c5 2307 	strd	r2, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 783;
 8002e3c:	f240 2302 	movw	r3, #514	; 0x202
 8002e40:	e9c5 1309 	strd	r1, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalWidth = 799;
 8002e44:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8002e48:	e9c5 030b 	strd	r0, r3, [r5, #44]	; 0x2c
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e4c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct); 
 8002e50:	f104 001c 	add.w	r0, r4, #28
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e54:	61e3      	str	r3, [r4, #28]
  periph_clk_init_struct.PLL3.PLL3N = 160;
 8002e56:	23a0      	movs	r3, #160	; 0xa0
 8002e58:	e9c4 e310 	strd	lr, r3, [r4, #64]	; 0x40
  periph_clk_init_struct.PLL3.PLL3R = 32;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	6523      	str	r3, [r4, #80]	; 0x50
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8002e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
  periph_clk_init_struct.PLL3.PLL3Q = 2;
 8002e64:	e9c4 7712 	strd	r7, r7, [r4, #72]	; 0x48
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8002e68:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct); 
 8002e6a:	f7ff f8b7 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
  hltdc.Instance = LTDC;
 8002e6e:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <LCD_X_Config+0x140>)
  HAL_LTDC_Init(&hltdc);
 8002e70:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8002e72:	602b      	str	r3, [r5, #0]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002e74:	e9c5 6601 	strd	r6, r6, [r5, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002e78:	e9c5 6603 	strd	r6, r6, [r5, #12]
  HAL_LTDC_Init(&hltdc);
 8002e7c:	f7fe f86e 	bl	8000f5c <HAL_LTDC_Init>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8002e80:	4631      	mov	r1, r6
 8002e82:	4628      	mov	r0, r5
 8002e84:	f7fe fa90 	bl	80013a8 <HAL_LTDC_ProgramLineEvent>
  HAL_LTDC_EnableDither(&hltdc);
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7fe fa0b 	bl	80012a4 <HAL_LTDC_EnableDither>
  hdma2d.Init.Mode         = DMA2D_R2M;
 8002e8e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance          = DMA2D; 
 8002e92:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0x0;     
 8002e94:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
  hdma2d.Init.ColorMode    = DMA2D_INPUT_RGB565;
 8002e98:	e9c4 3737 	strd	r3, r7, [r4, #220]	; 0xdc
  hdma2d.Instance          = DMA2D; 
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <LCD_X_Config+0x144>)
 8002e9e:	f840 3fd8 	str.w	r3, [r0, #216]!
  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002ea2:	f7fd fead 	bl	8000c00 <HAL_DMA2D_Init>
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	b100      	cbz	r0, 8002eac <LCD_X_Config+0xa4>
 8002eaa:	e7fe      	b.n	8002eaa <LCD_X_Config+0xa2>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8002eac:	2103      	movs	r1, #3
 8002eae:	f001 f817 	bl	8003ee0 <GUI_MULTIBUF_ConfigEx>
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	462a      	mov	r2, r5
 8002eb6:	4926      	ldr	r1, [pc, #152]	; (8002f50 <LCD_X_Config+0x148>)
 8002eb8:	4826      	ldr	r0, [pc, #152]	; (8002f54 <LCD_X_Config+0x14c>)
 8002eba:	f000 ffc5 	bl	8003e48 <GUI_DEVICE_CreateAndLink>
  if (LCD_GetSwapXYEx(0)) {
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f001 fd42 	bl	8004948 <LCD_GetSwapXYEx>
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	b370      	cbz	r0, 8002f26 <LCD_X_Config+0x11e>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8002ec8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002ecc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f001 fe68 	bl	8004ba6 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8002ed6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002eda:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002ede:	4628      	mov	r0, r5
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002ee0:	f001 fe8f 	bl	8004c02 <LCD_SetVSizeEx>
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <LCD_X_Config+0x148>)
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002ee6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002eea:	2000      	movs	r0, #0
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002eec:	61a3      	str	r3, [r4, #24]
    layer_prop[i].pending_buffer = -1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002ef2:	6021      	str	r1, [r4, #0]
    layer_prop[i].pending_buffer = -1;
 8002ef4:	6063      	str	r3, [r4, #4]
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002ef6:	f001 fe6e 	bl	8004bd6 <LCD_SetVRAMAddrEx>
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002efa:	2000      	movs	r0, #0
 8002efc:	f001 fd18 	bl	8004930 <LCD_GetBitsPerPixelEx>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <LCD_X_Config+0x150>)
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002f02:	10c0      	asrs	r0, r0, #3
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002f04:	2121      	movs	r1, #33	; 0x21
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002f06:	6160      	str	r0, [r4, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f001 fe1c 	bl	8004b46 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <LCD_X_Config+0x154>)
 8002f10:	2123      	movs	r1, #35	; 0x23
 8002f12:	2000      	movs	r0, #0
 8002f14:	f001 fe17 	bl	8004b46 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002f18:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <LCD_X_Config+0x158>)
 8002f1a:	2119      	movs	r1, #25
 8002f1c:	2000      	movs	r0, #0
}
 8002f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002f22:	f001 be10 	b.w	8004b46 <LCD_SetDevFunc>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8002f26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f2a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002f2e:	f001 fe3a 	bl	8004ba6 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002f32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f36:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	e7d0      	b.n	8002ee0 <LCD_X_Config+0xd8>
 8002f3e:	bf00      	nop
 8002f40:	2402d4c4 	.word	0x2402d4c4
 8002f44:	2402d16c 	.word	0x2402d16c
 8002f48:	50001000 	.word	0x50001000
 8002f4c:	52001000 	.word	0x52001000
 8002f50:	08008c70 	.word	0x08008c70
 8002f54:	0800902c 	.word	0x0800902c
 8002f58:	08002c51 	.word	0x08002c51
 8002f5c:	08002b51 	.word	0x08002b51
 8002f60:	08002b95 	.word	0x08002b95

08002f64 <LCD_X_DisplayDriver>:
  switch (Cmd) 
 8002f64:	3901      	subs	r1, #1
{
 8002f66:	b530      	push	{r4, r5, lr}
 8002f68:	4604      	mov	r4, r0
 8002f6a:	b08f      	sub	sp, #60	; 0x3c
 8002f6c:	4615      	mov	r5, r2
  switch (Cmd) 
 8002f6e:	290d      	cmp	r1, #13
 8002f70:	f200 80ab 	bhi.w	80030ca <LCD_X_DisplayDriver+0x166>
 8002f74:	e8df f001 	tbb	[pc, r1]
 8002f78:	4c35a907 	.word	0x4c35a907
 8002f7c:	737a5a53 	.word	0x737a5a53
 8002f80:	90a98a60 	.word	0x90a98a60
 8002f84:	459a      	.short	0x459a
  if (LayerIndex < GUI_NUM_LAYERS) 
 8002f86:	bb40      	cbnz	r0, 8002fda <LCD_X_DisplayDriver+0x76>
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002f88:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f8c:	2102      	movs	r1, #2
    layer_cfg.WindowX1 = XSIZE_PHYS;
 8002f8e:	f44f 7220 	mov.w	r2, #640	; 0x280
    layer_cfg.WindowX0 = 0;
 8002f92:	9001      	str	r0, [sp, #4]
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8002f94:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    layer_cfg.Backcolor.Green = 0;
 8002f98:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002f9c:	e9cd 3104 	strd	r3, r1, [sp, #16]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8002fa0:	494b      	ldr	r1, [pc, #300]	; (80030d0 <LCD_X_DisplayDriver+0x16c>)
 8002fa2:	6809      	ldr	r1, [r1, #0]
 8002fa4:	910a      	str	r1, [sp, #40]	; 0x28
    layer_cfg.Alpha = 255;
 8002fa6:	21ff      	movs	r1, #255	; 0xff
    layer_cfg.WindowY0 = 0;
 8002fa8:	e9cd 2002 	strd	r2, r0, [sp, #8]
    layer_cfg.Alpha0 = 0;
 8002fac:	e9cd 1006 	strd	r1, r0, [sp, #24]
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fb0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002fb4:	2107      	movs	r1, #7
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8002fb6:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fba:	e9cd 0108 	strd	r0, r1, [sp, #32]
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	a901      	add	r1, sp, #4
 8002fc2:	4844      	ldr	r0, [pc, #272]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8002fc4:	f7fe f8a1 	bl	800110a <HAL_LTDC_ConfigLayer>
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8) 
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f001 fcb1 	bl	8004930 <LCD_GetBitsPerPixelEx>
 8002fce:	2808      	cmp	r0, #8
 8002fd0:	dc03      	bgt.n	8002fda <LCD_X_DisplayDriver+0x76>
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	483f      	ldr	r0, [pc, #252]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8002fd6:	f7fe f94d 	bl	8001274 <HAL_LTDC_EnableCLUT>
  int r = 0;
 8002fda:	2500      	movs	r5, #0
}
 8002fdc:	4628      	mov	r0, r5
 8002fde:	b00f      	add	sp, #60	; 0x3c
 8002fe0:	bd30      	pop	{r4, r5, pc}
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002fe2:	231c      	movs	r3, #28
 8002fe4:	4a3a      	ldr	r2, [pc, #232]	; (80030d0 <LCD_X_DisplayDriver+0x16c>)
 8002fe6:	686d      	ldr	r5, [r5, #4]
 8002fe8:	4343      	muls	r3, r0
 8002fea:	18d0      	adds	r0, r2, r3
 8002fec:	58d3      	ldr	r3, [r2, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002fee:	4622      	mov	r2, r4
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002ff0:	68c1      	ldr	r1, [r0, #12]
 8002ff2:	6940      	ldr	r0, [r0, #20]
 8002ff4:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002ff6:	fb00 3101 	mla	r1, r0, r1, r3
 8002ffa:	4836      	ldr	r0, [pc, #216]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8002ffc:	f7fe f9b3 	bl	8001366 <HAL_LTDC_SetAddress>
 8003000:	e7eb      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8003002:	4933      	ldr	r1, [pc, #204]	; (80030d0 <LCD_X_DisplayDriver+0x16c>)
 8003004:	231c      	movs	r3, #28
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	fb03 1400 	mla	r4, r3, r0, r1
 800300c:	6062      	str	r2, [r4, #4]
 800300e:	e7e4      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8003010:	4603      	mov	r3, r0
 8003012:	2201      	movs	r2, #1
 8003014:	4629      	mov	r1, r5
 8003016:	482f      	ldr	r0, [pc, #188]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8003018:	f7fe f8bd 	bl	8001196 <HAL_LTDC_ConfigCLUT>
 800301c:	e7dd      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    __HAL_LTDC_ENABLE(&hltdc);
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	6993      	ldr	r3, [r2, #24]
 8003024:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc);
 8003028:	6193      	str	r3, [r2, #24]
 800302a:	e7d6      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	6993      	ldr	r3, [r2, #24]
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	e7f7      	b.n	8003028 <LCD_X_DisplayDriver+0xc4>
 8003038:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 800303a:	01c4      	lsls	r4, r0, #7
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 800303c:	6829      	ldr	r1, [r5, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2901      	cmp	r1, #1
 8003042:	f102 0384 	add.w	r3, r2, #132	; 0x84
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8003046:	5919      	ldr	r1, [r3, r4]
 8003048:	bf0c      	ite	eq
 800304a:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 800304e:	f021 0101 	bicne.w	r1, r1, #1
 8003052:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8003054:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6253      	str	r3, [r2, #36]	; 0x24
 800305c:	e7bd      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 800305e:	4603      	mov	r3, r0
 8003060:	e9d2 1200 	ldrd	r1, r2, [r2]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003064:	481b      	ldr	r0, [pc, #108]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8003066:	f7fe f935 	bl	80012d4 <HAL_LTDC_SetWindowPosition>
 800306a:	e7b6      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 800306c:	aa01      	add	r2, sp, #4
 800306e:	4669      	mov	r1, sp
 8003070:	f000 ff5a 	bl	8003f28 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <LCD_X_DisplayDriver+0x16c>)
 8003076:	231c      	movs	r3, #28
 8003078:	fb03 2304 	mla	r3, r3, r4, r2
 800307c:	682a      	ldr	r2, [r5, #0]
 800307e:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8003080:	686a      	ldr	r2, [r5, #4]
 8003082:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003084:	4623      	mov	r3, r4
 8003086:	e9dd 1200 	ldrd	r1, r2, [sp]
 800308a:	e7eb      	b.n	8003064 <LCD_X_DisplayDriver+0x100>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800308c:	4602      	mov	r2, r0
 800308e:	6829      	ldr	r1, [r5, #0]
 8003090:	4810      	ldr	r0, [pc, #64]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 8003092:	f7fe f948 	bl	8001326 <HAL_LTDC_SetAlpha>
 8003096:	e7a0      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8003098:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800309a:	4601      	mov	r1, r0
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800309e:	b115      	cbz	r5, 80030a6 <LCD_X_DisplayDriver+0x142>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80030a0:	f7fe f8b8 	bl	8001214 <HAL_LTDC_EnableColorKeying>
 80030a4:	e799      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 80030a6:	f7fe f8cd 	bl	8001244 <HAL_LTDC_DisableColorKeying>
 80030aa:	e797      	b.n	8002fdc <LCD_X_DisplayDriver+0x78>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80030ac:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80030ae:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80030b0:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80030b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80030b8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80030bc:	4311      	orrs	r1, r2
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 80030be:	4602      	mov	r2, r0
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <LCD_X_DisplayDriver+0x170>)
 80030c2:	4319      	orrs	r1, r3
 80030c4:	f7fe f84a 	bl	800115c <HAL_LTDC_ConfigColorKeying>
 80030c8:	e787      	b.n	8002fda <LCD_X_DisplayDriver+0x76>
    r = -1;
 80030ca:	f04f 35ff 	mov.w	r5, #4294967295
  return r;
 80030ce:	e785      	b.n	8002fdc <LCD_X_DisplayDriver+0x78>
 80030d0:	2402d16c 	.word	0x2402d16c
 80030d4:	2402d4c4 	.word	0x2402d4c4

080030d8 <LCD_Index2Color_M565>:
 80030d8:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <LCD_Index2Color_M565+0x24>)
 80030de:	5cd1      	ldrb	r1, [r2, r3]
 80030e0:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80030e4:	4a06      	ldr	r2, [pc, #24]	; (8003100 <LCD_Index2Color_M565+0x28>)
 80030e6:	f000 001f 	and.w	r0, r0, #31
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	5c10      	ldrb	r0, [r2, r0]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80030f4:	4418      	add	r0, r3
 80030f6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80030fa:	4770      	bx	lr
 80030fc:	08008fb0 	.word	0x08008fb0
 8003100:	08008ff0 	.word	0x08008ff0

08003104 <_Color2Index_M565>:
 8003104:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <_Color2Index_M565+0x20>)
 800310a:	5cd1      	ldrb	r1, [r2, r3]
 800310c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003110:	4a05      	ldr	r2, [pc, #20]	; (8003128 <_Color2Index_M565+0x24>)
 8003112:	b2c0      	uxtb	r0, r0
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	5c10      	ldrb	r0, [r2, r0]
 8003118:	02db      	lsls	r3, r3, #11
 800311a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800311e:	4418      	add	r0, r3
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	08008cb0 	.word	0x08008cb0
 8003128:	08008db0 	.word	0x08008db0

0800312c <_GetIndexMask_M565>:
 800312c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003130:	4770      	bx	lr
	...

08003134 <_Color2IndexBulk>:
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	f8df e050 	ldr.w	lr, [pc, #80]	; 8003188 <_Color2IndexBulk+0x54>
 800313a:	4606      	mov	r6, r0
 800313c:	460d      	mov	r5, r1
 800313e:	4614      	mov	r4, r2
 8003140:	f8de e000 	ldr.w	lr, [lr]
 8003144:	461f      	mov	r7, r3
 8003146:	f1be 0f00 	cmp.w	lr, #0
 800314a:	d003      	beq.n	8003154 <_Color2IndexBulk+0x20>
 800314c:	46f4      	mov	ip, lr
 800314e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003152:	4760      	bx	ip
 8003154:	f8df e034 	ldr.w	lr, [pc, #52]	; 800318c <_Color2IndexBulk+0x58>
 8003158:	490a      	ldr	r1, [pc, #40]	; (8003184 <_Color2IndexBulk+0x50>)
 800315a:	f856 2b04 	ldr.w	r2, [r6], #4
 800315e:	3c01      	subs	r4, #1
 8003160:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003164:	f81e 0003 	ldrb.w	r0, [lr, r3]
 8003168:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	5c8a      	ldrb	r2, [r1, r2]
 8003172:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8003176:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 800317a:	4413      	add	r3, r2
 800317c:	802b      	strh	r3, [r5, #0]
 800317e:	443d      	add	r5, r7
 8003180:	d1eb      	bne.n	800315a <_Color2IndexBulk+0x26>
 8003182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003184:	08008db0 	.word	0x08008db0
 8003188:	2402d2ac 	.word	0x2402d2ac
 800318c:	08008cb0 	.word	0x08008cb0

08003190 <_Index2ColorBulk>:
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	4e16      	ldr	r6, [pc, #88]	; (80031ec <_Index2ColorBulk+0x5c>)
 8003194:	4686      	mov	lr, r0
 8003196:	460f      	mov	r7, r1
 8003198:	4614      	mov	r4, r2
 800319a:	6876      	ldr	r6, [r6, #4]
 800319c:	461d      	mov	r5, r3
 800319e:	b11e      	cbz	r6, 80031a8 <_Index2ColorBulk+0x18>
 80031a0:	46b4      	mov	ip, r6
 80031a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80031a6:	4760      	bx	ip
 80031a8:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80031ac:	1e50      	subs	r0, r2, #1
 80031ae:	4e10      	ldr	r6, [pc, #64]	; (80031f0 <_Index2ColorBulk+0x60>)
 80031b0:	3901      	subs	r1, #1
 80031b2:	fb03 e000 	mla	r0, r3, r0, lr
 80031b6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80031ba:	4f0e      	ldr	r7, [pc, #56]	; (80031f4 <_Index2ColorBulk+0x64>)
 80031bc:	8802      	ldrh	r2, [r0, #0]
 80031be:	3c01      	subs	r4, #1
 80031c0:	eba0 0005 	sub.w	r0, r0, r5
 80031c4:	ea4f 23d2 	mov.w	r3, r2, lsr #11
 80031c8:	f816 e003 	ldrb.w	lr, [r6, r3]
 80031cc:	f002 031f 	and.w	r3, r2, #31
 80031d0:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80031d4:	5cf3      	ldrb	r3, [r6, r3]
 80031d6:	5cba      	ldrb	r2, [r7, r2]
 80031d8:	eb03 430e 	add.w	r3, r3, lr, lsl #16
 80031dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	f841 3904 	str.w	r3, [r1], #-4
 80031e8:	d1e8      	bne.n	80031bc <_Index2ColorBulk+0x2c>
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ec:	2402d2ac 	.word	0x2402d2ac
 80031f0:	08008ff0 	.word	0x08008ff0
 80031f4:	08008fb0 	.word	0x08008fb0

080031f8 <_PushFreeBlock>:
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <_PushFreeBlock+0x20>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	3201      	adds	r2, #1
 80031fe:	b510      	push	{r4, lr}
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003204:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003206:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800320a:	604c      	str	r4, [r1, #4]
 800320c:	2100      	movs	r1, #0
 800320e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8003212:	6258      	str	r0, [r3, #36]	; 0x24
 8003214:	bd10      	pop	{r4, pc}
 8003216:	bf00      	nop
 8003218:	2402d56c 	.word	0x2402d56c

0800321c <_RemoveFreeBlock>:
 800321c:	b510      	push	{r4, lr}
 800321e:	230f      	movs	r3, #15
 8003220:	6844      	ldr	r4, [r0, #4]
 8003222:	490d      	ldr	r1, [pc, #52]	; (8003258 <_RemoveFreeBlock+0x3c>)
 8003224:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8003228:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800322a:	4294      	cmp	r4, r2
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <_RemoveFreeBlock+0x3c>)
 800322e:	d203      	bcs.n	8003238 <_RemoveFreeBlock+0x1c>
 8003230:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003234:	d2f6      	bcs.n	8003224 <_RemoveFreeBlock+0x8>
 8003236:	bd10      	pop	{r4, pc}
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d80c      	bhi.n	8003256 <_RemoveFreeBlock+0x3a>
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	1b09      	subs	r1, r1, r4
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	6881      	ldr	r1, [r0, #8]
 8003244:	68c0      	ldr	r0, [r0, #12]
 8003246:	b101      	cbz	r1, 800324a <_RemoveFreeBlock+0x2e>
 8003248:	6048      	str	r0, [r1, #4]
 800324a:	b108      	cbz	r0, 8003250 <_RemoveFreeBlock+0x34>
 800324c:	6001      	str	r1, [r0, #0]
 800324e:	bd10      	pop	{r4, pc}
 8003250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003254:	6459      	str	r1, [r3, #68]	; 0x44
 8003256:	bd10      	pop	{r4, pc}
 8003258:	2402d56c 	.word	0x2402d56c

0800325c <_AddFreeMemory>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	4e27      	ldr	r6, [pc, #156]	; (80032fc <_AddFreeMemory+0xa0>)
 8003260:	4605      	mov	r5, r0
 8003262:	1808      	adds	r0, r1, r0
 8003264:	460c      	mov	r4, r1
 8003266:	68f3      	ldr	r3, [r6, #12]
 8003268:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800326a:	3b01      	subs	r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	4283      	cmp	r3, r0
 8003270:	d305      	bcc.n	800327e <_AddFreeMemory+0x22>
 8003272:	594b      	ldr	r3, [r1, r5]
 8003274:	b91b      	cbnz	r3, 800327e <_AddFreeMemory+0x22>
 8003276:	6843      	ldr	r3, [r0, #4]
 8003278:	441d      	add	r5, r3
 800327a:	f7ff ffcf 	bl	800321c <_RemoveFreeBlock>
 800327e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003280:	429c      	cmp	r4, r3
 8003282:	d90a      	bls.n	800329a <_AddFreeMemory+0x3e>
 8003284:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8003288:	1be7      	subs	r7, r4, r7
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b92b      	cbnz	r3, 800329a <_AddFreeMemory+0x3e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	463c      	mov	r4, r7
 8003292:	4638      	mov	r0, r7
 8003294:	441d      	add	r5, r3
 8003296:	f7ff ffc1 	bl	800321c <_RemoveFreeBlock>
 800329a:	230f      	movs	r3, #15
 800329c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80032a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032a2:	4295      	cmp	r5, r2
 80032a4:	d203      	bcs.n	80032ae <_AddFreeMemory+0x52>
 80032a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80032aa:	d2f7      	bcs.n	800329c <_AddFreeMemory+0x40>
 80032ac:	e023      	b.n	80032f6 <_AddFreeMemory+0x9a>
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	d821      	bhi.n	80032f6 <_AddFreeMemory+0x9a>
 80032b2:	3308      	adds	r3, #8
 80032b4:	1960      	adds	r0, r4, r5
 80032b6:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80032ba:	6851      	ldr	r1, [r2, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	6124      	str	r4, [r4, #16]
 80032c0:	60a1      	str	r1, [r4, #8]
 80032c2:	e884 0024 	stmia.w	r4, {r2, r5}
 80032c6:	f840 5c04 	str.w	r5, [r0, #-4]
 80032ca:	f104 0008 	add.w	r0, r4, #8
 80032ce:	b101      	cbz	r1, 80032d2 <_AddFreeMemory+0x76>
 80032d0:	6048      	str	r0, [r1, #4]
 80032d2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80032d6:	60a1      	str	r1, [r4, #8]
 80032d8:	60e2      	str	r2, [r4, #12]
 80032da:	6058      	str	r0, [r3, #4]
 80032dc:	6833      	ldr	r3, [r6, #0]
 80032de:	4907      	ldr	r1, [pc, #28]	; (80032fc <_AddFreeMemory+0xa0>)
 80032e0:	18ea      	adds	r2, r5, r3
 80032e2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80032e6:	6032      	str	r2, [r6, #0]
 80032e8:	b92b      	cbnz	r3, 80032f6 <_AddFreeMemory+0x9a>
 80032ea:	68cb      	ldr	r3, [r1, #12]
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	688a      	ldr	r2, [r1, #8]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf88      	it	hi
 80032f4:	608b      	strhi	r3, [r1, #8]
 80032f6:	4628      	mov	r0, r5
 80032f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2402d56c 	.word	0x2402d56c

08003300 <_RemoveHoles>:
 8003300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003304:	4f23      	ldr	r7, [pc, #140]	; (8003394 <_RemoveHoles+0x94>)
 8003306:	4683      	mov	fp, r0
 8003308:	68fe      	ldr	r6, [r7, #12]
 800330a:	46b8      	mov	r8, r7
 800330c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800330e:	3e01      	subs	r6, #1
 8003310:	4426      	add	r6, r4
 8003312:	e894 0028 	ldmia.w	r4, {r3, r5}
 8003316:	bb9b      	cbnz	r3, 8003380 <_RemoveHoles+0x80>
 8003318:	1961      	adds	r1, r4, r5
 800331a:	428e      	cmp	r6, r1
 800331c:	d930      	bls.n	8003380 <_RemoveHoles+0x80>
 800331e:	f854 a005 	ldr.w	sl, [r4, r5]
 8003322:	f1ba 0f00 	cmp.w	sl, #0
 8003326:	d02b      	beq.n	8003380 <_RemoveHoles+0x80>
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d126      	bne.n	8003380 <_RemoveHoles+0x80>
 8003332:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8003336:	4620      	mov	r0, r4
 8003338:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	9101      	str	r1, [sp, #4]
 8003340:	f7ff ff6c 	bl	800321c <_RemoveFreeBlock>
 8003344:	9901      	ldr	r1, [sp, #4]
 8003346:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800334a:	6808      	ldr	r0, [r1, #0]
 800334c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003350:	4620      	mov	r0, r4
 8003352:	6054      	str	r4, [r2, #4]
 8003354:	464a      	mov	r2, r9
 8003356:	f004 fe2e 	bl	8007fb6 <memmove>
 800335a:	9b00      	ldr	r3, [sp, #0]
 800335c:	eb04 0109 	add.w	r1, r4, r9
 8003360:	4628      	mov	r0, r5
 8003362:	459a      	cmp	sl, r3
 8003364:	bf02      	ittt	eq
 8003366:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 800336a:	1b5b      	subeq	r3, r3, r5
 800336c:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 8003370:	f7ff ff74 	bl	800325c <_AddFreeMemory>
 8003374:	f1bb 0f00 	cmp.w	fp, #0
 8003378:	d001      	beq.n	800337e <_RemoveHoles+0x7e>
 800337a:	4558      	cmp	r0, fp
 800337c:	d205      	bcs.n	800338a <_RemoveHoles+0x8a>
 800337e:	464d      	mov	r5, r9
 8003380:	442c      	add	r4, r5
 8003382:	42a6      	cmp	r6, r4
 8003384:	d8c5      	bhi.n	8003312 <_RemoveHoles+0x12>
 8003386:	2001      	movs	r0, #1
 8003388:	e000      	b.n	800338c <_RemoveHoles+0x8c>
 800338a:	2000      	movs	r0, #0
 800338c:	b003      	add	sp, #12
 800338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003392:	bf00      	nop
 8003394:	2402d56c 	.word	0x2402d56c

08003398 <GUI_ALLOC_FreeFixedBlock>:
 8003398:	b128      	cbz	r0, 80033a6 <GUI_ALLOC_FreeFixedBlock+0xe>
 800339a:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800339c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339e:	6002      	str	r2, [r0, #0]
 80033a0:	b102      	cbz	r2, 80033a4 <GUI_ALLOC_FreeFixedBlock+0xc>
 80033a2:	6050      	str	r0, [r2, #4]
 80033a4:	63d8      	str	r0, [r3, #60]	; 0x3c
 80033a6:	4770      	bx	lr
 80033a8:	2402d56c 	.word	0x2402d56c

080033ac <GUI_ALLOC_h2p>:
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <GUI_ALLOC_h2p+0x10>)
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80033b4:	6840      	ldr	r0, [r0, #4]
 80033b6:	3008      	adds	r0, #8
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	2402d56c 	.word	0x2402d56c

080033c0 <GUI_ALLOC_LockH>:
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <GUI_ALLOC_LockH+0x18>)
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	3201      	adds	r2, #1
 80033c6:	61da      	str	r2, [r3, #28]
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 80033ce:	3301      	adds	r3, #1
 80033d0:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 80033d4:	f7ff bfea 	b.w	80033ac <GUI_ALLOC_h2p>
 80033d8:	2402d56c 	.word	0x2402d56c

080033dc <GUI_ALLOC_UnlockH>:
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	490a      	ldr	r1, [pc, #40]	; (8003408 <GUI_ALLOC_UnlockH+0x2c>)
 80033e0:	b530      	push	{r4, r5, lr}
 80033e2:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80033e6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80033e8:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d903      	bls.n	80033f8 <GUI_ALLOC_UnlockH+0x1c>
 80033f0:	69ca      	ldr	r2, [r1, #28]
 80033f2:	b10a      	cbz	r2, 80033f8 <GUI_ALLOC_UnlockH+0x1c>
 80033f4:	3a01      	subs	r2, #1
 80033f6:	61ca      	str	r2, [r1, #28]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 80033fe:	2300      	movs	r3, #0
 8003400:	6003      	str	r3, [r0, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	bd30      	pop	{r4, r5, pc}
 8003406:	bf00      	nop
 8003408:	2402d56c 	.word	0x2402d56c

0800340c <GUI_ALLOC_AssignMemory>:
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <GUI_ALLOC_AssignMemory+0xc>)
 800340e:	f021 0103 	bic.w	r1, r1, #3
 8003412:	6018      	str	r0, [r3, #0]
 8003414:	6059      	str	r1, [r3, #4]
 8003416:	4770      	bx	lr
 8003418:	2402d2b4 	.word	0x2402d2b4

0800341c <GUI_ALLOC_Free>:
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	b160      	cbz	r0, 800343c <GUI_ALLOC_Free+0x20>
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <GUI_ALLOC_Free+0x24>)
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	6848      	ldr	r0, [r1, #4]
 800342e:	f7ff ff15 	bl	800325c <_AddFreeMemory>
 8003432:	4620      	mov	r0, r4
 8003434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003438:	f7ff bede 	b.w	80031f8 <_PushFreeBlock>
 800343c:	bd10      	pop	{r4, pc}
 800343e:	bf00      	nop
 8003440:	2402d56c 	.word	0x2402d56c

08003444 <_EnlargeBlocks>:
 8003444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003448:	4c22      	ldr	r4, [pc, #136]	; (80034d4 <_EnlargeBlocks+0x90>)
 800344a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800344c:	b93b      	cbnz	r3, 800345e <_EnlargeBlocks+0x1a>
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <_EnlargeBlocks+0x94>)
 8003450:	689d      	ldr	r5, [r3, #8]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	3508      	adds	r5, #8
 8003456:	fbb3 f5f5 	udiv	r5, r3, r5
 800345a:	3502      	adds	r5, #2
 800345c:	e003      	b.n	8003466 <_EnlargeBlocks+0x22>
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	1d1d      	adds	r5, r3, #4
 8003462:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 8003466:	00e8      	lsls	r0, r5, #3
 8003468:	f000 f8c0 	bl	80035ec <_Alloc>
 800346c:	4680      	mov	r8, r0
 800346e:	b360      	cbz	r0, 80034ca <_EnlargeBlocks+0x86>
 8003470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003472:	6922      	ldr	r2, [r4, #16]
 8003474:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8003478:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800347a:	00d2      	lsls	r2, r2, #3
 800347c:	685e      	ldr	r6, [r3, #4]
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <_EnlargeBlocks+0x98>)
 8003480:	3608      	adds	r6, #8
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4630      	mov	r0, r6
 8003486:	4798      	blx	r3
 8003488:	6922      	ldr	r2, [r4, #16]
 800348a:	1e69      	subs	r1, r5, #1
 800348c:	6366      	str	r6, [r4, #52]	; 0x34
 800348e:	4613      	mov	r3, r2
 8003490:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8003494:	428b      	cmp	r3, r1
 8003496:	d205      	bcs.n	80034a4 <_EnlargeBlocks+0x60>
 8003498:	3301      	adds	r3, #1
 800349a:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800349e:	f840 3c04 	str.w	r3, [r0, #-4]
 80034a2:	e7f7      	b.n	8003494 <_EnlargeBlocks+0x50>
 80034a4:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80034a8:	f04f 0800 	mov.w	r8, #0
 80034ac:	4638      	mov	r0, r7
 80034ae:	f8c6 8004 	str.w	r8, [r6, #4]
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	6262      	str	r2, [r4, #36]	; 0x24
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	6125      	str	r5, [r4, #16]
 80034ba:	442b      	add	r3, r5
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	b13f      	cbz	r7, 80034d0 <_EnlargeBlocks+0x8c>
 80034c0:	f7ff ffac 	bl	800341c <GUI_ALLOC_Free>
 80034c4:	4640      	mov	r0, r8
 80034c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ca:	2001      	movs	r0, #1
 80034cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d4:	2402d56c 	.word	0x2402d56c
 80034d8:	2402d2b4 	.word	0x2402d2b4
 80034dc:	2400002c 	.word	0x2400002c

080034e0 <_InitOnce>:
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <_InitOnce+0x60>)
 80034e2:	b570      	push	{r4, r5, r6, lr}
 80034e4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80034e8:	bb43      	cbnz	r3, 800353c <_InitOnce+0x5c>
 80034ea:	2301      	movs	r3, #1
 80034ec:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <_InitOnce+0x64>)
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	b911      	cbnz	r1, 80034fc <_InitOnce+0x1c>
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	0889      	lsrs	r1, r1, #2
 80034fa:	6099      	str	r1, [r3, #8]
 80034fc:	215a      	movs	r1, #90	; 0x5a
 80034fe:	2610      	movs	r6, #16
 8003500:	6211      	str	r1, [r2, #32]
 8003502:	2100      	movs	r1, #0
 8003504:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8003508:	fa06 f501 	lsl.w	r5, r6, r1
 800350c:	3101      	adds	r1, #1
 800350e:	4c0c      	ldr	r4, [pc, #48]	; (8003540 <_InitOnce+0x60>)
 8003510:	6405      	str	r5, [r0, #64]	; 0x40
 8003512:	2910      	cmp	r1, #16
 8003514:	d1f6      	bne.n	8003504 <_InitOnce+0x24>
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	2501      	movs	r5, #1
 800351a:	6858      	ldr	r0, [r3, #4]
 800351c:	2302      	movs	r3, #2
 800351e:	63a1      	str	r1, [r4, #56]	; 0x38
 8003520:	6123      	str	r3, [r4, #16]
 8003522:	f1a0 0314 	sub.w	r3, r0, #20
 8003526:	60e0      	str	r0, [r4, #12]
 8003528:	440b      	add	r3, r1
 800352a:	6363      	str	r3, [r4, #52]	; 0x34
 800352c:	605d      	str	r5, [r3, #4]
 800352e:	6265      	str	r5, [r4, #36]	; 0x24
 8003530:	6065      	str	r5, [r4, #4]
 8003532:	f7ff fe93 	bl	800325c <_AddFreeMemory>
 8003536:	f7ff ff85 	bl	8003444 <_EnlargeBlocks>
 800353a:	6325      	str	r5, [r4, #48]	; 0x30
 800353c:	bd70      	pop	{r4, r5, r6, pc}
 800353e:	bf00      	nop
 8003540:	2402d56c 	.word	0x2402d56c
 8003544:	2402d2b4 	.word	0x2402d2b4

08003548 <GUI_ALLOC_GetFixedBlock>:
 8003548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354c:	4607      	mov	r7, r0
 800354e:	4e26      	ldr	r6, [pc, #152]	; (80035e8 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8003550:	f7ff ffc6 	bl	80034e0 <_InitOnce>
 8003554:	3703      	adds	r7, #3
 8003556:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8003558:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800355a:	f027 0703 	bic.w	r7, r7, #3
 800355e:	4614      	mov	r4, r2
 8003560:	3704      	adds	r7, #4
 8003562:	4287      	cmp	r7, r0
 8003564:	bf38      	it	cc
 8003566:	4607      	movcc	r7, r0
 8003568:	b134      	cbz	r4, 8003578 <GUI_ALLOC_GetFixedBlock+0x30>
 800356a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800356e:	429f      	cmp	r7, r3
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	d02c      	beq.n	80035ce <GUI_ALLOC_GetFixedBlock+0x86>
 8003574:	461c      	mov	r4, r3
 8003576:	e7f7      	b.n	8003568 <GUI_ALLOC_GetFixedBlock+0x20>
 8003578:	68f3      	ldr	r3, [r6, #12]
 800357a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800357c:	eb02 0803 	add.w	r8, r2, r3
 8003580:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8003584:	ebc5 0508 	rsb	r5, r5, r8
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	b133      	cbz	r3, 800359a <GUI_ALLOC_GetFixedBlock+0x52>
 800358c:	4620      	mov	r0, r4
 800358e:	f7ff feb7 	bl	8003300 <_RemoveHoles>
 8003592:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8003596:	ebc5 0508 	rsb	r5, r5, r8
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	bb0b      	cbnz	r3, 80035e2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800359e:	686b      	ldr	r3, [r5, #4]
 80035a0:	429f      	cmp	r7, r3
 80035a2:	dc1e      	bgt.n	80035e2 <GUI_ALLOC_GetFixedBlock+0x9a>
 80035a4:	4628      	mov	r0, r5
 80035a6:	1d1c      	adds	r4, r3, #4
 80035a8:	f7ff fe38 	bl	800321c <_RemoveFreeBlock>
 80035ac:	68f3      	ldr	r3, [r6, #12]
 80035ae:	6868      	ldr	r0, [r5, #4]
 80035b0:	1be4      	subs	r4, r4, r7
 80035b2:	1bdb      	subs	r3, r3, r7
 80035b4:	1bc0      	subs	r0, r0, r7
 80035b6:	442c      	add	r4, r5
 80035b8:	60f3      	str	r3, [r6, #12]
 80035ba:	6973      	ldr	r3, [r6, #20]
 80035bc:	443b      	add	r3, r7
 80035be:	6173      	str	r3, [r6, #20]
 80035c0:	d002      	beq.n	80035c8 <GUI_ALLOC_GetFixedBlock+0x80>
 80035c2:	4629      	mov	r1, r5
 80035c4:	f7ff fe4a 	bl	800325c <_AddFreeMemory>
 80035c8:	f844 7c04 	str.w	r7, [r4, #-4]
 80035cc:	e009      	b.n	80035e2 <GUI_ALLOC_GetFixedBlock+0x9a>
 80035ce:	b10b      	cbz	r3, 80035d4 <GUI_ALLOC_GetFixedBlock+0x8c>
 80035d0:	6861      	ldr	r1, [r4, #4]
 80035d2:	6059      	str	r1, [r3, #4]
 80035d4:	6861      	ldr	r1, [r4, #4]
 80035d6:	b101      	cbz	r1, 80035da <GUI_ALLOC_GetFixedBlock+0x92>
 80035d8:	600b      	str	r3, [r1, #0]
 80035da:	42a2      	cmp	r2, r4
 80035dc:	d101      	bne.n	80035e2 <GUI_ALLOC_GetFixedBlock+0x9a>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	63f3      	str	r3, [r6, #60]	; 0x3c
 80035e2:	4620      	mov	r0, r4
 80035e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e8:	2402d56c 	.word	0x2402d56c

080035ec <_Alloc>:
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	4e39      	ldr	r6, [pc, #228]	; (80036d8 <_Alloc+0xec>)
 80035f2:	4604      	mov	r4, r0
 80035f4:	f7ff ff74 	bl	80034e0 <_InitOnce>
 80035f8:	6c35      	ldr	r5, [r6, #64]	; 0x40
 80035fa:	6833      	ldr	r3, [r6, #0]
 80035fc:	42ac      	cmp	r4, r5
 80035fe:	bf24      	itt	cs
 8003600:	3403      	addcs	r4, #3
 8003602:	f024 0503 	biccs.w	r5, r4, #3
 8003606:	4c34      	ldr	r4, [pc, #208]	; (80036d8 <_Alloc+0xec>)
 8003608:	350c      	adds	r5, #12
 800360a:	42ab      	cmp	r3, r5
 800360c:	d33e      	bcc.n	800368c <_Alloc+0xa0>
 800360e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003610:	6862      	ldr	r2, [r4, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d90f      	bls.n	8003636 <_Alloc+0x4a>
 8003616:	6873      	ldr	r3, [r6, #4]
 8003618:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800361a:	3b01      	subs	r3, #1
 800361c:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8003620:	6073      	str	r3, [r6, #4]
 8003622:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003624:	eb03 0208 	add.w	r2, r3, r8
 8003628:	6852      	ldr	r2, [r2, #4]
 800362a:	6272      	str	r2, [r6, #36]	; 0x24
 800362c:	2201      	movs	r2, #1
 800362e:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8003632:	b957      	cbnz	r7, 800364a <_Alloc+0x5e>
 8003634:	e02a      	b.n	800368c <_Alloc+0xa0>
 8003636:	3b01      	subs	r3, #1
 8003638:	6323      	str	r3, [r4, #48]	; 0x30
 800363a:	f7ff ff03 	bl	8003444 <_EnlargeBlocks>
 800363e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003640:	3301      	adds	r3, #1
 8003642:	6323      	str	r3, [r4, #48]	; 0x30
 8003644:	2800      	cmp	r0, #0
 8003646:	d0e6      	beq.n	8003616 <_Alloc+0x2a>
 8003648:	e020      	b.n	800368c <_Alloc+0xa0>
 800364a:	230f      	movs	r3, #15
 800364c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8003650:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003652:	4295      	cmp	r5, r2
 8003654:	d20c      	bcs.n	8003670 <_Alloc+0x84>
 8003656:	f113 33ff 	adds.w	r3, r3, #4294967295
 800365a:	d2f7      	bcs.n	800364c <_Alloc+0x60>
 800365c:	e008      	b.n	8003670 <_Alloc+0x84>
 800365e:	6894      	ldr	r4, [r2, #8]
 8003660:	b12c      	cbz	r4, 800366e <_Alloc+0x82>
 8003662:	6862      	ldr	r2, [r4, #4]
 8003664:	4295      	cmp	r5, r2
 8003666:	d914      	bls.n	8003692 <_Alloc+0xa6>
 8003668:	68a2      	ldr	r2, [r4, #8]
 800366a:	2a00      	cmp	r2, #0
 800366c:	d1f7      	bne.n	800365e <_Alloc+0x72>
 800366e:	3301      	adds	r3, #1
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d803      	bhi.n	800367c <_Alloc+0x90>
 8003674:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8003678:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800367a:	e7f6      	b.n	800366a <_Alloc+0x7e>
 800367c:	4628      	mov	r0, r5
 800367e:	f7ff fe3f 	bl	8003300 <_RemoveHoles>
 8003682:	2800      	cmp	r0, #0
 8003684:	d0e1      	beq.n	800364a <_Alloc+0x5e>
 8003686:	4638      	mov	r0, r7
 8003688:	f7ff fdb6 	bl	80031f8 <_PushFreeBlock>
 800368c:	2000      	movs	r0, #0
 800368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003692:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003696:	4620      	mov	r0, r4
 8003698:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800369a:	ebc5 0209 	rsb	r2, r5, r9
 800369e:	330c      	adds	r3, #12
 80036a0:	429a      	cmp	r2, r3
 80036a2:	bf38      	it	cc
 80036a4:	464d      	movcc	r5, r9
 80036a6:	f7ff fdb9 	bl	800321c <_RemoveFreeBlock>
 80036aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80036ac:	1961      	adds	r1, r4, r5
 80036ae:	454d      	cmp	r5, r9
 80036b0:	4498      	add	r8, r3
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	f8c8 4004 	str.w	r4, [r8, #4]
 80036ba:	6027      	str	r7, [r4, #0]
 80036bc:	6065      	str	r5, [r4, #4]
 80036be:	60a3      	str	r3, [r4, #8]
 80036c0:	6124      	str	r4, [r4, #16]
 80036c2:	f841 5c04 	str.w	r5, [r1, #-4]
 80036c6:	da03      	bge.n	80036d0 <_Alloc+0xe4>
 80036c8:	ebc5 0009 	rsb	r0, r5, r9
 80036cc:	f7ff fdc6 	bl	800325c <_AddFreeMemory>
 80036d0:	4638      	mov	r0, r7
 80036d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036d6:	bf00      	nop
 80036d8:	2402d56c 	.word	0x2402d56c

080036dc <GUI_ALLOC_AllocNoInit>:
 80036dc:	b108      	cbz	r0, 80036e2 <GUI_ALLOC_AllocNoInit+0x6>
 80036de:	f7ff bf85 	b.w	80035ec <_Alloc>
 80036e2:	4770      	bx	lr

080036e4 <GUI_ALLOC_AllocZero>:
 80036e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036e6:	4606      	mov	r6, r0
 80036e8:	f7ff fff8 	bl	80036dc <GUI_ALLOC_AllocNoInit>
 80036ec:	4605      	mov	r5, r0
 80036ee:	b160      	cbz	r0, 800370a <GUI_ALLOC_AllocZero+0x26>
 80036f0:	f7ff fe66 	bl	80033c0 <GUI_ALLOC_LockH>
 80036f4:	ac02      	add	r4, sp, #8
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <GUI_ALLOC_AllocZero+0x2c>)
 80036f8:	4632      	mov	r2, r6
 80036fa:	f844 0d04 	str.w	r0, [r4, #-4]!
 80036fe:	2100      	movs	r1, #0
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4798      	blx	r3
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff fe69 	bl	80033dc <GUI_ALLOC_UnlockH>
 800370a:	4628      	mov	r0, r5
 800370c:	b002      	add	sp, #8
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	24000030 	.word	0x24000030

08003714 <GL_FillCircle>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	f240 26c3 	movw	r6, #707	; 0x2c3
 800371c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003720:	b085      	sub	sp, #20
 8003722:	4f2b      	ldr	r7, [pc, #172]	; (80037d0 <GL_FillCircle+0xbc>)
 8003724:	4356      	muls	r6, r2
 8003726:	4614      	mov	r4, r2
 8003728:	4680      	mov	r8, r0
 800372a:	2501      	movs	r5, #1
 800372c:	4689      	mov	r9, r1
 800372e:	fb96 f6f3 	sdiv	r6, r6, r3
 8003732:	2302      	movs	r3, #2
 8003734:	3601      	adds	r6, #1
 8003736:	fb92 f3f3 	sdiv	r3, r2, r3
 800373a:	fb02 3302 	mla	r3, r2, r2, r3
 800373e:	4402      	add	r2, r0
 8003740:	1b00      	subs	r0, r0, r4
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4798      	blx	r3
 800374c:	eb08 0305 	add.w	r3, r8, r5
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	f108 33ff 	add.w	r3, r8, #4294967295
 8003756:	9303      	str	r3, [sp, #12]
 8003758:	42b5      	cmp	r5, r6
 800375a:	dc35      	bgt.n	80037c8 <GL_FillCircle+0xb4>
 800375c:	fb04 f304 	mul.w	r3, r4, r4
 8003760:	9a01      	ldr	r2, [sp, #4]
 8003762:	fb05 3305 	mla	r3, r5, r5, r3
 8003766:	429a      	cmp	r2, r3
 8003768:	da18      	bge.n	800379c <GL_FillCircle+0x88>
 800376a:	42b4      	cmp	r4, r6
 800376c:	dd15      	ble.n	800379a <GL_FillCircle+0x86>
 800376e:	9b02      	ldr	r3, [sp, #8]
 8003770:	eb04 0109 	add.w	r1, r4, r9
 8003774:	ebc5 0a03 	rsb	sl, r5, r3
 8003778:	9b03      	ldr	r3, [sp, #12]
 800377a:	eb03 0b05 	add.w	fp, r3, r5
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	4650      	mov	r0, sl
 8003782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003784:	465a      	mov	r2, fp
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4798      	blx	r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	465a      	mov	r2, fp
 800378e:	ebc4 0109 	rsb	r1, r4, r9
 8003792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003794:	4650      	mov	r0, sl
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4798      	blx	r3
 800379a:	3c01      	subs	r4, #1
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	ebc4 0a08 	rsb	sl, r4, r8
 80037a2:	eb04 0b08 	add.w	fp, r4, r8
 80037a6:	eb09 0105 	add.w	r1, r9, r5
 80037aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ac:	4650      	mov	r0, sl
 80037ae:	465a      	mov	r2, fp
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4798      	blx	r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	ebc5 0109 	rsb	r1, r5, r9
 80037ba:	465a      	mov	r2, fp
 80037bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037be:	4650      	mov	r0, sl
 80037c0:	3501      	adds	r5, #1
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4798      	blx	r3
 80037c6:	e7c7      	b.n	8003758 <GL_FillCircle+0x44>
 80037c8:	b005      	add	sp, #20
 80037ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ce:	bf00      	nop
 80037d0:	24000028 	.word	0x24000028

080037d4 <GUI_FillCircle>:
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <GUI_FillCircle+0x38>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	4604      	mov	r4, r0
 80037de:	2000      	movs	r0, #0
 80037e0:	460d      	mov	r5, r1
 80037e2:	4616      	mov	r6, r2
 80037e4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80037e6:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 80037ea:	f003 ff5b 	bl	80076a4 <WM__InitIVRSearch>
 80037ee:	b150      	cbz	r0, 8003806 <GUI_FillCircle+0x32>
 80037f0:	4445      	add	r5, r8
 80037f2:	443c      	add	r4, r7
 80037f4:	4632      	mov	r2, r6
 80037f6:	4629      	mov	r1, r5
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff ff8b 	bl	8003714 <GL_FillCircle>
 80037fe:	f003 fe8f 	bl	8007520 <WM__GetNextIVR>
 8003802:	2800      	cmp	r0, #0
 8003804:	d1f6      	bne.n	80037f4 <GUI_FillCircle+0x20>
 8003806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380a:	bf00      	nop
 800380c:	24000028 	.word	0x24000028

08003810 <GUI_CalcColorDist>:
 8003810:	b2c3      	uxtb	r3, r0
 8003812:	b2ca      	uxtb	r2, r1
 8003814:	1a9a      	subs	r2, r3, r2
 8003816:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800381a:	b292      	uxth	r2, r2
 800381c:	b510      	push	{r4, lr}
 800381e:	b214      	sxth	r4, r2
 8003820:	2c00      	cmp	r4, #0
 8003822:	bfbc      	itt	lt
 8003824:	4252      	neglt	r2, r2
 8003826:	b214      	sxthlt	r4, r2
 8003828:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800382c:	0c09      	lsrs	r1, r1, #16
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8003834:	b29b      	uxth	r3, r3
 8003836:	b289      	uxth	r1, r1
 8003838:	b21a      	sxth	r2, r3
 800383a:	b208      	sxth	r0, r1
 800383c:	2a00      	cmp	r2, #0
 800383e:	bfbc      	itt	lt
 8003840:	425b      	neglt	r3, r3
 8003842:	b21a      	sxthlt	r2, r3
 8003844:	2800      	cmp	r0, #0
 8003846:	bfb8      	it	lt
 8003848:	4249      	neglt	r1, r1
 800384a:	fb02 f202 	mul.w	r2, r2, r2
 800384e:	bfb8      	it	lt
 8003850:	b208      	sxthlt	r0, r1
 8003852:	fb04 2204 	mla	r2, r4, r4, r2
 8003856:	b280      	uxth	r0, r0
 8003858:	fb00 2000 	mla	r0, r0, r0, r2
 800385c:	bd10      	pop	{r4, pc}
	...

08003860 <GUI_GetDrawMode>:
 8003860:	4b01      	ldr	r3, [pc, #4]	; (8003868 <GUI_GetDrawMode+0x8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	7c18      	ldrb	r0, [r3, #16]
 8003866:	4770      	bx	lr
 8003868:	24000028 	.word	0x24000028

0800386c <GUI_GetVersionString>:
 800386c:	4804      	ldr	r0, [pc, #16]	; (8003880 <GUI_GetVersionString+0x14>)
 800386e:	2335      	movs	r3, #53	; 0x35
 8003870:	7003      	strb	r3, [r0, #0]
 8003872:	2334      	movs	r3, #52	; 0x34
 8003874:	7083      	strb	r3, [r0, #2]
 8003876:	70c3      	strb	r3, [r0, #3]
 8003878:	2361      	movs	r3, #97	; 0x61
 800387a:	7103      	strb	r3, [r0, #4]
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	24000010 	.word	0x24000010

08003884 <GUI_MergeRect>:
 8003884:	b510      	push	{r4, lr}
 8003886:	b338      	cbz	r0, 80038d8 <GUI_MergeRect+0x54>
 8003888:	b309      	cbz	r1, 80038ce <GUI_MergeRect+0x4a>
 800388a:	b30a      	cbz	r2, 80038d0 <GUI_MergeRect+0x4c>
 800388c:	f9b2 4000 	ldrsh.w	r4, [r2]
 8003890:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003894:	42a3      	cmp	r3, r4
 8003896:	bfa8      	it	ge
 8003898:	4623      	movge	r3, r4
 800389a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800389e:	8003      	strh	r3, [r0, #0]
 80038a0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	bfa8      	it	ge
 80038a8:	4623      	movge	r3, r4
 80038aa:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80038ae:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80038b2:	8043      	strh	r3, [r0, #2]
 80038b4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	bfb8      	it	lt
 80038bc:	4623      	movlt	r3, r4
 80038be:	8083      	strh	r3, [r0, #4]
 80038c0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bfb8      	it	lt
 80038c8:	4613      	movlt	r3, r2
 80038ca:	80c3      	strh	r3, [r0, #6]
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	4611      	mov	r1, r2
 80038d0:	680b      	ldr	r3, [r1, #0]
 80038d2:	6003      	str	r3, [r0, #0]
 80038d4:	684b      	ldr	r3, [r1, #4]
 80038d6:	6043      	str	r3, [r0, #4]
 80038d8:	bd10      	pop	{r4, pc}

080038da <GUI_MoveRect>:
 80038da:	b168      	cbz	r0, 80038f8 <GUI_MoveRect+0x1e>
 80038dc:	b289      	uxth	r1, r1
 80038de:	8803      	ldrh	r3, [r0, #0]
 80038e0:	b292      	uxth	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	8003      	strh	r3, [r0, #0]
 80038e6:	8883      	ldrh	r3, [r0, #4]
 80038e8:	4419      	add	r1, r3
 80038ea:	8843      	ldrh	r3, [r0, #2]
 80038ec:	4413      	add	r3, r2
 80038ee:	8081      	strh	r1, [r0, #4]
 80038f0:	8043      	strh	r3, [r0, #2]
 80038f2:	88c3      	ldrh	r3, [r0, #6]
 80038f4:	441a      	add	r2, r3
 80038f6:	80c2      	strh	r2, [r0, #6]
 80038f8:	4770      	bx	lr
	...

080038fc <GUI_GotoXY>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <GUI_GotoXY+0xc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	8458      	strh	r0, [r3, #34]	; 0x22
 8003902:	2000      	movs	r0, #0
 8003904:	8499      	strh	r1, [r3, #36]	; 0x24
 8003906:	4770      	bx	lr
 8003908:	24000028 	.word	0x24000028

0800390c <GUI_RectsIntersect>:
 800390c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003910:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8003914:	429a      	cmp	r2, r3
 8003916:	dc14      	bgt.n	8003942 <GUI_RectsIntersect+0x36>
 8003918:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800391c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8003920:	429a      	cmp	r2, r3
 8003922:	dc0e      	bgt.n	8003942 <GUI_RectsIntersect+0x36>
 8003924:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003928:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	dc08      	bgt.n	8003942 <GUI_RectsIntersect+0x36>
 8003930:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8003934:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003938:	4283      	cmp	r3, r0
 800393a:	bfcc      	ite	gt
 800393c:	2000      	movgt	r0, #0
 800393e:	2001      	movle	r0, #1
 8003940:	4770      	bx	lr
 8003942:	2000      	movs	r0, #0
 8003944:	4770      	bx	lr

08003946 <GUI_SelectLCD>:
 8003946:	b508      	push	{r3, lr}
 8003948:	f001 f8c4 	bl	8004ad4 <LCD_SelectLCD>
 800394c:	f001 f972 	bl	8004c34 <LCD_UpdateColorIndices>
 8003950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003954:	f003 bf26 	b.w	80077a4 <WM_Activate>

08003958 <GUI_SetBkColor>:
 8003958:	f000 bf10 	b.w	800477c <LCD_SetBkColor>

0800395c <GUI_SetColor>:
 800395c:	f000 bf14 	b.w	8004788 <LCD_SetColor>

08003960 <GUI_SetOrg>:
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <GUI_SetOrg+0x28>)
 8003962:	460a      	mov	r2, r1
 8003964:	b410      	push	{r4}
 8003966:	8018      	strh	r0, [r3, #0]
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <GUI_SetOrg+0x2c>)
 800396a:	8019      	strh	r1, [r3, #0]
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <GUI_SetOrg+0x30>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	7c59      	ldrb	r1, [r3, #17]
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <GUI_SetOrg+0x34>)
 8003974:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	6a0c      	ldr	r4, [r1, #32]
 800397c:	4601      	mov	r1, r0
 800397e:	4618      	mov	r0, r3
 8003980:	4623      	mov	r3, r4
 8003982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003986:	4718      	bx	r3
 8003988:	2402d654 	.word	0x2402d654
 800398c:	2402d644 	.word	0x2402d644
 8003990:	24000028 	.word	0x24000028
 8003994:	2402d67c 	.word	0x2402d67c

08003998 <_InitContext>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4d19      	ldr	r5, [pc, #100]	; (8003a00 <_InitContext+0x68>)
 800399c:	4604      	mov	r4, r0
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <_InitContext+0x6c>)
 80039a0:	f104 0108 	add.w	r1, r4, #8
 80039a4:	6703      	str	r3, [r0, #112]	; 0x70
 80039a6:	692b      	ldr	r3, [r5, #16]
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	639b      	str	r3, [r3, #56]	; 0x38
 80039ac:	641b      	str	r3, [r3, #64]	; 0x40
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80039b0:	f103 0208 	add.w	r2, r3, #8
 80039b4:	6142      	str	r2, [r0, #20]
 80039b6:	7c5a      	ldrb	r2, [r3, #17]
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <_InitContext+0x70>)
 80039ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039be:	68c3      	ldr	r3, [r0, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4798      	blx	r3
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <_InitContext+0x74>)
 80039c6:	6663      	str	r3, [r4, #100]	; 0x64
 80039c8:	686b      	ldr	r3, [r5, #4]
 80039ca:	61e3      	str	r3, [r4, #28]
 80039cc:	692b      	ldr	r3, [r5, #16]
 80039ce:	3308      	adds	r3, #8
 80039d0:	6163      	str	r3, [r4, #20]
 80039d2:	2301      	movs	r3, #1
 80039d4:	7623      	strb	r3, [r4, #24]
 80039d6:	76e3      	strb	r3, [r4, #27]
 80039d8:	f003 ffbc 	bl	8007954 <WM_GetDesktopWindow>
 80039dc:	2303      	movs	r3, #3
 80039de:	64a0      	str	r0, [r4, #72]	; 0x48
 80039e0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80039e4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80039e8:	68e8      	ldr	r0, [r5, #12]
 80039ea:	6323      	str	r3, [r4, #48]	; 0x30
 80039ec:	6363      	str	r3, [r4, #52]	; 0x34
 80039ee:	f000 fec5 	bl	800477c <LCD_SetBkColor>
 80039f2:	68a8      	ldr	r0, [r5, #8]
 80039f4:	f000 fec8 	bl	8004788 <LCD_SetColor>
 80039f8:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <_InitContext+0x78>)
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <_InitContext+0x7c>)
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	24000018 	.word	0x24000018
 8003a04:	2402d348 	.word	0x2402d348
 8003a08:	2402d67c 	.word	0x2402d67c
 8003a0c:	08008c88 	.word	0x08008c88
 8003a10:	08008ca0 	.word	0x08008ca0
 8003a14:	2402d674 	.word	0x2402d674

08003a18 <_OnExit>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	2400      	movs	r4, #0
 8003a1c:	4d09      	ldr	r5, [pc, #36]	; (8003a44 <_OnExit+0x2c>)
 8003a1e:	4e0a      	ldr	r6, [pc, #40]	; (8003a48 <_OnExit+0x30>)
 8003a20:	2274      	movs	r2, #116	; 0x74
 8003a22:	4621      	mov	r1, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	6833      	ldr	r3, [r6, #0]
 8003a28:	67ec      	str	r4, [r5, #124]	; 0x7c
 8003a2a:	4798      	blx	r3
 8003a2c:	6833      	ldr	r3, [r6, #0]
 8003a2e:	2208      	movs	r2, #8
 8003a30:	4621      	mov	r1, r4
 8003a32:	4806      	ldr	r0, [pc, #24]	; (8003a4c <_OnExit+0x34>)
 8003a34:	4798      	blx	r3
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <_OnExit+0x38>)
 8003a38:	611d      	str	r5, [r3, #16]
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <_OnExit+0x3c>)
 8003a3c:	701c      	strb	r4, [r3, #0]
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <_OnExit+0x40>)
 8003a40:	601c      	str	r4, [r3, #0]
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	2402d2c8 	.word	0x2402d2c8
 8003a48:	24000030 	.word	0x24000030
 8003a4c:	2402d67c 	.word	0x2402d67c
 8003a50:	24000018 	.word	0x24000018
 8003a54:	2402d664 	.word	0x2402d664
 8003a58:	2402d640 	.word	0x2402d640

08003a5c <GUI_ClearRect>:
 8003a5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003a60:	4604      	mov	r4, r0
 8003a62:	2004      	movs	r0, #4
 8003a64:	4616      	mov	r6, r2
 8003a66:	461f      	mov	r7, r3
 8003a68:	460d      	mov	r5, r1
 8003a6a:	f000 fb4b 	bl	8004104 <LCD_SetDrawMode>
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <GUI_ClearRect+0x60>)
 8003a70:	4680      	mov	r8, r0
 8003a72:	4668      	mov	r0, sp
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	4414      	add	r4, r2
 8003a7c:	4416      	add	r6, r2
 8003a7e:	441d      	add	r5, r3
 8003a80:	441f      	add	r7, r3
 8003a82:	f8ad 4000 	strh.w	r4, [sp]
 8003a86:	f8ad 6004 	strh.w	r6, [sp, #4]
 8003a8a:	f8ad 5002 	strh.w	r5, [sp, #2]
 8003a8e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8003a92:	f003 fe07 	bl	80076a4 <WM__InitIVRSearch>
 8003a96:	b928      	cbnz	r0, 8003aa4 <GUI_ClearRect+0x48>
 8003a98:	4640      	mov	r0, r8
 8003a9a:	f000 fb33 	bl	8004104 <LCD_SetDrawMode>
 8003a9e:	b002      	add	sp, #8
 8003aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f000 fb88 	bl	80041c0 <LCD_FillRect>
 8003ab0:	f003 fd36 	bl	8007520 <WM__GetNextIVR>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d1f5      	bne.n	8003aa4 <GUI_ClearRect+0x48>
 8003ab8:	e7ee      	b.n	8003a98 <GUI_ClearRect+0x3c>
 8003aba:	bf00      	nop
 8003abc:	24000018 	.word	0x24000018

08003ac0 <GUI_Clear>:
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	f7ff ff19 	bl	80038fc <GUI_GotoXY>
 8003aca:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003ace:	4903      	ldr	r1, [pc, #12]	; (8003adc <GUI_Clear+0x1c>)
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4608      	mov	r0, r1
 8003ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad8:	f7ff bfc0 	b.w	8003a5c <GUI_ClearRect>
 8003adc:	ffffc001 	.word	0xffffc001

08003ae0 <GUI__Config>:
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	4d1f      	ldr	r5, [pc, #124]	; (8003b60 <GUI__Config+0x80>)
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d136      	bne.n	8003b5a <GUI__Config+0x7a>
 8003aec:	2301      	movs	r3, #1
 8003aee:	466a      	mov	r2, sp
 8003af0:	466e      	mov	r6, sp
 8003af2:	67eb      	str	r3, [r5, #124]	; 0x7c
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <GUI__Config+0x84>)
 8003af6:	f103 0708 	add.w	r7, r3, #8
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003b02:	4614      	mov	r4, r2
 8003b04:	42bb      	cmp	r3, r7
 8003b06:	c403      	stmia	r4!, {r0, r1}
 8003b08:	4622      	mov	r2, r4
 8003b0a:	d1f6      	bne.n	8003afa <GUI__Config+0x1a>
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	8899      	ldrh	r1, [r3, #4]
 8003b10:	799b      	ldrb	r3, [r3, #6]
 8003b12:	6020      	str	r0, [r4, #0]
 8003b14:	71a3      	strb	r3, [r4, #6]
 8003b16:	4633      	mov	r3, r6
 8003b18:	80a1      	strh	r1, [r4, #4]
 8003b1a:	4c13      	ldr	r4, [pc, #76]	; (8003b68 <GUI__Config+0x88>)
 8003b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b20:	f804 2b01 	strb.w	r2, [r4], #1
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	2a00      	cmp	r2, #0
 8003b28:	d1f8      	bne.n	8003b1c <GUI__Config+0x3c>
 8003b2a:	f7ff fe9f 	bl	800386c <GUI_GetVersionString>
 8003b2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b32:	4622      	mov	r2, r4
 8003b34:	f804 3b01 	strb.w	r3, [r4], #1
 8003b38:	7803      	ldrb	r3, [r0, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f7      	bne.n	8003b2e <GUI__Config+0x4e>
 8003b3e:	7053      	strb	r3, [r2, #1]
 8003b40:	f7fe ffde 	bl	8002b00 <GUI_X_Config>
 8003b44:	f7ff f960 	bl	8002e08 <LCD_X_Config>
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <GUI__Config+0x8c>)
 8003b4a:	4809      	ldr	r0, [pc, #36]	; (8003b70 <GUI__Config+0x90>)
 8003b4c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8003b50:	b005      	add	sp, #20
 8003b52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003b56:	f000 b8d1 	b.w	8003cfc <GUI__RegisterExit>
 8003b5a:	b005      	add	sp, #20
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2402d2c8 	.word	0x2402d2c8
 8003b64:	08008c90 	.word	0x08008c90
 8003b68:	2402d348 	.word	0x2402d348
 8003b6c:	08003a19 	.word	0x08003a19
 8003b70:	2402d35c 	.word	0x2402d35c

08003b74 <GUI_Init>:
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4a53      	ldr	r2, [pc, #332]	; (8003cc8 <GUI_Init+0x154>)
 8003b7c:	4b52      	ldr	r3, [pc, #328]	; (8003cc8 <GUI_Init+0x154>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <GUI_Init+0x158>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b8e:	f240 4249 	movw	r2, #1097	; 0x449
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <GUI_Init+0x158>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba4:	f240 4151 	movw	r1, #1105	; 0x451
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4b44      	ldr	r3, [pc, #272]	; (8003ccc <GUI_Init+0x158>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc0:	f240 4252 	movw	r2, #1106	; 0x452
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d010      	beq.n	8003bf6 <GUI_Init+0x82>
 8003bd4:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <GUI_Init+0x15c>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	bf00      	nop
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <GUI_Init+0x15c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1fb      	bne.n	8003bdc <GUI_Init+0x68>
 8003be4:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <GUI_Init+0x160>)
 8003be6:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <GUI_Init+0x164>)
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <GUI_Init+0x160>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <GUI_Init+0x168>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <GUI_Init+0xb2>
 8003bf4:	e7fe      	b.n	8003bf4 <GUI_Init+0x80>
 8003bf6:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <GUI_Init+0x16c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bfe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003c02:	d110      	bne.n	8003c26 <GUI_Init+0xb2>
 8003c04:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <GUI_Init+0x170>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	bf00      	nop
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <GUI_Init+0x170>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1fb      	bne.n	8003c0c <GUI_Init+0x98>
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <GUI_Init+0x174>)
 8003c16:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <GUI_Init+0x164>)
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <GUI_Init+0x174>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <GUI_Init+0x168>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d000      	beq.n	8003c26 <GUI_Init+0xb2>
 8003c24:	e7fe      	b.n	8003c24 <GUI_Init+0xb0>
 8003c26:	f7ff ff5b 	bl	8003ae0 <GUI__Config>
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <GUI_Init+0x178>)
 8003c2c:	222e      	movs	r2, #46	; 0x2e
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	f7fe ff64 	bl	8002afc <GUI_X_Init>
 8003c34:	482e      	ldr	r0, [pc, #184]	; (8003cf0 <GUI_Init+0x17c>)
 8003c36:	f7ff feaf 	bl	8003998 <_InitContext>
 8003c3a:	f000 fcf9 	bl	8004630 <emWin_LCD_Init>
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	f000 fed8 	bl	80049f4 <LCD_GetXSizeDisplay>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2dc      	uxtb	r4, r3
 8003c50:	f000 fed6 	bl	8004a00 <LCD_GetYSizeDisplay>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4323      	orrs	r3, r4
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <GUI_Init+0x108>
 8003c68:	f000 feb8 	bl	80049dc <LCD_GetXSizeMax>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	f000 feb8 	bl	80049e2 <LCD_GetYSizeMax>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4619      	mov	r1, r3
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 feb6 	bl	80049e8 <LCD_SetDisplaySize>
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f7ff fe6e 	bl	8003960 <GUI_SetOrg>
 8003c84:	f003 fdee 	bl	8007864 <WM_Init>
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <GUI_Init+0x180>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <GUI_Init+0x142>
 8003c90:	e00d      	b.n	8003cae <GUI_Init+0x13a>
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <GUI_Init+0x180>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <GUI_Init+0x130>
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <GUI_Init+0x180>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4798      	blx	r3
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <GUI_Init+0x180>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <GUI_Init+0x180>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <GUI_Init+0x180>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ed      	bne.n	8003c92 <GUI_Init+0x11e>
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <GUI_Init+0x184>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	e0002000 	.word	0xe0002000
 8003ccc:	e0042000 	.word	0xe0042000
 8003cd0:	40023008 	.word	0x40023008
 8003cd4:	40023000 	.word	0x40023000
 8003cd8:	f407a5c2 	.word	0xf407a5c2
 8003cdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ce0:	5c001000 	.word	0x5c001000
 8003ce4:	58024c08 	.word	0x58024c08
 8003ce8:	58024c00 	.word	0x58024c00
 8003cec:	2402d634 	.word	0x2402d634
 8003cf0:	2402d2c8 	.word	0x2402d2c8
 8003cf4:	2402d340 	.word	0x2402d340
 8003cf8:	2402d65c 	.word	0x2402d65c

08003cfc <GUI__RegisterExit>:
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <GUI__RegisterExit+0x24>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <GUI__RegisterExit+0x24>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2402d33c 	.word	0x2402d33c

08003d24 <GUI_DEVICE__GetpDriver>:
 8003d24:	2801      	cmp	r0, #1
 8003d26:	dc09      	bgt.n	8003d3c <GUI_DEVICE__GetpDriver+0x18>
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <GUI_DEVICE__GetpDriver+0x1c>)
 8003d2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d2e:	b120      	cbz	r0, 8003d3a <GUI_DEVICE__GetpDriver+0x16>
 8003d30:	68c3      	ldr	r3, [r0, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b11b      	cbz	r3, 8003d3e <GUI_DEVICE__GetpDriver+0x1a>
 8003d36:	6800      	ldr	r0, [r0, #0]
 8003d38:	e7f9      	b.n	8003d2e <GUI_DEVICE__GetpDriver+0xa>
 8003d3a:	4770      	bx	lr
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	4770      	bx	lr
 8003d40:	2402d67c 	.word	0x2402d67c

08003d44 <GUI_DEVICE_Delete>:
 8003d44:	f7ff bb28 	b.w	8003398 <GUI_ALLOC_FreeFixedBlock>

08003d48 <GUI_DEVICE_Create>:
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	460d      	mov	r5, r1
 8003d50:	4617      	mov	r7, r2
 8003d52:	461c      	mov	r4, r3
 8003d54:	dd01      	ble.n	8003d5a <GUI_DEVICE_Create+0x12>
 8003d56:	2000      	movs	r0, #0
 8003d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d5a:	201c      	movs	r0, #28
 8003d5c:	f7ff fbf4 	bl	8003548 <GUI_ALLOC_GetFixedBlock>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d0f8      	beq.n	8003d56 <GUI_DEVICE_Create+0xe>
 8003d64:	b10d      	cbz	r5, 8003d6a <GUI_DEVICE_Create+0x22>
 8003d66:	6105      	str	r5, [r0, #16]
 8003d68:	e009      	b.n	8003d7e <GUI_DEVICE_Create+0x36>
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <GUI_DEVICE_Create+0x48>)
 8003d6c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003d70:	b129      	cbz	r1, 8003d7e <GUI_DEVICE_Create+0x36>
 8003d72:	680b      	ldr	r3, [r1, #0]
 8003d74:	b10b      	cbz	r3, 8003d7a <GUI_DEVICE_Create+0x32>
 8003d76:	4619      	mov	r1, r3
 8003d78:	e7fb      	b.n	8003d72 <GUI_DEVICE_Create+0x2a>
 8003d7a:	690b      	ldr	r3, [r1, #16]
 8003d7c:	6103      	str	r3, [r0, #16]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	6184      	str	r4, [r0, #24]
 8003d82:	8287      	strh	r7, [r0, #20]
 8003d84:	60c6      	str	r6, [r0, #12]
 8003d86:	6003      	str	r3, [r0, #0]
 8003d88:	6043      	str	r3, [r0, #4]
 8003d8a:	6083      	str	r3, [r0, #8]
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2402d67c 	.word	0x2402d67c

08003d94 <GUI_DEVICE_Unlink>:
 8003d94:	6981      	ldr	r1, [r0, #24]
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <GUI_DEVICE_Unlink+0x2c>)
 8003d98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d9c:	4298      	cmp	r0, r3
 8003d9e:	6803      	ldr	r3, [r0, #0]
 8003da0:	d104      	bne.n	8003dac <GUI_DEVICE_Unlink+0x18>
 8003da2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003da6:	b10b      	cbz	r3, 8003dac <GUI_DEVICE_Unlink+0x18>
 8003da8:	2200      	movs	r2, #0
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	6842      	ldr	r2, [r0, #4]
 8003dae:	b102      	cbz	r2, 8003db2 <GUI_DEVICE_Unlink+0x1e>
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	6803      	ldr	r3, [r0, #0]
 8003db4:	b103      	cbz	r3, 8003db8 <GUI_DEVICE_Unlink+0x24>
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	2300      	movs	r3, #0
 8003dba:	6003      	str	r3, [r0, #0]
 8003dbc:	6043      	str	r3, [r0, #4]
 8003dbe:	4770      	bx	lr
 8003dc0:	2402d67c 	.word	0x2402d67c

08003dc4 <GUI_DEVICE_Link>:
 8003dc4:	b530      	push	{r4, r5, lr}
 8003dc6:	b908      	cbnz	r0, 8003dcc <GUI_DEVICE_Link+0x8>
 8003dc8:	2001      	movs	r0, #1
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	6984      	ldr	r4, [r0, #24]
 8003dce:	2c01      	cmp	r4, #1
 8003dd0:	dcfa      	bgt.n	8003dc8 <GUI_DEVICE_Link+0x4>
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <GUI_DEVICE_Link+0x7c>)
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	4294      	cmp	r4, r2
 8003dd8:	bfa4      	itt	ge
 8003dda:	1c62      	addge	r2, r4, #1
 8003ddc:	701a      	strbge	r2, [r3, #0]
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <GUI_DEVICE_Link+0x80>)
 8003de0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003de4:	4615      	mov	r5, r2
 8003de6:	b91b      	cbnz	r3, 8003df0 <GUI_DEVICE_Link+0x2c>
 8003de8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd30      	pop	{r4, r5, pc}
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	b10a      	cbz	r2, 8003df8 <GUI_DEVICE_Link+0x34>
 8003df4:	4613      	mov	r3, r2
 8003df6:	e7fb      	b.n	8003df0 <GUI_DEVICE_Link+0x2c>
 8003df8:	68c2      	ldr	r2, [r0, #12]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	68d9      	ldr	r1, [r3, #12]
 8003dfe:	6809      	ldr	r1, [r1, #0]
 8003e00:	4291      	cmp	r1, r2
 8003e02:	dd03      	ble.n	8003e0c <GUI_DEVICE_Link+0x48>
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f8      	bne.n	8003dfc <GUI_DEVICE_Link+0x38>
 8003e0a:	e7dd      	b.n	8003dc8 <GUI_DEVICE_Link+0x4>
 8003e0c:	d109      	bne.n	8003e22 <GUI_DEVICE_Link+0x5e>
 8003e0e:	8a81      	ldrh	r1, [r0, #20]
 8003e10:	2901      	cmp	r1, #1
 8003e12:	d106      	bne.n	8003e22 <GUI_DEVICE_Link+0x5e>
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	b121      	cbz	r1, 8003e22 <GUI_DEVICE_Link+0x5e>
 8003e18:	460b      	mov	r3, r1
 8003e1a:	68c9      	ldr	r1, [r1, #12]
 8003e1c:	6809      	ldr	r1, [r1, #0]
 8003e1e:	428a      	cmp	r2, r1
 8003e20:	ddf8      	ble.n	8003e14 <GUI_DEVICE_Link+0x50>
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	b112      	cbz	r2, 8003e2c <GUI_DEVICE_Link+0x68>
 8003e26:	6010      	str	r0, [r2, #0]
 8003e28:	6042      	str	r2, [r0, #4]
 8003e2a:	e001      	b.n	8003e30 <GUI_DEVICE_Link+0x6c>
 8003e2c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8003e30:	6058      	str	r0, [r3, #4]
 8003e32:	4298      	cmp	r0, r3
 8003e34:	bf08      	it	eq
 8003e36:	2300      	moveq	r3, #0
 8003e38:	6003      	str	r3, [r0, #0]
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	bd30      	pop	{r4, r5, pc}
 8003e3e:	bf00      	nop
 8003e40:	2402d62e 	.word	0x2402d62e
 8003e44:	2402d67c 	.word	0x2402d67c

08003e48 <GUI_DEVICE_CreateAndLink>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	f7ff ff7c 	bl	8003d48 <GUI_DEVICE_Create>
 8003e50:	4604      	mov	r4, r0
 8003e52:	b148      	cbz	r0, 8003e68 <GUI_DEVICE_CreateAndLink+0x20>
 8003e54:	f7ff ffb6 	bl	8003dc4 <GUI_DEVICE_Link>
 8003e58:	68e3      	ldr	r3, [r4, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b923      	cbnz	r3, 8003e68 <GUI_DEVICE_CreateAndLink+0x20>
 8003e5e:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <GUI_DEVICE_CreateAndLink+0x24>)
 8003e60:	3516      	adds	r5, #22
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8003e68:	4620      	mov	r0, r4
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	24000028 	.word	0x24000028

08003e70 <_OnExit>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4c0e      	ldr	r4, [pc, #56]	; (8003eac <_OnExit+0x3c>)
 8003e74:	2208      	movs	r2, #8
 8003e76:	4d0e      	ldr	r5, [pc, #56]	; (8003eb0 <_OnExit+0x40>)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	4798      	blx	r3
 8003e80:	2208      	movs	r2, #8
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	2100      	movs	r1, #0
 8003e86:	18a0      	adds	r0, r4, r2
 8003e88:	4798      	blx	r3
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f104 0010 	add.w	r0, r4, #16
 8003e94:	4798      	blx	r3
 8003e96:	682b      	ldr	r3, [r5, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f104 0018 	add.w	r0, r4, #24
 8003ea0:	4798      	blx	r3
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <_OnExit+0x44>)
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
 8003eaa:	bf00      	nop
 8003eac:	2402d364 	.word	0x2402d364
 8003eb0:	24000030 	.word	0x24000030
 8003eb4:	2402d630 	.word	0x2402d630

08003eb8 <GUI_MULTIBUF_ConfirmEx>:
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <GUI_MULTIBUF_ConfirmEx+0x24>)
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	bf18      	it	ne
 8003ec0:	2000      	movne	r0, #0
 8003ec2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	6994      	ldr	r4, [r2, #24]
 8003eca:	2c00      	cmp	r4, #0
 8003ecc:	bfa2      	ittt	ge
 8003ece:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 8003ed2:	f04f 33ff 	movge.w	r3, #4294967295
 8003ed6:	6193      	strge	r3, [r2, #24]
 8003ed8:	bd10      	pop	{r4, pc}
 8003eda:	bf00      	nop
 8003edc:	2402d364 	.word	0x2402d364

08003ee0 <GUI_MULTIBUF_ConfigEx>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4c0a      	ldr	r4, [pc, #40]	; (8003f0c <GUI_MULTIBUF_ConfigEx+0x2c>)
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eea:	b92b      	cbnz	r3, 8003ef8 <GUI_MULTIBUF_ConfigEx+0x18>
 8003eec:	4620      	mov	r0, r4
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <GUI_MULTIBUF_ConfigEx+0x30>)
 8003ef0:	f840 3f24 	str.w	r3, [r0, #36]!
 8003ef4:	f7ff ff02 	bl	8003cfc <GUI__RegisterExit>
 8003ef8:	6a23      	ldr	r3, [r4, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <GUI_MULTIBUF_ConfigEx+0x34>)
 8003efe:	bf18      	it	ne
 8003f00:	2500      	movne	r5, #0
 8003f02:	2e01      	cmp	r6, #1
 8003f04:	bfb8      	it	lt
 8003f06:	2601      	movlt	r6, #1
 8003f08:	555e      	strb	r6, [r3, r5]
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	2402d364 	.word	0x2402d364
 8003f10:	08003e71 	.word	0x08003e71
 8003f14:	2402d62c 	.word	0x2402d62c

08003f18 <GUI_StoreKey>:
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <GUI_StoreKey+0xc>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	b902      	cbnz	r2, 8003f20 <GUI_StoreKey+0x8>
 8003f1e:	6018      	str	r0, [r3, #0]
 8003f20:	f000 b82c 	b.w	8003f7c <GUI_SignalEvent>
 8003f24:	2402d390 	.word	0x2402d390

08003f28 <GUI_GetLayerPosEx>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	f000 fdf1 	bl	8004b14 <LCD_GetPosEx>
 8003f32:	b110      	cbz	r0, 8003f3a <GUI_GetLayerPosEx+0x12>
 8003f34:	2300      	movs	r3, #0
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}

08003f3c <GUI_SelectLayer>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4d08      	ldr	r5, [pc, #32]	; (8003f60 <GUI_SelectLayer+0x24>)
 8003f40:	2801      	cmp	r0, #1
 8003f42:	4604      	mov	r4, r0
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	7c5e      	ldrb	r6, [r3, #17]
 8003f48:	d808      	bhi.n	8003f5c <GUI_SelectLayer+0x20>
 8003f4a:	f7ff feeb 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8003f4e:	b128      	cbz	r0, 8003f5c <GUI_SelectLayer+0x20>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	745c      	strb	r4, [r3, #17]
 8003f54:	f7ff fcf7 	bl	8003946 <GUI_SelectLCD>
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <GUI_SelectLayer+0x28>)
 8003f5a:	601c      	str	r4, [r3, #0]
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	24000028 	.word	0x24000028
 8003f64:	2402d6b8 	.word	0x2402d6b8

08003f68 <_GetCharCode>:
 8003f68:	7800      	ldrb	r0, [r0, #0]
 8003f6a:	4770      	bx	lr

08003f6c <_GetCharSize>:
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	4770      	bx	lr

08003f70 <_CalcSizeOfChar>:
 8003f70:	2001      	movs	r0, #1
 8003f72:	4770      	bx	lr

08003f74 <_Encode>:
 8003f74:	7001      	strb	r1, [r0, #0]
 8003f76:	2001      	movs	r0, #1
 8003f78:	4770      	bx	lr
	...

08003f7c <GUI_SignalEvent>:
 8003f7c:	4b02      	ldr	r3, [pc, #8]	; (8003f88 <GUI_SignalEvent+0xc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b103      	cbz	r3, 8003f84 <GUI_SignalEvent+0x8>
 8003f82:	4718      	bx	r3
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	2402d3f0 	.word	0x2402d3f0

08003f8c <GUI__IntersectRect>:
 8003f8c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003f90:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003f9a:	bfb8      	it	lt
 8003f9c:	8003      	strhlt	r3, [r0, #0]
 8003f9e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8003fa8:	bfb8      	it	lt
 8003faa:	8043      	strhlt	r3, [r0, #2]
 8003fac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003fb6:	bfc8      	it	gt
 8003fb8:	8083      	strhgt	r3, [r0, #4]
 8003fba:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	bfc8      	it	gt
 8003fc2:	80c3      	strhgt	r3, [r0, #6]
 8003fc4:	4770      	bx	lr

08003fc6 <GUI__IntersectRects>:
 8003fc6:	b570      	push	{r4, r5, r6, lr}
 8003fc8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003fcc:	4606      	mov	r6, r0
 8003fce:	f9b2 5000 	ldrsh.w	r5, [r2]
 8003fd2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	bfb8      	it	lt
 8003fda:	461d      	movlt	r5, r3
 8003fdc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003fe0:	8005      	strh	r5, [r0, #0]
 8003fe2:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8003fe6:	4283      	cmp	r3, r0
 8003fe8:	bfb8      	it	lt
 8003fea:	4603      	movlt	r3, r0
 8003fec:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8003ff0:	4284      	cmp	r4, r0
 8003ff2:	8073      	strh	r3, [r6, #2]
 8003ff4:	bfa8      	it	ge
 8003ff6:	4604      	movge	r4, r0
 8003ff8:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8003ffc:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8004000:	80b4      	strh	r4, [r6, #4]
 8004002:	4282      	cmp	r2, r0
 8004004:	bfa8      	it	ge
 8004006:	4602      	movge	r2, r0
 8004008:	42a5      	cmp	r5, r4
 800400a:	80f2      	strh	r2, [r6, #6]
 800400c:	dc04      	bgt.n	8004018 <GUI__IntersectRects+0x52>
 800400e:	4293      	cmp	r3, r2
 8004010:	bfcc      	ite	gt
 8004012:	2000      	movgt	r0, #0
 8004014:	2001      	movle	r0, #1
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	2000      	movs	r0, #0
 800401a:	bd70      	pop	{r4, r5, r6, pc}

0800401c <GUI__memset>:
 800401c:	b2c9      	uxtb	r1, r1
 800401e:	4603      	mov	r3, r0
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	b12a      	cbz	r2, 8004030 <GUI__memset+0x14>
 8004024:	079c      	lsls	r4, r3, #30
 8004026:	d003      	beq.n	8004030 <GUI__memset+0x14>
 8004028:	f803 1b01 	strb.w	r1, [r3], #1
 800402c:	3a01      	subs	r2, #1
 800402e:	e7f8      	b.n	8004022 <GUI__memset+0x6>
 8004030:	0895      	lsrs	r5, r2, #2
 8004032:	d101      	bne.n	8004038 <GUI__memset+0x1c>
 8004034:	441a      	add	r2, r3
 8004036:	e01a      	b.n	800406e <GUI__memset+0x52>
 8004038:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800403c:	f002 0203 	and.w	r2, r2, #3
 8004040:	434c      	muls	r4, r1
 8004042:	2d03      	cmp	r5, #3
 8004044:	461e      	mov	r6, r3
 8004046:	f103 0310 	add.w	r3, r3, #16
 800404a:	dd09      	ble.n	8004060 <GUI__memset+0x44>
 800404c:	f843 4c10 	str.w	r4, [r3, #-16]
 8004050:	3d04      	subs	r5, #4
 8004052:	f843 4c0c 	str.w	r4, [r3, #-12]
 8004056:	f843 4c08 	str.w	r4, [r3, #-8]
 800405a:	f843 4c04 	str.w	r4, [r3, #-4]
 800405e:	e7f0      	b.n	8004042 <GUI__memset+0x26>
 8004060:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8004064:	429e      	cmp	r6, r3
 8004066:	d0e5      	beq.n	8004034 <GUI__memset+0x18>
 8004068:	f846 4b04 	str.w	r4, [r6], #4
 800406c:	e7fa      	b.n	8004064 <GUI__memset+0x48>
 800406e:	4293      	cmp	r3, r2
 8004070:	d002      	beq.n	8004078 <GUI__memset+0x5c>
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	e7fa      	b.n	800406e <GUI__memset+0x52>
 8004078:	bd70      	pop	{r4, r5, r6, pc}

0800407a <GUI__memset16>:
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	0784      	lsls	r4, r0, #30
 800407e:	bf42      	ittt	mi
 8004080:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8004084:	8001      	strhmi	r1, [r0, #0]
 8004086:	3002      	addmi	r0, #2
 8004088:	0854      	lsrs	r4, r2, #1
 800408a:	d023      	beq.n	80040d4 <GUI__memset16+0x5a>
 800408c:	2c03      	cmp	r4, #3
 800408e:	4623      	mov	r3, r4
 8004090:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8004094:	d802      	bhi.n	800409c <GUI__memset16+0x22>
 8004096:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800409a:	e016      	b.n	80040ca <GUI__memset16+0x50>
 800409c:	f100 0310 	add.w	r3, r0, #16
 80040a0:	4626      	mov	r6, r4
 80040a2:	3e04      	subs	r6, #4
 80040a4:	f843 5c10 	str.w	r5, [r3, #-16]
 80040a8:	f843 5c0c 	str.w	r5, [r3, #-12]
 80040ac:	3310      	adds	r3, #16
 80040ae:	2e03      	cmp	r6, #3
 80040b0:	f843 5c18 	str.w	r5, [r3, #-24]
 80040b4:	f843 5c14 	str.w	r5, [r3, #-20]
 80040b8:	dcf3      	bgt.n	80040a2 <GUI__memset16+0x28>
 80040ba:	3c04      	subs	r4, #4
 80040bc:	08a3      	lsrs	r3, r4, #2
 80040be:	1c5e      	adds	r6, r3, #1
 80040c0:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 80040c4:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 80040c8:	e7e5      	b.n	8004096 <GUI__memset16+0x1c>
 80040ca:	4298      	cmp	r0, r3
 80040cc:	d002      	beq.n	80040d4 <GUI__memset16+0x5a>
 80040ce:	f840 5b04 	str.w	r5, [r0], #4
 80040d2:	e7fa      	b.n	80040ca <GUI__memset16+0x50>
 80040d4:	07d3      	lsls	r3, r2, #31
 80040d6:	bf48      	it	mi
 80040d8:	8001      	strhmi	r1, [r0, #0]
 80040da:	bd70      	pop	{r4, r5, r6, pc}

080040dc <_SetDrawMode>:
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <_SetDrawMode+0x24>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	7c1a      	ldrb	r2, [r3, #16]
 80040e4:	ea82 0100 	eor.w	r1, r2, r0
 80040e8:	0749      	lsls	r1, r1, #29
 80040ea:	d505      	bpl.n	80040f8 <_SetDrawMode+0x1c>
 80040ec:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80040ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040f0:	6825      	ldr	r5, [r4, #0]
 80040f2:	680e      	ldr	r6, [r1, #0]
 80040f4:	6026      	str	r6, [r4, #0]
 80040f6:	600d      	str	r5, [r1, #0]
 80040f8:	7418      	strb	r0, [r3, #16]
 80040fa:	4610      	mov	r0, r2
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
 80040fe:	bf00      	nop
 8004100:	24000028 	.word	0x24000028

08004104 <LCD_SetDrawMode>:
 8004104:	4b01      	ldr	r3, [pc, #4]	; (800410c <LCD_SetDrawMode+0x8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4718      	bx	r3
 800410c:	24000034 	.word	0x24000034

08004110 <LCD_DrawPixel>:
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <LCD_DrawPixel+0x58>)
 8004112:	460a      	mov	r2, r1
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800411a:	4291      	cmp	r1, r2
 800411c:	b430      	push	{r4, r5}
 800411e:	4604      	mov	r4, r0
 8004120:	dc20      	bgt.n	8004164 <LCD_DrawPixel+0x54>
 8004122:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8004126:	428a      	cmp	r2, r1
 8004128:	dc1c      	bgt.n	8004164 <LCD_DrawPixel+0x54>
 800412a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800412e:	4281      	cmp	r1, r0
 8004130:	dc18      	bgt.n	8004164 <LCD_DrawPixel+0x54>
 8004132:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8004136:	4288      	cmp	r0, r1
 8004138:	dc14      	bgt.n	8004164 <LCD_DrawPixel+0x54>
 800413a:	7c19      	ldrb	r1, [r3, #16]
 800413c:	7c58      	ldrb	r0, [r3, #17]
 800413e:	f011 0f01 	tst.w	r1, #1
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <LCD_DrawPixel+0x5c>)
 8004144:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004148:	d004      	beq.n	8004154 <LCD_DrawPixel+0x44>
 800414a:	68c3      	ldr	r3, [r0, #12]
 800414c:	4621      	mov	r1, r4
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	bc30      	pop	{r4, r5}
 8004152:	4718      	bx	r3
 8004154:	68c1      	ldr	r1, [r0, #12]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	698d      	ldr	r5, [r1, #24]
 800415a:	4621      	mov	r1, r4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	46ac      	mov	ip, r5
 8004160:	bc30      	pop	{r4, r5}
 8004162:	4760      	bx	ip
 8004164:	bc30      	pop	{r4, r5}
 8004166:	4770      	bx	lr
 8004168:	24000028 	.word	0x24000028
 800416c:	2402d67c 	.word	0x2402d67c

08004170 <LCD_DrawHLine>:
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <LCD_DrawHLine+0x48>)
 8004172:	b430      	push	{r4, r5}
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	460d      	mov	r5, r1
 8004178:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800417c:	428b      	cmp	r3, r1
 800417e:	dc19      	bgt.n	80041b4 <LCD_DrawHLine+0x44>
 8004180:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004184:	4299      	cmp	r1, r3
 8004186:	dc15      	bgt.n	80041b4 <LCD_DrawHLine+0x44>
 8004188:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800418c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004190:	4281      	cmp	r1, r0
 8004192:	bfb8      	it	lt
 8004194:	4601      	movlt	r1, r0
 8004196:	4293      	cmp	r3, r2
 8004198:	bfa8      	it	ge
 800419a:	4613      	movge	r3, r2
 800419c:	4299      	cmp	r1, r3
 800419e:	dc09      	bgt.n	80041b4 <LCD_DrawHLine+0x44>
 80041a0:	7c60      	ldrb	r0, [r4, #17]
 80041a2:	4a06      	ldr	r2, [pc, #24]	; (80041bc <LCD_DrawHLine+0x4c>)
 80041a4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80041a8:	68c2      	ldr	r2, [r0, #12]
 80041aa:	6894      	ldr	r4, [r2, #8]
 80041ac:	462a      	mov	r2, r5
 80041ae:	46a4      	mov	ip, r4
 80041b0:	bc30      	pop	{r4, r5}
 80041b2:	4760      	bx	ip
 80041b4:	bc30      	pop	{r4, r5}
 80041b6:	4770      	bx	lr
 80041b8:	24000028 	.word	0x24000028
 80041bc:	2402d67c 	.word	0x2402d67c

080041c0 <LCD_FillRect>:
 80041c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041c2:	4c13      	ldr	r4, [pc, #76]	; (8004210 <LCD_FillRect+0x50>)
 80041c4:	6824      	ldr	r4, [r4, #0]
 80041c6:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80041ca:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80041ce:	4285      	cmp	r5, r0
 80041d0:	bfb8      	it	lt
 80041d2:	4605      	movlt	r5, r0
 80041d4:	4296      	cmp	r6, r2
 80041d6:	bfa8      	it	ge
 80041d8:	4616      	movge	r6, r2
 80041da:	42ae      	cmp	r6, r5
 80041dc:	db15      	blt.n	800420a <LCD_FillRect+0x4a>
 80041de:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80041e2:	428a      	cmp	r2, r1
 80041e4:	bfb8      	it	lt
 80041e6:	460a      	movlt	r2, r1
 80041e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ec:	428b      	cmp	r3, r1
 80041ee:	bfa8      	it	ge
 80041f0:	460b      	movge	r3, r1
 80041f2:	429a      	cmp	r2, r3
 80041f4:	dc09      	bgt.n	800420a <LCD_FillRect+0x4a>
 80041f6:	7c60      	ldrb	r0, [r4, #17]
 80041f8:	4906      	ldr	r1, [pc, #24]	; (8004214 <LCD_FillRect+0x54>)
 80041fa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80041fe:	68c1      	ldr	r1, [r0, #12]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4633      	mov	r3, r6
 8004204:	690c      	ldr	r4, [r1, #16]
 8004206:	4629      	mov	r1, r5
 8004208:	47a0      	blx	r4
 800420a:	b002      	add	sp, #8
 800420c:	bd70      	pop	{r4, r5, r6, pc}
 800420e:	bf00      	nop
 8004210:	24000028 	.word	0x24000028
 8004214:	2402d67c 	.word	0x2402d67c

08004218 <LCD__DrawBitmap_1bpp>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	b08f      	sub	sp, #60	; 0x3c
 800421e:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80043ec <LCD__DrawBitmap_1bpp+0x1d4>
 8004222:	460c      	mov	r4, r1
 8004224:	4617      	mov	r7, r2
 8004226:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8004228:	f8de e000 	ldr.w	lr, [lr]
 800422c:	9502      	str	r5, [sp, #8]
 800422e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004230:	9007      	str	r0, [sp, #28]
 8004232:	9508      	str	r5, [sp, #32]
 8004234:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	9503      	str	r5, [sp, #12]
 800423a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800423e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8004240:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004244:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8004246:	f1be 0f00 	cmp.w	lr, #0
 800424a:	d002      	beq.n	8004252 <LCD__DrawBitmap_1bpp+0x3a>
 800424c:	f8de 4000 	ldr.w	r4, [lr]
 8004250:	e054      	b.n	80042fc <LCD__DrawBitmap_1bpp+0xe4>
 8004252:	9b02      	ldr	r3, [sp, #8]
 8004254:	9a08      	ldr	r2, [sp, #32]
 8004256:	4313      	orrs	r3, r2
 8004258:	2b01      	cmp	r3, #1
 800425a:	d154      	bne.n	8004306 <LCD__DrawBitmap_1bpp+0xee>
 800425c:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <LCD__DrawBitmap_1bpp+0x1cc>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8004264:	1a53      	subs	r3, r2, r1
 8004266:	2b00      	cmp	r3, #0
 8004268:	dd0a      	ble.n	8004280 <LCD__DrawBitmap_1bpp+0x68>
 800426a:	9901      	ldr	r1, [sp, #4]
 800426c:	ebc3 0e01 	rsb	lr, r3, r1
 8004270:	f1be 0f00 	cmp.w	lr, #0
 8004274:	f340 80b2 	ble.w	80043dc <LCD__DrawBitmap_1bpp+0x1c4>
 8004278:	9903      	ldr	r1, [sp, #12]
 800427a:	fb01 6603 	mla	r6, r1, r3, r6
 800427e:	e002      	b.n	8004286 <LCD__DrawBitmap_1bpp+0x6e>
 8004280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004284:	460a      	mov	r2, r1
 8004286:	9b01      	ldr	r3, [sp, #4]
 8004288:	441c      	add	r4, r3
 800428a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800428e:	3c01      	subs	r4, #1
 8004290:	1ae4      	subs	r4, r4, r3
 8004292:	2c00      	cmp	r4, #0
 8004294:	dd05      	ble.n	80042a2 <LCD__DrawBitmap_1bpp+0x8a>
 8004296:	ebc4 0e0e 	rsb	lr, r4, lr
 800429a:	f1be 0f00 	cmp.w	lr, #0
 800429e:	f340 809d 	ble.w	80043dc <LCD__DrawBitmap_1bpp+0x1c4>
 80042a2:	9b07      	ldr	r3, [sp, #28]
 80042a4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80042a8:	443b      	add	r3, r7
 80042aa:	3b01      	subs	r3, #1
 80042ac:	1a5b      	subs	r3, r3, r1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfc8      	it	gt
 80042b2:	1aff      	subgt	r7, r7, r3
 80042b4:	9b07      	ldr	r3, [sp, #28]
 80042b6:	1b59      	subs	r1, r3, r5
 80042b8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80042bc:	4299      	cmp	r1, r3
 80042be:	da09      	bge.n	80042d4 <LCD__DrawBitmap_1bpp+0xbc>
 80042c0:	1a5b      	subs	r3, r3, r1
 80042c2:	441d      	add	r5, r3
 80042c4:	1aff      	subs	r7, r7, r3
 80042c6:	f023 0307 	bic.w	r3, r3, #7
 80042ca:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 80042ce:	f005 0507 	and.w	r5, r5, #7
 80042d2:	4419      	add	r1, r3
 80042d4:	2f00      	cmp	r7, #0
 80042d6:	f340 8081 	ble.w	80043dc <LCD__DrawBitmap_1bpp+0x1c4>
 80042da:	7c40      	ldrb	r0, [r0, #17]
 80042dc:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <LCD__DrawBitmap_1bpp+0x1d0>)
 80042de:	9c03      	ldr	r4, [sp, #12]
 80042e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80042e4:	68c3      	ldr	r3, [r0, #12]
 80042e6:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 80042ea:	951c      	str	r5, [sp, #112]	; 0x70
 80042ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80042ee:	941a      	str	r4, [sp, #104]	; 0x68
 80042f0:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 80042f4:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 80042f8:	685c      	ldr	r4, [r3, #4]
 80042fa:	463b      	mov	r3, r7
 80042fc:	46a4      	mov	ip, r4
 80042fe:	b00f      	add	sp, #60	; 0x3c
 8004300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4760      	bx	ip
 8004306:	f1ca 0308 	rsb	r3, sl, #8
 800430a:	4675      	mov	r5, lr
 800430c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80043e4 <LCD__DrawBitmap_1bpp+0x1cc>
 8004310:	930b      	str	r3, [sp, #44]	; 0x2c
 8004312:	9b02      	ldr	r3, [sp, #8]
 8004314:	f8cd e014 	str.w	lr, [sp, #20]
 8004318:	3b01      	subs	r3, #1
 800431a:	930d      	str	r3, [sp, #52]	; 0x34
 800431c:	9b05      	ldr	r3, [sp, #20]
 800431e:	9a01      	ldr	r2, [sp, #4]
 8004320:	4293      	cmp	r3, r2
 8004322:	da5b      	bge.n	80043dc <LCD__DrawBitmap_1bpp+0x1c4>
 8004324:	9b08      	ldr	r3, [sp, #32]
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	9309      	str	r3, [sp, #36]	; 0x24
 800432a:	3b01      	subs	r3, #1
 800432c:	930a      	str	r3, [sp, #40]	; 0x28
 800432e:	f8d9 3000 	ldr.w	r3, [r9]
 8004332:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004334:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004338:	428a      	cmp	r2, r1
 800433a:	dc48      	bgt.n	80043ce <LCD__DrawBitmap_1bpp+0x1b6>
 800433c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004340:	429c      	cmp	r4, r3
 8004342:	dc44      	bgt.n	80043ce <LCD__DrawBitmap_1bpp+0x1b6>
 8004344:	9b07      	ldr	r3, [sp, #28]
 8004346:	f04f 0800 	mov.w	r8, #0
 800434a:	9606      	str	r6, [sp, #24]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004352:	9b04      	ldr	r3, [sp, #16]
 8004354:	42bb      	cmp	r3, r7
 8004356:	da3a      	bge.n	80043ce <LCD__DrawBitmap_1bpp+0x1b6>
 8004358:	f1b8 0f00 	cmp.w	r8, #0
 800435c:	d105      	bne.n	800436a <LCD__DrawBitmap_1bpp+0x152>
 800435e:	9b06      	ldr	r3, [sp, #24]
 8004360:	f04f 0808 	mov.w	r8, #8
 8004364:	781d      	ldrb	r5, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	9306      	str	r3, [sp, #24]
 800436a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800436c:	ebca 0808 	rsb	r8, sl, r8
 8004370:	fa45 f303 	asr.w	r3, r5, r3
 8004374:	fa05 f50a 	lsl.w	r5, r5, sl
 8004378:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800437c:	b2ed      	uxtb	r5, r5
 800437e:	d104      	bne.n	800438a <LCD__DrawBitmap_1bpp+0x172>
 8004380:	f8d9 2000 	ldr.w	r2, [r9]
 8004384:	7c12      	ldrb	r2, [r2, #16]
 8004386:	0792      	lsls	r2, r2, #30
 8004388:	d419      	bmi.n	80043be <LCD__DrawBitmap_1bpp+0x1a6>
 800438a:	f8d9 2000 	ldr.w	r2, [r9]
 800438e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004390:	6810      	ldr	r0, [r2, #0]
 8004392:	900c      	str	r0, [sp, #48]	; 0x30
 8004394:	f1bb 0f00 	cmp.w	fp, #0
 8004398:	d002      	beq.n	80043a0 <LCD__DrawBitmap_1bpp+0x188>
 800439a:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800439e:	e000      	b.n	80043a2 <LCD__DrawBitmap_1bpp+0x18a>
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	9900      	ldr	r1, [sp, #0]
 80043a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043aa:	440a      	add	r2, r1
 80043ac:	9800      	ldr	r0, [sp, #0]
 80043ae:	4621      	mov	r1, r4
 80043b0:	f7ff ff06 	bl	80041c0 <LCD_FillRect>
 80043b4:	f8d9 3000 	ldr.w	r3, [r9]
 80043b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	9b04      	ldr	r3, [sp, #16]
 80043c0:	9a02      	ldr	r2, [sp, #8]
 80043c2:	3301      	adds	r3, #1
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	9b00      	ldr	r3, [sp, #0]
 80043c8:	4413      	add	r3, r2
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	e7c1      	b.n	8004352 <LCD__DrawBitmap_1bpp+0x13a>
 80043ce:	9b05      	ldr	r3, [sp, #20]
 80043d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80043d2:	3301      	adds	r3, #1
 80043d4:	9305      	str	r3, [sp, #20]
 80043d6:	9b03      	ldr	r3, [sp, #12]
 80043d8:	441e      	add	r6, r3
 80043da:	e79f      	b.n	800431c <LCD__DrawBitmap_1bpp+0x104>
 80043dc:	b00f      	add	sp, #60	; 0x3c
 80043de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop
 80043e4:	24000028 	.word	0x24000028
 80043e8:	2402d67c 	.word	0x2402d67c
 80043ec:	2402d638 	.word	0x2402d638

080043f0 <LCD_DrawBitmap>:
 80043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	b08f      	sub	sp, #60	; 0x3c
 80043f6:	f8df e218 	ldr.w	lr, [pc, #536]	; 8004610 <LCD_DrawBitmap+0x220>
 80043fa:	4605      	mov	r5, r0
 80043fc:	4690      	mov	r8, r2
 80043fe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004400:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004402:	9402      	str	r4, [sp, #8]
 8004404:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004406:	f8de e000 	ldr.w	lr, [lr]
 800440a:	9408      	str	r4, [sp, #32]
 800440c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800440e:	9100      	str	r1, [sp, #0]
 8004410:	9403      	str	r4, [sp, #12]
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004416:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004418:	9604      	str	r6, [sp, #16]
 800441a:	f1be 0f00 	cmp.w	lr, #0
 800441e:	d002      	beq.n	8004426 <LCD_DrawBitmap+0x36>
 8004420:	f8de 4000 	ldr.w	r4, [lr]
 8004424:	e07a      	b.n	800451c <LCD_DrawBitmap+0x12c>
 8004426:	9b02      	ldr	r3, [sp, #8]
 8004428:	9a08      	ldr	r2, [sp, #32]
 800442a:	4313      	orrs	r3, r2
 800442c:	2b01      	cmp	r3, #1
 800442e:	d17a      	bne.n	8004526 <LCD_DrawBitmap+0x136>
 8004430:	4b75      	ldr	r3, [pc, #468]	; (8004608 <LCD_DrawBitmap+0x218>)
 8004432:	9901      	ldr	r1, [sp, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	9b00      	ldr	r3, [sp, #0]
 8004438:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	dd07      	ble.n	8004452 <LCD_DrawBitmap+0x62>
 8004442:	1ac9      	subs	r1, r1, r3
 8004444:	2900      	cmp	r1, #0
 8004446:	f340 80db 	ble.w	8004600 <LCD_DrawBitmap+0x210>
 800444a:	9e03      	ldr	r6, [sp, #12]
 800444c:	fb06 4403 	mla	r4, r6, r3, r4
 8004450:	e000      	b.n	8004454 <LCD_DrawBitmap+0x64>
 8004452:	9a00      	ldr	r2, [sp, #0]
 8004454:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8004458:	441e      	add	r6, r3
 800445a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800445e:	3e01      	subs	r6, #1
 8004460:	1af6      	subs	r6, r6, r3
 8004462:	2e00      	cmp	r6, #0
 8004464:	dd03      	ble.n	800446e <LCD_DrawBitmap+0x7e>
 8004466:	1b89      	subs	r1, r1, r6
 8004468:	2900      	cmp	r1, #0
 800446a:	f340 80c9 	ble.w	8004600 <LCD_DrawBitmap+0x210>
 800446e:	eb05 0308 	add.w	r3, r5, r8
 8004472:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8004476:	3b01      	subs	r3, #1
 8004478:	1b9b      	subs	r3, r3, r6
 800447a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfc8      	it	gt
 8004482:	ebc3 0808 	rsbgt	r8, r3, r8
 8004486:	42b5      	cmp	r5, r6
 8004488:	da31      	bge.n	80044ee <LCD_DrawBitmap+0xfe>
 800448a:	1b73      	subs	r3, r6, r5
 800448c:	2f08      	cmp	r7, #8
 800448e:	ebc3 0808 	rsb	r8, r3, r8
 8004492:	d027      	beq.n	80044e4 <LCD_DrawBitmap+0xf4>
 8004494:	dc0d      	bgt.n	80044b2 <LCD_DrawBitmap+0xc2>
 8004496:	2f02      	cmp	r7, #2
 8004498:	d014      	beq.n	80044c4 <LCD_DrawBitmap+0xd4>
 800449a:	2f04      	cmp	r7, #4
 800449c:	d01a      	beq.n	80044d4 <LCD_DrawBitmap+0xe4>
 800449e:	2f01      	cmp	r7, #1
 80044a0:	d126      	bne.n	80044f0 <LCD_DrawBitmap+0x100>
 80044a2:	f023 0607 	bic.w	r6, r3, #7
 80044a6:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	4435      	add	r5, r6
 80044b0:	e01e      	b.n	80044f0 <LCD_DrawBitmap+0x100>
 80044b2:	2f18      	cmp	r7, #24
 80044b4:	d018      	beq.n	80044e8 <LCD_DrawBitmap+0xf8>
 80044b6:	2f20      	cmp	r7, #32
 80044b8:	d016      	beq.n	80044e8 <LCD_DrawBitmap+0xf8>
 80044ba:	2f10      	cmp	r7, #16
 80044bc:	d118      	bne.n	80044f0 <LCD_DrawBitmap+0x100>
 80044be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80044c2:	e013      	b.n	80044ec <LCD_DrawBitmap+0xfc>
 80044c4:	f023 0603 	bic.w	r6, r3, #3
 80044c8:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	4435      	add	r5, r6
 80044d2:	e00d      	b.n	80044f0 <LCD_DrawBitmap+0x100>
 80044d4:	f023 0601 	bic.w	r6, r3, #1
 80044d8:	eb04 0463 	add.w	r4, r4, r3, asr #1
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	4435      	add	r5, r6
 80044e2:	e005      	b.n	80044f0 <LCD_DrawBitmap+0x100>
 80044e4:	441c      	add	r4, r3
 80044e6:	e001      	b.n	80044ec <LCD_DrawBitmap+0xfc>
 80044e8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80044ec:	4635      	mov	r5, r6
 80044ee:	2300      	movs	r3, #0
 80044f0:	f1b8 0f00 	cmp.w	r8, #0
 80044f4:	f340 8084 	ble.w	8004600 <LCD_DrawBitmap+0x210>
 80044f8:	7c46      	ldrb	r6, [r0, #17]
 80044fa:	4844      	ldr	r0, [pc, #272]	; (800460c <LCD_DrawBitmap+0x21c>)
 80044fc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8004500:	9e04      	ldr	r6, [sp, #16]
 8004502:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8004506:	931c      	str	r3, [sp, #112]	; 0x70
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	9118      	str	r1, [sp, #96]	; 0x60
 800450c:	4629      	mov	r1, r5
 800450e:	931a      	str	r3, [sp, #104]	; 0x68
 8004510:	4643      	mov	r3, r8
 8004512:	961d      	str	r6, [sp, #116]	; 0x74
 8004514:	941b      	str	r4, [sp, #108]	; 0x6c
 8004516:	9719      	str	r7, [sp, #100]	; 0x64
 8004518:	f8de 4004 	ldr.w	r4, [lr, #4]
 800451c:	46a4      	mov	ip, r4
 800451e:	b00f      	add	sp, #60	; 0x3c
 8004520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004524:	4760      	bx	ip
 8004526:	f1c7 0308 	rsb	r3, r7, #8
 800452a:	46f3      	mov	fp, lr
 800452c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004608 <LCD_DrawBitmap+0x218>
 8004530:	930b      	str	r3, [sp, #44]	; 0x2c
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	f8cd e018 	str.w	lr, [sp, #24]
 8004538:	3b01      	subs	r3, #1
 800453a:	930d      	str	r3, [sp, #52]	; 0x34
 800453c:	9b06      	ldr	r3, [sp, #24]
 800453e:	9a01      	ldr	r2, [sp, #4]
 8004540:	4293      	cmp	r3, r2
 8004542:	da5d      	bge.n	8004600 <LCD_DrawBitmap+0x210>
 8004544:	9a00      	ldr	r2, [sp, #0]
 8004546:	9b08      	ldr	r3, [sp, #32]
 8004548:	4413      	add	r3, r2
 800454a:	9309      	str	r3, [sp, #36]	; 0x24
 800454c:	3b01      	subs	r3, #1
 800454e:	930a      	str	r3, [sp, #40]	; 0x28
 8004550:	f8da 3000 	ldr.w	r3, [sl]
 8004554:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004556:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800455a:	428a      	cmp	r2, r1
 800455c:	dc48      	bgt.n	80045f0 <LCD_DrawBitmap+0x200>
 800455e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004562:	9a00      	ldr	r2, [sp, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	dc43      	bgt.n	80045f0 <LCD_DrawBitmap+0x200>
 8004568:	f04f 0900 	mov.w	r9, #0
 800456c:	462e      	mov	r6, r5
 800456e:	9407      	str	r4, [sp, #28]
 8004570:	f8cd 9014 	str.w	r9, [sp, #20]
 8004574:	9b05      	ldr	r3, [sp, #20]
 8004576:	4543      	cmp	r3, r8
 8004578:	da3a      	bge.n	80045f0 <LCD_DrawBitmap+0x200>
 800457a:	f1b9 0f00 	cmp.w	r9, #0
 800457e:	d106      	bne.n	800458e <LCD_DrawBitmap+0x19e>
 8004580:	9b07      	ldr	r3, [sp, #28]
 8004582:	f04f 0908 	mov.w	r9, #8
 8004586:	f893 b000 	ldrb.w	fp, [r3]
 800458a:	3301      	adds	r3, #1
 800458c:	9307      	str	r3, [sp, #28]
 800458e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004590:	fa0b f207 	lsl.w	r2, fp, r7
 8004594:	ebc7 0909 	rsb	r9, r7, r9
 8004598:	fa4b f303 	asr.w	r3, fp, r3
 800459c:	fa5f fb82 	uxtb.w	fp, r2
 80045a0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80045a4:	d104      	bne.n	80045b0 <LCD_DrawBitmap+0x1c0>
 80045a6:	f8da 2000 	ldr.w	r2, [sl]
 80045aa:	7c12      	ldrb	r2, [r2, #16]
 80045ac:	0792      	lsls	r2, r2, #30
 80045ae:	d417      	bmi.n	80045e0 <LCD_DrawBitmap+0x1f0>
 80045b0:	f8da 2000 	ldr.w	r2, [sl]
 80045b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045b6:	6810      	ldr	r0, [r2, #0]
 80045b8:	900c      	str	r0, [sp, #48]	; 0x30
 80045ba:	9804      	ldr	r0, [sp, #16]
 80045bc:	b110      	cbz	r0, 80045c4 <LCD_DrawBitmap+0x1d4>
 80045be:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80045c2:	e000      	b.n	80045c6 <LCD_DrawBitmap+0x1d6>
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4630      	mov	r0, r6
 80045ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ce:	4432      	add	r2, r6
 80045d0:	9900      	ldr	r1, [sp, #0]
 80045d2:	f7ff fdf5 	bl	80041c0 <LCD_FillRect>
 80045d6:	f8da 3000 	ldr.w	r3, [sl]
 80045da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	9b05      	ldr	r3, [sp, #20]
 80045e2:	9a02      	ldr	r2, [sp, #8]
 80045e4:	3301      	adds	r3, #1
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	4633      	mov	r3, r6
 80045ea:	4413      	add	r3, r2
 80045ec:	461e      	mov	r6, r3
 80045ee:	e7c1      	b.n	8004574 <LCD_DrawBitmap+0x184>
 80045f0:	9b06      	ldr	r3, [sp, #24]
 80045f2:	3301      	adds	r3, #1
 80045f4:	9306      	str	r3, [sp, #24]
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	441c      	add	r4, r3
 80045fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	e79d      	b.n	800453c <LCD_DrawBitmap+0x14c>
 8004600:	b00f      	add	sp, #60	; 0x3c
 8004602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	24000028 	.word	0x24000028
 800460c:	2402d67c 	.word	0x2402d67c
 8004610:	2402d638 	.word	0x2402d638

08004614 <LCD_SetClipRectMax>:
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <LCD_SetClipRectMax+0x14>)
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <LCD_SetClipRectMax+0x18>)
 800461a:	7c4a      	ldrb	r2, [r1, #17]
 800461c:	3108      	adds	r1, #8
 800461e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004622:	68c3      	ldr	r3, [r0, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4718      	bx	r3
 8004628:	24000028 	.word	0x24000028
 800462c:	2402d67c 	.word	0x2402d67c

08004630 <emWin_LCD_Init>:
 8004630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004632:	f7ff ffef 	bl	8004614 <LCD_SetClipRectMax>
 8004636:	f000 f8bb 	bl	80047b0 <LCD_InitColors>
 800463a:	4604      	mov	r4, r0
 800463c:	2800      	cmp	r0, #0
 800463e:	d144      	bne.n	80046ca <emWin_LCD_Init+0x9a>
 8004640:	4605      	mov	r5, r0
 8004642:	4628      	mov	r0, r5
 8004644:	f7ff fb6e 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004648:	9001      	str	r0, [sp, #4]
 800464a:	b150      	cbz	r0, 8004662 <emWin_LCD_Init+0x32>
 800464c:	68c3      	ldr	r3, [r0, #12]
 800464e:	210c      	movs	r1, #12
 8004650:	a801      	add	r0, sp, #4
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	4798      	blx	r3
 8004656:	4603      	mov	r3, r0
 8004658:	2800      	cmp	r0, #0
 800465a:	d034      	beq.n	80046c6 <emWin_LCD_Init+0x96>
 800465c:	9801      	ldr	r0, [sp, #4]
 800465e:	4798      	blx	r3
 8004660:	4304      	orrs	r4, r0
 8004662:	3501      	adds	r5, #1
 8004664:	2d02      	cmp	r5, #2
 8004666:	d1ec      	bne.n	8004642 <emWin_LCD_Init+0x12>
 8004668:	bb7c      	cbnz	r4, 80046ca <emWin_LCD_Init+0x9a>
 800466a:	f000 f8f7 	bl	800485c <LCD_InitLUT>
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <emWin_LCD_Init+0xa0>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004676:	429a      	cmp	r2, r3
 8004678:	d101      	bne.n	800467e <emWin_LCD_Init+0x4e>
 800467a:	2000      	movs	r0, #0
 800467c:	e026      	b.n	80046cc <emWin_LCD_Init+0x9c>
 800467e:	2401      	movs	r4, #1
 8004680:	4620      	mov	r0, r4
 8004682:	f7ff fb4f 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004686:	9001      	str	r0, [sp, #4]
 8004688:	b1c8      	cbz	r0, 80046be <emWin_LCD_Init+0x8e>
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff fc56 	bl	8003f3c <GUI_SelectLayer>
 8004690:	2004      	movs	r0, #4
 8004692:	f7ff fd37 	bl	8004104 <LCD_SetDrawMode>
 8004696:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800469a:	2100      	movs	r1, #0
 800469c:	461a      	mov	r2, r3
 800469e:	4608      	mov	r0, r1
 80046a0:	f7ff fd8e 	bl	80041c0 <LCD_FillRect>
 80046a4:	2000      	movs	r0, #0
 80046a6:	f7ff fd2d 	bl	8004104 <LCD_SetDrawMode>
 80046aa:	9b01      	ldr	r3, [sp, #4]
 80046ac:	210e      	movs	r1, #14
 80046ae:	a801      	add	r0, sp, #4
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	4798      	blx	r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	b108      	cbz	r0, 80046be <emWin_LCD_Init+0x8e>
 80046ba:	9801      	ldr	r0, [sp, #4]
 80046bc:	4798      	blx	r3
 80046be:	f114 34ff 	adds.w	r4, r4, #4294967295
 80046c2:	d2dd      	bcs.n	8004680 <emWin_LCD_Init+0x50>
 80046c4:	e7d9      	b.n	800467a <emWin_LCD_Init+0x4a>
 80046c6:	2001      	movs	r0, #1
 80046c8:	e000      	b.n	80046cc <emWin_LCD_Init+0x9c>
 80046ca:	4620      	mov	r0, r4
 80046cc:	b003      	add	sp, #12
 80046ce:	bd30      	pop	{r4, r5, pc}
 80046d0:	24000024 	.word	0x24000024

080046d4 <LCD_Color2Index>:
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <LCD_Color2Index+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	7c5a      	ldrb	r2, [r3, #17]
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <LCD_Color2Index+0x18>)
 80046dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4718      	bx	r3
 80046e6:	bf00      	nop
 80046e8:	24000028 	.word	0x24000028
 80046ec:	2402d67c 	.word	0x2402d67c

080046f0 <LCD_Index2Color>:
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <LCD_Index2Color+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	7c5a      	ldrb	r2, [r3, #17]
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <LCD_Index2Color+0x18>)
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4718      	bx	r3
 8004702:	bf00      	nop
 8004704:	24000028 	.word	0x24000028
 8004708:	2402d67c 	.word	0x2402d67c

0800470c <LCD_SetColorIndex>:
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <LCD_SetColorIndex+0x14>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	7c1a      	ldrb	r2, [r3, #16]
 8004712:	0752      	lsls	r2, r2, #29
 8004714:	bf4c      	ite	mi
 8004716:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8004718:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800471a:	6018      	str	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	24000028 	.word	0x24000028

08004724 <_SetColor>:
 8004724:	b508      	push	{r3, lr}
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <_SetColor+0x1c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800472c:	4281      	cmp	r1, r0
 800472e:	d006      	beq.n	800473e <_SetColor+0x1a>
 8004730:	6318      	str	r0, [r3, #48]	; 0x30
 8004732:	f7ff ffcf 	bl	80046d4 <LCD_Color2Index>
 8004736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800473a:	f7ff bfe7 	b.w	800470c <LCD_SetColorIndex>
 800473e:	bd08      	pop	{r3, pc}
 8004740:	24000028 	.word	0x24000028

08004744 <LCD_SetBkColorIndex>:
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <LCD_SetBkColorIndex+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	7c1a      	ldrb	r2, [r3, #16]
 800474a:	0752      	lsls	r2, r2, #29
 800474c:	bf4c      	ite	mi
 800474e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8004750:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8004752:	6018      	str	r0, [r3, #0]
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	24000028 	.word	0x24000028

0800475c <_SetBkColor>:
 800475c:	b508      	push	{r3, lr}
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <_SetBkColor+0x1c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004764:	4281      	cmp	r1, r0
 8004766:	d006      	beq.n	8004776 <_SetBkColor+0x1a>
 8004768:	6358      	str	r0, [r3, #52]	; 0x34
 800476a:	f7ff ffb3 	bl	80046d4 <LCD_Color2Index>
 800476e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004772:	f7ff bfe7 	b.w	8004744 <LCD_SetBkColorIndex>
 8004776:	bd08      	pop	{r3, pc}
 8004778:	24000028 	.word	0x24000028

0800477c <LCD_SetBkColor>:
 800477c:	4b01      	ldr	r3, [pc, #4]	; (8004784 <LCD_SetBkColor+0x8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4718      	bx	r3
 8004784:	24000034 	.word	0x24000034

08004788 <LCD_SetColor>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <LCD_SetColor+0x8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4718      	bx	r3
 8004790:	24000034 	.word	0x24000034

08004794 <_OnExit>:
 8004794:	b510      	push	{r4, lr}
 8004796:	4c04      	ldr	r4, [pc, #16]	; (80047a8 <_OnExit+0x14>)
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	f7fe fdfd 	bl	8003398 <GUI_ALLOC_FreeFixedBlock>
 800479e:	2300      	movs	r3, #0
 80047a0:	4a02      	ldr	r2, [pc, #8]	; (80047ac <_OnExit+0x18>)
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	bd10      	pop	{r4, pc}
 80047a8:	2402d68c 	.word	0x2402d68c
 80047ac:	2402d3f8 	.word	0x2402d3f8

080047b0 <LCD_InitColors>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d0a      	ldr	r5, [pc, #40]	; (80047dc <LCD_InitColors+0x2c>)
 80047b4:	682c      	ldr	r4, [r5, #0]
 80047b6:	b964      	cbnz	r4, 80047d2 <LCD_InitColors+0x22>
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <LCD_InitColors+0x30>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	0080      	lsls	r0, r0, #2
 80047be:	f7fe fec3 	bl	8003548 <GUI_ALLOC_GetFixedBlock>
 80047c2:	6028      	str	r0, [r5, #0]
 80047c4:	b138      	cbz	r0, 80047d6 <LCD_InitColors+0x26>
 80047c6:	4807      	ldr	r0, [pc, #28]	; (80047e4 <LCD_InitColors+0x34>)
 80047c8:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <LCD_InitColors+0x38>)
 80047ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80047ce:	f7ff fa95 	bl	8003cfc <GUI__RegisterExit>
 80047d2:	2000      	movs	r0, #0
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
 80047d6:	2001      	movs	r0, #1
 80047d8:	bd38      	pop	{r3, r4, r5, pc}
 80047da:	bf00      	nop
 80047dc:	2402d68c 	.word	0x2402d68c
 80047e0:	24000038 	.word	0x24000038
 80047e4:	2402d3f8 	.word	0x2402d3f8
 80047e8:	08004795 	.word	0x08004795

080047ec <LCD_GetpPalConvTableUncached>:
 80047ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f0:	4604      	mov	r4, r0
 80047f2:	b318      	cbz	r0, 800483c <LCD_GetpPalConvTableUncached+0x50>
 80047f4:	6887      	ldr	r7, [r0, #8]
 80047f6:	b31f      	cbz	r7, 8004840 <LCD_GetpPalConvTableUncached+0x54>
 80047f8:	4d14      	ldr	r5, [pc, #80]	; (800484c <LCD_GetpPalConvTableUncached+0x60>)
 80047fa:	6828      	ldr	r0, [r5, #0]
 80047fc:	b320      	cbz	r0, 8004848 <LCD_GetpPalConvTableUncached+0x5c>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004804:	dc1f      	bgt.n	8004846 <LCD_GetpPalConvTableUncached+0x5a>
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <LCD_GetpPalConvTableUncached+0x64>)
 8004808:	2600      	movs	r6, #0
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	bfa8      	it	ge
 8004810:	461a      	movge	r2, r3
 8004812:	4690      	mov	r8, r2
 8004814:	4546      	cmp	r6, r8
 8004816:	da09      	bge.n	800482c <LCD_GetpPalConvTableUncached+0x40>
 8004818:	f8d5 9000 	ldr.w	r9, [r5]
 800481c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8004820:	f7ff ff58 	bl	80046d4 <LCD_Color2Index>
 8004824:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 8004828:	3601      	adds	r6, #1
 800482a:	e7f3      	b.n	8004814 <LCD_GetpPalConvTableUncached+0x28>
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <LCD_GetpPalConvTableUncached+0x68>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b10b      	cbz	r3, 8004836 <LCD_GetpPalConvTableUncached+0x4a>
 8004832:	4620      	mov	r0, r4
 8004834:	4798      	blx	r3
 8004836:	6828      	ldr	r0, [r5, #0]
 8004838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800483c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004840:	4638      	mov	r0, r7
 8004842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004846:	2000      	movs	r0, #0
 8004848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800484c:	2402d68c 	.word	0x2402d68c
 8004850:	24000038 	.word	0x24000038
 8004854:	2402d3f8 	.word	0x2402d3f8

08004858 <LCD_GetpPalConvTableBM>:
 8004858:	f7ff bfc8 	b.w	80047ec <LCD_GetpPalConvTableUncached>

0800485c <LCD_InitLUT>:
 800485c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	4e1d      	ldr	r6, [pc, #116]	; (80048d8 <LCD_InitLUT+0x7c>)
 8004862:	f000 f928 	bl	8004ab6 <LCD_GetNumLayers>
 8004866:	2400      	movs	r4, #0
 8004868:	4680      	mov	r8, r0
 800486a:	46b1      	mov	r9, r6
 800486c:	f8df a070 	ldr.w	sl, [pc, #112]	; 80048e0 <LCD_InitLUT+0x84>
 8004870:	4544      	cmp	r4, r8
 8004872:	da2d      	bge.n	80048d0 <LCD_InitLUT+0x74>
 8004874:	4620      	mov	r0, r4
 8004876:	f7ff fa55 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 800487a:	b338      	cbz	r0, 80048cc <LCD_InitLUT+0x70>
 800487c:	6833      	ldr	r3, [r6, #0]
 800487e:	4620      	mov	r0, r4
 8004880:	f893 b011 	ldrb.w	fp, [r3, #17]
 8004884:	745c      	strb	r4, [r3, #17]
 8004886:	f000 f853 	bl	8004930 <LCD_GetBitsPerPixelEx>
 800488a:	2808      	cmp	r0, #8
 800488c:	dd04      	ble.n	8004898 <LCD_InitLUT+0x3c>
 800488e:	f8d9 3000 	ldr.w	r3, [r9]
 8004892:	f883 b011 	strb.w	fp, [r3, #17]
 8004896:	e019      	b.n	80048cc <LCD_InitLUT+0x70>
 8004898:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <LCD_InitLUT+0x80>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d0f4      	beq.n	800488e <LCD_InitLUT+0x32>
 80048a4:	4620      	mov	r0, r4
 80048a6:	2500      	movs	r5, #0
 80048a8:	f000 f845 	bl	8004936 <LCD_GetNumColorsEx>
 80048ac:	4603      	mov	r3, r0
 80048ae:	429d      	cmp	r5, r3
 80048b0:	daed      	bge.n	800488e <LCD_InitLUT+0x32>
 80048b2:	b2ef      	uxtb	r7, r5
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	3501      	adds	r5, #1
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff ff19 	bl	80046f0 <LCD_Index2Color>
 80048be:	4639      	mov	r1, r7
 80048c0:	4602      	mov	r2, r0
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 f957 	bl	8004b76 <LCD_SetLUTEntryEx>
 80048c8:	9b01      	ldr	r3, [sp, #4]
 80048ca:	e7f0      	b.n	80048ae <LCD_InitLUT+0x52>
 80048cc:	3401      	adds	r4, #1
 80048ce:	e7cf      	b.n	8004870 <LCD_InitLUT+0x14>
 80048d0:	b003      	add	sp, #12
 80048d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d6:	bf00      	nop
 80048d8:	24000028 	.word	0x24000028
 80048dc:	08009810 	.word	0x08009810
 80048e0:	2402d67c 	.word	0x2402d67c

080048e4 <_GetDevProp>:
 80048e4:	2801      	cmp	r0, #1
 80048e6:	b510      	push	{r4, lr}
 80048e8:	460c      	mov	r4, r1
 80048ea:	dc08      	bgt.n	80048fe <_GetDevProp+0x1a>
 80048ec:	f7ff fa1a 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 80048f0:	b128      	cbz	r0, 80048fe <_GetDevProp+0x1a>
 80048f2:	68c3      	ldr	r3, [r0, #12]
 80048f4:	4621      	mov	r1, r4
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fc:	4718      	bx	r3
 80048fe:	2000      	movs	r0, #0
 8004900:	bd10      	pop	{r4, pc}

08004902 <_GetMaxValue>:
 8004902:	b538      	push	{r3, r4, r5, lr}
 8004904:	4601      	mov	r1, r0
 8004906:	4605      	mov	r5, r0
 8004908:	2001      	movs	r0, #1
 800490a:	f7ff ffeb 	bl	80048e4 <_GetDevProp>
 800490e:	4604      	mov	r4, r0
 8004910:	4629      	mov	r1, r5
 8004912:	2000      	movs	r0, #0
 8004914:	f7ff ffe6 	bl	80048e4 <_GetDevProp>
 8004918:	42a0      	cmp	r0, r4
 800491a:	bfb8      	it	lt
 800491c:	4620      	movlt	r0, r4
 800491e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004922:	bd38      	pop	{r3, r4, r5, pc}

08004924 <LCD_GetXSizeEx>:
 8004924:	2101      	movs	r1, #1
 8004926:	f7ff bfdd 	b.w	80048e4 <_GetDevProp>

0800492a <LCD_GetYSizeEx>:
 800492a:	2102      	movs	r1, #2
 800492c:	f7ff bfda 	b.w	80048e4 <_GetDevProp>

08004930 <LCD_GetBitsPerPixelEx>:
 8004930:	2108      	movs	r1, #8
 8004932:	f7ff bfd7 	b.w	80048e4 <_GetDevProp>

08004936 <LCD_GetNumColorsEx>:
 8004936:	2109      	movs	r1, #9
 8004938:	f7ff bfd4 	b.w	80048e4 <_GetDevProp>

0800493c <LCD_GetMirrorXEx>:
 800493c:	210c      	movs	r1, #12
 800493e:	f7ff bfd1 	b.w	80048e4 <_GetDevProp>

08004942 <LCD_GetMirrorYEx>:
 8004942:	210d      	movs	r1, #13
 8004944:	f7ff bfce 	b.w	80048e4 <_GetDevProp>

08004948 <LCD_GetSwapXYEx>:
 8004948:	210e      	movs	r1, #14
 800494a:	f7ff bfcb 	b.w	80048e4 <_GetDevProp>
	...

08004950 <LCD_GetXSize>:
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <LCD_GetXSize+0xc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	7c58      	ldrb	r0, [r3, #17]
 8004956:	f7ff bfe5 	b.w	8004924 <LCD_GetXSizeEx>
 800495a:	bf00      	nop
 800495c:	24000028 	.word	0x24000028

08004960 <LCD_GetYSize>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <LCD_GetYSize+0xc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	7c58      	ldrb	r0, [r3, #17]
 8004966:	f7ff bfe0 	b.w	800492a <LCD_GetYSizeEx>
 800496a:	bf00      	nop
 800496c:	24000028 	.word	0x24000028

08004970 <LCD_GetNumColors>:
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <LCD_GetNumColors+0xc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	7c58      	ldrb	r0, [r3, #17]
 8004976:	f7ff bfde 	b.w	8004936 <LCD_GetNumColorsEx>
 800497a:	bf00      	nop
 800497c:	24000028 	.word	0x24000028

08004980 <GUI_GetBitsPerPixelEx>:
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <GUI_GetBitsPerPixelEx+0x10>)
 8004982:	2108      	movs	r1, #8
 8004984:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004988:	68c3      	ldr	r3, [r0, #12]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	4718      	bx	r3
 800498e:	bf00      	nop
 8004990:	2402d67c 	.word	0x2402d67c

08004994 <LCD_GetPaletteEx>:
 8004994:	b510      	push	{r4, lr}
 8004996:	f7ff f9c5 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 800499a:	b128      	cbz	r0, 80049a8 <LCD_GetPaletteEx+0x14>
 800499c:	68c3      	ldr	r3, [r0, #12]
 800499e:	2102      	movs	r1, #2
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a6:	4718      	bx	r3
 80049a8:	bd10      	pop	{r4, pc}
	...

080049ac <LCD_GetPalette>:
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <LCD_GetPalette+0xc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	7c58      	ldrb	r0, [r3, #17]
 80049b2:	f7ff bfef 	b.w	8004994 <LCD_GetPaletteEx>
 80049b6:	bf00      	nop
 80049b8:	24000028 	.word	0x24000028

080049bc <GUI_GetpfIndex2ColorEx>:
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <GUI_GetpfIndex2ColorEx+0xc>)
 80049be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	6858      	ldr	r0, [r3, #4]
 80049c6:	4770      	bx	lr
 80049c8:	2402d67c 	.word	0x2402d67c

080049cc <GUI_GetpfColor2IndexEx>:
 80049cc:	4b02      	ldr	r3, [pc, #8]	; (80049d8 <GUI_GetpfColor2IndexEx+0xc>)
 80049ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	4770      	bx	lr
 80049d8:	2402d67c 	.word	0x2402d67c

080049dc <LCD_GetXSizeMax>:
 80049dc:	2001      	movs	r0, #1
 80049de:	f7ff bf90 	b.w	8004902 <_GetMaxValue>

080049e2 <LCD_GetYSizeMax>:
 80049e2:	2002      	movs	r0, #2
 80049e4:	f7ff bf8d 	b.w	8004902 <_GetMaxValue>

080049e8 <LCD_SetDisplaySize>:
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <LCD_SetDisplaySize+0x8>)
 80049ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80049ee:	4770      	bx	lr
 80049f0:	2402d404 	.word	0x2402d404

080049f4 <LCD_GetXSizeDisplay>:
 80049f4:	4b01      	ldr	r3, [pc, #4]	; (80049fc <LCD_GetXSizeDisplay+0x8>)
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	2402d404 	.word	0x2402d404

08004a00 <LCD_GetYSizeDisplay>:
 8004a00:	4b01      	ldr	r3, [pc, #4]	; (8004a08 <LCD_GetYSizeDisplay+0x8>)
 8004a02:	6858      	ldr	r0, [r3, #4]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2402d404 	.word	0x2402d404

08004a0c <LCD__GetBPP>:
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d03b      	beq.n	8004a88 <LCD__GetBPP+0x7c>
 8004a10:	f030 0301 	bics.w	r3, r0, #1
 8004a14:	d029      	beq.n	8004a6a <LCD__GetBPP+0x5e>
 8004a16:	f030 0303 	bics.w	r3, r0, #3
 8004a1a:	d028      	beq.n	8004a6e <LCD__GetBPP+0x62>
 8004a1c:	f030 0307 	bics.w	r3, r0, #7
 8004a20:	d027      	beq.n	8004a72 <LCD__GetBPP+0x66>
 8004a22:	f030 030f 	bics.w	r3, r0, #15
 8004a26:	d026      	beq.n	8004a76 <LCD__GetBPP+0x6a>
 8004a28:	f030 031f 	bics.w	r3, r0, #31
 8004a2c:	d025      	beq.n	8004a7a <LCD__GetBPP+0x6e>
 8004a2e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8004a32:	d024      	beq.n	8004a7e <LCD__GetBPP+0x72>
 8004a34:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	b30b      	cbz	r3, 8004a82 <LCD__GetBPP+0x76>
 8004a3e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8004a42:	f023 030f 	bic.w	r3, r3, #15
 8004a46:	b1e3      	cbz	r3, 8004a82 <LCD__GetBPP+0x76>
 8004a48:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8004a4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a50:	b1bb      	cbz	r3, 8004a82 <LCD__GetBPP+0x76>
 8004a52:	0c03      	lsrs	r3, r0, #16
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	b1a3      	cbz	r3, 8004a82 <LCD__GetBPP+0x76>
 8004a58:	0c83      	lsrs	r3, r0, #18
 8004a5a:	049b      	lsls	r3, r3, #18
 8004a5c:	b19b      	cbz	r3, 8004a86 <LCD__GetBPP+0x7a>
 8004a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a62:	bf0c      	ite	eq
 8004a64:	2018      	moveq	r0, #24
 8004a66:	2020      	movne	r0, #32
 8004a68:	4770      	bx	lr
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	4770      	bx	lr
 8004a6e:	2002      	movs	r0, #2
 8004a70:	4770      	bx	lr
 8004a72:	2003      	movs	r0, #3
 8004a74:	4770      	bx	lr
 8004a76:	2004      	movs	r0, #4
 8004a78:	4770      	bx	lr
 8004a7a:	2005      	movs	r0, #5
 8004a7c:	4770      	bx	lr
 8004a7e:	2008      	movs	r0, #8
 8004a80:	4770      	bx	lr
 8004a82:	2010      	movs	r0, #16
 8004a84:	4770      	bx	lr
 8004a86:	2012      	movs	r0, #18
 8004a88:	4770      	bx	lr

08004a8a <LCD__GetBPPDevice>:
 8004a8a:	b508      	push	{r3, lr}
 8004a8c:	f7ff ffbe 	bl	8004a0c <LCD__GetBPP>
 8004a90:	2801      	cmp	r0, #1
 8004a92:	d00f      	beq.n	8004ab4 <LCD__GetBPPDevice+0x2a>
 8004a94:	1e83      	subs	r3, r0, #2
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d909      	bls.n	8004aae <LCD__GetBPPDevice+0x24>
 8004a9a:	f1a0 0309 	sub.w	r3, r0, #9
 8004a9e:	2b07      	cmp	r3, #7
 8004aa0:	d907      	bls.n	8004ab2 <LCD__GetBPPDevice+0x28>
 8004aa2:	3811      	subs	r0, #17
 8004aa4:	280f      	cmp	r0, #15
 8004aa6:	bf8c      	ite	hi
 8004aa8:	2000      	movhi	r0, #0
 8004aaa:	2020      	movls	r0, #32
 8004aac:	bd08      	pop	{r3, pc}
 8004aae:	2008      	movs	r0, #8
 8004ab0:	bd08      	pop	{r3, pc}
 8004ab2:	2010      	movs	r0, #16
 8004ab4:	bd08      	pop	{r3, pc}

08004ab6 <LCD_GetNumLayers>:
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7ff f933 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004abe:	1c04      	adds	r4, r0, #0
 8004ac0:	f04f 0001 	mov.w	r0, #1
 8004ac4:	bf18      	it	ne
 8004ac6:	2401      	movne	r4, #1
 8004ac8:	f7ff f92c 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004acc:	b100      	cbz	r0, 8004ad0 <LCD_GetNumLayers+0x1a>
 8004ace:	3401      	adds	r4, #1
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	bd10      	pop	{r4, pc}

08004ad4 <LCD_SelectLCD>:
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <LCD_SelectLCD+0x38>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	7c51      	ldrb	r1, [r2, #17]
 8004adc:	461c      	mov	r4, r3
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <LCD_SelectLCD+0x3c>)
 8004ae0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004ae4:	b140      	cbz	r0, 8004af8 <LCD_SelectLCD+0x24>
 8004ae6:	68c3      	ldr	r3, [r0, #12]
 8004ae8:	b113      	cbz	r3, 8004af0 <LCD_SelectLCD+0x1c>
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d001      	beq.n	8004af4 <LCD_SelectLCD+0x20>
 8004af0:	6800      	ldr	r0, [r0, #0]
 8004af2:	e7f7      	b.n	8004ae4 <LCD_SelectLCD+0x10>
 8004af4:	f7ff f94e 	bl	8003d94 <GUI_DEVICE_Unlink>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60
 8004afe:	f103 0208 	add.w	r2, r3, #8
 8004b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b06:	615a      	str	r2, [r3, #20]
 8004b08:	f7ff bd84 	b.w	8004614 <LCD_SetClipRectMax>
 8004b0c:	24000028 	.word	0x24000028
 8004b10:	2402d67c 	.word	0x2402d67c

08004b14 <LCD_GetPosEx>:
 8004b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b16:	460c      	mov	r4, r1
 8004b18:	4615      	mov	r5, r2
 8004b1a:	f7ff f903 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004b1e:	9001      	str	r0, [sp, #4]
 8004b20:	b908      	cbnz	r0, 8004b26 <LCD_GetPosEx+0x12>
 8004b22:	2001      	movs	r0, #1
 8004b24:	e00d      	b.n	8004b42 <LCD_GetPosEx+0x2e>
 8004b26:	68c3      	ldr	r3, [r0, #12]
 8004b28:	2104      	movs	r1, #4
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	eb0d 0001 	add.w	r0, sp, r1
 8004b30:	4798      	blx	r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d0f4      	beq.n	8004b22 <LCD_GetPosEx+0xe>
 8004b38:	9801      	ldr	r0, [sp, #4]
 8004b3a:	462a      	mov	r2, r5
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4798      	blx	r3
 8004b40:	2000      	movs	r0, #0
 8004b42:	b003      	add	sp, #12
 8004b44:	bd30      	pop	{r4, r5, pc}

08004b46 <LCD_SetDevFunc>:
 8004b46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	4615      	mov	r5, r2
 8004b4c:	f7ff f8ea 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004b50:	9001      	str	r0, [sp, #4]
 8004b52:	b908      	cbnz	r0, 8004b58 <LCD_SetDevFunc+0x12>
 8004b54:	2001      	movs	r0, #1
 8004b56:	e00c      	b.n	8004b72 <LCD_SetDevFunc+0x2c>
 8004b58:	68c3      	ldr	r3, [r0, #12]
 8004b5a:	2116      	movs	r1, #22
 8004b5c:	a801      	add	r0, sp, #4
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	4798      	blx	r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0f5      	beq.n	8004b54 <LCD_SetDevFunc+0xe>
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	462a      	mov	r2, r5
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4798      	blx	r3
 8004b70:	2000      	movs	r0, #0
 8004b72:	b003      	add	sp, #12
 8004b74:	bd30      	pop	{r4, r5, pc}

08004b76 <LCD_SetLUTEntryEx>:
 8004b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b78:	460c      	mov	r4, r1
 8004b7a:	4615      	mov	r5, r2
 8004b7c:	f7ff f8d2 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004b80:	9001      	str	r0, [sp, #4]
 8004b82:	b908      	cbnz	r0, 8004b88 <LCD_SetLUTEntryEx+0x12>
 8004b84:	2001      	movs	r0, #1
 8004b86:	e00c      	b.n	8004ba2 <LCD_SetLUTEntryEx+0x2c>
 8004b88:	68c3      	ldr	r3, [r0, #12]
 8004b8a:	2110      	movs	r1, #16
 8004b8c:	a801      	add	r0, sp, #4
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	4798      	blx	r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d0f5      	beq.n	8004b84 <LCD_SetLUTEntryEx+0xe>
 8004b98:	9801      	ldr	r0, [sp, #4]
 8004b9a:	462a      	mov	r2, r5
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4798      	blx	r3
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	b003      	add	sp, #12
 8004ba4:	bd30      	pop	{r4, r5, pc}

08004ba6 <LCD_SetSizeEx>:
 8004ba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ba8:	460c      	mov	r4, r1
 8004baa:	4615      	mov	r5, r2
 8004bac:	f7ff f8ba 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004bb0:	9001      	str	r0, [sp, #4]
 8004bb2:	b908      	cbnz	r0, 8004bb8 <LCD_SetSizeEx+0x12>
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	e00c      	b.n	8004bd2 <LCD_SetSizeEx+0x2c>
 8004bb8:	68c3      	ldr	r3, [r0, #12]
 8004bba:	210b      	movs	r1, #11
 8004bbc:	a801      	add	r0, sp, #4
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	4798      	blx	r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0f5      	beq.n	8004bb4 <LCD_SetSizeEx+0xe>
 8004bc8:	9801      	ldr	r0, [sp, #4]
 8004bca:	462a      	mov	r2, r5
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4798      	blx	r3
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	b003      	add	sp, #12
 8004bd4:	bd30      	pop	{r4, r5, pc}

08004bd6 <LCD_SetVRAMAddrEx>:
 8004bd6:	b513      	push	{r0, r1, r4, lr}
 8004bd8:	460c      	mov	r4, r1
 8004bda:	f7ff f8a3 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004bde:	9001      	str	r0, [sp, #4]
 8004be0:	b908      	cbnz	r0, 8004be6 <LCD_SetVRAMAddrEx+0x10>
 8004be2:	2001      	movs	r0, #1
 8004be4:	e00b      	b.n	8004bfe <LCD_SetVRAMAddrEx+0x28>
 8004be6:	68c3      	ldr	r3, [r0, #12]
 8004be8:	2109      	movs	r1, #9
 8004bea:	a801      	add	r0, sp, #4
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	4798      	blx	r3
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d0f5      	beq.n	8004be2 <LCD_SetVRAMAddrEx+0xc>
 8004bf6:	9801      	ldr	r0, [sp, #4]
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4798      	blx	r3
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd10      	pop	{r4, pc}

08004c02 <LCD_SetVSizeEx>:
 8004c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c04:	460c      	mov	r4, r1
 8004c06:	4615      	mov	r5, r2
 8004c08:	f7ff f88c 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8004c0c:	9001      	str	r0, [sp, #4]
 8004c0e:	b908      	cbnz	r0, 8004c14 <LCD_SetVSizeEx+0x12>
 8004c10:	2001      	movs	r0, #1
 8004c12:	e00c      	b.n	8004c2e <LCD_SetVSizeEx+0x2c>
 8004c14:	68c3      	ldr	r3, [r0, #12]
 8004c16:	210a      	movs	r1, #10
 8004c18:	a801      	add	r0, sp, #4
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4798      	blx	r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d0f5      	beq.n	8004c10 <LCD_SetVSizeEx+0xe>
 8004c24:	9801      	ldr	r0, [sp, #4]
 8004c26:	462a      	mov	r2, r5
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4798      	blx	r3
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	b003      	add	sp, #12
 8004c30:	bd30      	pop	{r4, r5, pc}
	...

08004c34 <LCD_UpdateColorIndices>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4c07      	ldr	r4, [pc, #28]	; (8004c54 <LCD_UpdateColorIndices+0x20>)
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c3c:	f7ff fd4a 	bl	80046d4 <LCD_Color2Index>
 8004c40:	f7ff fd64 	bl	800470c <LCD_SetColorIndex>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004c48:	f7ff fd44 	bl	80046d4 <LCD_Color2Index>
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f7ff bd78 	b.w	8004744 <LCD_SetBkColorIndex>
 8004c54:	24000028 	.word	0x24000028

08004c58 <_GetRect>:
 8004c58:	6882      	ldr	r2, [r0, #8]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	800b      	strh	r3, [r1, #0]
 8004c5e:	804b      	strh	r3, [r1, #2]
 8004c60:	6993      	ldr	r3, [r2, #24]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	808b      	strh	r3, [r1, #4]
 8004c66:	69d3      	ldr	r3, [r2, #28]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	80cb      	strh	r3, [r1, #6]
 8004c6c:	4770      	bx	lr

08004c6e <_SetPixelIndex>:
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	6884      	ldr	r4, [r0, #8]
 8004c72:	6a20      	ldr	r0, [r4, #32]
 8004c74:	fb00 1202 	mla	r2, r0, r2, r1
 8004c78:	6821      	ldr	r1, [r4, #0]
 8004c7a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8004c7e:	bd10      	pop	{r4, pc}

08004c80 <_GetPixelIndex>:
 8004c80:	6880      	ldr	r0, [r0, #8]
 8004c82:	6a03      	ldr	r3, [r0, #32]
 8004c84:	fb03 1202 	mla	r2, r3, r2, r1
 8004c88:	6803      	ldr	r3, [r0, #0]
 8004c8a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8004c8e:	4770      	bx	lr

08004c90 <_XorPixel>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	4604      	mov	r4, r0
 8004c96:	460d      	mov	r5, r1
 8004c98:	4616      	mov	r6, r2
 8004c9a:	f7ff fff1 	bl	8004c80 <_GetPixelIndex>
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4798      	blx	r3
 8004ca6:	4632      	mov	r2, r6
 8004ca8:	ea87 0300 	eor.w	r3, r7, r0
 8004cac:	4629      	mov	r1, r5
 8004cae:	4620      	mov	r0, r4
 8004cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb4:	f7ff bfdb 	b.w	8004c6e <_SetPixelIndex>

08004cb8 <_GetDevProp>:
 8004cb8:	3901      	subs	r1, #1
 8004cba:	6883      	ldr	r3, [r0, #8]
 8004cbc:	290d      	cmp	r1, #13
 8004cbe:	d814      	bhi.n	8004cea <_GetDevProp+0x32>
 8004cc0:	e8df f001 	tbb	[pc, r1]
 8004cc4:	0f0d0b09 	.word	0x0f0d0b09
 8004cc8:	16131313 	.word	0x16131313
 8004ccc:	07111107 	.word	0x07111107
 8004cd0:	0707      	.short	0x0707
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	4770      	bx	lr
 8004cd6:	6918      	ldr	r0, [r3, #16]
 8004cd8:	4770      	bx	lr
 8004cda:	6958      	ldr	r0, [r3, #20]
 8004cdc:	4770      	bx	lr
 8004cde:	6998      	ldr	r0, [r3, #24]
 8004ce0:	4770      	bx	lr
 8004ce2:	69d8      	ldr	r0, [r3, #28]
 8004ce4:	4770      	bx	lr
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	4770      	bx	lr
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	4770      	bx	lr
 8004cf0:	2010      	movs	r0, #16
 8004cf2:	4770      	bx	lr

08004cf4 <_GetDevData>:
 8004cf4:	2901      	cmp	r1, #1
 8004cf6:	4802      	ldr	r0, [pc, #8]	; (8004d00 <_GetDevData+0xc>)
 8004cf8:	bf18      	it	ne
 8004cfa:	2000      	movne	r0, #0
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	0800979c 	.word	0x0800979c

08004d04 <_ReadRect>:
 8004d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d08:	6886      	ldr	r6, [r0, #8]
 8004d0a:	9d07      	ldr	r5, [sp, #28]
 8004d0c:	6a30      	ldr	r0, [r6, #32]
 8004d0e:	6836      	ldr	r6, [r6, #0]
 8004d10:	0047      	lsls	r7, r0, #1
 8004d12:	fb00 1002 	mla	r0, r0, r2, r1
 8004d16:	9c08      	ldr	r4, [sp, #32]
 8004d18:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8004d1c:	07c8      	lsls	r0, r1, #31
 8004d1e:	1a41      	subs	r1, r0, r1
 8004d20:	18c8      	adds	r0, r1, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	4419      	add	r1, r3
 8004d26:	0040      	lsls	r0, r0, #1
 8004d28:	2300      	movs	r3, #0
 8004d2a:	0049      	lsls	r1, r1, #1
 8004d2c:	eb03 0c06 	add.w	ip, r3, r6
 8004d30:	f1a4 0e02 	sub.w	lr, r4, #2
 8004d34:	eb04 0800 	add.w	r8, r4, r0
 8004d38:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8004d3c:	f82e 9f02 	strh.w	r9, [lr, #2]!
 8004d40:	45c6      	cmp	lr, r8
 8004d42:	d1f9      	bne.n	8004d38 <_ReadRect+0x34>
 8004d44:	3201      	adds	r2, #1
 8004d46:	440c      	add	r4, r1
 8004d48:	443b      	add	r3, r7
 8004d4a:	f102 3eff 	add.w	lr, r2, #4294967295
 8004d4e:	45ae      	cmp	lr, r5
 8004d50:	dbec      	blt.n	8004d2c <_ReadRect+0x28>
 8004d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004d58 <_GetDevFunc>:
 8004d58:	3901      	subs	r1, #1
 8004d5a:	2928      	cmp	r1, #40	; 0x28
 8004d5c:	d848      	bhi.n	8004df0 <_GetDevFunc+0x98>
 8004d5e:	e8df f001 	tbb	[pc, r1]
 8004d62:	1f45      	.short	0x1f45
 8004d64:	21471d1b 	.word	0x21471d1b
 8004d68:	17494747 	.word	0x17494747
 8004d6c:	25472319 	.word	0x25472319
 8004d70:	47474727 	.word	0x47474727
 8004d74:	332d2b29 	.word	0x332d2b29
 8004d78:	47354747 	.word	0x47354747
 8004d7c:	47474747 	.word	0x47474747
 8004d80:	312f3947 	.word	0x312f3947
 8004d84:	473d4741 	.word	0x473d4741
 8004d88:	4747      	.short	0x4747
 8004d8a:	15          	.byte	0x15
 8004d8b:	00          	.byte	0x00
 8004d8c:	481a      	ldr	r0, [pc, #104]	; (8004df8 <_GetDevFunc+0xa0>)
 8004d8e:	4770      	bx	lr
 8004d90:	481a      	ldr	r0, [pc, #104]	; (8004dfc <_GetDevFunc+0xa4>)
 8004d92:	4770      	bx	lr
 8004d94:	481a      	ldr	r0, [pc, #104]	; (8004e00 <_GetDevFunc+0xa8>)
 8004d96:	4770      	bx	lr
 8004d98:	481a      	ldr	r0, [pc, #104]	; (8004e04 <_GetDevFunc+0xac>)
 8004d9a:	4770      	bx	lr
 8004d9c:	481a      	ldr	r0, [pc, #104]	; (8004e08 <_GetDevFunc+0xb0>)
 8004d9e:	4770      	bx	lr
 8004da0:	481a      	ldr	r0, [pc, #104]	; (8004e0c <_GetDevFunc+0xb4>)
 8004da2:	4770      	bx	lr
 8004da4:	481a      	ldr	r0, [pc, #104]	; (8004e10 <_GetDevFunc+0xb8>)
 8004da6:	4770      	bx	lr
 8004da8:	481a      	ldr	r0, [pc, #104]	; (8004e14 <_GetDevFunc+0xbc>)
 8004daa:	4770      	bx	lr
 8004dac:	481a      	ldr	r0, [pc, #104]	; (8004e18 <_GetDevFunc+0xc0>)
 8004dae:	4770      	bx	lr
 8004db0:	481a      	ldr	r0, [pc, #104]	; (8004e1c <_GetDevFunc+0xc4>)
 8004db2:	4770      	bx	lr
 8004db4:	481a      	ldr	r0, [pc, #104]	; (8004e20 <_GetDevFunc+0xc8>)
 8004db6:	4770      	bx	lr
 8004db8:	481a      	ldr	r0, [pc, #104]	; (8004e24 <_GetDevFunc+0xcc>)
 8004dba:	4770      	bx	lr
 8004dbc:	481a      	ldr	r0, [pc, #104]	; (8004e28 <_GetDevFunc+0xd0>)
 8004dbe:	4770      	bx	lr
 8004dc0:	481a      	ldr	r0, [pc, #104]	; (8004e2c <_GetDevFunc+0xd4>)
 8004dc2:	4770      	bx	lr
 8004dc4:	481a      	ldr	r0, [pc, #104]	; (8004e30 <_GetDevFunc+0xd8>)
 8004dc6:	4770      	bx	lr
 8004dc8:	481a      	ldr	r0, [pc, #104]	; (8004e34 <_GetDevFunc+0xdc>)
 8004dca:	4770      	bx	lr
 8004dcc:	6803      	ldr	r3, [r0, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004dd2:	4770      	bx	lr
 8004dd4:	6803      	ldr	r3, [r0, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004dda:	4770      	bx	lr
 8004ddc:	6803      	ldr	r3, [r0, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004de2:	4770      	bx	lr
 8004de4:	6803      	ldr	r3, [r0, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004dea:	4770      	bx	lr
 8004dec:	4812      	ldr	r0, [pc, #72]	; (8004e38 <_GetDevFunc+0xe0>)
 8004dee:	4770      	bx	lr
 8004df0:	2000      	movs	r0, #0
 8004df2:	4770      	bx	lr
 8004df4:	4811      	ldr	r0, [pc, #68]	; (8004e3c <_GetDevFunc+0xe4>)
 8004df6:	4770      	bx	lr
 8004df8:	0800581d 	.word	0x0800581d
 8004dfc:	08005a2b 	.word	0x08005a2b
 8004e00:	080059e9 	.word	0x080059e9
 8004e04:	080058ef 	.word	0x080058ef
 8004e08:	08005801 	.word	0x08005801
 8004e0c:	0800589d 	.word	0x0800589d
 8004e10:	08005875 	.word	0x08005875
 8004e14:	0800585b 	.word	0x0800585b
 8004e18:	08004e8d 	.word	0x08004e8d
 8004e1c:	08004e83 	.word	0x08004e83
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004e57 	.word	0x08004e57
 8004e28:	08004e41 	.word	0x08004e41
 8004e2c:	0800579d 	.word	0x0800579d
 8004e30:	08005835 	.word	0x08005835
 8004e34:	0800574f 	.word	0x0800574f
 8004e38:	08004d05 	.word	0x08004d05
 8004e3c:	080058c5 	.word	0x080058c5

08004e40 <_SetChroma>:
 8004e40:	b507      	push	{r0, r1, r2, lr}
 8004e42:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004e46:	466a      	mov	r2, sp
 8004e48:	210d      	movs	r1, #13
 8004e4a:	6980      	ldr	r0, [r0, #24]
 8004e4c:	f7fe f88a 	bl	8002f64 <LCD_X_DisplayDriver>
 8004e50:	b003      	add	sp, #12
 8004e52:	f85d fb04 	ldr.w	pc, [sp], #4

08004e56 <_SetChromaMode>:
 8004e56:	b507      	push	{r0, r1, r2, lr}
 8004e58:	aa02      	add	r2, sp, #8
 8004e5a:	6980      	ldr	r0, [r0, #24]
 8004e5c:	f842 1d04 	str.w	r1, [r2, #-4]!
 8004e60:	210c      	movs	r1, #12
 8004e62:	f7fe f87f 	bl	8002f64 <LCD_X_DisplayDriver>
 8004e66:	b003      	add	sp, #12
 8004e68:	f85d fb04 	ldr.w	pc, [sp], #4

08004e6c <_SetAlphaMode>:
 8004e6c:	b507      	push	{r0, r1, r2, lr}
 8004e6e:	aa02      	add	r2, sp, #8
 8004e70:	6980      	ldr	r0, [r0, #24]
 8004e72:	f842 1d04 	str.w	r1, [r2, #-4]!
 8004e76:	210b      	movs	r1, #11
 8004e78:	f7fe f874 	bl	8002f64 <LCD_X_DisplayDriver>
 8004e7c:	b003      	add	sp, #12
 8004e7e:	f85d fb04 	ldr.w	pc, [sp], #4

08004e82 <_Off>:
 8004e82:	2200      	movs	r2, #0
 8004e84:	2106      	movs	r1, #6
 8004e86:	6980      	ldr	r0, [r0, #24]
 8004e88:	f7fe b86c 	b.w	8002f64 <LCD_X_DisplayDriver>

08004e8c <_On>:
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2105      	movs	r1, #5
 8004e90:	6980      	ldr	r0, [r0, #24]
 8004e92:	f7fe b867 	b.w	8002f64 <LCD_X_DisplayDriver>

08004e96 <_SetOrg>:
 8004e96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	6884      	ldr	r4, [r0, #8]
 8004ea0:	460d      	mov	r5, r1
 8004ea2:	6980      	ldr	r0, [r0, #24]
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	f7ff fd47 	bl	800493c <LCD_GetMirrorXEx>
 8004eae:	4680      	mov	r8, r0
 8004eb0:	69b8      	ldr	r0, [r7, #24]
 8004eb2:	f7ff fd46 	bl	8004942 <LCD_GetMirrorYEx>
 8004eb6:	4681      	mov	r9, r0
 8004eb8:	69b8      	ldr	r0, [r7, #24]
 8004eba:	f7ff fd45 	bl	8004948 <LCD_GetSwapXYEx>
 8004ebe:	0080      	lsls	r0, r0, #2
 8004ec0:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8004ec4:	ea40 0008 	orr.w	r0, r0, r8
 8004ec8:	2807      	cmp	r0, #7
 8004eca:	d826      	bhi.n	8004f1a <_SetOrg+0x84>
 8004ecc:	e8df f000 	tbb	[pc, r0]
 8004ed0:	0b0f0408 	.word	0x0b0f0408
 8004ed4:	1b1f1519 	.word	0x1b1f1519
 8004ed8:	69a3      	ldr	r3, [r4, #24]
 8004eda:	6921      	ldr	r1, [r4, #16]
 8004edc:	1a59      	subs	r1, r3, r1
 8004ede:	1b4d      	subs	r5, r1, r5
 8004ee0:	9500      	str	r5, [sp, #0]
 8004ee2:	9601      	str	r6, [sp, #4]
 8004ee4:	e019      	b.n	8004f1a <_SetOrg+0x84>
 8004ee6:	69a3      	ldr	r3, [r4, #24]
 8004ee8:	6921      	ldr	r1, [r4, #16]
 8004eea:	1a5b      	subs	r3, r3, r1
 8004eec:	1b5d      	subs	r5, r3, r5
 8004eee:	69e3      	ldr	r3, [r4, #28]
 8004ef0:	6962      	ldr	r2, [r4, #20]
 8004ef2:	9500      	str	r5, [sp, #0]
 8004ef4:	1a9a      	subs	r2, r3, r2
 8004ef6:	1b96      	subs	r6, r2, r6
 8004ef8:	e7f3      	b.n	8004ee2 <_SetOrg+0x4c>
 8004efa:	69e3      	ldr	r3, [r4, #28]
 8004efc:	6962      	ldr	r2, [r4, #20]
 8004efe:	1a9a      	subs	r2, r3, r2
 8004f00:	1b96      	subs	r6, r2, r6
 8004f02:	9600      	str	r6, [sp, #0]
 8004f04:	e008      	b.n	8004f18 <_SetOrg+0x82>
 8004f06:	69e3      	ldr	r3, [r4, #28]
 8004f08:	6962      	ldr	r2, [r4, #20]
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	1b9e      	subs	r6, r3, r6
 8004f0e:	69a3      	ldr	r3, [r4, #24]
 8004f10:	6921      	ldr	r1, [r4, #16]
 8004f12:	9600      	str	r6, [sp, #0]
 8004f14:	1a59      	subs	r1, r3, r1
 8004f16:	1b4d      	subs	r5, r1, r5
 8004f18:	9501      	str	r5, [sp, #4]
 8004f1a:	466a      	mov	r2, sp
 8004f1c:	2103      	movs	r1, #3
 8004f1e:	69b8      	ldr	r0, [r7, #24]
 8004f20:	f7fe f820 	bl	8002f64 <LCD_X_DisplayDriver>
 8004f24:	b003      	add	sp, #12
 8004f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004f2c <_FillRect>:
 8004f2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	6885      	ldr	r5, [r0, #8]
 8004f32:	469c      	mov	ip, r3
 8004f34:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8004f38:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8004f3c:	4e6c      	ldr	r6, [pc, #432]	; (80050f0 <_FillRect+0x1c4>)
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	d008      	beq.n	8004f56 <_FillRect+0x2a>
 8004f44:	6834      	ldr	r4, [r6, #0]
 8004f46:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8004f48:	6824      	ldr	r4, [r4, #0]
 8004f4a:	f8cd 8000 	str.w	r8, [sp]
 8004f4e:	9401      	str	r4, [sp, #4]
 8004f50:	6980      	ldr	r0, [r0, #24]
 8004f52:	47c8      	blx	r9
 8004f54:	e0c8      	b.n	80050e8 <_FillRect+0x1bc>
 8004f56:	f8d6 e000 	ldr.w	lr, [r6]
 8004f5a:	0848      	lsrs	r0, r1, #1
 8004f5c:	6a2e      	ldr	r6, [r5, #32]
 8004f5e:	ebc1 0c0c 	rsb	ip, r1, ip
 8004f62:	f001 0101 	and.w	r1, r1, #1
 8004f66:	1076      	asrs	r6, r6, #1
 8004f68:	fb06 0302 	mla	r3, r6, r2, r0
 8004f6c:	6828      	ldr	r0, [r5, #0]
 8004f6e:	ebc2 0208 	rsb	r2, r2, r8
 8004f72:	f10c 0501 	add.w	r5, ip, #1
 8004f76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004f7a:	f89e 3010 	ldrb.w	r3, [lr, #16]
 8004f7e:	1c57      	adds	r7, r2, #1
 8004f80:	f013 0f01 	tst.w	r3, #1
 8004f84:	d03d      	beq.n	8005002 <_FillRect+0xd6>
 8004f86:	b181      	cbz	r1, 8004faa <_FillRect+0x7e>
 8004f88:	00b1      	lsls	r1, r6, #2
 8004f8a:	463d      	mov	r5, r7
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	b145      	cbz	r5, 8004fa2 <_FillRect+0x76>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	3d01      	subs	r5, #1
 8004f94:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8004f98:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	440c      	add	r4, r1
 8004fa0:	e7f5      	b.n	8004f8e <_FillRect+0x62>
 8004fa2:	fb01 0107 	mla	r1, r1, r7, r0
 8004fa6:	4665      	mov	r5, ip
 8004fa8:	3004      	adds	r0, #4
 8004faa:	2d01      	cmp	r5, #1
 8004fac:	dd1b      	ble.n	8004fe6 <_FillRect+0xba>
 8004fae:	1eab      	subs	r3, r5, #2
 8004fb0:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8004fb4:	463c      	mov	r4, r7
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	fb0e 0202 	mla	r2, lr, r2, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	b174      	cbz	r4, 8004fe2 <_FillRect+0xb6>
 8004fc4:	3c01      	subs	r4, #1
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	4694      	mov	ip, r2
 8004fca:	f8dc 1000 	ldr.w	r1, [ip]
 8004fce:	3802      	subs	r0, #2
 8004fd0:	43c9      	mvns	r1, r1
 8004fd2:	2801      	cmp	r0, #1
 8004fd4:	f84c 1b04 	str.w	r1, [ip], #4
 8004fd8:	dcf7      	bgt.n	8004fca <_FillRect+0x9e>
 8004fda:	18d0      	adds	r0, r2, r3
 8004fdc:	ebce 0202 	rsb	r2, lr, r2
 8004fe0:	e7ef      	b.n	8004fc2 <_FillRect+0x96>
 8004fe2:	f005 0501 	and.w	r5, r5, #1
 8004fe6:	2d01      	cmp	r5, #1
 8004fe8:	d17e      	bne.n	80050e8 <_FillRect+0x1bc>
 8004fea:	00b6      	lsls	r6, r6, #2
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	d07b      	beq.n	80050e8 <_FillRect+0x1bc>
 8004ff0:	6803      	ldr	r3, [r0, #0]
 8004ff2:	3f01      	subs	r7, #1
 8004ff4:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8004ff8:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8004ffc:	6003      	str	r3, [r0, #0]
 8004ffe:	4430      	add	r0, r6
 8005000:	e7f4      	b.n	8004fec <_FillRect+0xc0>
 8005002:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 8005006:	f8d3 e000 	ldr.w	lr, [r3]
 800500a:	ea4f 480e 	mov.w	r8, lr, lsl #16
 800500e:	b171      	cbz	r1, 800502e <_FillRect+0x102>
 8005010:	00b1      	lsls	r1, r6, #2
 8005012:	463d      	mov	r5, r7
 8005014:	4604      	mov	r4, r0
 8005016:	b135      	cbz	r5, 8005026 <_FillRect+0xfa>
 8005018:	8823      	ldrh	r3, [r4, #0]
 800501a:	3d01      	subs	r5, #1
 800501c:	ea43 0308 	orr.w	r3, r3, r8
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	440c      	add	r4, r1
 8005024:	e7f7      	b.n	8005016 <_FillRect+0xea>
 8005026:	fb01 0107 	mla	r1, r1, r7, r0
 800502a:	4665      	mov	r5, ip
 800502c:	3004      	adds	r0, #4
 800502e:	2d0f      	cmp	r5, #15
 8005030:	eb08 030e 	add.w	r3, r8, lr
 8005034:	dd2f      	ble.n	8005096 <_FillRect+0x16a>
 8005036:	f1a5 0910 	sub.w	r9, r5, #16
 800503a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800503e:	46b8      	mov	r8, r7
 8005040:	ea4f 1419 	mov.w	r4, r9, lsr #4
 8005044:	fb0a 0c02 	mla	ip, sl, r2, r0
 8005048:	4608      	mov	r0, r1
 800504a:	3401      	adds	r4, #1
 800504c:	0164      	lsls	r4, r4, #5
 800504e:	f1b8 0f00 	cmp.w	r8, #0
 8005052:	d01d      	beq.n	8005090 <_FillRect+0x164>
 8005054:	f108 38ff 	add.w	r8, r8, #4294967295
 8005058:	f10c 0120 	add.w	r1, ip, #32
 800505c:	4648      	mov	r0, r9
 800505e:	3810      	subs	r0, #16
 8005060:	f841 3c20 	str.w	r3, [r1, #-32]
 8005064:	f841 3c1c 	str.w	r3, [r1, #-28]
 8005068:	f101 0120 	add.w	r1, r1, #32
 800506c:	f841 3c38 	str.w	r3, [r1, #-56]
 8005070:	f841 3c34 	str.w	r3, [r1, #-52]
 8005074:	f841 3c30 	str.w	r3, [r1, #-48]
 8005078:	f841 3c2c 	str.w	r3, [r1, #-44]
 800507c:	f841 3c28 	str.w	r3, [r1, #-40]
 8005080:	f841 3c24 	str.w	r3, [r1, #-36]
 8005084:	d5eb      	bpl.n	800505e <_FillRect+0x132>
 8005086:	eb0c 0004 	add.w	r0, ip, r4
 800508a:	ebca 0c0c 	rsb	ip, sl, ip
 800508e:	e7de      	b.n	800504e <_FillRect+0x122>
 8005090:	f005 050f 	and.w	r5, r5, #15
 8005094:	4601      	mov	r1, r0
 8005096:	2d01      	cmp	r5, #1
 8005098:	dd1b      	ble.n	80050d2 <_FillRect+0x1a6>
 800509a:	1eac      	subs	r4, r5, #2
 800509c:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 80050a0:	46b8      	mov	r8, r7
 80050a2:	0864      	lsrs	r4, r4, #1
 80050a4:	fb0c 0202 	mla	r2, ip, r2, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	3401      	adds	r4, #1
 80050ac:	00a4      	lsls	r4, r4, #2
 80050ae:	f1b8 0f00 	cmp.w	r8, #0
 80050b2:	d00c      	beq.n	80050ce <_FillRect+0x1a2>
 80050b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80050b8:	4629      	mov	r1, r5
 80050ba:	4610      	mov	r0, r2
 80050bc:	3902      	subs	r1, #2
 80050be:	f840 3b04 	str.w	r3, [r0], #4
 80050c2:	2901      	cmp	r1, #1
 80050c4:	dcfa      	bgt.n	80050bc <_FillRect+0x190>
 80050c6:	1910      	adds	r0, r2, r4
 80050c8:	ebcc 0202 	rsb	r2, ip, r2
 80050cc:	e7ef      	b.n	80050ae <_FillRect+0x182>
 80050ce:	f005 0501 	and.w	r5, r5, #1
 80050d2:	2d01      	cmp	r5, #1
 80050d4:	d108      	bne.n	80050e8 <_FillRect+0x1bc>
 80050d6:	00b6      	lsls	r6, r6, #2
 80050d8:	b137      	cbz	r7, 80050e8 <_FillRect+0x1bc>
 80050da:	8843      	ldrh	r3, [r0, #2]
 80050dc:	3f01      	subs	r7, #1
 80050de:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 80050e2:	6003      	str	r3, [r0, #0]
 80050e4:	4430      	add	r0, r6
 80050e6:	e7f7      	b.n	80050d8 <_FillRect+0x1ac>
 80050e8:	b002      	add	sp, #8
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ee:	bf00      	nop
 80050f0:	24000028 	.word	0x24000028

080050f4 <_DrawHLine>:
 80050f4:	b507      	push	{r0, r1, r2, lr}
 80050f6:	9200      	str	r2, [sp, #0]
 80050f8:	f7ff ff18 	bl	8004f2c <_FillRect>
 80050fc:	b003      	add	sp, #12
 80050fe:	f85d fb04 	ldr.w	pc, [sp], #4

08005102 <_DrawVLine>:
 8005102:	b507      	push	{r0, r1, r2, lr}
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	460b      	mov	r3, r1
 8005108:	f7ff ff10 	bl	8004f2c <_FillRect>
 800510c:	b003      	add	sp, #12
 800510e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005114 <_DrawBitmap>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	b08b      	sub	sp, #44	; 0x2c
 800511a:	4683      	mov	fp, r0
 800511c:	4688      	mov	r8, r1
 800511e:	6887      	ldr	r7, [r0, #8]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005124:	9203      	str	r2, [sp, #12]
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800512a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800512c:	9305      	str	r3, [sp, #20]
 800512e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005130:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005136:	3b01      	subs	r3, #1
 8005138:	2b0f      	cmp	r3, #15
 800513a:	f200 82f3 	bhi.w	8005724 <_DrawBitmap+0x610>
 800513e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005142:	0023      	.short	0x0023
 8005144:	02f10019 	.word	0x02f10019
 8005148:	02f10010 	.word	0x02f10010
 800514c:	02f102f1 	.word	0x02f102f1
 8005150:	02f10210 	.word	0x02f10210
 8005154:	02f102f1 	.word	0x02f102f1
 8005158:	02f102f1 	.word	0x02f102f1
 800515c:	02f102f1 	.word	0x02f102f1
 8005160:	02bd      	.short	0x02bd
 8005162:	2300      	movs	r3, #0
 8005164:	9a01      	ldr	r2, [sp, #4]
 8005166:	9306      	str	r3, [sp, #24]
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	18cb      	adds	r3, r1, r3
 800516c:	9308      	str	r3, [sp, #32]
 800516e:	4413      	add	r3, r2
 8005170:	9309      	str	r3, [sp, #36]	; 0x24
 8005172:	e169      	b.n	8005448 <_DrawBitmap+0x334>
 8005174:	2300      	movs	r3, #0
 8005176:	9306      	str	r3, [sp, #24]
 8005178:	9b02      	ldr	r3, [sp, #8]
 800517a:	18cb      	adds	r3, r1, r3
 800517c:	9308      	str	r3, [sp, #32]
 800517e:	9a08      	ldr	r2, [sp, #32]
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	4413      	add	r3, r2
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	e0bc      	b.n	8005302 <_DrawBitmap+0x1ee>
 8005188:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800518a:	b126      	cbz	r6, 8005196 <_DrawBitmap+0x82>
 800518c:	4ba3      	ldr	r3, [pc, #652]	; (800541c <_DrawBitmap+0x308>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	7c1b      	ldrb	r3, [r3, #16]
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d502      	bpl.n	800519c <_DrawBitmap+0x88>
 8005196:	f04f 0900 	mov.w	r9, #0
 800519a:	e061      	b.n	8005260 <_DrawBitmap+0x14c>
 800519c:	9b05      	ldr	r3, [sp, #20]
 800519e:	4641      	mov	r1, r8
 80051a0:	9518      	str	r5, [sp, #96]	; 0x60
 80051a2:	46b4      	mov	ip, r6
 80051a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	9a03      	ldr	r2, [sp, #12]
 80051aa:	9316      	str	r3, [sp, #88]	; 0x58
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	9315      	str	r3, [sp, #84]	; 0x54
 80051b0:	9b02      	ldr	r3, [sp, #8]
 80051b2:	9314      	str	r3, [sp, #80]	; 0x50
 80051b4:	4623      	mov	r3, r4
 80051b6:	6980      	ldr	r0, [r0, #24]
 80051b8:	b00b      	add	sp, #44	; 0x2c
 80051ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051be:	4760      	bx	ip
 80051c0:	686b      	ldr	r3, [r5, #4]
 80051c2:	f8db a008 	ldr.w	sl, [fp, #8]
 80051c6:	9307      	str	r3, [sp, #28]
 80051c8:	9902      	ldr	r1, [sp, #8]
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	f8da 2020 	ldr.w	r2, [sl, #32]
 80051d0:	4441      	add	r1, r8
 80051d2:	444b      	add	r3, r9
 80051d4:	fb02 1303 	mla	r3, r2, r3, r1
 80051d8:	9a02      	ldr	r2, [sp, #8]
 80051da:	4991      	ldr	r1, [pc, #580]	; (8005420 <_DrawBitmap+0x30c>)
 80051dc:	f1c2 0708 	rsb	r7, r2, #8
 80051e0:	7822      	ldrb	r2, [r4, #0]
 80051e2:	5c8e      	ldrb	r6, [r1, r2]
 80051e4:	0059      	lsls	r1, r3, #1
 80051e6:	9a02      	ldr	r2, [sp, #8]
 80051e8:	4116      	asrs	r6, r2
 80051ea:	4a8c      	ldr	r2, [pc, #560]	; (800541c <_DrawBitmap+0x308>)
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	7c12      	ldrb	r2, [r2, #16]
 80051f0:	f002 0203 	and.w	r2, r2, #3
 80051f4:	2a02      	cmp	r2, #2
 80051f6:	d037      	beq.n	8005268 <_DrawBitmap+0x154>
 80051f8:	2a03      	cmp	r2, #3
 80051fa:	d04e      	beq.n	800529a <_DrawBitmap+0x186>
 80051fc:	2a01      	cmp	r2, #1
 80051fe:	d04c      	beq.n	800529a <_DrawBitmap+0x186>
 8005200:	682a      	ldr	r2, [r5, #0]
 8005202:	9901      	ldr	r1, [sp, #4]
 8005204:	9208      	str	r2, [sp, #32]
 8005206:	f8da 2000 	ldr.w	r2, [sl]
 800520a:	9406      	str	r4, [sp, #24]
 800520c:	9209      	str	r2, [sp, #36]	; 0x24
 800520e:	42b9      	cmp	r1, r7
 8005210:	460a      	mov	r2, r1
 8005212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005214:	bf28      	it	cs
 8005216:	463a      	movcs	r2, r7
 8005218:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 800521c:	4696      	mov	lr, r2
 800521e:	9808      	ldr	r0, [sp, #32]
 8005220:	f016 0f01 	tst.w	r6, #1
 8005224:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005228:	4682      	mov	sl, r0
 800522a:	9807      	ldr	r0, [sp, #28]
 800522c:	bf18      	it	ne
 800522e:	4682      	movne	sl, r0
 8005230:	f1be 0e01 	subs.w	lr, lr, #1
 8005234:	f82c ab02 	strh.w	sl, [ip], #2
 8005238:	d1f1      	bne.n	800521e <_DrawBitmap+0x10a>
 800523a:	1abf      	subs	r7, r7, r2
 800523c:	4413      	add	r3, r2
 800523e:	eba1 0102 	sub.w	r1, r1, r2
 8005242:	d107      	bne.n	8005254 <_DrawBitmap+0x140>
 8005244:	9a06      	ldr	r2, [sp, #24]
 8005246:	2708      	movs	r7, #8
 8005248:	4875      	ldr	r0, [pc, #468]	; (8005420 <_DrawBitmap+0x30c>)
 800524a:	7852      	ldrb	r2, [r2, #1]
 800524c:	5c86      	ldrb	r6, [r0, r2]
 800524e:	9a06      	ldr	r2, [sp, #24]
 8005250:	3201      	adds	r2, #1
 8005252:	9206      	str	r2, [sp, #24]
 8005254:	2900      	cmp	r1, #0
 8005256:	d1da      	bne.n	800520e <_DrawBitmap+0xfa>
 8005258:	9b05      	ldr	r3, [sp, #20]
 800525a:	f109 0901 	add.w	r9, r9, #1
 800525e:	441c      	add	r4, r3
 8005260:	9b04      	ldr	r3, [sp, #16]
 8005262:	4599      	cmp	r9, r3
 8005264:	dbac      	blt.n	80051c0 <_DrawBitmap+0xac>
 8005266:	e25d      	b.n	8005724 <_DrawBitmap+0x610>
 8005268:	460b      	mov	r3, r1
 800526a:	4620      	mov	r0, r4
 800526c:	9901      	ldr	r1, [sp, #4]
 800526e:	07f2      	lsls	r2, r6, #31
 8005270:	bf42      	ittt	mi
 8005272:	f8da 2000 	ldrmi.w	r2, [sl]
 8005276:	f8bd e01c 	ldrhmi.w	lr, [sp, #28]
 800527a:	f822 e003 	strhmi.w	lr, [r2, r3]
 800527e:	3f01      	subs	r7, #1
 8005280:	f103 0302 	add.w	r3, r3, #2
 8005284:	bf09      	itett	eq
 8005286:	7842      	ldrbeq	r2, [r0, #1]
 8005288:	0876      	lsrne	r6, r6, #1
 800528a:	4e65      	ldreq	r6, [pc, #404]	; (8005420 <_DrawBitmap+0x30c>)
 800528c:	3001      	addeq	r0, #1
 800528e:	bf04      	itt	eq
 8005290:	2708      	moveq	r7, #8
 8005292:	5cb6      	ldrbeq	r6, [r6, r2]
 8005294:	3901      	subs	r1, #1
 8005296:	d1ea      	bne.n	800526e <_DrawBitmap+0x15a>
 8005298:	e7de      	b.n	8005258 <_DrawBitmap+0x144>
 800529a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800529e:	9106      	str	r1, [sp, #24]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4798      	blx	r3
 80052a4:	9906      	ldr	r1, [sp, #24]
 80052a6:	9a01      	ldr	r2, [sp, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	4621      	mov	r1, r4
 80052ac:	f016 0f01 	tst.w	r6, #1
 80052b0:	bf1f      	itttt	ne
 80052b2:	f8da c000 	ldrne.w	ip, [sl]
 80052b6:	f833 e00c 	ldrhne.w	lr, [r3, ip]
 80052ba:	ea80 0e0e 	eorne.w	lr, r0, lr
 80052be:	f823 e00c 	strhne.w	lr, [r3, ip]
 80052c2:	3f01      	subs	r7, #1
 80052c4:	f103 0302 	add.w	r3, r3, #2
 80052c8:	bf09      	itett	eq
 80052ca:	784e      	ldrbeq	r6, [r1, #1]
 80052cc:	0876      	lsrne	r6, r6, #1
 80052ce:	4f54      	ldreq	r7, [pc, #336]	; (8005420 <_DrawBitmap+0x30c>)
 80052d0:	3101      	addeq	r1, #1
 80052d2:	bf04      	itt	eq
 80052d4:	5dbe      	ldrbeq	r6, [r7, r6]
 80052d6:	2708      	moveq	r7, #8
 80052d8:	3a01      	subs	r2, #1
 80052da:	d1e7      	bne.n	80052ac <_DrawBitmap+0x198>
 80052dc:	e7bc      	b.n	8005258 <_DrawBitmap+0x144>
 80052de:	9b06      	ldr	r3, [sp, #24]
 80052e0:	9a03      	ldr	r2, [sp, #12]
 80052e2:	7826      	ldrb	r6, [r4, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	9307      	str	r3, [sp, #28]
 80052e8:	4b4c      	ldr	r3, [pc, #304]	; (800541c <_DrawBitmap+0x308>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	7c1b      	ldrb	r3, [r3, #16]
 80052ee:	f013 0303 	ands.w	r3, r3, #3
 80052f2:	d00b      	beq.n	800530c <_DrawBitmap+0x1f8>
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d04c      	beq.n	8005392 <_DrawBitmap+0x27e>
 80052f8:	9b05      	ldr	r3, [sp, #20]
 80052fa:	441c      	add	r4, r3
 80052fc:	9b06      	ldr	r3, [sp, #24]
 80052fe:	3301      	adds	r3, #1
 8005300:	9306      	str	r3, [sp, #24]
 8005302:	9b06      	ldr	r3, [sp, #24]
 8005304:	9a04      	ldr	r2, [sp, #16]
 8005306:	4293      	cmp	r3, r2
 8005308:	dbe9      	blt.n	80052de <_DrawBitmap+0x1ca>
 800530a:	e20b      	b.n	8005724 <_DrawBitmap+0x610>
 800530c:	9f02      	ldr	r7, [sp, #8]
 800530e:	46a0      	mov	r8, r4
 8005310:	9908      	ldr	r1, [sp, #32]
 8005312:	b305      	cbz	r5, 8005356 <_DrawBitmap+0x242>
 8005314:	9a01      	ldr	r2, [sp, #4]
 8005316:	eb01 0902 	add.w	r9, r1, r2
 800531a:	f1c7 0303 	rsb	r3, r7, #3
 800531e:	20c0      	movs	r0, #192	; 0xc0
 8005320:	3701      	adds	r7, #1
 8005322:	f101 0a01 	add.w	sl, r1, #1
 8005326:	005a      	lsls	r2, r3, #1
 8005328:	f1c2 0306 	rsb	r3, r2, #6
 800532c:	fa40 f303 	asr.w	r3, r0, r3
 8005330:	4658      	mov	r0, fp
 8005332:	4033      	ands	r3, r6
 8005334:	40d3      	lsrs	r3, r2
 8005336:	9a07      	ldr	r2, [sp, #28]
 8005338:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800533c:	f7ff fc97 	bl	8004c6e <_SetPixelIndex>
 8005340:	2f04      	cmp	r7, #4
 8005342:	4651      	mov	r1, sl
 8005344:	bf02      	ittt	eq
 8005346:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 800534a:	2700      	moveq	r7, #0
 800534c:	f108 0801 	addeq.w	r8, r8, #1
 8005350:	45ca      	cmp	sl, r9
 8005352:	d1e2      	bne.n	800531a <_DrawBitmap+0x206>
 8005354:	e7d0      	b.n	80052f8 <_DrawBitmap+0x1e4>
 8005356:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800535a:	f1c7 0203 	rsb	r2, r7, #3
 800535e:	3701      	adds	r7, #1
 8005360:	4658      	mov	r0, fp
 8005362:	f101 0901 	add.w	r9, r1, #1
 8005366:	0052      	lsls	r2, r2, #1
 8005368:	f1c2 0306 	rsb	r3, r2, #6
 800536c:	fa4a f303 	asr.w	r3, sl, r3
 8005370:	4033      	ands	r3, r6
 8005372:	40d3      	lsrs	r3, r2
 8005374:	9a07      	ldr	r2, [sp, #28]
 8005376:	f7ff fc7a 	bl	8004c6e <_SetPixelIndex>
 800537a:	2f04      	cmp	r7, #4
 800537c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537e:	4649      	mov	r1, r9
 8005380:	bf02      	ittt	eq
 8005382:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8005386:	2700      	moveq	r7, #0
 8005388:	f108 0801 	addeq.w	r8, r8, #1
 800538c:	4599      	cmp	r9, r3
 800538e:	d1e4      	bne.n	800535a <_DrawBitmap+0x246>
 8005390:	e7b2      	b.n	80052f8 <_DrawBitmap+0x1e4>
 8005392:	9f02      	ldr	r7, [sp, #8]
 8005394:	46a1      	mov	r9, r4
 8005396:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800539a:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800539e:	b355      	cbz	r5, 80053f6 <_DrawBitmap+0x2e2>
 80053a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a2:	ebc8 0103 	rsb	r1, r8, r3
 80053a6:	f1c7 0303 	rsb	r3, r7, #3
 80053aa:	0058      	lsls	r0, r3, #1
 80053ac:	f1c0 0206 	rsb	r2, r0, #6
 80053b0:	fa4a f202 	asr.w	r2, sl, r2
 80053b4:	ea02 0306 	and.w	r3, r2, r6
 80053b8:	40c3      	lsrs	r3, r0
 80053ba:	d005      	beq.n	80053c8 <_DrawBitmap+0x2b4>
 80053bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80053c0:	4658      	mov	r0, fp
 80053c2:	9a07      	ldr	r2, [sp, #28]
 80053c4:	f7ff fc53 	bl	8004c6e <_SetPixelIndex>
 80053c8:	3701      	adds	r7, #1
 80053ca:	2f04      	cmp	r7, #4
 80053cc:	bf02      	ittt	eq
 80053ce:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 80053d2:	2700      	moveq	r7, #0
 80053d4:	f109 0901 	addeq.w	r9, r9, #1
 80053d8:	f1b8 0801 	subs.w	r8, r8, #1
 80053dc:	d1e0      	bne.n	80053a0 <_DrawBitmap+0x28c>
 80053de:	e78b      	b.n	80052f8 <_DrawBitmap+0x1e4>
 80053e0:	3701      	adds	r7, #1
 80053e2:	2f04      	cmp	r7, #4
 80053e4:	bf02      	ittt	eq
 80053e6:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 80053ea:	2700      	moveq	r7, #0
 80053ec:	f109 0901 	addeq.w	r9, r9, #1
 80053f0:	f1b8 0801 	subs.w	r8, r8, #1
 80053f4:	d080      	beq.n	80052f8 <_DrawBitmap+0x1e4>
 80053f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f8:	ebc8 0103 	rsb	r1, r8, r3
 80053fc:	f1c7 0303 	rsb	r3, r7, #3
 8005400:	0058      	lsls	r0, r3, #1
 8005402:	f1c0 0206 	rsb	r2, r0, #6
 8005406:	fa4a f202 	asr.w	r2, sl, r2
 800540a:	ea02 0306 	and.w	r3, r2, r6
 800540e:	40c3      	lsrs	r3, r0
 8005410:	d0e6      	beq.n	80053e0 <_DrawBitmap+0x2cc>
 8005412:	9a07      	ldr	r2, [sp, #28]
 8005414:	4658      	mov	r0, fp
 8005416:	f7ff fc2a 	bl	8004c6e <_SetPixelIndex>
 800541a:	e7e1      	b.n	80053e0 <_DrawBitmap+0x2cc>
 800541c:	24000028 	.word	0x24000028
 8005420:	08009828 	.word	0x08009828
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	9a06      	ldr	r2, [sp, #24]
 8005428:	7826      	ldrb	r6, [r4, #0]
 800542a:	4413      	add	r3, r2
 800542c:	9307      	str	r3, [sp, #28]
 800542e:	4bbb      	ldr	r3, [pc, #748]	; (800571c <_DrawBitmap+0x608>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	7c1b      	ldrb	r3, [r3, #16]
 8005434:	f013 0303 	ands.w	r3, r3, #3
 8005438:	d00b      	beq.n	8005452 <_DrawBitmap+0x33e>
 800543a:	2b02      	cmp	r3, #2
 800543c:	d049      	beq.n	80054d2 <_DrawBitmap+0x3be>
 800543e:	9b05      	ldr	r3, [sp, #20]
 8005440:	441c      	add	r4, r3
 8005442:	9b06      	ldr	r3, [sp, #24]
 8005444:	3301      	adds	r3, #1
 8005446:	9306      	str	r3, [sp, #24]
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	9a04      	ldr	r2, [sp, #16]
 800544c:	4293      	cmp	r3, r2
 800544e:	dbe9      	blt.n	8005424 <_DrawBitmap+0x310>
 8005450:	e168      	b.n	8005724 <_DrawBitmap+0x610>
 8005452:	9f02      	ldr	r7, [sp, #8]
 8005454:	46a0      	mov	r8, r4
 8005456:	9908      	ldr	r1, [sp, #32]
 8005458:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800545c:	b1ed      	cbz	r5, 800549a <_DrawBitmap+0x386>
 800545e:	f1c7 0301 	rsb	r3, r7, #1
 8005462:	3701      	adds	r7, #1
 8005464:	4658      	mov	r0, fp
 8005466:	f101 0901 	add.w	r9, r1, #1
 800546a:	009a      	lsls	r2, r3, #2
 800546c:	f1c2 0304 	rsb	r3, r2, #4
 8005470:	fa4a f303 	asr.w	r3, sl, r3
 8005474:	4033      	ands	r3, r6
 8005476:	40d3      	lsrs	r3, r2
 8005478:	9a07      	ldr	r2, [sp, #28]
 800547a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800547e:	f7ff fbf6 	bl	8004c6e <_SetPixelIndex>
 8005482:	2f02      	cmp	r7, #2
 8005484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005486:	4649      	mov	r1, r9
 8005488:	bf02      	ittt	eq
 800548a:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 800548e:	2700      	moveq	r7, #0
 8005490:	f108 0801 	addeq.w	r8, r8, #1
 8005494:	4599      	cmp	r9, r3
 8005496:	d1e2      	bne.n	800545e <_DrawBitmap+0x34a>
 8005498:	e7d1      	b.n	800543e <_DrawBitmap+0x32a>
 800549a:	f1c7 0201 	rsb	r2, r7, #1
 800549e:	3701      	adds	r7, #1
 80054a0:	4658      	mov	r0, fp
 80054a2:	f101 0901 	add.w	r9, r1, #1
 80054a6:	0092      	lsls	r2, r2, #2
 80054a8:	f1c2 0304 	rsb	r3, r2, #4
 80054ac:	fa4a f303 	asr.w	r3, sl, r3
 80054b0:	4033      	ands	r3, r6
 80054b2:	40d3      	lsrs	r3, r2
 80054b4:	9a07      	ldr	r2, [sp, #28]
 80054b6:	f7ff fbda 	bl	8004c6e <_SetPixelIndex>
 80054ba:	2f02      	cmp	r7, #2
 80054bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054be:	4649      	mov	r1, r9
 80054c0:	bf02      	ittt	eq
 80054c2:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 80054c6:	2700      	moveq	r7, #0
 80054c8:	f108 0801 	addeq.w	r8, r8, #1
 80054cc:	4599      	cmp	r9, r3
 80054ce:	d1e4      	bne.n	800549a <_DrawBitmap+0x386>
 80054d0:	e7b5      	b.n	800543e <_DrawBitmap+0x32a>
 80054d2:	9f02      	ldr	r7, [sp, #8]
 80054d4:	46a1      	mov	r9, r4
 80054d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80054da:	b315      	cbz	r5, 8005522 <_DrawBitmap+0x40e>
 80054dc:	9a08      	ldr	r2, [sp, #32]
 80054de:	eb08 0a02 	add.w	sl, r8, r2
 80054e2:	f1c7 0301 	rsb	r3, r7, #1
 80054e6:	ebc8 010a 	rsb	r1, r8, sl
 80054ea:	0098      	lsls	r0, r3, #2
 80054ec:	23f0      	movs	r3, #240	; 0xf0
 80054ee:	f1c0 0204 	rsb	r2, r0, #4
 80054f2:	fa43 f202 	asr.w	r2, r3, r2
 80054f6:	ea02 0306 	and.w	r3, r2, r6
 80054fa:	40c3      	lsrs	r3, r0
 80054fc:	d005      	beq.n	800550a <_DrawBitmap+0x3f6>
 80054fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005502:	4658      	mov	r0, fp
 8005504:	9a07      	ldr	r2, [sp, #28]
 8005506:	f7ff fbb2 	bl	8004c6e <_SetPixelIndex>
 800550a:	3701      	adds	r7, #1
 800550c:	2f02      	cmp	r7, #2
 800550e:	bf02      	ittt	eq
 8005510:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8005514:	2700      	moveq	r7, #0
 8005516:	f109 0901 	addeq.w	r9, r9, #1
 800551a:	f1b8 0801 	subs.w	r8, r8, #1
 800551e:	d1e0      	bne.n	80054e2 <_DrawBitmap+0x3ce>
 8005520:	e78d      	b.n	800543e <_DrawBitmap+0x32a>
 8005522:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8005526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005528:	ebc8 0103 	rsb	r1, r8, r3
 800552c:	f1c7 0301 	rsb	r3, r7, #1
 8005530:	0098      	lsls	r0, r3, #2
 8005532:	f1c0 0204 	rsb	r2, r0, #4
 8005536:	fa4a f202 	asr.w	r2, sl, r2
 800553a:	ea02 0306 	and.w	r3, r2, r6
 800553e:	40c3      	lsrs	r3, r0
 8005540:	d003      	beq.n	800554a <_DrawBitmap+0x436>
 8005542:	9a07      	ldr	r2, [sp, #28]
 8005544:	4658      	mov	r0, fp
 8005546:	f7ff fb92 	bl	8004c6e <_SetPixelIndex>
 800554a:	3701      	adds	r7, #1
 800554c:	2f02      	cmp	r7, #2
 800554e:	bf02      	ittt	eq
 8005550:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8005554:	2700      	moveq	r7, #0
 8005556:	f109 0901 	addeq.w	r9, r9, #1
 800555a:	f1b8 0801 	subs.w	r8, r8, #1
 800555e:	d1e2      	bne.n	8005526 <_DrawBitmap+0x412>
 8005560:	e76d      	b.n	800543e <_DrawBitmap+0x32a>
 8005562:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8005564:	4b6d      	ldr	r3, [pc, #436]	; (800571c <_DrawBitmap+0x608>)
 8005566:	b926      	cbnz	r6, 8005572 <_DrawBitmap+0x45e>
 8005568:	f8d3 c000 	ldr.w	ip, [r3]
 800556c:	f04f 0e00 	mov.w	lr, #0
 8005570:	e019      	b.n	80055a6 <_DrawBitmap+0x492>
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	7c12      	ldrb	r2, [r2, #16]
 8005576:	0792      	lsls	r2, r2, #30
 8005578:	d4f6      	bmi.n	8005568 <_DrawBitmap+0x454>
 800557a:	2d00      	cmp	r5, #0
 800557c:	d0f4      	beq.n	8005568 <_DrawBitmap+0x454>
 800557e:	9b05      	ldr	r3, [sp, #20]
 8005580:	46b4      	mov	ip, r6
 8005582:	9517      	str	r5, [sp, #92]	; 0x5c
 8005584:	9316      	str	r3, [sp, #88]	; 0x58
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	9a03      	ldr	r2, [sp, #12]
 800558a:	9315      	str	r3, [sp, #84]	; 0x54
 800558c:	9b01      	ldr	r3, [sp, #4]
 800558e:	9314      	str	r3, [sp, #80]	; 0x50
 8005590:	4623      	mov	r3, r4
 8005592:	6980      	ldr	r0, [r0, #24]
 8005594:	b00b      	add	sp, #44	; 0x2c
 8005596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	4760      	bx	ip
 800559c:	b93d      	cbnz	r5, 80055ae <_DrawBitmap+0x49a>
 800559e:	9b05      	ldr	r3, [sp, #20]
 80055a0:	f10e 0e01 	add.w	lr, lr, #1
 80055a4:	441c      	add	r4, r3
 80055a6:	9b04      	ldr	r3, [sp, #16]
 80055a8:	459e      	cmp	lr, r3
 80055aa:	dbf7      	blt.n	800559c <_DrawBitmap+0x488>
 80055ac:	e0ba      	b.n	8005724 <_DrawBitmap+0x610>
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	4473      	add	r3, lr
 80055b4:	fb02 8303 	mla	r3, r2, r3, r8
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80055be:	f89c 2010 	ldrb.w	r2, [ip, #16]
 80055c2:	f012 0203 	ands.w	r2, r2, #3
 80055c6:	d003      	beq.n	80055d0 <_DrawBitmap+0x4bc>
 80055c8:	2a02      	cmp	r2, #2
 80055ca:	d1e8      	bne.n	800559e <_DrawBitmap+0x48a>
 80055cc:	2200      	movs	r2, #0
 80055ce:	e070      	b.n	80056b2 <_DrawBitmap+0x59e>
 80055d0:	4621      	mov	r1, r4
 80055d2:	9a01      	ldr	r2, [sp, #4]
 80055d4:	2a07      	cmp	r2, #7
 80055d6:	f101 0608 	add.w	r6, r1, #8
 80055da:	f103 0010 	add.w	r0, r3, #16
 80055de:	dd33      	ble.n	8005648 <_DrawBitmap+0x534>
 80055e0:	f816 3c08 	ldrb.w	r3, [r6, #-8]
 80055e4:	3a08      	subs	r2, #8
 80055e6:	4631      	mov	r1, r6
 80055e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055ec:	f820 3c10 	strh.w	r3, [r0, #-16]
 80055f0:	f816 3c07 	ldrb.w	r3, [r6, #-7]
 80055f4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055f8:	f820 3c0e 	strh.w	r3, [r0, #-14]
 80055fc:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 8005600:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005604:	f820 3c0c 	strh.w	r3, [r0, #-12]
 8005608:	f816 3c05 	ldrb.w	r3, [r6, #-5]
 800560c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005610:	f820 3c0a 	strh.w	r3, [r0, #-10]
 8005614:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8005618:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800561c:	f820 3c08 	strh.w	r3, [r0, #-8]
 8005620:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8005624:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005628:	f820 3c06 	strh.w	r3, [r0, #-6]
 800562c:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 8005630:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005634:	f820 3c04 	strh.w	r3, [r0, #-4]
 8005638:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800563c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005640:	f820 3c02 	strh.w	r3, [r0, #-2]
 8005644:	4603      	mov	r3, r0
 8005646:	e7c5      	b.n	80055d4 <_DrawBitmap+0x4c0>
 8005648:	2a03      	cmp	r2, #3
 800564a:	4618      	mov	r0, r3
 800564c:	460e      	mov	r6, r1
 800564e:	f103 0308 	add.w	r3, r3, #8
 8005652:	f101 0104 	add.w	r1, r1, #4
 8005656:	dd19      	ble.n	800568c <_DrawBitmap+0x578>
 8005658:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 800565c:	3a04      	subs	r2, #4
 800565e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8005662:	f823 0c08 	strh.w	r0, [r3, #-8]
 8005666:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800566a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800566e:	f823 0c06 	strh.w	r0, [r3, #-6]
 8005672:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8005676:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800567a:	f823 0c04 	strh.w	r0, [r3, #-4]
 800567e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8005682:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8005686:	f823 0c02 	strh.w	r0, [r3, #-2]
 800568a:	e7dd      	b.n	8005648 <_DrawBitmap+0x534>
 800568c:	3e01      	subs	r6, #1
 800568e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005692:	4282      	cmp	r2, r0
 8005694:	d083      	beq.n	800559e <_DrawBitmap+0x48a>
 8005696:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800569a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800569e:	f820 3b02 	strh.w	r3, [r0], #2
 80056a2:	e7f6      	b.n	8005692 <_DrawBitmap+0x57e>
 80056a4:	5ca1      	ldrb	r1, [r4, r2]
 80056a6:	b119      	cbz	r1, 80056b0 <_DrawBitmap+0x59c>
 80056a8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80056ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80056b0:	3201      	adds	r2, #1
 80056b2:	9901      	ldr	r1, [sp, #4]
 80056b4:	1a89      	subs	r1, r1, r2
 80056b6:	2900      	cmp	r1, #0
 80056b8:	dcf4      	bgt.n	80056a4 <_DrawBitmap+0x590>
 80056ba:	e770      	b.n	800559e <_DrawBitmap+0x48a>
 80056bc:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80056be:	b925      	cbnz	r5, 80056ca <_DrawBitmap+0x5b6>
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	2600      	movs	r6, #0
 80056c4:	4f16      	ldr	r7, [pc, #88]	; (8005720 <_DrawBitmap+0x60c>)
 80056c6:	005d      	lsls	r5, r3, #1
 80056c8:	e012      	b.n	80056f0 <_DrawBitmap+0x5dc>
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <_DrawBitmap+0x608>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	7c1b      	ldrb	r3, [r3, #16]
 80056d0:	07db      	lsls	r3, r3, #31
 80056d2:	d4f5      	bmi.n	80056c0 <_DrawBitmap+0x5ac>
 80056d4:	9b05      	ldr	r3, [sp, #20]
 80056d6:	46ac      	mov	ip, r5
 80056d8:	9a03      	ldr	r2, [sp, #12]
 80056da:	9316      	str	r3, [sp, #88]	; 0x58
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	9315      	str	r3, [sp, #84]	; 0x54
 80056e0:	9b01      	ldr	r3, [sp, #4]
 80056e2:	9314      	str	r3, [sp, #80]	; 0x50
 80056e4:	4623      	mov	r3, r4
 80056e6:	6980      	ldr	r0, [r0, #24]
 80056e8:	b00b      	add	sp, #44	; 0x2c
 80056ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ee:	4760      	bx	ip
 80056f0:	9b04      	ldr	r3, [sp, #16]
 80056f2:	429e      	cmp	r6, r3
 80056f4:	da16      	bge.n	8005724 <_DrawBitmap+0x610>
 80056f6:	f8db 2008 	ldr.w	r2, [fp, #8]
 80056fa:	4621      	mov	r1, r4
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	18f0      	adds	r0, r6, r3
 8005700:	6a13      	ldr	r3, [r2, #32]
 8005702:	3601      	adds	r6, #1
 8005704:	fb03 8300 	mla	r3, r3, r0, r8
 8005708:	6810      	ldr	r0, [r2, #0]
 800570a:	462a      	mov	r2, r5
 800570c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4798      	blx	r3
 8005714:	9b05      	ldr	r3, [sp, #20]
 8005716:	441c      	add	r4, r3
 8005718:	e7ea      	b.n	80056f0 <_DrawBitmap+0x5dc>
 800571a:	bf00      	nop
 800571c:	24000028 	.word	0x24000028
 8005720:	2400002c 	.word	0x2400002c
 8005724:	b00b      	add	sp, #44	; 0x2c
 8005726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572a:	bf00      	nop

0800572c <_InitOnce.isra.3>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	6805      	ldr	r5, [r0, #0]
 8005730:	4604      	mov	r4, r0
 8005732:	b93d      	cbnz	r5, 8005744 <_InitOnce.isra.3+0x18>
 8005734:	2050      	movs	r0, #80	; 0x50
 8005736:	f7fd ff07 	bl	8003548 <GUI_ALLOC_GetFixedBlock>
 800573a:	2250      	movs	r2, #80	; 0x50
 800573c:	6020      	str	r0, [r4, #0]
 800573e:	4629      	mov	r1, r5
 8005740:	f7fe fc6c 	bl	800401c <GUI__memset>
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	fab0 f080 	clz	r0, r0
 800574a:	0940      	lsrs	r0, r0, #5
 800574c:	bd38      	pop	{r3, r4, r5, pc}

0800574e <_SetDevFunc>:
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	4606      	mov	r6, r0
 8005752:	3008      	adds	r0, #8
 8005754:	460d      	mov	r5, r1
 8005756:	4614      	mov	r4, r2
 8005758:	f7ff ffe8 	bl	800572c <_InitOnce.isra.3>
 800575c:	68b3      	ldr	r3, [r6, #8]
 800575e:	b1db      	cbz	r3, 8005798 <_SetDevFunc+0x4a>
 8005760:	2d21      	cmp	r5, #33	; 0x21
 8005762:	d012      	beq.n	800578a <_SetDevFunc+0x3c>
 8005764:	dc07      	bgt.n	8005776 <_SetDevFunc+0x28>
 8005766:	2d19      	cmp	r5, #25
 8005768:	d00d      	beq.n	8005786 <_SetDevFunc+0x38>
 800576a:	2d20      	cmp	r5, #32
 800576c:	d00f      	beq.n	800578e <_SetDevFunc+0x40>
 800576e:	2d03      	cmp	r5, #3
 8005770:	d112      	bne.n	8005798 <_SetDevFunc+0x4a>
 8005772:	649c      	str	r4, [r3, #72]	; 0x48
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	2d24      	cmp	r5, #36	; 0x24
 8005778:	d00d      	beq.n	8005796 <_SetDevFunc+0x48>
 800577a:	2d25      	cmp	r5, #37	; 0x25
 800577c:	d009      	beq.n	8005792 <_SetDevFunc+0x44>
 800577e:	2d23      	cmp	r5, #35	; 0x23
 8005780:	d10a      	bne.n	8005798 <_SetDevFunc+0x4a>
 8005782:	645c      	str	r4, [r3, #68]	; 0x44
 8005784:	bd70      	pop	{r4, r5, r6, pc}
 8005786:	635c      	str	r4, [r3, #52]	; 0x34
 8005788:	bd70      	pop	{r4, r5, r6, pc}
 800578a:	639c      	str	r4, [r3, #56]	; 0x38
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	63dc      	str	r4, [r3, #60]	; 0x3c
 8005790:	bd70      	pop	{r4, r5, r6, pc}
 8005792:	641c      	str	r4, [r3, #64]	; 0x40
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800579c <_CopyBuffer>:
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	4606      	mov	r6, r0
 80057a2:	3008      	adds	r0, #8
 80057a4:	460f      	mov	r7, r1
 80057a6:	4690      	mov	r8, r2
 80057a8:	f7ff ffc0 	bl	800572c <_InitOnce.isra.3>
 80057ac:	68b4      	ldr	r4, [r6, #8]
 80057ae:	b31c      	cbz	r4, 80057f8 <_CopyBuffer+0x5c>
 80057b0:	4547      	cmp	r7, r8
 80057b2:	d021      	beq.n	80057f8 <_CopyBuffer+0x5c>
 80057b4:	68f3      	ldr	r3, [r6, #12]
 80057b6:	2108      	movs	r1, #8
 80057b8:	4630      	mov	r0, r6
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	4798      	blx	r3
 80057be:	69a2      	ldr	r2, [r4, #24]
 80057c0:	6963      	ldr	r3, [r4, #20]
 80057c2:	4353      	muls	r3, r2
 80057c4:	4358      	muls	r0, r3
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	08c2      	lsrs	r2, r0, #3
 80057ca:	b123      	cbz	r3, 80057d6 <_CopyBuffer+0x3a>
 80057cc:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80057d0:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 80057d4:	e004      	b.n	80057e0 <_CopyBuffer+0x44>
 80057d6:	6865      	ldr	r5, [r4, #4]
 80057d8:	fb02 5107 	mla	r1, r2, r7, r5
 80057dc:	fb02 5508 	mla	r5, r2, r8, r5
 80057e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057e2:	b123      	cbz	r3, 80057ee <_CopyBuffer+0x52>
 80057e4:	4642      	mov	r2, r8
 80057e6:	4639      	mov	r1, r7
 80057e8:	69b0      	ldr	r0, [r6, #24]
 80057ea:	4798      	blx	r3
 80057ec:	e003      	b.n	80057f6 <_CopyBuffer+0x5a>
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <_CopyBuffer+0x60>)
 80057f0:	4628      	mov	r0, r5
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4798      	blx	r3
 80057f6:	6025      	str	r5, [r4, #0]
 80057f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fc:	2400002c 	.word	0x2400002c

08005800 <_GetPos>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	3008      	adds	r0, #8
 8005806:	460e      	mov	r6, r1
 8005808:	4615      	mov	r5, r2
 800580a:	f7ff ff8f 	bl	800572c <_InitOnce.isra.3>
 800580e:	68a3      	ldr	r3, [r4, #8]
 8005810:	b11b      	cbz	r3, 800581a <_GetPos+0x1a>
 8005812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005814:	6032      	str	r2, [r6, #0]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	bd70      	pop	{r4, r5, r6, pc}

0800581c <_SetVRAM_BufferPTR>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	3008      	adds	r0, #8
 8005822:	460c      	mov	r4, r1
 8005824:	f7ff ff82 	bl	800572c <_InitOnce.isra.3>
 8005828:	68ab      	ldr	r3, [r5, #8]
 800582a:	b113      	cbz	r3, 8005832 <_SetVRAM_BufferPTR+0x16>
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	609c      	str	r4, [r3, #8]
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}

08005834 <_ShowBuffer>:
 8005834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005836:	2300      	movs	r3, #0
 8005838:	4604      	mov	r4, r0
 800583a:	3008      	adds	r0, #8
 800583c:	460d      	mov	r5, r1
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	f7ff ff74 	bl	800572c <_InitOnce.isra.3>
 8005844:	68a3      	ldr	r3, [r4, #8]
 8005846:	b133      	cbz	r3, 8005856 <_ShowBuffer+0x22>
 8005848:	aa02      	add	r2, sp, #8
 800584a:	210e      	movs	r1, #14
 800584c:	69a0      	ldr	r0, [r4, #24]
 800584e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005852:	f7fd fb87 	bl	8002f64 <LCD_X_DisplayDriver>
 8005856:	b003      	add	sp, #12
 8005858:	bd30      	pop	{r4, r5, pc}

0800585a <_Init>:
 800585a:	b538      	push	{r3, r4, r5, lr}
 800585c:	4604      	mov	r4, r0
 800585e:	3008      	adds	r0, #8
 8005860:	f7ff ff64 	bl	800572c <_InitOnce.isra.3>
 8005864:	4605      	mov	r5, r0
 8005866:	2200      	movs	r2, #0
 8005868:	2101      	movs	r1, #1
 800586a:	69a0      	ldr	r0, [r4, #24]
 800586c:	f7fd fb7a 	bl	8002f64 <LCD_X_DisplayDriver>
 8005870:	4328      	orrs	r0, r5
 8005872:	bd38      	pop	{r3, r4, r5, pc}

08005874 <_SetVis>:
 8005874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005876:	2300      	movs	r3, #0
 8005878:	4604      	mov	r4, r0
 800587a:	3008      	adds	r0, #8
 800587c:	460d      	mov	r5, r1
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f7ff ff54 	bl	800572c <_InitOnce.isra.3>
 8005884:	68a3      	ldr	r3, [r4, #8]
 8005886:	b13b      	cbz	r3, 8005898 <_SetVis+0x24>
 8005888:	aa02      	add	r2, sp, #8
 800588a:	631d      	str	r5, [r3, #48]	; 0x30
 800588c:	2109      	movs	r1, #9
 800588e:	69a0      	ldr	r0, [r4, #24]
 8005890:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005894:	f7fd fb66 	bl	8002f64 <LCD_X_DisplayDriver>
 8005898:	b003      	add	sp, #12
 800589a:	bd30      	pop	{r4, r5, pc}

0800589c <_SetAlpha>:
 800589c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800589e:	2300      	movs	r3, #0
 80058a0:	4604      	mov	r4, r0
 80058a2:	3008      	adds	r0, #8
 80058a4:	460d      	mov	r5, r1
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	f7ff ff40 	bl	800572c <_InitOnce.isra.3>
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	b13b      	cbz	r3, 80058c0 <_SetAlpha+0x24>
 80058b0:	aa02      	add	r2, sp, #8
 80058b2:	62dd      	str	r5, [r3, #44]	; 0x2c
 80058b4:	210a      	movs	r1, #10
 80058b6:	69a0      	ldr	r0, [r4, #24]
 80058b8:	f842 5d04 	str.w	r5, [r2, #-4]!
 80058bc:	f7fd fb52 	bl	8002f64 <LCD_X_DisplayDriver>
 80058c0:	b003      	add	sp, #12
 80058c2:	bd30      	pop	{r4, r5, pc}

080058c4 <_SetVRAMAddr>:
 80058c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058c6:	2300      	movs	r3, #0
 80058c8:	4604      	mov	r4, r0
 80058ca:	3008      	adds	r0, #8
 80058cc:	460d      	mov	r5, r1
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	f7ff ff2c 	bl	800572c <_InitOnce.isra.3>
 80058d4:	68a3      	ldr	r3, [r4, #8]
 80058d6:	b143      	cbz	r3, 80058ea <_SetVRAMAddr+0x26>
 80058d8:	aa02      	add	r2, sp, #8
 80058da:	601d      	str	r5, [r3, #0]
 80058dc:	605d      	str	r5, [r3, #4]
 80058de:	2102      	movs	r1, #2
 80058e0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80058e4:	69a0      	ldr	r0, [r4, #24]
 80058e6:	f7fd fb3d 	bl	8002f64 <LCD_X_DisplayDriver>
 80058ea:	b003      	add	sp, #12
 80058ec:	bd30      	pop	{r4, r5, pc}

080058ee <_SetPos>:
 80058ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	4606      	mov	r6, r0
 80058f6:	460d      	mov	r5, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	2100      	movs	r1, #0
 80058fc:	2218      	movs	r2, #24
 80058fe:	a802      	add	r0, sp, #8
 8005900:	f002 fb72 	bl	8007fe8 <memset>
 8005904:	f106 0008 	add.w	r0, r6, #8
 8005908:	f7ff ff10 	bl	800572c <_InitOnce.isra.3>
 800590c:	68b7      	ldr	r7, [r6, #8]
 800590e:	2f00      	cmp	r7, #0
 8005910:	d067      	beq.n	80059e2 <_SetPos+0xf4>
 8005912:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 8005916:	f1bb 0f00 	cmp.w	fp, #0
 800591a:	d004      	beq.n	8005926 <_SetPos+0x38>
 800591c:	4622      	mov	r2, r4
 800591e:	4629      	mov	r1, r5
 8005920:	69b0      	ldr	r0, [r6, #24]
 8005922:	47d8      	blx	fp
 8005924:	e05d      	b.n	80059e2 <_SetPos+0xf4>
 8005926:	627d      	str	r5, [r7, #36]	; 0x24
 8005928:	62bc      	str	r4, [r7, #40]	; 0x28
 800592a:	f7ff f863 	bl	80049f4 <LCD_GetXSizeDisplay>
 800592e:	4681      	mov	r9, r0
 8005930:	f7ff f866 	bl	8004a00 <LCD_GetYSizeDisplay>
 8005934:	68f2      	ldr	r2, [r6, #12]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2108      	movs	r1, #8
 800593a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800593c:	4680      	mov	r8, r0
 800593e:	4630      	mov	r0, r6
 8005940:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	4790      	blx	r2
 8005948:	2208      	movs	r2, #8
 800594a:	3007      	adds	r0, #7
 800594c:	2d00      	cmp	r5, #0
 800594e:	eb05 010a 	add.w	r1, r5, sl
 8005952:	9b01      	ldr	r3, [sp, #4]
 8005954:	fb90 f0f2 	sdiv	r0, r0, r2
 8005958:	9006      	str	r0, [sp, #24]
 800595a:	da07      	bge.n	800596c <_SetPos+0x7e>
 800595c:	9a07      	ldr	r2, [sp, #28]
 800595e:	f8cd b008 	str.w	fp, [sp, #8]
 8005962:	fb00 2015 	mls	r0, r0, r5, r2
 8005966:	9104      	str	r1, [sp, #16]
 8005968:	9007      	str	r0, [sp, #28]
 800596a:	e007      	b.n	800597c <_SetPos+0x8e>
 800596c:	4589      	cmp	r9, r1
 800596e:	9502      	str	r5, [sp, #8]
 8005970:	bfb6      	itet	lt
 8005972:	ebc5 0509 	rsblt	r5, r5, r9
 8005976:	f8cd a010 	strge.w	sl, [sp, #16]
 800597a:	9504      	strlt	r5, [sp, #16]
 800597c:	2c00      	cmp	r4, #0
 800597e:	eb04 0203 	add.w	r2, r4, r3
 8005982:	da09      	bge.n	8005998 <_SetPos+0xaa>
 8005984:	9b06      	ldr	r3, [sp, #24]
 8005986:	9205      	str	r2, [sp, #20]
 8005988:	435c      	muls	r4, r3
 800598a:	9b07      	ldr	r3, [sp, #28]
 800598c:	fb0a 3414 	mls	r4, sl, r4, r3
 8005990:	2300      	movs	r3, #0
 8005992:	9407      	str	r4, [sp, #28]
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	e006      	b.n	80059a6 <_SetPos+0xb8>
 8005998:	4590      	cmp	r8, r2
 800599a:	9403      	str	r4, [sp, #12]
 800599c:	bfb6      	itet	lt
 800599e:	ebc4 0408 	rsblt	r4, r4, r8
 80059a2:	9305      	strge	r3, [sp, #20]
 80059a4:	9405      	strlt	r4, [sp, #20]
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	dd08      	ble.n	80059c0 <_SetPos+0xd2>
 80059ae:	9a05      	ldr	r2, [sp, #20]
 80059b0:	2a00      	cmp	r2, #0
 80059b2:	dd05      	ble.n	80059c0 <_SetPos+0xd2>
 80059b4:	9a02      	ldr	r2, [sp, #8]
 80059b6:	4591      	cmp	r9, r2
 80059b8:	dd02      	ble.n	80059c0 <_SetPos+0xd2>
 80059ba:	9a03      	ldr	r2, [sp, #12]
 80059bc:	4590      	cmp	r8, r2
 80059be:	dc06      	bgt.n	80059ce <_SetPos+0xe0>
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10e      	bne.n	80059e2 <_SetPos+0xf4>
 80059c4:	2100      	movs	r1, #0
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff ff54 	bl	8005874 <_SetVis>
 80059cc:	e009      	b.n	80059e2 <_SetPos+0xf4>
 80059ce:	b91b      	cbnz	r3, 80059d8 <_SetPos+0xea>
 80059d0:	2101      	movs	r1, #1
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff ff4e 	bl	8005874 <_SetVis>
 80059d8:	aa02      	add	r2, sp, #8
 80059da:	2108      	movs	r1, #8
 80059dc:	69b0      	ldr	r0, [r6, #24]
 80059de:	f7fd fac1 	bl	8002f64 <LCD_X_DisplayDriver>
 80059e2:	b009      	add	sp, #36	; 0x24
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059e8 <_SetSize>:
 80059e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ea:	2300      	movs	r3, #0
 80059ec:	4605      	mov	r5, r0
 80059ee:	3008      	adds	r0, #8
 80059f0:	460f      	mov	r7, r1
 80059f2:	4616      	mov	r6, r2
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	f7ff fe98 	bl	800572c <_InitOnce.isra.3>
 80059fc:	68ac      	ldr	r4, [r5, #8]
 80059fe:	b194      	cbz	r4, 8005a26 <_SetSize+0x3e>
 8005a00:	6a23      	ldr	r3, [r4, #32]
 8005a02:	b93b      	cbnz	r3, 8005a14 <_SetSize+0x2c>
 8005a04:	69a8      	ldr	r0, [r5, #24]
 8005a06:	f7fe ff9f 	bl	8004948 <LCD_GetSwapXYEx>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	bf0c      	ite	eq
 8005a0e:	4638      	moveq	r0, r7
 8005a10:	4630      	movne	r0, r6
 8005a12:	6220      	str	r0, [r4, #32]
 8005a14:	6127      	str	r7, [r4, #16]
 8005a16:	466a      	mov	r2, sp
 8005a18:	6166      	str	r6, [r4, #20]
 8005a1a:	2107      	movs	r1, #7
 8005a1c:	69a8      	ldr	r0, [r5, #24]
 8005a1e:	9700      	str	r7, [sp, #0]
 8005a20:	9601      	str	r6, [sp, #4]
 8005a22:	f7fd fa9f 	bl	8002f64 <LCD_X_DisplayDriver>
 8005a26:	b003      	add	sp, #12
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a2a <_SetVSize>:
 8005a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	3008      	adds	r0, #8
 8005a30:	460d      	mov	r5, r1
 8005a32:	4616      	mov	r6, r2
 8005a34:	f7ff fe7a 	bl	800572c <_InitOnce.isra.3>
 8005a38:	68bc      	ldr	r4, [r7, #8]
 8005a3a:	b144      	cbz	r4, 8005a4e <_SetVSize+0x24>
 8005a3c:	69b8      	ldr	r0, [r7, #24]
 8005a3e:	f7fe ff83 	bl	8004948 <LCD_GetSwapXYEx>
 8005a42:	61a5      	str	r5, [r4, #24]
 8005a44:	61e6      	str	r6, [r4, #28]
 8005a46:	b108      	cbz	r0, 8005a4c <_SetVSize+0x22>
 8005a48:	6226      	str	r6, [r4, #32]
 8005a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4c:	6225      	str	r5, [r4, #32]
 8005a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a50 <_GetDevData>:
 8005a50:	2901      	cmp	r1, #1
 8005a52:	4802      	ldr	r0, [pc, #8]	; (8005a5c <_GetDevData+0xc>)
 8005a54:	bf18      	it	ne
 8005a56:	2000      	movne	r0, #0
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	0800979c 	.word	0x0800979c

08005a60 <_GetDevFunc>:
 8005a60:	2916      	cmp	r1, #22
 8005a62:	4802      	ldr	r0, [pc, #8]	; (8005a6c <_GetDevFunc+0xc>)
 8005a64:	bf18      	it	ne
 8005a66:	2000      	movne	r0, #0
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	08006565 	.word	0x08006565

08005a70 <_SetOrg>:
 8005a70:	6800      	ldr	r0, [r0, #0]
 8005a72:	b110      	cbz	r0, 8005a7a <_SetOrg+0xa>
 8005a74:	68c3      	ldr	r3, [r0, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	4718      	bx	r3
 8005a7a:	4770      	bx	lr

08005a7c <_GetRect>:
 8005a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a7e:	6880      	ldr	r0, [r0, #8]
 8005a80:	460d      	mov	r5, r1
 8005a82:	f7fd fc9d 	bl	80033c0 <GUI_ALLOC_LockH>
 8005a86:	4602      	mov	r2, r0
 8005a88:	a802      	add	r0, sp, #8
 8005a8a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8005a8e:	8914      	ldrh	r4, [r2, #8]
 8005a90:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8005a94:	802b      	strh	r3, [r5, #0]
 8005a96:	441c      	add	r4, r3
 8005a98:	8953      	ldrh	r3, [r2, #10]
 8005a9a:	3c01      	subs	r4, #1
 8005a9c:	f840 2d04 	str.w	r2, [r0, #-4]!
 8005aa0:	440b      	add	r3, r1
 8005aa2:	8069      	strh	r1, [r5, #2]
 8005aa4:	80ac      	strh	r4, [r5, #4]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	80eb      	strh	r3, [r5, #6]
 8005aaa:	f7fd fc97 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005aae:	b003      	add	sp, #12
 8005ab0:	bd30      	pop	{r4, r5, pc}
	...

08005ab4 <_XY2PTR>:
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <_XY2PTR+0x3c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005aba:	4606      	mov	r6, r0
 8005abc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005abe:	460d      	mov	r5, r1
 8005ac0:	f7fd fc7e 	bl	80033c0 <GUI_ALLOC_LockH>
 8005ac4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8005ac8:	ab02      	add	r3, sp, #8
 8005aca:	68c4      	ldr	r4, [r0, #12]
 8005acc:	1a69      	subs	r1, r5, r1
 8005ace:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8005ad2:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005ad6:	1b76      	subs	r6, r6, r5
 8005ad8:	0076      	lsls	r6, r6, #1
 8005ada:	3618      	adds	r6, #24
 8005adc:	fb04 6501 	mla	r5, r4, r1, r6
 8005ae0:	1944      	adds	r4, r0, r5
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fd fc7a 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	b002      	add	sp, #8
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	bf00      	nop
 8005af0:	24000028 	.word	0x24000028

08005af4 <_GetPixelIndex>:
 8005af4:	b508      	push	{r3, lr}
 8005af6:	4608      	mov	r0, r1
 8005af8:	4611      	mov	r1, r2
 8005afa:	f7ff ffdb 	bl	8005ab4 <_XY2PTR>
 8005afe:	8800      	ldrh	r0, [r0, #0]
 8005b00:	bd08      	pop	{r3, pc}
	...

08005b04 <_XorPixel>:
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <_XorPixel+0x54>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b0a:	4616      	mov	r6, r2
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	4607      	mov	r7, r0
 8005b10:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b12:	f7fd fc55 	bl	80033c0 <GUI_ALLOC_LockH>
 8005b16:	4631      	mov	r1, r6
 8005b18:	9000      	str	r0, [sp, #0]
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7ff ffca 	bl	8005ab4 <_XY2PTR>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4604      	mov	r4, r0
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4798      	blx	r3
 8005b28:	8823      	ldrh	r3, [r4, #0]
 8005b2a:	4058      	eors	r0, r3
 8005b2c:	9b00      	ldr	r3, [sp, #0]
 8005b2e:	8020      	strh	r0, [r4, #0]
 8005b30:	6958      	ldr	r0, [r3, #20]
 8005b32:	b160      	cbz	r0, 8005b4e <_XorPixel+0x4a>
 8005b34:	f7fd fc44 	bl	80033c0 <GUI_ALLOC_LockH>
 8005b38:	ac02      	add	r4, sp, #8
 8005b3a:	6883      	ldr	r3, [r0, #8]
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005b42:	4629      	mov	r1, r5
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4798      	blx	r3
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f7fd fc47 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005b4e:	4668      	mov	r0, sp
 8005b50:	f7fd fc44 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005b54:	b003      	add	sp, #12
 8005b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b58:	24000028 	.word	0x24000028

08005b5c <_SetPixelIndex>:
 8005b5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b5e:	461c      	mov	r4, r3
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <_SetPixelIndex+0x48>)
 8005b62:	460d      	mov	r5, r1
 8005b64:	4616      	mov	r6, r2
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b6a:	f7fd fc29 	bl	80033c0 <GUI_ALLOC_LockH>
 8005b6e:	4631      	mov	r1, r6
 8005b70:	9000      	str	r0, [sp, #0]
 8005b72:	4628      	mov	r0, r5
 8005b74:	f7ff ff9e 	bl	8005ab4 <_XY2PTR>
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	8004      	strh	r4, [r0, #0]
 8005b7c:	6958      	ldr	r0, [r3, #20]
 8005b7e:	b160      	cbz	r0, 8005b9a <_SetPixelIndex+0x3e>
 8005b80:	f7fd fc1e 	bl	80033c0 <GUI_ALLOC_LockH>
 8005b84:	ac02      	add	r4, sp, #8
 8005b86:	6883      	ldr	r3, [r0, #8]
 8005b88:	4632      	mov	r2, r6
 8005b8a:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005b8e:	4629      	mov	r1, r5
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4798      	blx	r3
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7fd fc21 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005b9a:	4668      	mov	r0, sp
 8005b9c:	f7fd fc1e 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	24000028 	.word	0x24000028

08005ba8 <_DrawVLine>:
 8005ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bac:	4c2c      	ldr	r4, [pc, #176]	; (8005c60 <_DrawVLine+0xb8>)
 8005bae:	461e      	mov	r6, r3
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	460f      	mov	r7, r1
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	4615      	mov	r5, r2
 8005bb8:	46a1      	mov	r9, r4
 8005bba:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005bbc:	f7fd fc00 	bl	80033c0 <GUI_ALLOC_LockH>
 8005bc0:	9000      	str	r0, [sp, #0]
 8005bc2:	6940      	ldr	r0, [r0, #20]
 8005bc4:	b108      	cbz	r0, 8005bca <_DrawVLine+0x22>
 8005bc6:	f7fd fbfb 	bl	80033c0 <GUI_ALLOC_LockH>
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f7ff ff70 	bl	8005ab4 <_XY2PTR>
 8005bd4:	f8d9 3000 	ldr.w	r3, [r9]
 8005bd8:	4604      	mov	r4, r0
 8005bda:	7c1a      	ldrb	r2, [r3, #16]
 8005bdc:	07d2      	lsls	r2, r2, #31
 8005bde:	d51f      	bpl.n	8005c20 <_DrawVLine+0x78>
 8005be0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4798      	blx	r3
 8005be8:	fa1f f880 	uxth.w	r8, r0
 8005bec:	9801      	ldr	r0, [sp, #4]
 8005bee:	b120      	cbz	r0, 8005bfa <_DrawVLine+0x52>
 8005bf0:	6883      	ldr	r3, [r0, #8]
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4798      	blx	r3
 8005bfa:	8823      	ldrh	r3, [r4, #0]
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	ea88 0303 	eor.w	r3, r8, r3
 8005c02:	42b5      	cmp	r5, r6
 8005c04:	8023      	strh	r3, [r4, #0]
 8005c06:	9b00      	ldr	r3, [sp, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	441c      	add	r4, r3
 8005c0c:	ddee      	ble.n	8005bec <_DrawVLine+0x44>
 8005c0e:	4668      	mov	r0, sp
 8005c10:	f7fd fbe4 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	b303      	cbz	r3, 8005c5a <_DrawVLine+0xb2>
 8005c18:	a801      	add	r0, sp, #4
 8005c1a:	f7fd fbdf 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005c1e:	e01c      	b.n	8005c5a <_DrawVLine+0xb2>
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	9a00      	ldr	r2, [sp, #0]
 8005c24:	f8d3 9000 	ldr.w	r9, [r3]
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8005c2e:	b163      	cbz	r3, 8005c4a <_DrawVLine+0xa2>
 8005c30:	9801      	ldr	r0, [sp, #4]
 8005c32:	462a      	mov	r2, r5
 8005c34:	3501      	adds	r5, #1
 8005c36:	4639      	mov	r1, r7
 8005c38:	6883      	ldr	r3, [r0, #8]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4798      	blx	r3
 8005c3e:	42ae      	cmp	r6, r5
 8005c40:	f8a4 9000 	strh.w	r9, [r4]
 8005c44:	4444      	add	r4, r8
 8005c46:	daf3      	bge.n	8005c30 <_DrawVLine+0x88>
 8005c48:	e7e1      	b.n	8005c0e <_DrawVLine+0x66>
 8005c4a:	1b75      	subs	r5, r6, r5
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	3d01      	subs	r5, #1
 8005c50:	f8a4 9000 	strh.w	r9, [r4]
 8005c54:	4444      	add	r4, r8
 8005c56:	d1fa      	bne.n	8005c4e <_DrawVLine+0xa6>
 8005c58:	e7d9      	b.n	8005c0e <_DrawVLine+0x66>
 8005c5a:	b003      	add	sp, #12
 8005c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c60:	24000028 	.word	0x24000028

08005c64 <_FillRect>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4f2a      	ldr	r7, [pc, #168]	; (8005d14 <_FillRect+0xb0>)
 8005c6a:	461d      	mov	r5, r3
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	b087      	sub	sp, #28
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4689      	mov	r9, r1
 8005c74:	4683      	mov	fp, r0
 8005c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c78:	ebc9 0505 	rsb	r5, r9, r5
 8005c7c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	f105 0a01 	add.w	sl, r5, #1
 8005c84:	9202      	str	r2, [sp, #8]
 8005c86:	f7fd fb9b 	bl	80033c0 <GUI_ALLOC_LockH>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	9004      	str	r0, [sp, #16]
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f7ff ff10 	bl	8005ab4 <_XY2PTR>
 8005c94:	9a04      	ldr	r2, [sp, #16]
 8005c96:	4606      	mov	r6, r0
 8005c98:	68d3      	ldr	r3, [r2, #12]
 8005c9a:	6950      	ldr	r0, [r2, #20]
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	b188      	cbz	r0, 8005cc4 <_FillRect+0x60>
 8005ca0:	f7fd fb8e 	bl	80033c0 <GUI_ALLOC_LockH>
 8005ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ca6:	f10d 0818 	add.w	r8, sp, #24
 8005caa:	4622      	mov	r2, r4
 8005cac:	1b1b      	subs	r3, r3, r4
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f848 0d04 	str.w	r0, [r8, #-4]!
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4653      	mov	r3, sl
 8005cba:	f000 fbff 	bl	80064bc <GUI_USAGE_AddRect>
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7fd fb8c 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005cc4:	006d      	lsls	r5, r5, #1
 8005cc6:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 8005cca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	dc1a      	bgt.n	8005d06 <_FillRect+0xa2>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	7c1b      	ldrb	r3, [r3, #16]
 8005cd4:	07db      	lsls	r3, r3, #31
 8005cd6:	d50d      	bpl.n	8005cf4 <_FillRect+0x90>
 8005cd8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4798      	blx	r3
 8005ce0:	1eb3      	subs	r3, r6, #2
 8005ce2:	b280      	uxth	r0, r0
 8005ce4:	1971      	adds	r1, r6, r5
 8005ce6:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005cea:	4042      	eors	r2, r0
 8005cec:	428b      	cmp	r3, r1
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	d1f9      	bne.n	8005ce6 <_FillRect+0x82>
 8005cf2:	e004      	b.n	8005cfe <_FillRect+0x9a>
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f7fe f9be 	bl	800407a <GUI__memset16>
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	3401      	adds	r4, #1
 8005d02:	441e      	add	r6, r3
 8005d04:	e7e1      	b.n	8005cca <_FillRect+0x66>
 8005d06:	a804      	add	r0, sp, #16
 8005d08:	f7fd fb68 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005d0c:	b007      	add	sp, #28
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	24000028 	.word	0x24000028

08005d18 <_DrawHLine>:
 8005d18:	b507      	push	{r0, r1, r2, lr}
 8005d1a:	9200      	str	r2, [sp, #0]
 8005d1c:	f7ff ffa2 	bl	8005c64 <_FillRect>
 8005d20:	b003      	add	sp, #12
 8005d22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005d28 <_DrawBitmap>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	4d99      	ldr	r5, [pc, #612]	; (8005f94 <_DrawBitmap+0x26c>)
 8005d2e:	b091      	sub	sp, #68	; 0x44
 8005d30:	460e      	mov	r6, r1
 8005d32:	9302      	str	r3, [sp, #8]
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	900a      	str	r0, [sp, #40]	; 0x28
 8005d38:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005d3a:	9205      	str	r2, [sp, #20]
 8005d3c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005d3e:	f7fd fb3f 	bl	80033c0 <GUI_ALLOC_LockH>
 8005d42:	900e      	str	r0, [sp, #56]	; 0x38
 8005d44:	6940      	ldr	r0, [r0, #20]
 8005d46:	b108      	cbz	r0, 8005d4c <_DrawBitmap+0x24>
 8005d48:	f7fd fb3a 	bl	80033c0 <GUI_ALLOC_LockH>
 8005d4c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d4e:	a810      	add	r0, sp, #64	; 0x40
 8005d50:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	9306      	str	r3, [sp, #24]
 8005d58:	f7fd fb40 	bl	80033dc <GUI_ALLOC_UnlockH>
 8005d5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d60:	eb06 0b03 	add.w	fp, r6, r3
 8005d64:	b150      	cbz	r0, 8005d7c <_DrawBitmap+0x54>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	7c1b      	ldrb	r3, [r3, #16]
 8005d6a:	0799      	lsls	r1, r3, #30
 8005d6c:	d106      	bne.n	8005d7c <_DrawBitmap+0x54>
 8005d6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d70:	4659      	mov	r1, fp
 8005d72:	9a05      	ldr	r2, [sp, #20]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	9b02      	ldr	r3, [sp, #8]
 8005d78:	f000 fba0 	bl	80064bc <GUI_USAGE_AddRect>
 8005d7c:	9905      	ldr	r1, [sp, #20]
 8005d7e:	4658      	mov	r0, fp
 8005d80:	f7ff fe98 	bl	8005ab4 <_XY2PTR>
 8005d84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d86:	4605      	mov	r5, r0
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d134      	bne.n	8005df6 <_DrawBitmap+0xce>
 8005d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d8e:	b133      	cbz	r3, 8005d9e <_DrawBitmap+0x76>
 8005d90:	9b02      	ldr	r3, [sp, #8]
 8005d92:	2600      	movs	r6, #0
 8005d94:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8005f9c <_DrawBitmap+0x274>
 8005d98:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005d9c:	e012      	b.n	8005dc4 <_DrawBitmap+0x9c>
 8005d9e:	4b7e      	ldr	r3, [pc, #504]	; (8005f98 <_DrawBitmap+0x270>)
 8005da0:	681e      	ldr	r6, [r3, #0]
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	d0f4      	beq.n	8005d90 <_DrawBitmap+0x68>
 8005da6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005da8:	4621      	mov	r1, r4
 8005daa:	9a02      	ldr	r2, [sp, #8]
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	9b06      	ldr	r3, [sp, #24]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005db4:	47b0      	blx	r6
 8005db6:	e35b      	b.n	8006470 <_DrawBitmap+0x748>
 8005db8:	b944      	cbnz	r4, 8005dcc <_DrawBitmap+0xa4>
 8005dba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	441c      	add	r4, r3
 8005dc0:	9b06      	ldr	r3, [sp, #24]
 8005dc2:	441d      	add	r5, r3
 8005dc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005dc6:	429e      	cmp	r6, r3
 8005dc8:	dbf6      	blt.n	8005db8 <_DrawBitmap+0x90>
 8005dca:	e34c      	b.n	8006466 <_DrawBitmap+0x73e>
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	d0f4      	beq.n	8005dba <_DrawBitmap+0x92>
 8005dd0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f8d9 3000 	ldr.w	r3, [r9]
 8005ddc:	4798      	blx	r3
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d0eb      	beq.n	8005dba <_DrawBitmap+0x92>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4659      	mov	r1, fp
 8005de6:	9a05      	ldr	r2, [sp, #20]
 8005de8:	4638      	mov	r0, r7
 8005dea:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005dee:	4432      	add	r2, r6
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	47d0      	blx	sl
 8005df4:	e7e1      	b.n	8005dba <_DrawBitmap+0x92>
 8005df6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005df8:	2b17      	cmp	r3, #23
 8005dfa:	dd44      	ble.n	8005e86 <_DrawBitmap+0x15e>
 8005dfc:	f06f 0303 	mvn.w	r3, #3
 8005e00:	f04f 0800 	mov.w	r8, #0
 8005e04:	fb03 f30b 	mul.w	r3, r3, fp
 8005e08:	9307      	str	r3, [sp, #28]
 8005e0a:	f06f 0301 	mvn.w	r3, #1
 8005e0e:	fb03 f30b 	mul.w	r3, r3, fp
 8005e12:	9304      	str	r3, [sp, #16]
 8005e14:	9b02      	ldr	r3, [sp, #8]
 8005e16:	445b      	add	r3, fp
 8005e18:	9308      	str	r3, [sp, #32]
 8005e1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005e1c:	4598      	cmp	r8, r3
 8005e1e:	f280 8322 	bge.w	8006466 <_DrawBitmap+0x73e>
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	eb03 0908 	add.w	r9, r3, r8
 8005e28:	b934      	cbnz	r4, 8005e38 <_DrawBitmap+0x110>
 8005e2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005e2c:	f108 0801 	add.w	r8, r8, #1
 8005e30:	441c      	add	r4, r3
 8005e32:	9b06      	ldr	r3, [sp, #24]
 8005e34:	441d      	add	r5, r3
 8005e36:	e7f0      	b.n	8005e1a <_DrawBitmap+0xf2>
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	d0f6      	beq.n	8005e2a <_DrawBitmap+0x102>
 8005e3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005e3e:	b137      	cbz	r7, 8005e4e <_DrawBitmap+0x126>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	464a      	mov	r2, r9
 8005e44:	4659      	mov	r1, fp
 8005e46:	4638      	mov	r0, r7
 8005e48:	685e      	ldr	r6, [r3, #4]
 8005e4a:	9b02      	ldr	r3, [sp, #8]
 8005e4c:	47b0      	blx	r6
 8005e4e:	9b07      	ldr	r3, [sp, #28]
 8005e50:	465e      	mov	r6, fp
 8005e52:	eb04 0a03 	add.w	sl, r4, r3
 8005e56:	9b04      	ldr	r3, [sp, #16]
 8005e58:	18eb      	adds	r3, r5, r3
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4798      	blx	r3
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8005e6e:	b12f      	cbz	r7, 8005e7c <_DrawBitmap+0x154>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	464a      	mov	r2, r9
 8005e74:	4631      	mov	r1, r6
 8005e76:	4638      	mov	r0, r7
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	9b08      	ldr	r3, [sp, #32]
 8005e80:	429e      	cmp	r6, r3
 8005e82:	d1eb      	bne.n	8005e5c <_DrawBitmap+0x134>
 8005e84:	e7d1      	b.n	8005e2a <_DrawBitmap+0x102>
 8005e86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	f040 8089 	bne.w	8005fa0 <_DrawBitmap+0x278>
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	3c01      	subs	r4, #1
 8005e92:	9e05      	ldr	r6, [sp, #20]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005f94 <_DrawBitmap+0x26c>
 8005e9a:	9307      	str	r3, [sp, #28]
 8005e9c:	f06f 0301 	mvn.w	r3, #1
 8005ea0:	fb03 f30b 	mul.w	r3, r3, fp
 8005ea4:	9303      	str	r3, [sp, #12]
 8005ea6:	9b02      	ldr	r3, [sp, #8]
 8005ea8:	445b      	add	r3, fp
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	9b05      	ldr	r3, [sp, #20]
 8005eae:	1c61      	adds	r1, r4, #1
 8005eb0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005eb2:	1af3      	subs	r3, r6, r3
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	f340 82d6 	ble.w	8006466 <_DrawBitmap+0x73e>
 8005eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d036      	beq.n	8005f2e <_DrawBitmap+0x206>
 8005ec0:	f8d9 3000 	ldr.w	r3, [r9]
 8005ec4:	7c1b      	ldrb	r3, [r3, #16]
 8005ec6:	f013 0303 	ands.w	r3, r3, #3
 8005eca:	d009      	beq.n	8005ee0 <_DrawBitmap+0x1b8>
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d15a      	bne.n	8005f86 <_DrawBitmap+0x25e>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	46a2      	mov	sl, r4
 8005ed4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8005ed8:	465f      	mov	r7, fp
 8005eda:	18eb      	adds	r3, r5, r3
 8005edc:	9308      	str	r3, [sp, #32]
 8005ede:	e021      	b.n	8005f24 <_DrawBitmap+0x1fc>
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	18e9      	adds	r1, r5, r3
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005eec:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8005eee:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005ef2:	f823 0b02 	strh.w	r0, [r3], #2
 8005ef6:	428b      	cmp	r3, r1
 8005ef8:	d1f6      	bne.n	8005ee8 <_DrawBitmap+0x1c0>
 8005efa:	e044      	b.n	8005f86 <_DrawBitmap+0x25e>
 8005efc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f02:	9a08      	ldr	r2, [sp, #32]
 8005f04:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8005f08:	f1b8 0f00 	cmp.w	r8, #0
 8005f0c:	d006      	beq.n	8005f1c <_DrawBitmap+0x1f4>
 8005f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f12:	4632      	mov	r2, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	4640      	mov	r0, r8
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4798      	blx	r3
 8005f1c:	3701      	adds	r7, #1
 8005f1e:	9b04      	ldr	r3, [sp, #16]
 8005f20:	42bb      	cmp	r3, r7
 8005f22:	d030      	beq.n	8005f86 <_DrawBitmap+0x25e>
 8005f24:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f7      	beq.n	8005f1c <_DrawBitmap+0x1f4>
 8005f2c:	e7e6      	b.n	8005efc <_DrawBitmap+0x1d4>
 8005f2e:	f8d9 3000 	ldr.w	r3, [r9]
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	f013 0303 	ands.w	r3, r3, #3
 8005f38:	d009      	beq.n	8005f4e <_DrawBitmap+0x226>
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d123      	bne.n	8005f86 <_DrawBitmap+0x25e>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	46a2      	mov	sl, r4
 8005f42:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8005f46:	465f      	mov	r7, fp
 8005f48:	18eb      	adds	r3, r5, r3
 8005f4a:	9308      	str	r3, [sp, #32]
 8005f4c:	e016      	b.n	8005f7c <_DrawBitmap+0x254>
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <_DrawBitmap+0x274>)
 8005f50:	4628      	mov	r0, r5
 8005f52:	9a02      	ldr	r2, [sp, #8]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4798      	blx	r3
 8005f58:	e015      	b.n	8005f86 <_DrawBitmap+0x25e>
 8005f5a:	9a08      	ldr	r2, [sp, #32]
 8005f5c:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8005f60:	f1b8 0f00 	cmp.w	r8, #0
 8005f64:	d006      	beq.n	8005f74 <_DrawBitmap+0x24c>
 8005f66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	4640      	mov	r0, r8
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4798      	blx	r3
 8005f74:	3701      	adds	r7, #1
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	429f      	cmp	r7, r3
 8005f7a:	d004      	beq.n	8005f86 <_DrawBitmap+0x25e>
 8005f7c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f7      	beq.n	8005f74 <_DrawBitmap+0x24c>
 8005f84:	e7e9      	b.n	8005f5a <_DrawBitmap+0x232>
 8005f86:	9b06      	ldr	r3, [sp, #24]
 8005f88:	3601      	adds	r6, #1
 8005f8a:	441d      	add	r5, r3
 8005f8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005f8e:	441c      	add	r4, r3
 8005f90:	e78c      	b.n	8005eac <_DrawBitmap+0x184>
 8005f92:	bf00      	nop
 8005f94:	24000028 	.word	0x24000028
 8005f98:	2402d40c 	.word	0x2402d40c
 8005f9c:	2400002c 	.word	0x2400002c
 8005fa0:	4baf      	ldr	r3, [pc, #700]	; (8006260 <_DrawBitmap+0x538>)
 8005fa2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	bf08      	it	eq
 8005fa8:	461a      	moveq	r2, r3
 8005faa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	921f      	str	r2, [sp, #124]	; 0x7c
 8005fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb8:	1c63      	adds	r3, r4, #1
 8005fba:	9303      	str	r3, [sp, #12]
 8005fbc:	1c83      	adds	r3, r0, #2
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	9b05      	ldr	r3, [sp, #20]
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	9a05      	ldr	r2, [sp, #20]
 8005fc8:	1e9c      	subs	r4, r3, #2
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	f103 3aff 	add.w	sl, r3, #4294967295
 8005fd0:	9b04      	ldr	r3, [sp, #16]
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	f340 8245 	ble.w	8006466 <_DrawBitmap+0x73e>
 8005fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	f000 80c7 	beq.w	8006172 <_DrawBitmap+0x44a>
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	f000 8167 	beq.w	80062b8 <_DrawBitmap+0x590>
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	f040 822f 	bne.w	800644e <_DrawBitmap+0x726>
 8005ff0:	4b9c      	ldr	r3, [pc, #624]	; (8006264 <_DrawBitmap+0x53c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005ff6:	f7fd f9e3 	bl	80033c0 <GUI_ALLOC_LockH>
 8005ffa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ffc:	4a9a      	ldr	r2, [pc, #616]	; (8006268 <_DrawBitmap+0x540>)
 8005ffe:	f1c3 0508 	rsb	r5, r3, #8
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	900e      	str	r0, [sp, #56]	; 0x38
 8006006:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800600a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800600e:	5cd6      	ldrb	r6, [r2, r3]
 8006010:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006012:	9f02      	ldr	r7, [sp, #8]
 8006014:	411e      	asrs	r6, r3
 8006016:	4b93      	ldr	r3, [pc, #588]	; (8006264 <_DrawBitmap+0x53c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	7c1b      	ldrb	r3, [r3, #16]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d01f      	beq.n	8006064 <_DrawBitmap+0x33c>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d058      	beq.n	80060da <_DrawBitmap+0x3b2>
 8006028:	2b01      	cmp	r3, #1
 800602a:	d056      	beq.n	80060da <_DrawBitmap+0x3b2>
 800602c:	42bd      	cmp	r5, r7
 800602e:	4622      	mov	r2, r4
 8006030:	bf28      	it	cs
 8006032:	463d      	movcs	r5, r7
 8006034:	1b7f      	subs	r7, r7, r5
 8006036:	462b      	mov	r3, r5
 8006038:	f006 0101 	and.w	r1, r6, #1
 800603c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800603e:	3b01      	subs	r3, #1
 8006040:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006044:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8006048:	f822 1b02 	strh.w	r1, [r2], #2
 800604c:	d1f4      	bne.n	8006038 <_DrawBitmap+0x310>
 800604e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006052:	2f00      	cmp	r7, #0
 8006054:	f000 8089 	beq.w	800616a <_DrawBitmap+0x442>
 8006058:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800605c:	2508      	movs	r5, #8
 800605e:	4a82      	ldr	r2, [pc, #520]	; (8006268 <_DrawBitmap+0x540>)
 8006060:	5cd6      	ldrb	r6, [r2, r3]
 8006062:	e7e3      	b.n	800602c <_DrawBitmap+0x304>
 8006064:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006066:	46d8      	mov	r8, fp
 8006068:	889b      	ldrh	r3, [r3, #4]
 800606a:	9308      	str	r3, [sp, #32]
 800606c:	42bd      	cmp	r5, r7
 800606e:	bf28      	it	cs
 8006070:	463d      	movcs	r5, r7
 8006072:	1b7f      	subs	r7, r7, r5
 8006074:	f1b9 0f00 	cmp.w	r9, #0
 8006078:	d023      	beq.n	80060c2 <_DrawBitmap+0x39a>
 800607a:	b91e      	cbnz	r6, 8006084 <_DrawBitmap+0x35c>
 800607c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006080:	44a8      	add	r8, r5
 8006082:	e022      	b.n	80060ca <_DrawBitmap+0x3a2>
 8006084:	07f2      	lsls	r2, r6, #31
 8006086:	d509      	bpl.n	800609c <_DrawBitmap+0x374>
 8006088:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800608c:	4641      	mov	r1, r8
 800608e:	9a04      	ldr	r2, [sp, #16]
 8006090:	4648      	mov	r0, r9
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4798      	blx	r3
 8006096:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800609a:	8023      	strh	r3, [r4, #0]
 800609c:	3d01      	subs	r5, #1
 800609e:	f108 0801 	add.w	r8, r8, #1
 80060a2:	f104 0402 	add.w	r4, r4, #2
 80060a6:	d010      	beq.n	80060ca <_DrawBitmap+0x3a2>
 80060a8:	0876      	lsrs	r6, r6, #1
 80060aa:	e7e6      	b.n	800607a <_DrawBitmap+0x352>
 80060ac:	07f3      	lsls	r3, r6, #31
 80060ae:	f104 0402 	add.w	r4, r4, #2
 80060b2:	bf44      	itt	mi
 80060b4:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 80060b8:	f824 3c02 	strhmi.w	r3, [r4, #-2]
 80060bc:	3d01      	subs	r5, #1
 80060be:	d004      	beq.n	80060ca <_DrawBitmap+0x3a2>
 80060c0:	0876      	lsrs	r6, r6, #1
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	d1f2      	bne.n	80060ac <_DrawBitmap+0x384>
 80060c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80060ca:	2f00      	cmp	r7, #0
 80060cc:	d04d      	beq.n	800616a <_DrawBitmap+0x442>
 80060ce:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80060d2:	2508      	movs	r5, #8
 80060d4:	4a64      	ldr	r2, [pc, #400]	; (8006268 <_DrawBitmap+0x540>)
 80060d6:	5cd6      	ldrb	r6, [r2, r3]
 80060d8:	e7c8      	b.n	800606c <_DrawBitmap+0x344>
 80060da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060dc:	46d8      	mov	r8, fp
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	4798      	blx	r3
 80060e4:	b283      	uxth	r3, r0
 80060e6:	9309      	str	r3, [sp, #36]	; 0x24
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	9308      	str	r3, [sp, #32]
 80060ec:	42bd      	cmp	r5, r7
 80060ee:	bf28      	it	cs
 80060f0:	463d      	movcs	r5, r7
 80060f2:	1b7f      	subs	r7, r7, r5
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	d01b      	beq.n	8006132 <_DrawBitmap+0x40a>
 80060fa:	eb08 0305 	add.w	r3, r8, r5
 80060fe:	46a2      	mov	sl, r4
 8006100:	930d      	str	r3, [sp, #52]	; 0x34
 8006102:	07f0      	lsls	r0, r6, #31
 8006104:	d50c      	bpl.n	8006120 <_DrawBitmap+0x3f8>
 8006106:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800610a:	4641      	mov	r1, r8
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	4648      	mov	r0, r9
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4798      	blx	r3
 8006114:	f8ba 3000 	ldrh.w	r3, [sl]
 8006118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800611a:	4053      	eors	r3, r2
 800611c:	f8aa 3000 	strh.w	r3, [sl]
 8006120:	f108 0801 	add.w	r8, r8, #1
 8006124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006126:	f10a 0a02 	add.w	sl, sl, #2
 800612a:	0876      	lsrs	r6, r6, #1
 800612c:	4598      	cmp	r8, r3
 800612e:	d1e8      	bne.n	8006102 <_DrawBitmap+0x3da>
 8006130:	e00f      	b.n	8006152 <_DrawBitmap+0x42a>
 8006132:	462a      	mov	r2, r5
 8006134:	4623      	mov	r3, r4
 8006136:	07f1      	lsls	r1, r6, #31
 8006138:	f103 0302 	add.w	r3, r3, #2
 800613c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006140:	bf41      	itttt	mi
 8006142:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
 8006146:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 8006148:	4041      	eormi	r1, r0
 800614a:	f823 1c02 	strhmi.w	r1, [r3, #-2]
 800614e:	3a01      	subs	r2, #1
 8006150:	d1f1      	bne.n	8006136 <_DrawBitmap+0x40e>
 8006152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006156:	b147      	cbz	r7, 800616a <_DrawBitmap+0x442>
 8006158:	9b08      	ldr	r3, [sp, #32]
 800615a:	2508      	movs	r5, #8
 800615c:	4a42      	ldr	r2, [pc, #264]	; (8006268 <_DrawBitmap+0x540>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	5cd6      	ldrb	r6, [r2, r3]
 8006162:	9b08      	ldr	r3, [sp, #32]
 8006164:	3301      	adds	r3, #1
 8006166:	9308      	str	r3, [sp, #32]
 8006168:	e7c0      	b.n	80060ec <_DrawBitmap+0x3c4>
 800616a:	a80e      	add	r0, sp, #56	; 0x38
 800616c:	f7fd f936 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006170:	e16d      	b.n	800644e <_DrawBitmap+0x726>
 8006172:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006174:	f1c3 0504 	rsb	r5, r3, #4
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800617e:	b2ed      	uxtb	r5, r5
 8006180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006182:	409e      	lsls	r6, r3
 8006184:	4b37      	ldr	r3, [pc, #220]	; (8006264 <_DrawBitmap+0x53c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	b2f6      	uxtb	r6, r6
 800618a:	7c1b      	ldrb	r3, [r3, #16]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d009      	beq.n	80061a8 <_DrawBitmap+0x480>
 8006194:	d30a      	bcc.n	80061ac <_DrawBitmap+0x484>
 8006196:	2b02      	cmp	r3, #2
 8006198:	f040 8159 	bne.w	800644e <_DrawBitmap+0x726>
 800619c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800619e:	465f      	mov	r7, fp
 80061a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80061a4:	9308      	str	r3, [sp, #32]
 80061a6:	e036      	b.n	8006216 <_DrawBitmap+0x4ee>
 80061a8:	9b02      	ldr	r3, [sp, #8]
 80061aa:	e07e      	b.n	80062aa <_DrawBitmap+0x582>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	429d      	cmp	r5, r3
 80061b0:	4621      	mov	r1, r4
 80061b2:	bfc8      	it	gt
 80061b4:	b2dd      	uxtbgt	r5, r3
 80061b6:	1b5b      	subs	r3, r3, r5
 80061b8:	462a      	mov	r2, r5
 80061ba:	09b0      	lsrs	r0, r6, #6
 80061bc:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80061be:	3a01      	subs	r2, #1
 80061c0:	00b6      	lsls	r6, r6, #2
 80061c2:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80061c6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80061ca:	b2f6      	uxtb	r6, r6
 80061cc:	f821 0b02 	strh.w	r0, [r1], #2
 80061d0:	d1f3      	bne.n	80061ba <_DrawBitmap+0x492>
 80061d2:	3d01      	subs	r5, #1
 80061d4:	b2ed      	uxtb	r5, r5
 80061d6:	3501      	adds	r5, #1
 80061d8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8136 	beq.w	800644e <_DrawBitmap+0x726>
 80061e2:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 80061e6:	2504      	movs	r5, #4
 80061e8:	e7e1      	b.n	80061ae <_DrawBitmap+0x486>
 80061ea:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80061ee:	d125      	bne.n	800623c <_DrawBitmap+0x514>
 80061f0:	f109 0901 	add.w	r9, r9, #1
 80061f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f6:	00b6      	lsls	r6, r6, #2
 80061f8:	4599      	cmp	r9, r3
 80061fa:	b2f6      	uxtb	r6, r6
 80061fc:	d1f5      	bne.n	80061ea <_DrawBitmap+0x4c2>
 80061fe:	1c6b      	adds	r3, r5, #1
 8006200:	3701      	adds	r7, #1
 8006202:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8006206:	442f      	add	r7, r5
 8006208:	f1b8 0f00 	cmp.w	r8, #0
 800620c:	f000 811f 	beq.w	800644e <_DrawBitmap+0x726>
 8006210:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8006214:	2504      	movs	r5, #4
 8006216:	4545      	cmp	r5, r8
 8006218:	f107 0301 	add.w	r3, r7, #1
 800621c:	46b9      	mov	r9, r7
 800621e:	bfc8      	it	gt
 8006220:	fa5f f588 	uxtbgt.w	r5, r8
 8006224:	ebc5 0808 	rsb	r8, r5, r8
 8006228:	3d01      	subs	r5, #1
 800622a:	b2ed      	uxtb	r5, r5
 800622c:	442b      	add	r3, r5
 800622e:	930d      	str	r3, [sp, #52]	; 0x34
 8006230:	f06f 0301 	mvn.w	r3, #1
 8006234:	fb03 4307 	mla	r3, r3, r7, r4
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
 800623a:	e7d6      	b.n	80061ea <_DrawBitmap+0x4c2>
 800623c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800623e:	09b3      	lsrs	r3, r6, #6
 8006240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006246:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0cf      	beq.n	80061f0 <_DrawBitmap+0x4c8>
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	4649      	mov	r1, r9
 8006254:	9a04      	ldr	r2, [sp, #16]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9808      	ldr	r0, [sp, #32]
 800625a:	4798      	blx	r3
 800625c:	e7c8      	b.n	80061f0 <_DrawBitmap+0x4c8>
 800625e:	bf00      	nop
 8006260:	080097d0 	.word	0x080097d0
 8006264:	24000028 	.word	0x24000028
 8006268:	08009828 	.word	0x08009828
 800626c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8006270:	f102 32ff 	add.w	r2, r2, #4294967295
 8006274:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8006278:	f101 0102 	add.w	r1, r1, #2
 800627c:	bf18      	it	ne
 800627e:	f831 0c02 	ldrhne.w	r0, [r1, #-2]
 8006282:	b2f6      	uxtb	r6, r6
 8006284:	bf1c      	itt	ne
 8006286:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 800628a:	f821 0c02 	strhne.w	r0, [r1, #-2]
 800628e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8006292:	d1eb      	bne.n	800626c <_DrawBitmap+0x544>
 8006294:	3d01      	subs	r5, #1
 8006296:	b2ed      	uxtb	r5, r5
 8006298:	3501      	adds	r5, #1
 800629a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80d5 	beq.w	800644e <_DrawBitmap+0x726>
 80062a4:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 80062a8:	2504      	movs	r5, #4
 80062aa:	429d      	cmp	r5, r3
 80062ac:	4621      	mov	r1, r4
 80062ae:	bfc8      	it	gt
 80062b0:	b2dd      	uxtbgt	r5, r3
 80062b2:	1b5b      	subs	r3, r3, r5
 80062b4:	462a      	mov	r2, r5
 80062b6:	e7d9      	b.n	800626c <_DrawBitmap+0x544>
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80062c0:	4093      	lsls	r3, r2
 80062c2:	4a6d      	ldr	r2, [pc, #436]	; (8006478 <_DrawBitmap+0x750>)
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	b2dd      	uxtb	r5, r3
 80062c8:	7c12      	ldrb	r2, [r2, #16]
 80062ca:	f002 0203 	and.w	r2, r2, #3
 80062ce:	2a01      	cmp	r2, #1
 80062d0:	d003      	beq.n	80062da <_DrawBitmap+0x5b2>
 80062d2:	d308      	bcc.n	80062e6 <_DrawBitmap+0x5be>
 80062d4:	2a02      	cmp	r2, #2
 80062d6:	d03a      	beq.n	800634e <_DrawBitmap+0x626>
 80062d8:	e0b9      	b.n	800644e <_DrawBitmap+0x726>
 80062da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062dc:	9a02      	ldr	r2, [sp, #8]
 80062de:	f1c3 0302 	rsb	r3, r3, #2
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	e0ac      	b.n	8006440 <_DrawBitmap+0x718>
 80062e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062e8:	b15b      	cbz	r3, 8006302 <_DrawBitmap+0x5da>
 80062ea:	092d      	lsrs	r5, r5, #4
 80062ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062ee:	9a03      	ldr	r2, [sp, #12]
 80062f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80062f4:	4692      	mov	sl, r2
 80062f6:	8023      	strh	r3, [r4, #0]
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	9c07      	ldr	r4, [sp, #28]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	7815      	ldrb	r5, [r2, #0]
 8006300:	e000      	b.n	8006304 <_DrawBitmap+0x5dc>
 8006302:	9b02      	ldr	r3, [sp, #8]
 8006304:	2b01      	cmp	r3, #1
 8006306:	dd19      	ble.n	800633c <_DrawBitmap+0x614>
 8006308:	1059      	asrs	r1, r3, #1
 800630a:	1d22      	adds	r2, r4, #4
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	eb0a 0001 	add.w	r0, sl, r1
 8006314:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8006316:	092e      	lsrs	r6, r5, #4
 8006318:	f005 050f 	and.w	r5, r5, #15
 800631c:	3204      	adds	r2, #4
 800631e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8006322:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8006326:	f822 6c08 	strh.w	r6, [r2, #-8]
 800632a:	463e      	mov	r6, r7
 800632c:	f822 5c06 	strh.w	r5, [r2, #-6]
 8006330:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8006334:	4582      	cmp	sl, r0
 8006336:	d1ed      	bne.n	8006314 <_DrawBitmap+0x5ec>
 8006338:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8086 	beq.w	800644e <_DrawBitmap+0x726>
 8006342:	092d      	lsrs	r5, r5, #4
 8006344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006346:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800634a:	8023      	strh	r3, [r4, #0]
 800634c:	e07f      	b.n	800644e <_DrawBitmap+0x726>
 800634e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006350:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006352:	b1c2      	cbz	r2, 8006386 <_DrawBitmap+0x65e>
 8006354:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006358:	d00b      	beq.n	8006372 <_DrawBitmap+0x64a>
 800635a:	092d      	lsrs	r5, r5, #4
 800635c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800635e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006362:	8023      	strh	r3, [r4, #0]
 8006364:	b12e      	cbz	r6, 8006372 <_DrawBitmap+0x64a>
 8006366:	68b3      	ldr	r3, [r6, #8]
 8006368:	4659      	mov	r1, fp
 800636a:	9a04      	ldr	r2, [sp, #16]
 800636c:	4630      	mov	r0, r6
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4798      	blx	r3
 8006372:	9b02      	ldr	r3, [sp, #8]
 8006374:	f10b 0701 	add.w	r7, fp, #1
 8006378:	9c07      	ldr	r4, [sp, #28]
 800637a:	f103 38ff 	add.w	r8, r3, #4294967295
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	781d      	ldrb	r5, [r3, #0]
 8006382:	469a      	mov	sl, r3
 8006384:	e00f      	b.n	80063a6 <_DrawBitmap+0x67e>
 8006386:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800638a:	465f      	mov	r7, fp
 800638c:	e00b      	b.n	80063a6 <_DrawBitmap+0x67e>
 800638e:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8006392:	d10c      	bne.n	80063ae <_DrawBitmap+0x686>
 8006394:	f015 050f 	ands.w	r5, r5, #15
 8006398:	d117      	bne.n	80063ca <_DrawBitmap+0x6a2>
 800639a:	3404      	adds	r4, #4
 800639c:	3702      	adds	r7, #2
 800639e:	f1a8 0802 	sub.w	r8, r8, #2
 80063a2:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80063a6:	f1b8 0f01 	cmp.w	r8, #1
 80063aa:	dcf0      	bgt.n	800638e <_DrawBitmap+0x666>
 80063ac:	e01a      	b.n	80063e4 <_DrawBitmap+0x6bc>
 80063ae:	092b      	lsrs	r3, r5, #4
 80063b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80063b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b6:	8023      	strh	r3, [r4, #0]
 80063b8:	2e00      	cmp	r6, #0
 80063ba:	d0eb      	beq.n	8006394 <_DrawBitmap+0x66c>
 80063bc:	68b3      	ldr	r3, [r6, #8]
 80063be:	4639      	mov	r1, r7
 80063c0:	9a04      	ldr	r2, [sp, #16]
 80063c2:	4630      	mov	r0, r6
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4798      	blx	r3
 80063c8:	e7e4      	b.n	8006394 <_DrawBitmap+0x66c>
 80063ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063cc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063d0:	8063      	strh	r3, [r4, #2]
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	d0e1      	beq.n	800639a <_DrawBitmap+0x672>
 80063d6:	68b3      	ldr	r3, [r6, #8]
 80063d8:	1c79      	adds	r1, r7, #1
 80063da:	9a04      	ldr	r2, [sp, #16]
 80063dc:	4630      	mov	r0, r6
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4798      	blx	r3
 80063e2:	e7da      	b.n	800639a <_DrawBitmap+0x672>
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	d031      	beq.n	800644e <_DrawBitmap+0x726>
 80063ea:	092d      	lsrs	r5, r5, #4
 80063ec:	d02f      	beq.n	800644e <_DrawBitmap+0x726>
 80063ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063f4:	8023      	strh	r3, [r4, #0]
 80063f6:	b356      	cbz	r6, 800644e <_DrawBitmap+0x726>
 80063f8:	68b3      	ldr	r3, [r6, #8]
 80063fa:	4639      	mov	r1, r7
 80063fc:	9a04      	ldr	r2, [sp, #16]
 80063fe:	4630      	mov	r0, r6
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4798      	blx	r3
 8006404:	e023      	b.n	800644e <_DrawBitmap+0x726>
 8006406:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800640a:	f101 31ff 	add.w	r1, r1, #4294967295
 800640e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006412:	f100 0002 	add.w	r0, r0, #2
 8006416:	bf18      	it	ne
 8006418:	f830 6c02 	ldrhne.w	r6, [r0, #-2]
 800641c:	b2ed      	uxtb	r5, r5
 800641e:	bf1c      	itt	ne
 8006420:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 8006424:	f820 6c02 	strhne.w	r6, [r0, #-2]
 8006428:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800642c:	d1eb      	bne.n	8006406 <_DrawBitmap+0x6de>
 800642e:	3b01      	subs	r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	3301      	adds	r3, #1
 8006434:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8006438:	b14a      	cbz	r2, 800644e <_DrawBitmap+0x726>
 800643a:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800643e:	2302      	movs	r3, #2
 8006440:	4293      	cmp	r3, r2
 8006442:	4620      	mov	r0, r4
 8006444:	bfc8      	it	gt
 8006446:	b2d3      	uxtbgt	r3, r2
 8006448:	1ad2      	subs	r2, r2, r3
 800644a:	4619      	mov	r1, r3
 800644c:	e7db      	b.n	8006406 <_DrawBitmap+0x6de>
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006452:	3301      	adds	r3, #1
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	4413      	add	r3, r2
 800645a:	9a06      	ldr	r2, [sp, #24]
 800645c:	9303      	str	r3, [sp, #12]
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	4413      	add	r3, r2
 8006462:	9307      	str	r3, [sp, #28]
 8006464:	e5ae      	b.n	8005fc4 <_DrawBitmap+0x29c>
 8006466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006468:	b113      	cbz	r3, 8006470 <_DrawBitmap+0x748>
 800646a:	a80f      	add	r0, sp, #60	; 0x3c
 800646c:	f7fc ffb6 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006470:	b011      	add	sp, #68	; 0x44
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	bf00      	nop
 8006478:	24000028 	.word	0x24000028

0800647c <_GetDevProp>:
 800647c:	2908      	cmp	r1, #8
 800647e:	d004      	beq.n	800648a <_GetDevProp+0xe>
 8006480:	6800      	ldr	r0, [r0, #0]
 8006482:	b120      	cbz	r0, 800648e <_GetDevProp+0x12>
 8006484:	68c3      	ldr	r3, [r0, #12]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	4718      	bx	r3
 800648a:	2010      	movs	r0, #16
 800648c:	4770      	bx	lr
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
 8006492:	4770      	bx	lr

08006494 <GUI_USAGE_DecUseCnt>:
 8006494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006496:	4605      	mov	r5, r0
 8006498:	f7fc ff92 	bl	80033c0 <GUI_ALLOC_LockH>
 800649c:	8984      	ldrh	r4, [r0, #12]
 800649e:	ab02      	add	r3, sp, #8
 80064a0:	3c01      	subs	r4, #1
 80064a2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80064a6:	b224      	sxth	r4, r4
 80064a8:	8184      	strh	r4, [r0, #12]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fc ff96 	bl	80033dc <GUI_ALLOC_UnlockH>
 80064b0:	b914      	cbnz	r4, 80064b8 <GUI_USAGE_DecUseCnt+0x24>
 80064b2:	4628      	mov	r0, r5
 80064b4:	f7fc ffb2 	bl	800341c <GUI_ALLOC_Free>
 80064b8:	b003      	add	sp, #12
 80064ba:	bd30      	pop	{r4, r5, pc}

080064bc <GUI_USAGE_AddRect>:
 80064bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c0:	9c08      	ldr	r4, [sp, #32]
 80064c2:	4605      	mov	r5, r0
 80064c4:	4688      	mov	r8, r1
 80064c6:	4699      	mov	r9, r3
 80064c8:	4414      	add	r4, r2
 80064ca:	68ab      	ldr	r3, [r5, #8]
 80064cc:	1c56      	adds	r6, r2, #1
 80064ce:	4641      	mov	r1, r8
 80064d0:	4628      	mov	r0, r5
 80064d2:	685f      	ldr	r7, [r3, #4]
 80064d4:	464b      	mov	r3, r9
 80064d6:	47b8      	blx	r7
 80064d8:	42b4      	cmp	r4, r6
 80064da:	4632      	mov	r2, r6
 80064dc:	d1f5      	bne.n	80064ca <GUI_USAGE_AddRect+0xe>
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080064e2 <_Convert16>:
 80064e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80064ea:	4681      	mov	r9, r0
 80064ec:	460d      	mov	r5, r1
 80064ee:	4616      	mov	r6, r2
 80064f0:	461f      	mov	r7, r3
 80064f2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80064f6:	4614      	mov	r4, r2
 80064f8:	4688      	mov	r8, r1
 80064fa:	f839 0b02 	ldrh.w	r0, [r9], #2
 80064fe:	47d8      	blx	fp
 8006500:	47d0      	blx	sl
 8006502:	3c01      	subs	r4, #1
 8006504:	f848 0b04 	str.w	r0, [r8], #4
 8006508:	d1f7      	bne.n	80064fa <_Convert16+0x18>
 800650a:	2f1f      	cmp	r7, #31
 800650c:	d806      	bhi.n	800651c <_Convert16+0x3a>
 800650e:	463a      	mov	r2, r7
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	f001 bc06 	b.w	8007d28 <GUI__CompactPixelIndices>
 800651c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006520 <_Convert8>:
 8006520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006528:	4680      	mov	r8, r0
 800652a:	460d      	mov	r5, r1
 800652c:	4616      	mov	r6, r2
 800652e:	461f      	mov	r7, r3
 8006530:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006534:	4689      	mov	r9, r1
 8006536:	4604      	mov	r4, r0
 8006538:	f814 0b01 	ldrb.w	r0, [r4], #1
 800653c:	47d8      	blx	fp
 800653e:	47d0      	blx	sl
 8006540:	1b33      	subs	r3, r6, r4
 8006542:	f849 0b04 	str.w	r0, [r9], #4
 8006546:	eb18 0f03 	cmn.w	r8, r3
 800654a:	d1f5      	bne.n	8006538 <_Convert8+0x18>
 800654c:	2f1f      	cmp	r7, #31
 800654e:	d806      	bhi.n	800655e <_Convert8+0x3e>
 8006550:	463a      	mov	r2, r7
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	f001 bbe5 	b.w	8007d28 <GUI__CompactPixelIndices>
 800655e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006564 <GUI_MEMDEV__WriteToActiveOpaque>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b09b      	sub	sp, #108	; 0x6c
 800656a:	4605      	mov	r5, r0
 800656c:	9108      	str	r1, [sp, #32]
 800656e:	9209      	str	r2, [sp, #36]	; 0x24
 8006570:	2800      	cmp	r0, #0
 8006572:	f000 8399 	beq.w	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006576:	f7fc ff23 	bl	80033c0 <GUI_ALLOC_LockH>
 800657a:	ab1a      	add	r3, sp, #104	; 0x68
 800657c:	6944      	ldr	r4, [r0, #20]
 800657e:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc ff2a 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006588:	4628      	mov	r0, r5
 800658a:	f001 fc9d 	bl	8007ec8 <GUI_MEMDEV_GetBitsPerPixel>
 800658e:	2808      	cmp	r0, #8
 8006590:	4607      	mov	r7, r0
 8006592:	4ea5      	ldr	r6, [pc, #660]	; (8006828 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 8006594:	dd02      	ble.n	800659c <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8006596:	2c00      	cmp	r4, #0
 8006598:	f000 81c9 	beq.w	800692e <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 800659c:	2301      	movs	r3, #1
 800659e:	2700      	movs	r7, #0
 80065a0:	4628      	mov	r0, r5
 80065a2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80065a6:	9319      	str	r3, [sp, #100]	; 0x64
 80065a8:	930d      	str	r3, [sp, #52]	; 0x34
 80065aa:	9718      	str	r7, [sp, #96]	; 0x60
 80065ac:	f7fc ff08 	bl	80033c0 <GUI_ALLOC_LockH>
 80065b0:	6802      	ldr	r2, [r0, #0]
 80065b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80065b6:	6912      	ldr	r2, [r2, #16]
 80065b8:	930e      	str	r3, [sp, #56]	; 0x38
 80065ba:	6853      	ldr	r3, [r2, #4]
 80065bc:	6832      	ldr	r2, [r6, #0]
 80065be:	f849 0d14 	str.w	r0, [r9, #-20]!
 80065c2:	6904      	ldr	r4, [r0, #16]
 80065c4:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80065c8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80065cc:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80065d0:	7c50      	ldrb	r0, [r2, #17]
 80065d2:	930c      	str	r3, [sp, #48]	; 0x30
 80065d4:	f7fe f9d4 	bl	8004980 <GUI_GetBitsPerPixelEx>
 80065d8:	6832      	ldr	r2, [r6, #0]
 80065da:	900b      	str	r0, [sp, #44]	; 0x2c
 80065dc:	7c50      	ldrb	r0, [r2, #17]
 80065de:	f7fe f9ed 	bl	80049bc <GUI_GetpfIndex2ColorEx>
 80065e2:	900a      	str	r0, [sp, #40]	; 0x28
 80065e4:	4648      	mov	r0, r9
 80065e6:	f7fc fef9 	bl	80033dc <GUI_ALLOC_UnlockH>
 80065ea:	2c08      	cmp	r4, #8
 80065ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f0:	d904      	bls.n	80065fc <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 80065f2:	2c10      	cmp	r4, #16
 80065f4:	bf8c      	ite	hi
 80065f6:	2304      	movhi	r3, #4
 80065f8:	2302      	movls	r3, #2
 80065fa:	e005      	b.n	8006608 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 80065fc:	2c01      	cmp	r4, #1
 80065fe:	d103      	bne.n	8006608 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8006600:	ab18      	add	r3, sp, #96	; 0x60
 8006602:	940d      	str	r4, [sp, #52]	; 0x34
 8006604:	930a      	str	r3, [sp, #40]	; 0x28
 8006606:	e001      	b.n	800660c <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8006608:	930d      	str	r3, [sp, #52]	; 0x34
 800660a:	970a      	str	r7, [sp, #40]	; 0x28
 800660c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800660e:	4293      	cmp	r3, r2
 8006610:	f000 80df 	beq.w	80067d2 <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	7c58      	ldrb	r0, [r3, #17]
 8006618:	f7fe f9d8 	bl	80049cc <GUI_GetpfColor2IndexEx>
 800661c:	900f      	str	r0, [sp, #60]	; 0x3c
 800661e:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8006622:	f7fd f85b 	bl	80036dc <GUI_ALLOC_AllocNoInit>
 8006626:	9010      	str	r0, [sp, #64]	; 0x40
 8006628:	2800      	cmp	r0, #0
 800662a:	f000 833d 	beq.w	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800662e:	4628      	mov	r0, r5
 8006630:	f001 fc82 	bl	8007f38 <GUI_MEMDEV_GetDataPtr>
 8006634:	4605      	mov	r5, r0
 8006636:	f1b8 0f00 	cmp.w	r8, #0
 800663a:	f000 80b9 	beq.w	80067b0 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 800663e:	4640      	mov	r0, r8
 8006640:	f7fc febe 	bl	80033c0 <GUI_ALLOC_LockH>
 8006644:	eb05 030a 	add.w	r3, r5, sl
 8006648:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800664c:	9311      	str	r3, [sp, #68]	; 0x44
 800664e:	2300      	movs	r3, #0
 8006650:	9016      	str	r0, [sp, #88]	; 0x58
 8006652:	9309      	str	r3, [sp, #36]	; 0x24
 8006654:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006658:	ebca 0703 	rsb	r7, sl, r3
 800665c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665e:	4293      	cmp	r3, r2
 8006660:	f340 80a2 	ble.w	80067a8 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 8006664:	2300      	movs	r3, #0
 8006666:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006668:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800666c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006670:	6883      	ldr	r3, [r0, #8]
 8006672:	4641      	mov	r1, r8
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	4798      	blx	r3
 8006678:	4583      	cmp	fp, r0
 800667a:	4605      	mov	r5, r0
 800667c:	d128      	bne.n	80066d0 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 800667e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006680:	f7fc fe9e 	bl	80033c0 <GUI_ALLOC_LockH>
 8006684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006686:	2c08      	cmp	r4, #8
 8006688:	4601      	mov	r1, r0
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	465a      	mov	r2, fp
 800668e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006690:	9014      	str	r0, [sp, #80]	; 0x50
 8006692:	4638      	mov	r0, r7
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006698:	d902      	bls.n	80066a0 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 800669a:	f7ff ff22 	bl	80064e2 <_Convert16>
 800669e:	e001      	b.n	80066a4 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 80066a0:	f7ff ff3e 	bl	8006520 <_Convert8>
 80066a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a6:	ad1a      	add	r5, sp, #104	; 0x68
 80066a8:	9808      	ldr	r0, [sp, #32]
 80066aa:	465a      	mov	r2, fp
 80066ac:	9305      	str	r3, [sp, #20]
 80066ae:	4649      	mov	r1, r9
 80066b0:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066bc:	9302      	str	r3, [sp, #8]
 80066be:	2301      	movs	r3, #1
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	f7fd fe94 	bl	80043f0 <LCD_DrawBitmap>
 80066c8:	4628      	mov	r0, r5
 80066ca:	f7fc fe87 	bl	80033dc <GUI_ALLOC_UnlockH>
 80066ce:	e062      	b.n	8006796 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80066d0:	2c01      	cmp	r4, #1
 80066d2:	d002      	beq.n	80066da <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 80066d4:	f04f 0801 	mov.w	r8, #1
 80066d8:	e057      	b.n	800678a <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 80066da:	2d00      	cmp	r5, #0
 80066dc:	d05b      	beq.n	8006796 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80066de:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066e0:	462a      	mov	r2, r5
 80066e2:	9e08      	ldr	r6, [sp, #32]
 80066e4:	4649      	mov	r1, r9
 80066e6:	f000 0307 	and.w	r3, r0, #7
 80066ea:	f8cd a00c 	str.w	sl, [sp, #12]
 80066ee:	9306      	str	r3, [sp, #24]
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	2308      	movs	r3, #8
 80066f6:	fb90 f3f3 	sdiv	r3, r0, r3
 80066fa:	443b      	add	r3, r7
 80066fc:	4430      	add	r0, r6
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	2301      	movs	r3, #1
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	f7fd fd86 	bl	8004218 <LCD__DrawBitmap_1bpp>
 800670c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800670e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006710:	4641      	mov	r1, r8
 8006712:	441d      	add	r5, r3
 8006714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006716:	6883      	ldr	r3, [r0, #8]
 8006718:	9517      	str	r5, [sp, #92]	; 0x5c
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	4798      	blx	r3
 800671e:	4605      	mov	r5, r0
 8006720:	e7db      	b.n	80066da <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8006722:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006724:	f7fc fe4c 	bl	80033c0 <GUI_ALLOC_LockH>
 8006728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800672a:	4601      	mov	r1, r0
 800672c:	9014      	str	r0, [sp, #80]	; 0x50
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	2c08      	cmp	r4, #8
 8006732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006734:	462a      	mov	r2, r5
 8006736:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006738:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	fb00 7006 	mla	r0, r0, r6, r7
 8006740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006742:	d925      	bls.n	8006790 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 8006744:	f7ff fecd 	bl	80064e2 <_Convert16>
 8006748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674a:	462a      	mov	r2, r5
 800674c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800674e:	4649      	mov	r1, r9
 8006750:	9305      	str	r3, [sp, #20]
 8006752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006754:	9e08      	ldr	r6, [sp, #32]
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	2300      	movs	r3, #0
 800675a:	4430      	add	r0, r6
 800675c:	f8cd 8004 	str.w	r8, [sp, #4]
 8006760:	9303      	str	r3, [sp, #12]
 8006762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006764:	f8cd 8000 	str.w	r8, [sp]
 8006768:	9302      	str	r3, [sp, #8]
 800676a:	2301      	movs	r3, #1
 800676c:	f7fd fe40 	bl	80043f0 <LCD_DrawBitmap>
 8006770:	a814      	add	r0, sp, #80	; 0x50
 8006772:	f7fc fe33 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006778:	9816      	ldr	r0, [sp, #88]	; 0x58
 800677a:	a917      	add	r1, sp, #92	; 0x5c
 800677c:	441d      	add	r5, r3
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	6883      	ldr	r3, [r0, #8]
 8006782:	9517      	str	r5, [sp, #92]	; 0x5c
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	4798      	blx	r3
 8006788:	4605      	mov	r5, r0
 800678a:	2d00      	cmp	r5, #0
 800678c:	d1c9      	bne.n	8006722 <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 800678e:	e002      	b.n	8006796 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8006790:	f7ff fec6 	bl	8006520 <_Convert8>
 8006794:	e7d8      	b.n	8006748 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	f109 0901 	add.w	r9, r9, #1
 800679c:	3301      	adds	r3, #1
 800679e:	9309      	str	r3, [sp, #36]	; 0x24
 80067a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067a2:	4453      	add	r3, sl
 80067a4:	9311      	str	r3, [sp, #68]	; 0x44
 80067a6:	e755      	b.n	8006654 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 80067a8:	a816      	add	r0, sp, #88	; 0x58
 80067aa:	f7fc fe17 	bl	80033dc <GUI_ALLOC_UnlockH>
 80067ae:	e00e      	b.n	80067ce <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	465a      	mov	r2, fp
 80067b4:	9004      	str	r0, [sp, #16]
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	2301      	movs	r3, #1
 80067ba:	f8cd a00c 	str.w	sl, [sp, #12]
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	9402      	str	r4, [sp, #8]
 80067c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c8:	9808      	ldr	r0, [sp, #32]
 80067ca:	f7fd fe11 	bl	80043f0 <LCD_DrawBitmap>
 80067ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80067d0:	e268      	b.n	8006ca4 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 80067d2:	4628      	mov	r0, r5
 80067d4:	f001 fbb0 	bl	8007f38 <GUI_MEMDEV_GetDataPtr>
 80067d8:	4607      	mov	r7, r0
 80067da:	f1b8 0f00 	cmp.w	r8, #0
 80067de:	f000 809a 	beq.w	8006916 <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 80067e2:	2500      	movs	r5, #0
 80067e4:	4640      	mov	r0, r8
 80067e6:	f7fc fdeb 	bl	80033c0 <GUI_ALLOC_LockH>
 80067ea:	9016      	str	r0, [sp, #88]	; 0x58
 80067ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ee:	42ab      	cmp	r3, r5
 80067f0:	f340 808d 	ble.w	800690e <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 80067f4:	2300      	movs	r3, #0
 80067f6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80067f8:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 80067fc:	462a      	mov	r2, r5
 80067fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8006800:	6883      	ldr	r3, [r0, #8]
 8006802:	4641      	mov	r1, r8
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	4798      	blx	r3
 8006808:	4583      	cmp	fp, r0
 800680a:	4606      	mov	r6, r0
 800680c:	d126      	bne.n	800685c <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 800680e:	462e      	mov	r6, r5
 8006810:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006812:	f106 0901 	add.w	r9, r6, #1
 8006816:	4641      	mov	r1, r8
 8006818:	6883      	ldr	r3, [r0, #8]
 800681a:	464a      	mov	r2, r9
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	4798      	blx	r3
 8006820:	4583      	cmp	fp, r0
 8006822:	d103      	bne.n	800682c <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 8006824:	464e      	mov	r6, r9
 8006826:	e7f3      	b.n	8006810 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 8006828:	24000028 	.word	0x24000028
 800682c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682e:	ebc5 0806 	rsb	r8, r5, r6
 8006832:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006834:	465a      	mov	r2, fp
 8006836:	f108 0801 	add.w	r8, r8, #1
 800683a:	9305      	str	r3, [sp, #20]
 800683c:	2301      	movs	r3, #1
 800683e:	9704      	str	r7, [sp, #16]
 8006840:	4429      	add	r1, r5
 8006842:	f8cd a00c 	str.w	sl, [sp, #12]
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	4635      	mov	r5, r6
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	4643      	mov	r3, r8
 800684e:	9402      	str	r4, [sp, #8]
 8006850:	9808      	ldr	r0, [sp, #32]
 8006852:	fb0a 7708 	mla	r7, sl, r8, r7
 8006856:	f7fd fdcb 	bl	80043f0 <LCD_DrawBitmap>
 800685a:	e056      	b.n	800690a <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800685c:	2c01      	cmp	r4, #1
 800685e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006860:	d004      	beq.n	800686c <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 8006862:	442b      	add	r3, r5
 8006864:	f04f 0901 	mov.w	r9, #1
 8006868:	930b      	str	r3, [sp, #44]	; 0x2c
 800686a:	e02b      	b.n	80068c4 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800686c:	eb03 0905 	add.w	r9, r3, r5
 8006870:	46a0      	mov	r8, r4
 8006872:	b32e      	cbz	r6, 80068c0 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 8006874:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8006878:	4632      	mov	r2, r6
 800687a:	9808      	ldr	r0, [sp, #32]
 800687c:	4649      	mov	r1, r9
 800687e:	f00e 0307 	and.w	r3, lr, #7
 8006882:	f8cd a00c 	str.w	sl, [sp, #12]
 8006886:	4470      	add	r0, lr
 8006888:	f8cd 8008 	str.w	r8, [sp, #8]
 800688c:	9306      	str	r3, [sp, #24]
 800688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006890:	f8cd 8004 	str.w	r8, [sp, #4]
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	2308      	movs	r3, #8
 8006898:	f8cd 8000 	str.w	r8, [sp]
 800689c:	fb9e f3f3 	sdiv	r3, lr, r3
 80068a0:	443b      	add	r3, r7
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	2301      	movs	r3, #1
 80068a6:	f7fd fcb7 	bl	8004218 <LCD__DrawBitmap_1bpp>
 80068aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80068ae:	462a      	mov	r2, r5
 80068b0:	441e      	add	r6, r3
 80068b2:	a917      	add	r1, sp, #92	; 0x5c
 80068b4:	6883      	ldr	r3, [r0, #8]
 80068b6:	9617      	str	r6, [sp, #92]	; 0x5c
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	4798      	blx	r3
 80068bc:	4606      	mov	r6, r0
 80068be:	e7d8      	b.n	8006872 <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 80068c0:	4457      	add	r7, sl
 80068c2:	e022      	b.n	800690a <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	d0fb      	beq.n	80068c0 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 80068c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ca:	4632      	mov	r2, r6
 80068cc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80068d0:	9305      	str	r3, [sp, #20]
 80068d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d4:	9808      	ldr	r0, [sp, #32]
 80068d6:	fb03 730e 	mla	r3, r3, lr, r7
 80068da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068dc:	4470      	add	r0, lr
 80068de:	f8cd a00c 	str.w	sl, [sp, #12]
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	2301      	movs	r3, #1
 80068e6:	9402      	str	r4, [sp, #8]
 80068e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80068ec:	f8cd 9000 	str.w	r9, [sp]
 80068f0:	f7fd fd7e 	bl	80043f0 <LCD_DrawBitmap>
 80068f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068f6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80068f8:	462a      	mov	r2, r5
 80068fa:	441e      	add	r6, r3
 80068fc:	4641      	mov	r1, r8
 80068fe:	6883      	ldr	r3, [r0, #8]
 8006900:	9617      	str	r6, [sp, #92]	; 0x5c
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	4798      	blx	r3
 8006906:	4606      	mov	r6, r0
 8006908:	e7dc      	b.n	80068c4 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800690a:	3501      	adds	r5, #1
 800690c:	e76e      	b.n	80067ec <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800690e:	a816      	add	r0, sp, #88	; 0x58
 8006910:	f7fc fd64 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006914:	e1c8      	b.n	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	465a      	mov	r2, fp
 800691a:	9004      	str	r0, [sp, #16]
 800691c:	9305      	str	r3, [sp, #20]
 800691e:	2301      	movs	r3, #1
 8006920:	f8cd a00c 	str.w	sl, [sp, #12]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	9402      	str	r4, [sp, #8]
 800692a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800692c:	e03a      	b.n	80069a4 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800692e:	4628      	mov	r0, r5
 8006930:	f7fc fd46 	bl	80033c0 <GUI_ALLOC_LockH>
 8006934:	4683      	mov	fp, r0
 8006936:	a81a      	add	r0, sp, #104	; 0x68
 8006938:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 800693c:	f840 bd10 	str.w	fp, [r0, #-16]!
 8006940:	930b      	str	r3, [sp, #44]	; 0x2c
 8006942:	f8db 2000 	ldr.w	r2, [fp]
 8006946:	f8db 300c 	ldr.w	r3, [fp, #12]
 800694a:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800694e:	930c      	str	r3, [sp, #48]	; 0x30
 8006950:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 8006954:	f7fc fd42 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800695e:	7c50      	ldrb	r0, [r2, #17]
 8006960:	4aa1      	ldr	r2, [pc, #644]	; (8006be8 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 8006962:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006966:	6916      	ldr	r6, [r2, #16]
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	930a      	str	r3, [sp, #40]	; 0x28
 800696c:	f7fe f808 	bl	8004980 <GUI_GetBitsPerPixelEx>
 8006970:	2808      	cmp	r0, #8
 8006972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006974:	d906      	bls.n	8006984 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 8006976:	2810      	cmp	r0, #16
 8006978:	bf8c      	ite	hi
 800697a:	f04f 0a04 	movhi.w	sl, #4
 800697e:	f04f 0a02 	movls.w	sl, #2
 8006982:	e001      	b.n	8006988 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 8006984:	f04f 0a01 	mov.w	sl, #1
 8006988:	45b0      	cmp	r8, r6
 800698a:	d110      	bne.n	80069ae <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 800698c:	2200      	movs	r2, #0
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	2301      	movs	r3, #1
 8006992:	f10b 0018 	add.w	r0, fp, #24
 8006996:	9205      	str	r2, [sp, #20]
 8006998:	4622      	mov	r2, r4
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a0:	9004      	str	r0, [sp, #16]
 80069a2:	9702      	str	r7, [sp, #8]
 80069a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a6:	9808      	ldr	r0, [sp, #32]
 80069a8:	f7fd fd22 	bl	80043f0 <LCD_DrawBitmap>
 80069ac:	e17c      	b.n	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80069ae:	2f20      	cmp	r7, #32
 80069b0:	f040 80a2 	bne.w	8006af8 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 80069b4:	fb0a f004 	mul.w	r0, sl, r4
 80069b8:	f7fc fe90 	bl	80036dc <GUI_ALLOC_AllocNoInit>
 80069bc:	900d      	str	r0, [sp, #52]	; 0x34
 80069be:	2800      	cmp	r0, #0
 80069c0:	f000 8172 	beq.w	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80069c4:	f7fc fcfc 	bl	80033c0 <GUI_ALLOC_LockH>
 80069c8:	9018      	str	r0, [sp, #96]	; 0x60
 80069ca:	4628      	mov	r0, r5
 80069cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069d0:	f7fc fcf6 	bl	80033c0 <GUI_ALLOC_LockH>
 80069d4:	9016      	str	r0, [sp, #88]	; 0x58
 80069d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069da:	6933      	ldr	r3, [r6, #16]
 80069dc:	f100 0518 	add.w	r5, r0, #24
 80069e0:	920c      	str	r2, [sp, #48]	; 0x30
 80069e2:	b373      	cbz	r3, 8006a42 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80069e4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80069e8:	f04f 0901 	mov.w	r9, #1
 80069ec:	f1ba 0f02 	cmp.w	sl, #2
 80069f0:	d005      	beq.n	80069fe <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80069f2:	f1ba 0f04 	cmp.w	sl, #4
 80069f6:	d002      	beq.n	80069fe <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80069f8:	f1ba 0f01 	cmp.w	sl, #1
 80069fc:	d106      	bne.n	8006a0c <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 80069fe:	4628      	mov	r0, r5
 8006a00:	445d      	add	r5, fp
 8006a02:	6937      	ldr	r7, [r6, #16]
 8006a04:	4653      	mov	r3, sl
 8006a06:	4622      	mov	r2, r4
 8006a08:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a0a:	47b8      	blx	r7
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a14:	4641      	mov	r1, r8
 8006a16:	9305      	str	r3, [sp, #20]
 8006a18:	f108 0701 	add.w	r7, r8, #1
 8006a1c:	9303      	str	r3, [sp, #12]
 8006a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a20:	9204      	str	r2, [sp, #16]
 8006a22:	4622      	mov	r2, r4
 8006a24:	9302      	str	r3, [sp, #8]
 8006a26:	2301      	movs	r3, #1
 8006a28:	f8cd 9000 	str.w	r9, [sp]
 8006a2c:	9808      	ldr	r0, [sp, #32]
 8006a2e:	f7fd fcdf 	bl	80043f0 <LCD_DrawBitmap>
 8006a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a36:	4413      	add	r3, r2
 8006a38:	429f      	cmp	r7, r3
 8006a3a:	f000 812c 	beq.w	8006c96 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006a3e:	46b8      	mov	r8, r7
 8006a40:	e7d4      	b.n	80069ec <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 8006a42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a44:	461e      	mov	r6, r3
 8006a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a48:	f04f 0901 	mov.w	r9, #1
 8006a4c:	443b      	add	r3, r7
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	f1ba 0f02 	cmp.w	sl, #2
 8006a54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a58:	d016      	beq.n	8006a88 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 8006a5a:	f1ba 0f04 	cmp.w	sl, #4
 8006a5e:	d024      	beq.n	8006aaa <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 8006a60:	f1ba 0f01 	cmp.w	sl, #1
 8006a64:	d130      	bne.n	8006ac8 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 8006a66:	4643      	mov	r3, r8
 8006a68:	462a      	mov	r2, r5
 8006a6a:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a6e:	930e      	str	r3, [sp, #56]	; 0x38
 8006a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a72:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a74:	4798      	blx	r3
 8006a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a7a:	f803 0b01 	strb.w	r0, [r3], #1
 8006a7e:	1ae1      	subs	r1, r4, r3
 8006a80:	eb18 0f01 	cmn.w	r8, r1
 8006a84:	d1f1      	bne.n	8006a6a <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 8006a86:	e01e      	b.n	8006ac6 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8006a88:	4643      	mov	r3, r8
 8006a8a:	462a      	mov	r2, r5
 8006a8c:	46a0      	mov	r8, r4
 8006a8e:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a92:	930e      	str	r3, [sp, #56]	; 0x38
 8006a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a96:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a98:	4798      	blx	r3
 8006a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a9c:	f1b8 0801 	subs.w	r8, r8, #1
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	f823 0b02 	strh.w	r0, [r3], #2
 8006aa6:	d1f2      	bne.n	8006a8e <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 8006aa8:	e00d      	b.n	8006ac6 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8006aaa:	462a      	mov	r2, r5
 8006aac:	4623      	mov	r3, r4
 8006aae:	f852 0b04 	ldr.w	r0, [r2], #4
 8006ab2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ab8:	4798      	blx	r3
 8006aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006abc:	f848 0b04 	str.w	r0, [r8], #4
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ac4:	d1f3      	bne.n	8006aae <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8006ac6:	445d      	add	r5, fp
 8006ac8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006aca:	4622      	mov	r2, r4
 8006acc:	9605      	str	r6, [sp, #20]
 8006ace:	4639      	mov	r1, r7
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	f107 0801 	add.w	r8, r7, #1
 8006ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad8:	9603      	str	r6, [sp, #12]
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	2301      	movs	r3, #1
 8006ade:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ae2:	f8cd 9000 	str.w	r9, [sp]
 8006ae6:	9808      	ldr	r0, [sp, #32]
 8006ae8:	f7fd fc82 	bl	80043f0 <LCD_DrawBitmap>
 8006aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aee:	4543      	cmp	r3, r8
 8006af0:	f000 80d1 	beq.w	8006c96 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006af4:	4647      	mov	r7, r8
 8006af6:	e7ab      	b.n	8006a50 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8006af8:	2f10      	cmp	r7, #16
 8006afa:	f040 80d5 	bne.w	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006afe:	fb04 f00a 	mul.w	r0, r4, sl
 8006b02:	f7fc fdeb 	bl	80036dc <GUI_ALLOC_AllocNoInit>
 8006b06:	900d      	str	r0, [sp, #52]	; 0x34
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f000 80cd 	beq.w	8006ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006b0e:	f7fc fc57 	bl	80033c0 <GUI_ALLOC_LockH>
 8006b12:	9018      	str	r0, [sp, #96]	; 0x60
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7fc fc53 	bl	80033c0 <GUI_ALLOC_LockH>
 8006b1a:	9016      	str	r0, [sp, #88]	; 0x58
 8006b1c:	6933      	ldr	r3, [r6, #16]
 8006b1e:	f100 0718 	add.w	r7, r0, #24
 8006b22:	b113      	cbz	r3, 8006b2a <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8006b24:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006b28:	b953      	cbnz	r3, 8006b40 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 8006b2a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006b2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b30:	0066      	lsls	r6, r4, #1
 8006b32:	f04f 0b00 	mov.w	fp, #0
 8006b36:	930c      	str	r3, [sp, #48]	; 0x30
 8006b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b3a:	442b      	add	r3, r5
 8006b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b3e:	e083      	b.n	8006c48 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8006b40:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006b44:	0080      	lsls	r0, r0, #2
 8006b46:	f7fc fdc9 	bl	80036dc <GUI_ALLOC_AllocNoInit>
 8006b4a:	900c      	str	r0, [sp, #48]	; 0x30
 8006b4c:	b118      	cbz	r0, 8006b56 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8006b4e:	f7fc fc37 	bl	80033c0 <GUI_ALLOC_LockH>
 8006b52:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b54:	e001      	b.n	8006b5a <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8006b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b58:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 809a 	beq.w	8006c96 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006b62:	0063      	lsls	r3, r4, #1
 8006b64:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006b68:	930a      	str	r3, [sp, #40]	; 0x28
 8006b6a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006b6e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b70:	f1ba 0f02 	cmp.w	sl, #2
 8006b74:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8006b78:	d006      	beq.n	8006b88 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 8006b7a:	f1ba 0f04 	cmp.w	sl, #4
 8006b7e:	d005      	beq.n	8006b8c <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8006b80:	f1ba 0f01 	cmp.w	sl, #1
 8006b84:	d111      	bne.n	8006baa <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 8006b86:	e001      	b.n	8006b8c <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8006b88:	4653      	mov	r3, sl
 8006b8a:	e000      	b.n	8006b8e <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	4638      	mov	r0, r7
 8006b90:	4622      	mov	r2, r4
 8006b92:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006b94:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8006b98:	47a8      	blx	r5
 8006b9a:	4653      	mov	r3, sl
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006ba2:	6935      	ldr	r5, [r6, #16]
 8006ba4:	47a8      	blx	r5
 8006ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba8:	441f      	add	r7, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bae:	4659      	mov	r1, fp
 8006bb0:	9808      	ldr	r0, [sp, #32]
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	f10b 0901 	add.w	r9, fp, #1
 8006bb8:	9303      	str	r3, [sp, #12]
 8006bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bbc:	9204      	str	r2, [sp, #16]
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	9302      	str	r3, [sp, #8]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	f7fd fc12 	bl	80043f0 <LCD_DrawBitmap>
 8006bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd0:	4413      	add	r3, r2
 8006bd2:	4599      	cmp	r9, r3
 8006bd4:	d001      	beq.n	8006bda <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 8006bd6:	46cb      	mov	fp, r9
 8006bd8:	e7ca      	b.n	8006b70 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 8006bda:	a817      	add	r0, sp, #92	; 0x5c
 8006bdc:	f7fc fbfe 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006be0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006be2:	f7fc fc1b 	bl	800341c <GUI_ALLOC_Free>
 8006be6:	e056      	b.n	8006c96 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006be8:	2402d67c 	.word	0x2402d67c
 8006bec:	f1ba 0f04 	cmp.w	sl, #4
 8006bf0:	d041      	beq.n	8006c76 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8006bf2:	f1ba 0f01 	cmp.w	sl, #1
 8006bf6:	d111      	bne.n	8006c1c <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8006bf8:	4643      	mov	r3, r8
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c00:	930e      	str	r3, [sp, #56]	; 0x38
 8006c02:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c04:	47c8      	blx	r9
 8006c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c08:	4798      	blx	r3
 8006c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c0e:	f803 0b01 	strb.w	r0, [r3], #1
 8006c12:	1ae1      	subs	r1, r4, r3
 8006c14:	eb18 0f01 	cmn.w	r8, r1
 8006c18:	d1f0      	bne.n	8006bfc <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 8006c1a:	4437      	add	r7, r6
 8006c1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c1e:	4622      	mov	r2, r4
 8006c20:	f8cd b014 	str.w	fp, [sp, #20]
 8006c24:	4629      	mov	r1, r5
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	f105 0801 	add.w	r8, r5, #1
 8006c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	2301      	movs	r3, #1
 8006c36:	9808      	ldr	r0, [sp, #32]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	f7fd fbd8 	bl	80043f0 <LCD_DrawBitmap>
 8006c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c42:	4543      	cmp	r3, r8
 8006c44:	d027      	beq.n	8006c96 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006c46:	4645      	mov	r5, r8
 8006c48:	f1ba 0f02 	cmp.w	sl, #2
 8006c4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c50:	d1cc      	bne.n	8006bec <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8006c52:	4643      	mov	r3, r8
 8006c54:	463a      	mov	r2, r7
 8006c56:	46a0      	mov	r8, r4
 8006c58:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c60:	47c8      	blx	r9
 8006c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c64:	4798      	blx	r3
 8006c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c68:	f1b8 0801 	subs.w	r8, r8, #1
 8006c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c6e:	f823 0b02 	strh.w	r0, [r3], #2
 8006c72:	d1f1      	bne.n	8006c58 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 8006c74:	e7d1      	b.n	8006c1a <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8006c76:	463a      	mov	r2, r7
 8006c78:	4623      	mov	r3, r4
 8006c7a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c7e:	930e      	str	r3, [sp, #56]	; 0x38
 8006c80:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c82:	47c8      	blx	r9
 8006c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c86:	4798      	blx	r3
 8006c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c8a:	f848 0b04 	str.w	r0, [r8], #4
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c92:	d1f2      	bne.n	8006c7a <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8006c94:	e7c1      	b.n	8006c1a <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8006c96:	a816      	add	r0, sp, #88	; 0x58
 8006c98:	f7fc fba0 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006c9c:	a818      	add	r0, sp, #96	; 0x60
 8006c9e:	f7fc fb9d 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006ca4:	f7fc fbba 	bl	800341c <GUI_ALLOC_Free>
 8006ca8:	b01b      	add	sp, #108	; 0x6c
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	bf00      	nop

08006cb0 <_OnExit>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <_OnExit+0x6c>)
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	4d1a      	ldr	r5, [pc, #104]	; (8006d20 <_OnExit+0x70>)
 8006cb8:	601c      	str	r4, [r3, #0]
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <_OnExit+0x74>)
 8006cbe:	481a      	ldr	r0, [pc, #104]	; (8006d28 <_OnExit+0x78>)
 8006cc0:	601c      	str	r4, [r3, #0]
 8006cc2:	605c      	str	r4, [r3, #4]
 8006cc4:	300c      	adds	r0, #12
 8006cc6:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <_OnExit+0x7c>)
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <_OnExit+0x80>)
 8006cca:	601c      	str	r4, [r3, #0]
 8006ccc:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <_OnExit+0x84>)
 8006cce:	f800 4c0c 	strb.w	r4, [r0, #-12]
 8006cd2:	601c      	str	r4, [r3, #0]
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <_OnExit+0x88>)
 8006cd6:	f840 4c08 	str.w	r4, [r0, #-8]
 8006cda:	601c      	str	r4, [r3, #0]
 8006cdc:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <_OnExit+0x8c>)
 8006cde:	6014      	str	r4, [r2, #0]
 8006ce0:	6054      	str	r4, [r2, #4]
 8006ce2:	2218      	movs	r2, #24
 8006ce4:	601c      	str	r4, [r3, #0]
 8006ce6:	f840 4c04 	str.w	r4, [r0, #-4]
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	4798      	blx	r3
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <_OnExit+0x90>)
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	601c      	str	r4, [r3, #0]
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <_OnExit+0x94>)
 8006cf8:	4813      	ldr	r0, [pc, #76]	; (8006d48 <_OnExit+0x98>)
 8006cfa:	601c      	str	r4, [r3, #0]
 8006cfc:	605c      	str	r4, [r3, #4]
 8006cfe:	682b      	ldr	r3, [r5, #0]
 8006d00:	4798      	blx	r3
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	4621      	mov	r1, r4
 8006d06:	2210      	movs	r2, #16
 8006d08:	4810      	ldr	r0, [pc, #64]	; (8006d4c <_OnExit+0x9c>)
 8006d0a:	4798      	blx	r3
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	2210      	movs	r2, #16
 8006d12:	480f      	ldr	r0, [pc, #60]	; (8006d50 <_OnExit+0xa0>)
 8006d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d18:	4718      	bx	r3
 8006d1a:	bf00      	nop
 8006d1c:	2402d6d4 	.word	0x2402d6d4
 8006d20:	24000030 	.word	0x24000030
 8006d24:	2402d6dc 	.word	0x2402d6dc
 8006d28:	2402d410 	.word	0x2402d410
 8006d2c:	2402d6e8 	.word	0x2402d6e8
 8006d30:	2402d6a8 	.word	0x2402d6a8
 8006d34:	2402d694 	.word	0x2402d694
 8006d38:	2402d6c8 	.word	0x2402d6c8
 8006d3c:	2402d6d8 	.word	0x2402d6d8
 8006d40:	2402d6a4 	.word	0x2402d6a4
 8006d44:	2402d698 	.word	0x2402d698
 8006d48:	2402d70c 	.word	0x2402d70c
 8006d4c:	2402d6fc 	.word	0x2402d6fc
 8006d50:	2402d6ec 	.word	0x2402d6ec

08006d54 <_Findy1>:
 8006d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d56:	b085      	sub	sp, #20
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	ad02      	add	r5, sp, #8
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	d048      	beq.n	8006df6 <_Findy1+0xa2>
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7fc fb2b 	bl	80033c0 <GUI_ALLOC_LockH>
 8006d6a:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	9001      	str	r0, [sp, #4]
 8006d70:	07bb      	lsls	r3, r7, #30
 8006d72:	d53a      	bpl.n	8006dea <_Findy1+0x96>
 8006d74:	b126      	cbz	r6, 8006d80 <_Findy1+0x2c>
 8006d76:	4632      	mov	r2, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f7fd f924 	bl	8003fc6 <GUI__IntersectRects>
 8006d7e:	e002      	b.n	8006d86 <_Findy1+0x32>
 8006d80:	c803      	ldmia	r0, {r0, r1}
 8006d82:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d86:	4629      	mov	r1, r5
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7fc fdbf 	bl	800390c <GUI_RectsIntersect>
 8006d8e:	b360      	cbz	r0, 8006dea <_Findy1+0x96>
 8006d90:	f017 0f01 	tst.w	r7, #1
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	d11c      	bne.n	8006dd2 <_Findy1+0x7e>
 8006d98:	b13e      	cbz	r6, 8006daa <_Findy1+0x56>
 8006d9a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006d9e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bfb8      	it	lt
 8006da6:	4613      	movlt	r3, r2
 8006da8:	e001      	b.n	8006dae <_Findy1+0x5a>
 8006daa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006dae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8006db8:	dd05      	ble.n	8006dc6 <_Findy1+0x72>
 8006dba:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	db13      	blt.n	8006dea <_Findy1+0x96>
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	e003      	b.n	8006dce <_Findy1+0x7a>
 8006dc6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	dd0d      	ble.n	8006dea <_Findy1+0x96>
 8006dce:	80e3      	strh	r3, [r4, #6]
 8006dd0:	e00b      	b.n	8006dea <_Findy1+0x96>
 8006dd2:	69df      	ldr	r7, [r3, #28]
 8006dd4:	b14f      	cbz	r7, 8006dea <_Findy1+0x96>
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4621      	mov	r1, r4
 8006ddc:	f7ff ffba 	bl	8006d54 <_Findy1>
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7fc fae3 	bl	80033ac <GUI_ALLOC_h2p>
 8006de6:	6a07      	ldr	r7, [r0, #32]
 8006de8:	e7f4      	b.n	8006dd4 <_Findy1+0x80>
 8006dea:	9b01      	ldr	r3, [sp, #4]
 8006dec:	a801      	add	r0, sp, #4
 8006dee:	6a1f      	ldr	r7, [r3, #32]
 8006df0:	f7fc faf4 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006df4:	e7b4      	b.n	8006d60 <_Findy1+0xc>
 8006df6:	b005      	add	sp, #20
 8006df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006dfa <_Findx0>:
 8006dfa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006dfe:	4606      	mov	r6, r0
 8006e00:	460f      	mov	r7, r1
 8006e02:	4690      	mov	r8, r2
 8006e04:	2500      	movs	r5, #0
 8006e06:	ac02      	add	r4, sp, #8
 8006e08:	2e00      	cmp	r6, #0
 8006e0a:	d035      	beq.n	8006e78 <_Findx0+0x7e>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7fc fad7 	bl	80033c0 <GUI_ALLOC_LockH>
 8006e12:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006e14:	4601      	mov	r1, r0
 8006e16:	9001      	str	r0, [sp, #4]
 8006e18:	07b2      	lsls	r2, r6, #30
 8006e1a:	d527      	bpl.n	8006e6c <_Findx0+0x72>
 8006e1c:	f1b8 0f00 	cmp.w	r8, #0
 8006e20:	d004      	beq.n	8006e2c <_Findx0+0x32>
 8006e22:	4642      	mov	r2, r8
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7fd f8ce 	bl	8003fc6 <GUI__IntersectRects>
 8006e2a:	e002      	b.n	8006e32 <_Findx0+0x38>
 8006e2c:	c803      	ldmia	r0, {r0, r1}
 8006e2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e32:	4621      	mov	r1, r4
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7fc fd69 	bl	800390c <GUI_RectsIntersect>
 8006e3a:	b1b8      	cbz	r0, 8006e6c <_Findx0+0x72>
 8006e3c:	07f3      	lsls	r3, r6, #31
 8006e3e:	d405      	bmi.n	8006e4c <_Findx0+0x52>
 8006e40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006e44:	2501      	movs	r5, #1
 8006e46:	3301      	adds	r3, #1
 8006e48:	803b      	strh	r3, [r7, #0]
 8006e4a:	e00f      	b.n	8006e6c <_Findx0+0x72>
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	69de      	ldr	r6, [r3, #28]
 8006e50:	b166      	cbz	r6, 8006e6c <_Findx0+0x72>
 8006e52:	4622      	mov	r2, r4
 8006e54:	4639      	mov	r1, r7
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff ffcf 	bl	8006dfa <_Findx0>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	bf18      	it	ne
 8006e62:	2501      	movne	r5, #1
 8006e64:	f7fc faa2 	bl	80033ac <GUI_ALLOC_h2p>
 8006e68:	6a06      	ldr	r6, [r0, #32]
 8006e6a:	e7f1      	b.n	8006e50 <_Findx0+0x56>
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	a801      	add	r0, sp, #4
 8006e70:	6a1e      	ldr	r6, [r3, #32]
 8006e72:	f7fc fab3 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006e76:	e7c7      	b.n	8006e08 <_Findx0+0xe>
 8006e78:	4628      	mov	r0, r5
 8006e7a:	b004      	add	sp, #16
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e80 <_Findx1>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	b085      	sub	sp, #20
 8006e84:	4605      	mov	r5, r0
 8006e86:	460e      	mov	r6, r1
 8006e88:	4617      	mov	r7, r2
 8006e8a:	ac02      	add	r4, sp, #8
 8006e8c:	b37d      	cbz	r5, 8006eee <_Findx1+0x6e>
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f7fc fa96 	bl	80033c0 <GUI_ALLOC_LockH>
 8006e94:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8006e96:	4601      	mov	r1, r0
 8006e98:	9001      	str	r0, [sp, #4]
 8006e9a:	07aa      	lsls	r2, r5, #30
 8006e9c:	d521      	bpl.n	8006ee2 <_Findx1+0x62>
 8006e9e:	b127      	cbz	r7, 8006eaa <_Findx1+0x2a>
 8006ea0:	463a      	mov	r2, r7
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7fd f88f 	bl	8003fc6 <GUI__IntersectRects>
 8006ea8:	e002      	b.n	8006eb0 <_Findx1+0x30>
 8006eaa:	c803      	ldmia	r0, {r0, r1}
 8006eac:	e884 0003 	stmia.w	r4, {r0, r1}
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7fc fd2a 	bl	800390c <GUI_RectsIntersect>
 8006eb8:	b198      	cbz	r0, 8006ee2 <_Findx1+0x62>
 8006eba:	07eb      	lsls	r3, r5, #31
 8006ebc:	d404      	bmi.n	8006ec8 <_Findx1+0x48>
 8006ebe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	80b3      	strh	r3, [r6, #4]
 8006ec6:	e00c      	b.n	8006ee2 <_Findx1+0x62>
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	69dd      	ldr	r5, [r3, #28]
 8006ecc:	b14d      	cbz	r5, 8006ee2 <_Findx1+0x62>
 8006ece:	4628      	mov	r0, r5
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	f7ff ffd4 	bl	8006e80 <_Findx1>
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7fc fa67 	bl	80033ac <GUI_ALLOC_h2p>
 8006ede:	6a05      	ldr	r5, [r0, #32]
 8006ee0:	e7f4      	b.n	8006ecc <_Findx1+0x4c>
 8006ee2:	9b01      	ldr	r3, [sp, #4]
 8006ee4:	a801      	add	r0, sp, #4
 8006ee6:	6a1d      	ldr	r5, [r3, #32]
 8006ee8:	f7fc fa78 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006eec:	e7ce      	b.n	8006e8c <_Findx1+0xc>
 8006eee:	b005      	add	sp, #20
 8006ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ef4 <WM__ClipAtParentBorders>:
 8006ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460d      	mov	r5, r1
 8006efa:	4628      	mov	r0, r5
 8006efc:	f7fc fa60 	bl	80033c0 <GUI_ALLOC_LockH>
 8006f00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f02:	4601      	mov	r1, r0
 8006f04:	9001      	str	r0, [sp, #4]
 8006f06:	f013 0402 	ands.w	r4, r3, #2
 8006f0a:	d104      	bne.n	8006f16 <WM__ClipAtParentBorders+0x22>
 8006f0c:	a801      	add	r0, sp, #4
 8006f0e:	f7fc fa65 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006f12:	4620      	mov	r0, r4
 8006f14:	e016      	b.n	8006f44 <WM__ClipAtParentBorders+0x50>
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7fd f838 	bl	8003f8c <GUI__IntersectRect>
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	a801      	add	r0, sp, #4
 8006f20:	699c      	ldr	r4, [r3, #24]
 8006f22:	b954      	cbnz	r4, 8006f3a <WM__ClipAtParentBorders+0x46>
 8006f24:	f7fc fa5a 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006f28:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <WM__ClipAtParentBorders+0x54>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4295      	cmp	r5, r2
 8006f2e:	d008      	beq.n	8006f42 <WM__ClipAtParentBorders+0x4e>
 8006f30:	6858      	ldr	r0, [r3, #4]
 8006f32:	1b43      	subs	r3, r0, r5
 8006f34:	4258      	negs	r0, r3
 8006f36:	4158      	adcs	r0, r3
 8006f38:	e004      	b.n	8006f44 <WM__ClipAtParentBorders+0x50>
 8006f3a:	f7fc fa4f 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006f3e:	4625      	mov	r5, r4
 8006f40:	e7db      	b.n	8006efa <WM__ClipAtParentBorders+0x6>
 8006f42:	2001      	movs	r0, #1
 8006f44:	b002      	add	sp, #8
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	2402d698 	.word	0x2402d698

08006f4c <WM__InsertWindowIntoList>:
 8006f4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006f50:	4606      	mov	r6, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d04c      	beq.n	8006ff2 <WM__InsertWindowIntoList+0xa6>
 8006f58:	f7fc fa32 	bl	80033c0 <GUI_ALLOC_LockH>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6184      	str	r4, [r0, #24]
 8006f60:	9001      	str	r0, [sp, #4]
 8006f62:	6203      	str	r3, [r0, #32]
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7fc fa2b 	bl	80033c0 <GUI_ALLOC_LockH>
 8006f6a:	ac04      	add	r4, sp, #16
 8006f6c:	69c7      	ldr	r7, [r0, #28]
 8006f6e:	f844 0d08 	str.w	r0, [r4, #-8]!
 8006f72:	b92f      	cbnz	r7, 8006f80 <WM__InsertWindowIntoList+0x34>
 8006f74:	61c6      	str	r6, [r0, #28]
 8006f76:	a801      	add	r0, sp, #4
 8006f78:	f7fc fa30 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	e036      	b.n	8006fee <WM__InsertWindowIntoList+0xa2>
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	f10d 0810 	add.w	r8, sp, #16
 8006f86:	4638      	mov	r0, r7
 8006f88:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006f8a:	f7fc fa19 	bl	80033c0 <GUI_ALLOC_LockH>
 8006f8e:	f848 0d04 	str.w	r0, [r8, #-4]!
 8006f92:	f005 0508 	and.w	r5, r5, #8
 8006f96:	b975      	cbnz	r5, 8006fb6 <WM__InsertWindowIntoList+0x6a>
 8006f98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f9a:	071a      	lsls	r2, r3, #28
 8006f9c:	d50b      	bpl.n	8006fb6 <WM__InsertWindowIntoList+0x6a>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	a801      	add	r0, sp, #4
 8006fa2:	621f      	str	r7, [r3, #32]
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	61de      	str	r6, [r3, #28]
 8006fa8:	f7fc fa18 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7fc fa15 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	e01b      	b.n	8006fee <WM__InsertWindowIntoList+0xa2>
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7fc fa10 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	f7fc fa0d 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7fc f9f2 	bl	80033ac <GUI_ALLOC_h2p>
 8006fc8:	9003      	str	r0, [sp, #12]
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	6a1c      	ldr	r4, [r3, #32]
 8006fce:	b90c      	cbnz	r4, 8006fd4 <WM__InsertWindowIntoList+0x88>
 8006fd0:	621e      	str	r6, [r3, #32]
 8006fd2:	e00b      	b.n	8006fec <WM__InsertWindowIntoList+0xa0>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7fc f9e9 	bl	80033ac <GUI_ALLOC_h2p>
 8006fda:	2d00      	cmp	r5, #0
 8006fdc:	d1f4      	bne.n	8006fc8 <WM__InsertWindowIntoList+0x7c>
 8006fde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fe0:	071b      	lsls	r3, r3, #28
 8006fe2:	d5f1      	bpl.n	8006fc8 <WM__InsertWindowIntoList+0x7c>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	621e      	str	r6, [r3, #32]
 8006fe8:	9b01      	ldr	r3, [sp, #4]
 8006fea:	621c      	str	r4, [r3, #32]
 8006fec:	a801      	add	r0, sp, #4
 8006fee:	f7fc f9f5 	bl	80033dc <GUI_ALLOC_UnlockH>
 8006ff2:	b004      	add	sp, #16
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ff8 <WM__Client2Screen>:
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007000:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007004:	f7fc bc69 	b.w	80038da <GUI_MoveRect>

08007008 <_SetClipRectUserIntersect>:
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <_SetClipRectUserIntersect+0x48>)
 800700a:	b530      	push	{r4, r5, lr}
 800700c:	681c      	ldr	r4, [r3, #0]
 800700e:	b085      	sub	sp, #20
 8007010:	4605      	mov	r5, r0
 8007012:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007014:	b1ba      	cbz	r2, 8007046 <_SetClipRectUserIntersect+0x3e>
 8007016:	6810      	ldr	r0, [r2, #0]
 8007018:	ab02      	add	r3, sp, #8
 800701a:	6851      	ldr	r1, [r2, #4]
 800701c:	c303      	stmia	r3!, {r0, r1}
 800701e:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <_SetClipRectUserIntersect+0x4c>)
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	b900      	cbnz	r0, 8007026 <_SetClipRectUserIntersect+0x1e>
 8007024:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007026:	ac04      	add	r4, sp, #16
 8007028:	f7fc f9ca 	bl	80033c0 <GUI_ALLOC_LockH>
 800702c:	a902      	add	r1, sp, #8
 800702e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007032:	f7ff ffe1 	bl	8006ff8 <WM__Client2Screen>
 8007036:	4620      	mov	r0, r4
 8007038:	f7fc f9d0 	bl	80033dc <GUI_ALLOC_UnlockH>
 800703c:	a802      	add	r0, sp, #8
 800703e:	4629      	mov	r1, r5
 8007040:	f7fc ffa4 	bl	8003f8c <GUI__IntersectRect>
 8007044:	a802      	add	r0, sp, #8
 8007046:	f000 ff27 	bl	8007e98 <LCD_SetClipRectEx>
 800704a:	b005      	add	sp, #20
 800704c:	bd30      	pop	{r4, r5, pc}
 800704e:	bf00      	nop
 8007050:	24000028 	.word	0x24000028
 8007054:	2402d694 	.word	0x2402d694

08007058 <WM__ActivateClipRect>:
 8007058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <WM__ActivateClipRect+0x3c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007062:	b10a      	cbz	r2, 8007068 <WM__ActivateClipRect+0x10>
 8007064:	480c      	ldr	r0, [pc, #48]	; (8007098 <WM__ActivateClipRect+0x40>)
 8007066:	e011      	b.n	800708c <WM__ActivateClipRect+0x34>
 8007068:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800706a:	ac02      	add	r4, sp, #8
 800706c:	f7fc f9a8 	bl	80033c0 <GUI_ALLOC_LockH>
 8007070:	9001      	str	r0, [sp, #4]
 8007072:	c803      	ldmia	r0, {r0, r1}
 8007074:	e884 0003 	stmia.w	r4, {r0, r1}
 8007078:	a801      	add	r0, sp, #4
 800707a:	f7fc f9af 	bl	80033dc <GUI_ALLOC_UnlockH>
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <WM__ActivateClipRect+0x44>)
 8007080:	6819      	ldr	r1, [r3, #0]
 8007082:	b111      	cbz	r1, 800708a <WM__ActivateClipRect+0x32>
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff ff35 	bl	8006ef4 <WM__ClipAtParentBorders>
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff ffbc 	bl	8007008 <_SetClipRectUserIntersect>
 8007090:	b004      	add	sp, #16
 8007092:	bd10      	pop	{r4, pc}
 8007094:	24000028 	.word	0x24000028
 8007098:	2402d424 	.word	0x2402d424
 800709c:	2402d694 	.word	0x2402d694

080070a0 <WM__InvalidateDrawAndDescs>:
 80070a0:	b513      	push	{r0, r1, r4, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	b300      	cbz	r0, 80070e8 <WM__InvalidateDrawAndDescs+0x48>
 80070a6:	f7fc f98b 	bl	80033c0 <GUI_ALLOC_LockH>
 80070aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070ac:	9001      	str	r0, [sp, #4]
 80070ae:	079b      	lsls	r3, r3, #30
 80070b0:	d517      	bpl.n	80070e2 <WM__InvalidateDrawAndDescs+0x42>
 80070b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80070b4:	b140      	cbz	r0, 80070c8 <WM__InvalidateDrawAndDescs+0x28>
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <WM__InvalidateDrawAndDescs+0x4c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d004      	beq.n	80070c8 <WM__InvalidateDrawAndDescs+0x28>
 80070be:	f000 ff19 	bl	8007ef4 <GUI_MEMDEV_Delete>
 80070c2:	2200      	movs	r2, #0
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fc4f 	bl	800796c <WM_GetFirstChild>
 80070ce:	4604      	mov	r4, r0
 80070d0:	b13c      	cbz	r4, 80070e2 <WM__InvalidateDrawAndDescs+0x42>
 80070d2:	4620      	mov	r0, r4
 80070d4:	f7ff ffe4 	bl	80070a0 <WM__InvalidateDrawAndDescs>
 80070d8:	4620      	mov	r0, r4
 80070da:	f7fc f967 	bl	80033ac <GUI_ALLOC_h2p>
 80070de:	6a04      	ldr	r4, [r0, #32]
 80070e0:	e7f6      	b.n	80070d0 <WM__InvalidateDrawAndDescs+0x30>
 80070e2:	a801      	add	r0, sp, #4
 80070e4:	f7fc f97a 	bl	80033dc <GUI_ALLOC_UnlockH>
 80070e8:	b002      	add	sp, #8
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	2402d6e4 	.word	0x2402d6e4

080070f0 <WM__RectIsNZ>:
 80070f0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80070f4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	dc08      	bgt.n	800710e <WM__RectIsNZ+0x1e>
 80070fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8007100:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007104:	4283      	cmp	r3, r0
 8007106:	bfcc      	ite	gt
 8007108:	2000      	movgt	r0, #0
 800710a:	2001      	movle	r0, #1
 800710c:	4770      	bx	lr
 800710e:	2000      	movs	r0, #0
 8007110:	4770      	bx	lr

08007112 <WM__SendMsgNoData>:
 8007112:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007114:	ab04      	add	r3, sp, #16
 8007116:	9001      	str	r0, [sp, #4]
 8007118:	f843 1d10 	str.w	r1, [r3, #-16]!
 800711c:	4619      	mov	r1, r3
 800711e:	f000 fca3 	bl	8007a68 <WM__SendMessage>
 8007122:	b005      	add	sp, #20
 8007124:	f85d fb04 	ldr.w	pc, [sp], #4

08007128 <WM__GetClientRectWin>:
 8007128:	2300      	movs	r3, #0
 800712a:	804b      	strh	r3, [r1, #2]
 800712c:	800b      	strh	r3, [r1, #0]
 800712e:	8883      	ldrh	r3, [r0, #4]
 8007130:	8802      	ldrh	r2, [r0, #0]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	8842      	ldrh	r2, [r0, #2]
 8007136:	808b      	strh	r3, [r1, #4]
 8007138:	88c3      	ldrh	r3, [r0, #6]
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	80cb      	strh	r3, [r1, #6]
 800713e:	4770      	bx	lr

08007140 <WM__GetTopLevelLayer>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	f7fc f932 	bl	80033ac <GUI_ALLOC_h2p>
 8007148:	6980      	ldr	r0, [r0, #24]
 800714a:	2800      	cmp	r0, #0
 800714c:	d1f9      	bne.n	8007142 <WM__GetTopLevelLayer+0x2>
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <WM__GetTopLevelLayer+0x24>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4294      	cmp	r4, r2
 8007154:	d005      	beq.n	8007162 <WM__GetTopLevelLayer+0x22>
 8007156:	6858      	ldr	r0, [r3, #4]
 8007158:	4284      	cmp	r4, r0
 800715a:	bf0c      	ite	eq
 800715c:	2001      	moveq	r0, #1
 800715e:	f04f 30ff 	movne.w	r0, #4294967295
 8007162:	bd10      	pop	{r4, pc}
 8007164:	2402d698 	.word	0x2402d698

08007168 <_Invalidate1Abs>:
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	b085      	sub	sp, #20
 800716c:	460d      	mov	r5, r1
 800716e:	4606      	mov	r6, r0
 8007170:	4617      	mov	r7, r2
 8007172:	f7fc f91b 	bl	80033ac <GUI_ALLOC_h2p>
 8007176:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007178:	9001      	str	r0, [sp, #4]
 800717a:	078b      	lsls	r3, r1, #30
 800717c:	d53e      	bpl.n	80071fc <_Invalidate1Abs+0x94>
 800717e:	4628      	mov	r0, r5
 8007180:	f7ff ffb6 	bl	80070f0 <WM__RectIsNZ>
 8007184:	2800      	cmp	r0, #0
 8007186:	d039      	beq.n	80071fc <_Invalidate1Abs+0x94>
 8007188:	f640 0301 	movw	r3, #2049	; 0x801
 800718c:	400b      	ands	r3, r1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d034      	beq.n	80071fc <_Invalidate1Abs+0x94>
 8007192:	ac02      	add	r4, sp, #8
 8007194:	4630      	mov	r0, r6
 8007196:	f7fc f913 	bl	80033c0 <GUI_ALLOC_LockH>
 800719a:	4629      	mov	r1, r5
 800719c:	4602      	mov	r2, r0
 800719e:	9001      	str	r0, [sp, #4]
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7fc ff10 	bl	8003fc6 <GUI__IntersectRects>
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7ff ffa2 	bl	80070f0 <WM__RectIsNZ>
 80071ac:	b318      	cbz	r0, 80071f6 <_Invalidate1Abs+0x8e>
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	f244 0120 	movw	r1, #16416	; 0x4020
 80071b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071b6:	f103 0508 	add.w	r5, r3, #8
 80071ba:	4011      	ands	r1, r2
 80071bc:	b129      	cbz	r1, 80071ca <_Invalidate1Abs+0x62>
 80071be:	4622      	mov	r2, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	4628      	mov	r0, r5
 80071c4:	f7fc fb5e 	bl	8003884 <GUI_MergeRect>
 80071c8:	e015      	b.n	80071f6 <_Invalidate1Abs+0x8e>
 80071ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071ce:	433a      	orrs	r2, r7
 80071d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80071d4:	629a      	str	r2, [r3, #40]	; 0x28
 80071d6:	4630      	mov	r0, r6
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <_Invalidate1Abs+0x98>)
 80071da:	8813      	ldrh	r3, [r2, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	8013      	strh	r3, [r2, #0]
 80071e0:	f7ff ffae 	bl	8007140 <WM__GetTopLevelLayer>
 80071e4:	4a07      	ldr	r2, [pc, #28]	; (8007204 <_Invalidate1Abs+0x9c>)
 80071e6:	2301      	movs	r3, #1
 80071e8:	fa03 f000 	lsl.w	r0, r3, r0
 80071ec:	6813      	ldr	r3, [r2, #0]
 80071ee:	4303      	orrs	r3, r0
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	f7fc fec3 	bl	8003f7c <GUI_SignalEvent>
 80071f6:	a801      	add	r0, sp, #4
 80071f8:	f7fc f8f0 	bl	80033dc <GUI_ALLOC_UnlockH>
 80071fc:	b005      	add	sp, #20
 80071fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007200:	2402d6b0 	.word	0x2402d6b0
 8007204:	2402d6c0 	.word	0x2402d6c0

08007208 <WM__Invalidate1Abs>:
 8007208:	2220      	movs	r2, #32
 800720a:	f7ff bfad 	b.w	8007168 <_Invalidate1Abs>

0800720e <WM_InvalidateWindowAndDescsEx>:
 800720e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007210:	460f      	mov	r7, r1
 8007212:	b085      	sub	sp, #20
 8007214:	4615      	mov	r5, r2
 8007216:	4606      	mov	r6, r0
 8007218:	b348      	cbz	r0, 800726e <WM_InvalidateWindowAndDescsEx+0x60>
 800721a:	f7fc f8d1 	bl	80033c0 <GUI_ALLOC_LockH>
 800721e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007220:	ac04      	add	r4, sp, #16
 8007222:	4602      	mov	r2, r0
 8007224:	079b      	lsls	r3, r3, #30
 8007226:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800722a:	d403      	bmi.n	8007234 <WM_InvalidateWindowAndDescsEx+0x26>
 800722c:	4620      	mov	r0, r4
 800722e:	f7fc f8d5 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007232:	e01c      	b.n	800726e <WM_InvalidateWindowAndDescsEx+0x60>
 8007234:	4639      	mov	r1, r7
 8007236:	a802      	add	r0, sp, #8
 8007238:	f7fc fec5 	bl	8003fc6 <GUI__IntersectRects>
 800723c:	2800      	cmp	r0, #0
 800723e:	d0f5      	beq.n	800722c <WM_InvalidateWindowAndDescsEx+0x1e>
 8007240:	4620      	mov	r0, r4
 8007242:	f7fc f8cb 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007246:	462a      	mov	r2, r5
 8007248:	a902      	add	r1, sp, #8
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ff8c 	bl	8007168 <_Invalidate1Abs>
 8007250:	4630      	mov	r0, r6
 8007252:	f000 fb8b 	bl	800796c <WM_GetFirstChild>
 8007256:	4604      	mov	r4, r0
 8007258:	b14c      	cbz	r4, 800726e <WM_InvalidateWindowAndDescsEx+0x60>
 800725a:	4620      	mov	r0, r4
 800725c:	462a      	mov	r2, r5
 800725e:	a902      	add	r1, sp, #8
 8007260:	f7ff ffd5 	bl	800720e <WM_InvalidateWindowAndDescsEx>
 8007264:	4620      	mov	r0, r4
 8007266:	f7fc f8a1 	bl	80033ac <GUI_ALLOC_h2p>
 800726a:	6a04      	ldr	r4, [r0, #32]
 800726c:	e7f4      	b.n	8007258 <WM_InvalidateWindowAndDescsEx+0x4a>
 800726e:	b005      	add	sp, #20
 8007270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007272 <WM__InvalidateRect>:
 8007272:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007276:	4680      	mov	r8, r0
 8007278:	4617      	mov	r7, r2
 800727a:	461d      	mov	r5, r3
 800727c:	460c      	mov	r4, r1
 800727e:	b381      	cbz	r1, 80072e2 <WM__InvalidateRect+0x70>
 8007280:	4608      	mov	r0, r1
 8007282:	f7fc f89d 	bl	80033c0 <GUI_ALLOC_LockH>
 8007286:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007288:	4602      	mov	r2, r0
 800728a:	9001      	str	r0, [sp, #4]
 800728c:	07b3      	lsls	r3, r6, #30
 800728e:	d525      	bpl.n	80072dc <WM__InvalidateRect+0x6a>
 8007290:	4641      	mov	r1, r8
 8007292:	a802      	add	r0, sp, #8
 8007294:	f7fc fe97 	bl	8003fc6 <GUI__IntersectRects>
 8007298:	b300      	cbz	r0, 80072dc <WM__InvalidateRect+0x6a>
 800729a:	f640 0301 	movw	r3, #2049	; 0x801
 800729e:	4033      	ands	r3, r6
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d107      	bne.n	80072b4 <WM__InvalidateRect+0x42>
 80072a4:	9901      	ldr	r1, [sp, #4]
 80072a6:	462b      	mov	r3, r5
 80072a8:	a802      	add	r0, sp, #8
 80072aa:	6a0a      	ldr	r2, [r1, #32]
 80072ac:	6989      	ldr	r1, [r1, #24]
 80072ae:	f7ff ffe0 	bl	8007272 <WM__InvalidateRect>
 80072b2:	e004      	b.n	80072be <WM__InvalidateRect+0x4c>
 80072b4:	462a      	mov	r2, r5
 80072b6:	a902      	add	r1, sp, #8
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7ff ff55 	bl	8007168 <_Invalidate1Abs>
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	69dc      	ldr	r4, [r3, #28]
 80072c2:	b15c      	cbz	r4, 80072dc <WM__InvalidateRect+0x6a>
 80072c4:	42bc      	cmp	r4, r7
 80072c6:	d009      	beq.n	80072dc <WM__InvalidateRect+0x6a>
 80072c8:	4620      	mov	r0, r4
 80072ca:	462a      	mov	r2, r5
 80072cc:	a902      	add	r1, sp, #8
 80072ce:	f7ff ff9e 	bl	800720e <WM_InvalidateWindowAndDescsEx>
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7fc f86a 	bl	80033ac <GUI_ALLOC_h2p>
 80072d8:	6a04      	ldr	r4, [r0, #32]
 80072da:	e7f2      	b.n	80072c2 <WM__InvalidateRect+0x50>
 80072dc:	a801      	add	r0, sp, #4
 80072de:	f7fc f87d 	bl	80033dc <GUI_ALLOC_UnlockH>
 80072e2:	b004      	add	sp, #16
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072e8 <WM__InvalidateRectEx>:
 80072e8:	2320      	movs	r3, #32
 80072ea:	f7ff bfc2 	b.w	8007272 <WM__InvalidateRect>

080072ee <WM_InvalidateRect>:
 80072ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f0:	460f      	mov	r7, r1
 80072f2:	b087      	sub	sp, #28
 80072f4:	4605      	mov	r5, r0
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d033      	beq.n	8007362 <WM_InvalidateRect+0x74>
 80072fa:	f7fc f861 	bl	80033c0 <GUI_ALLOC_LockH>
 80072fe:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007300:	9001      	str	r0, [sp, #4]
 8007302:	07b2      	lsls	r2, r6, #30
 8007304:	d52a      	bpl.n	800735c <WM_InvalidateRect+0x6e>
 8007306:	ac04      	add	r4, sp, #16
 8007308:	03f3      	lsls	r3, r6, #15
 800730a:	c803      	ldmia	r0, {r0, r1}
 800730c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007310:	d502      	bpl.n	8007318 <WM_InvalidateRect+0x2a>
 8007312:	4628      	mov	r0, r5
 8007314:	f7ff fec4 	bl	80070a0 <WM__InvalidateDrawAndDescs>
 8007318:	b15f      	cbz	r7, 8007332 <WM_InvalidateRect+0x44>
 800731a:	6838      	ldr	r0, [r7, #0]
 800731c:	ab02      	add	r3, sp, #8
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	c303      	stmia	r3!, {r0, r1}
 8007322:	a902      	add	r1, sp, #8
 8007324:	9801      	ldr	r0, [sp, #4]
 8007326:	f7ff fe67 	bl	8006ff8 <WM__Client2Screen>
 800732a:	a902      	add	r1, sp, #8
 800732c:	4620      	mov	r0, r4
 800732e:	f7fc fe2d 	bl	8003f8c <GUI__IntersectRect>
 8007332:	4629      	mov	r1, r5
 8007334:	4620      	mov	r0, r4
 8007336:	f7ff fddd 	bl	8006ef4 <WM__ClipAtParentBorders>
 800733a:	b178      	cbz	r0, 800735c <WM_InvalidateRect+0x6e>
 800733c:	f640 0301 	movw	r3, #2049	; 0x801
 8007340:	4033      	ands	r3, r6
 8007342:	2b01      	cmp	r3, #1
 8007344:	d106      	bne.n	8007354 <WM_InvalidateRect+0x66>
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	4620      	mov	r0, r4
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	6999      	ldr	r1, [r3, #24]
 800734e:	f7ff ffcb 	bl	80072e8 <WM__InvalidateRectEx>
 8007352:	e003      	b.n	800735c <WM_InvalidateRect+0x6e>
 8007354:	4621      	mov	r1, r4
 8007356:	4628      	mov	r0, r5
 8007358:	f7ff ff56 	bl	8007208 <WM__Invalidate1Abs>
 800735c:	a801      	add	r0, sp, #4
 800735e:	f7fc f83d 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007362:	b007      	add	sp, #28
 8007364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007366 <WM_InvalidateWindow>:
 8007366:	2100      	movs	r1, #0
 8007368:	f7ff bfc1 	b.w	80072ee <WM_InvalidateRect>

0800736c <WM__SelectTopLevelLayer>:
 800736c:	b508      	push	{r3, lr}
 800736e:	f7ff fee7 	bl	8007140 <WM__GetTopLevelLayer>
 8007372:	2800      	cmp	r0, #0
 8007374:	db03      	blt.n	800737e <WM__SelectTopLevelLayer+0x12>
 8007376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800737a:	f7fc bddf 	b.w	8003f3c <GUI_SelectLayer>
 800737e:	bd08      	pop	{r3, pc}

08007380 <WM_SelectWindow>:
 8007380:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <WM_SelectWindow+0x38>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8007388:	4604      	mov	r4, r0
 800738a:	461d      	mov	r5, r3
 800738c:	b908      	cbnz	r0, 8007392 <WM_SelectWindow+0x12>
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <WM_SelectWindow+0x3c>)
 8007390:	681c      	ldr	r4, [r3, #0]
 8007392:	6494      	str	r4, [r2, #72]	; 0x48
 8007394:	4620      	mov	r0, r4
 8007396:	f7ff ffe9 	bl	800736c <WM__SelectTopLevelLayer>
 800739a:	f7fd f93b 	bl	8004614 <LCD_SetClipRectMax>
 800739e:	4620      	mov	r0, r4
 80073a0:	f7fc f804 	bl	80033ac <GUI_ALLOC_h2p>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	f9b0 2000 	ldrsh.w	r2, [r0]
 80073aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80073ac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80073b0:	4630      	mov	r0, r6
 80073b2:	651a      	str	r2, [r3, #80]	; 0x50
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
 80073b6:	bf00      	nop
 80073b8:	24000028 	.word	0x24000028
 80073bc:	2402d6b4 	.word	0x2402d6b4

080073c0 <WM_CreateWindowAsChild>:
 80073c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073c8:	4698      	mov	r8, r3
 80073ca:	4b4e      	ldr	r3, [pc, #312]	; (8007504 <WM_CreateWindowAsChild+0x144>)
 80073cc:	4605      	mov	r5, r0
 80073ce:	460e      	mov	r6, r1
 80073d0:	4617      	mov	r7, r2
 80073d2:	f8d3 9000 	ldr.w	r9, [r3]
 80073d6:	f1ba 0f00 	cmp.w	sl, #0
 80073da:	d128      	bne.n	800742e <WM_CreateWindowAsChild+0x6e>
 80073dc:	4b4a      	ldr	r3, [pc, #296]	; (8007508 <WM_CreateWindowAsChild+0x148>)
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b353      	cbz	r3, 8007438 <WM_CreateWindowAsChild+0x78>
 80073e2:	4b4a      	ldr	r3, [pc, #296]	; (800750c <WM_CreateWindowAsChild+0x14c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	7c5a      	ldrb	r2, [r3, #17]
 80073e8:	4b49      	ldr	r3, [pc, #292]	; (8007510 <WM_CreateWindowAsChild+0x150>)
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	2a01      	cmp	r2, #1
 80073f2:	d921      	bls.n	8007438 <WM_CreateWindowAsChild+0x78>
 80073f4:	469a      	mov	sl, r3
 80073f6:	4650      	mov	r0, sl
 80073f8:	f7fb ffe2 	bl	80033c0 <GUI_ALLOC_LockH>
 80073fc:	f9b0 1000 	ldrsh.w	r1, [r0]
 8007400:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007404:	9001      	str	r0, [sp, #4]
 8007406:	440d      	add	r5, r1
 8007408:	4416      	add	r6, r2
 800740a:	b91f      	cbnz	r7, 8007414 <WM_CreateWindowAsChild+0x54>
 800740c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007410:	1a5f      	subs	r7, r3, r1
 8007412:	3701      	adds	r7, #1
 8007414:	f1b8 0f00 	cmp.w	r8, #0
 8007418:	d105      	bne.n	8007426 <WM_CreateWindowAsChild+0x66>
 800741a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800741e:	ebc2 0803 	rsb	r8, r2, r3
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	a801      	add	r0, sp, #4
 8007428:	f7fb ffd8 	bl	80033dc <GUI_ALLOC_UnlockH>
 800742c:	e004      	b.n	8007438 <WM_CreateWindowAsChild+0x78>
 800742e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007432:	d1e0      	bne.n	80073f6 <WM_CreateWindowAsChild+0x36>
 8007434:	f04f 0a00 	mov.w	sl, #0
 8007438:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800743a:	302c      	adds	r0, #44	; 0x2c
 800743c:	f7fc f952 	bl	80036e4 <GUI_ALLOC_AllocZero>
 8007440:	4604      	mov	r4, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	d059      	beq.n	80074fa <WM_CreateWindowAsChild+0x13a>
 8007446:	4a30      	ldr	r2, [pc, #192]	; (8007508 <WM_CreateWindowAsChild+0x148>)
 8007448:	f10d 0b08 	add.w	fp, sp, #8
 800744c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800744e:	ea49 0903 	orr.w	r9, r9, r3
 8007452:	8813      	ldrh	r3, [r2, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	8013      	strh	r3, [r2, #0]
 8007458:	f7fb ffb2 	bl	80033c0 <GUI_ALLOC_LockH>
 800745c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745e:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8007462:	6103      	str	r3, [r0, #16]
 8007464:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <WM_CreateWindowAsChild+0x154>)
 8007466:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007468:	8005      	strh	r5, [r0, #0]
 800746a:	ea09 0303 	and.w	r3, r9, r3
 800746e:	8046      	strh	r6, [r0, #2]
 8007470:	443d      	add	r5, r7
 8007472:	4446      	add	r6, r8
 8007474:	4313      	orrs	r3, r2
 8007476:	3d01      	subs	r5, #1
 8007478:	3e01      	subs	r6, #1
 800747a:	6283      	str	r3, [r0, #40]	; 0x28
 800747c:	8085      	strh	r5, [r0, #4]
 800747e:	80c6      	strh	r6, [r0, #6]
 8007480:	4658      	mov	r0, fp
 8007482:	f7fb ffab 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <WM_CreateWindowAsChild+0x158>)
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	b148      	cbz	r0, 80074a0 <WM_CreateWindowAsChild+0xe0>
 800748c:	f7fb ff8e 	bl	80033ac <GUI_ALLOC_h2p>
 8007490:	4605      	mov	r5, r0
 8007492:	4620      	mov	r0, r4
 8007494:	f7fb ff8a 	bl	80033ac <GUI_ALLOC_h2p>
 8007498:	696b      	ldr	r3, [r5, #20]
 800749a:	6143      	str	r3, [r0, #20]
 800749c:	616c      	str	r4, [r5, #20]
 800749e:	e000      	b.n	80074a2 <WM_CreateWindowAsChild+0xe2>
 80074a0:	601c      	str	r4, [r3, #0]
 80074a2:	4651      	mov	r1, sl
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7ff fd51 	bl	8006f4c <WM__InsertWindowIntoList>
 80074aa:	f019 0f20 	tst.w	r9, #32
 80074ae:	d002      	beq.n	80074b6 <WM_CreateWindowAsChild+0xf6>
 80074b0:	4620      	mov	r0, r4
 80074b2:	f7ff ff65 	bl	8007380 <WM_SelectWindow>
 80074b6:	f019 0f01 	tst.w	r9, #1
 80074ba:	bf1f      	itttt	ne
 80074bc:	4a17      	ldrne	r2, [pc, #92]	; (800751c <WM_CreateWindowAsChild+0x15c>)
 80074be:	6813      	ldrne	r3, [r2, #0]
 80074c0:	3301      	addne	r3, #1
 80074c2:	6013      	strne	r3, [r2, #0]
 80074c4:	f019 0f40 	tst.w	r9, #64	; 0x40
 80074c8:	d002      	beq.n	80074d0 <WM_CreateWindowAsChild+0x110>
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fa5e 	bl	800798c <WM_BringToBottom>
 80074d0:	f019 0f02 	tst.w	r9, #2
 80074d4:	d00d      	beq.n	80074f2 <WM_CreateWindowAsChild+0x132>
 80074d6:	4620      	mov	r0, r4
 80074d8:	f7fb ff72 	bl	80033c0 <GUI_ALLOC_LockH>
 80074dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80074de:	9000      	str	r0, [sp, #0]
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	6283      	str	r3, [r0, #40]	; 0x28
 80074e6:	4658      	mov	r0, fp
 80074e8:	f7fb ff78 	bl	80033dc <GUI_ALLOC_UnlockH>
 80074ec:	4620      	mov	r0, r4
 80074ee:	f7ff ff3a 	bl	8007366 <WM_InvalidateWindow>
 80074f2:	2101      	movs	r1, #1
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff fe0c 	bl	8007112 <WM__SendMsgNoData>
 80074fa:	4620      	mov	r0, r4
 80074fc:	b003      	add	sp, #12
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	bf00      	nop
 8007504:	2402d6c8 	.word	0x2402d6c8
 8007508:	2402d690 	.word	0x2402d690
 800750c:	24000028 	.word	0x24000028
 8007510:	2402d698 	.word	0x2402d698
 8007514:	003f3f9f 	.word	0x003f3f9f
 8007518:	2402d6b4 	.word	0x2402d6b4
 800751c:	2402d6e8 	.word	0x2402d6e8

08007520 <WM__GetNextIVR>:
 8007520:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007524:	4f5d      	ldr	r7, [pc, #372]	; (800769c <WM__GetNextIVR+0x17c>)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800752c:	2800      	cmp	r0, #0
 800752e:	f000 80b1 	beq.w	8007694 <WM__GetNextIVR+0x174>
 8007532:	4a5b      	ldr	r2, [pc, #364]	; (80076a0 <WM__GetNextIVR+0x180>)
 8007534:	6a13      	ldr	r3, [r2, #32]
 8007536:	4614      	mov	r4, r2
 8007538:	2b01      	cmp	r3, #1
 800753a:	dd03      	ble.n	8007544 <WM__GetNextIVR+0x24>
 800753c:	3b01      	subs	r3, #1
 800753e:	2000      	movs	r0, #0
 8007540:	6213      	str	r3, [r2, #32]
 8007542:	e0a7      	b.n	8007694 <WM__GetNextIVR+0x174>
 8007544:	69d3      	ldr	r3, [r2, #28]
 8007546:	f102 0614 	add.w	r6, r2, #20
 800754a:	ad02      	add	r5, sp, #8
 800754c:	3301      	adds	r3, #1
 800754e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007552:	61d3      	str	r3, [r2, #28]
 8007554:	e885 0003 	stmia.w	r5, {r0, r1}
 8007558:	b923      	cbnz	r3, 8007564 <WM__GetNextIVR+0x44>
 800755a:	8993      	ldrh	r3, [r2, #12]
 800755c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007560:	89d3      	ldrh	r3, [r2, #14]
 8007562:	e010      	b.n	8007586 <WM__GetNextIVR+0x66>
 8007564:	8b13      	ldrh	r3, [r2, #24]
 8007566:	8ad2      	ldrh	r2, [r2, #22]
 8007568:	3301      	adds	r3, #1
 800756a:	f8ad 200a 	strh.w	r2, [sp, #10]
 800756e:	b21b      	sxth	r3, r3
 8007570:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8007574:	429a      	cmp	r2, r3
 8007576:	f8ad 3008 	strh.w	r3, [sp, #8]
 800757a:	da06      	bge.n	800758a <WM__GetNextIVR+0x6a>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007582:	8b63      	ldrh	r3, [r4, #26]
 8007584:	3301      	adds	r3, #1
 8007586:	f8ad 300a 	strh.w	r3, [sp, #10]
 800758a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800758e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8007592:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80076a0 <WM__GetNextIVR+0x180>
 8007596:	429a      	cmp	r2, r3
 8007598:	dd04      	ble.n	80075a4 <WM__GetNextIVR+0x84>
 800759a:	6a23      	ldr	r3, [r4, #32]
 800759c:	2000      	movs	r0, #0
 800759e:	3b01      	subs	r3, #1
 80075a0:	6223      	str	r3, [r4, #32]
 80075a2:	e077      	b.n	8007694 <WM__GetNextIVR+0x174>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80075a8:	f7fb ff0a 	bl	80033c0 <GUI_ALLOC_LockH>
 80075ac:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80075b0:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80075b4:	9001      	str	r0, [sp, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d11c      	bne.n	80075f4 <WM__GetNextIVR+0xd4>
 80075ba:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80075be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80075c2:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 80075c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075ca:	4b34      	ldr	r3, [pc, #208]	; (800769c <WM__GetNextIVR+0x17c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075d0:	b15a      	cbz	r2, 80075ea <WM__GetNextIVR+0xca>
 80075d2:	4610      	mov	r0, r2
 80075d4:	f7fb feea 	bl	80033ac <GUI_ALLOC_h2p>
 80075d8:	4680      	mov	r8, r0
 80075da:	2200      	movs	r2, #0
 80075dc:	4629      	mov	r1, r5
 80075de:	6a00      	ldr	r0, [r0, #32]
 80075e0:	f7ff fbb8 	bl	8006d54 <_Findy1>
 80075e4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80075e8:	e7f2      	b.n	80075d0 <WM__GetNextIVR+0xb0>
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	4629      	mov	r1, r5
 80075ee:	69d8      	ldr	r0, [r3, #28]
 80075f0:	f7ff fbb0 	bl	8006d54 <_Findy1>
 80075f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80075f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007600:	b16a      	cbz	r2, 800761e <WM__GetNextIVR+0xfe>
 8007602:	4610      	mov	r0, r2
 8007604:	f7fb fed2 	bl	80033ac <GUI_ALLOC_h2p>
 8007608:	2200      	movs	r2, #0
 800760a:	4680      	mov	r8, r0
 800760c:	4629      	mov	r1, r5
 800760e:	6a00      	ldr	r0, [r0, #32]
 8007610:	f7ff fbf3 	bl	8006dfa <_Findx0>
 8007614:	2800      	cmp	r0, #0
 8007616:	d1ed      	bne.n	80075f4 <WM__GetNextIVR+0xd4>
 8007618:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800761c:	e7f0      	b.n	8007600 <WM__GetNextIVR+0xe0>
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	4629      	mov	r1, r5
 8007622:	69d8      	ldr	r0, [r3, #28]
 8007624:	f7ff fbe9 	bl	8006dfa <_Findx0>
 8007628:	2800      	cmp	r0, #0
 800762a:	d1e3      	bne.n	80075f4 <WM__GetNextIVR+0xd4>
 800762c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8007630:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8007634:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007638:	429a      	cmp	r2, r3
 800763a:	dd07      	ble.n	800764c <WM__GetNextIVR+0x12c>
 800763c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007640:	e886 0003 	stmia.w	r6, {r0, r1}
 8007644:	a801      	add	r0, sp, #4
 8007646:	f7fb fec9 	bl	80033dc <GUI_ALLOC_UnlockH>
 800764a:	e797      	b.n	800757c <WM__GetNextIVR+0x5c>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007650:	b152      	cbz	r2, 8007668 <WM__GetNextIVR+0x148>
 8007652:	4610      	mov	r0, r2
 8007654:	f7fb feaa 	bl	80033ac <GUI_ALLOC_h2p>
 8007658:	4607      	mov	r7, r0
 800765a:	2200      	movs	r2, #0
 800765c:	4629      	mov	r1, r5
 800765e:	6a00      	ldr	r0, [r0, #32]
 8007660:	f7ff fc0e 	bl	8006e80 <_Findx1>
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	e7f3      	b.n	8007650 <WM__GetNextIVR+0x130>
 8007668:	af04      	add	r7, sp, #16
 800766a:	4629      	mov	r1, r5
 800766c:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8007670:	69d8      	ldr	r0, [r3, #28]
 8007672:	f7ff fc05 	bl	8006e80 <_Findx1>
 8007676:	4638      	mov	r0, r7
 8007678:	f7fb feb0 	bl	80033dc <GUI_ALLOC_UnlockH>
 800767c:	69e2      	ldr	r2, [r4, #28]
 800767e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007682:	429a      	cmp	r2, r3
 8007684:	dc89      	bgt.n	800759a <WM__GetNextIVR+0x7a>
 8007686:	e895 0003 	ldmia.w	r5, {r0, r1}
 800768a:	e886 0003 	stmia.w	r6, {r0, r1}
 800768e:	f7ff fce3 	bl	8007058 <WM__ActivateClipRect>
 8007692:	2001      	movs	r0, #1
 8007694:	b004      	add	sp, #16
 8007696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769a:	bf00      	nop
 800769c:	24000028 	.word	0x24000028
 80076a0:	2402d410 	.word	0x2402d410

080076a4 <WM__InitIVRSearch>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	4e39      	ldr	r6, [pc, #228]	; (8007790 <WM__InitIVRSearch+0xec>)
 80076aa:	b086      	sub	sp, #24
 80076ac:	4680      	mov	r8, r0
 80076ae:	6832      	ldr	r2, [r6, #0]
 80076b0:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 80076b4:	b913      	cbnz	r3, 80076bc <WM__InitIVRSearch+0x18>
 80076b6:	f7ff fccf 	bl	8007058 <WM__ActivateClipRect>
 80076ba:	e064      	b.n	8007786 <WM__InitIVRSearch+0xe2>
 80076bc:	4f35      	ldr	r7, [pc, #212]	; (8007794 <WM__InitIVRSearch+0xf0>)
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	463d      	mov	r5, r7
 80076c2:	3301      	adds	r3, #1
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	623b      	str	r3, [r7, #32]
 80076c8:	dc5d      	bgt.n	8007786 <WM__InitIVRSearch+0xe2>
 80076ca:	6c90      	ldr	r0, [r2, #72]	; 0x48
 80076cc:	f7fb fe78 	bl	80033c0 <GUI_ALLOC_LockH>
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295
 80076d4:	9000      	str	r0, [sp, #0]
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	4b2f      	ldr	r3, [pc, #188]	; (8007798 <WM__InitIVRSearch+0xf4>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b113      	cbz	r3, 80076e4 <WM__InitIVRSearch+0x40>
 80076de:	ab02      	add	r3, sp, #8
 80076e0:	3008      	adds	r0, #8
 80076e2:	e004      	b.n	80076ee <WM__InitIVRSearch+0x4a>
 80076e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80076e6:	f013 0402 	ands.w	r4, r3, #2
 80076ea:	d00c      	beq.n	8007706 <WM__InitIVRSearch+0x62>
 80076ec:	ab02      	add	r3, sp, #8
 80076ee:	ac02      	add	r4, sp, #8
 80076f0:	c803      	ldmia	r0, {r0, r1}
 80076f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80076f6:	f1b8 0f00 	cmp.w	r8, #0
 80076fa:	d00c      	beq.n	8007716 <WM__InitIVRSearch+0x72>
 80076fc:	4641      	mov	r1, r8
 80076fe:	4620      	mov	r0, r4
 8007700:	f7fc fc44 	bl	8003f8c <GUI__IntersectRect>
 8007704:	e007      	b.n	8007716 <WM__InitIVRSearch+0x72>
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	4668      	mov	r0, sp
 800770a:	3b01      	subs	r3, #1
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	f7fb fe65 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007712:	4620      	mov	r0, r4
 8007714:	e038      	b.n	8007788 <WM__InitIVRSearch+0xe4>
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	4f20      	ldr	r7, [pc, #128]	; (800779c <WM__InitIVRSearch+0xf8>)
 800771a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771c:	b1c2      	cbz	r2, 8007750 <WM__InitIVRSearch+0xac>
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	6810      	ldr	r0, [r2, #0]
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	ab04      	add	r3, sp, #16
 8007726:	6851      	ldr	r1, [r2, #4]
 8007728:	c303      	stmia	r3!, {r0, r1}
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	b133      	cbz	r3, 800773c <WM__InitIVRSearch+0x98>
 800772e:	a801      	add	r0, sp, #4
 8007730:	f7fb fe54 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007734:	6838      	ldr	r0, [r7, #0]
 8007736:	f7fb fe43 	bl	80033c0 <GUI_ALLOC_LockH>
 800773a:	9001      	str	r0, [sp, #4]
 800773c:	a904      	add	r1, sp, #16
 800773e:	9801      	ldr	r0, [sp, #4]
 8007740:	f7ff fc5a 	bl	8006ff8 <WM__Client2Screen>
 8007744:	4620      	mov	r0, r4
 8007746:	a904      	add	r1, sp, #16
 8007748:	f7fc fc20 	bl	8003f8c <GUI__IntersectRect>
 800774c:	a801      	add	r0, sp, #4
 800774e:	e000      	b.n	8007752 <WM__InitIVRSearch+0xae>
 8007750:	4668      	mov	r0, sp
 8007752:	f7fb fe43 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	b119      	cbz	r1, 8007762 <WM__InitIVRSearch+0xbe>
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff fbca 	bl	8006ef4 <WM__ClipAtParentBorders>
 8007760:	b128      	cbz	r0, 800776e <WM__InitIVRSearch+0xca>
 8007762:	6833      	ldr	r3, [r6, #0]
 8007764:	4620      	mov	r0, r4
 8007766:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007768:	f7ff fbc4 	bl	8006ef4 <WM__ClipAtParentBorders>
 800776c:	b918      	cbnz	r0, 8007776 <WM__InitIVRSearch+0xd2>
 800776e:	6a2b      	ldr	r3, [r5, #32]
 8007770:	3b01      	subs	r3, #1
 8007772:	622b      	str	r3, [r5, #32]
 8007774:	e008      	b.n	8007788 <WM__InitIVRSearch+0xe4>
 8007776:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <WM__InitIVRSearch+0xfc>)
 8007778:	e894 0003 	ldmia.w	r4, {r0, r1}
 800777c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007780:	f7ff fece 	bl	8007520 <WM__GetNextIVR>
 8007784:	e000      	b.n	8007788 <WM__InitIVRSearch+0xe4>
 8007786:	2001      	movs	r0, #1
 8007788:	b006      	add	sp, #24
 800778a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800778e:	bf00      	nop
 8007790:	24000028 	.word	0x24000028
 8007794:	2402d410 	.word	0x2402d410
 8007798:	2402d6c4 	.word	0x2402d6c4
 800779c:	2402d694 	.word	0x2402d694
 80077a0:	2402d41c 	.word	0x2402d41c

080077a4 <WM_Activate>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <WM_Activate+0xc>)
 80077a6:	2201      	movs	r2, #1
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80077ae:	4770      	bx	lr
 80077b0:	24000028 	.word	0x24000028

080077b4 <WM_DefaultProc>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	6840      	ldr	r0, [r0, #4]
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	2b17      	cmp	r3, #23
 80077be:	d010      	beq.n	80077e2 <WM_DefaultProc+0x2e>
 80077c0:	dc07      	bgt.n	80077d2 <WM_DefaultProc+0x1e>
 80077c2:	2b0e      	cmp	r3, #14
 80077c4:	d00f      	beq.n	80077e6 <WM_DefaultProc+0x32>
 80077c6:	2b14      	cmp	r3, #20
 80077c8:	d115      	bne.n	80077f6 <WM_DefaultProc+0x42>
 80077ca:	68e1      	ldr	r1, [r4, #12]
 80077cc:	f000 f972 	bl	8007ab4 <WM__GetClientRectEx>
 80077d0:	e011      	b.n	80077f6 <WM_DefaultProc+0x42>
 80077d2:	2b22      	cmp	r3, #34	; 0x22
 80077d4:	d00c      	beq.n	80077f0 <WM_DefaultProc+0x3c>
 80077d6:	2b28      	cmp	r3, #40	; 0x28
 80077d8:	d10d      	bne.n	80077f6 <WM_DefaultProc+0x42>
 80077da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077de:	f7ff bdc2 	b.w	8007366 <WM_InvalidateWindow>
 80077e2:	60e0      	str	r0, [r4, #12]
 80077e4:	bd10      	pop	{r4, pc}
 80077e6:	4621      	mov	r1, r4
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f000 b911 	b.w	8007a12 <WM_SendToParent>
 80077f0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80077f4:	e000      	b.n	80077f8 <WM_DefaultProc+0x44>
 80077f6:	2300      	movs	r3, #0
 80077f8:	60e3      	str	r3, [r4, #12]
 80077fa:	bd10      	pop	{r4, pc}

080077fc <_cbBackWin>:
 80077fc:	6803      	ldr	r3, [r0, #0]
 80077fe:	2b0e      	cmp	r3, #14
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	d002      	beq.n	800780c <_cbBackWin+0x10>
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d009      	beq.n	800781e <_cbBackWin+0x22>
 800780a:	e020      	b.n	800784e <_cbBackWin+0x52>
 800780c:	68c3      	ldr	r3, [r0, #12]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	2a01      	cmp	r2, #1
 8007812:	d121      	bne.n	8007858 <_cbBackWin+0x5c>
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781a:	f7fc bb7d 	b.w	8003f18 <GUI_StoreKey>
 800781e:	4a0f      	ldr	r2, [pc, #60]	; (800785c <_cbBackWin+0x60>)
 8007820:	6843      	ldr	r3, [r0, #4]
 8007822:	6811      	ldr	r1, [r2, #0]
 8007824:	428b      	cmp	r3, r1
 8007826:	d006      	beq.n	8007836 <_cbBackWin+0x3a>
 8007828:	6852      	ldr	r2, [r2, #4]
 800782a:	4293      	cmp	r3, r2
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	f04f 33ff 	movne.w	r3, #4294967295
 8007834:	e000      	b.n	8007838 <_cbBackWin+0x3c>
 8007836:	2300      	movs	r3, #0
 8007838:	4a09      	ldr	r2, [pc, #36]	; (8007860 <_cbBackWin+0x64>)
 800783a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800783e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007842:	4298      	cmp	r0, r3
 8007844:	d003      	beq.n	800784e <_cbBackWin+0x52>
 8007846:	f7fc f887 	bl	8003958 <GUI_SetBkColor>
 800784a:	f7fc f939 	bl	8003ac0 <GUI_Clear>
 800784e:	4620      	mov	r0, r4
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f7ff bfae 	b.w	80077b4 <WM_DefaultProc>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	bf00      	nop
 800785c:	2402d698 	.word	0x2402d698
 8007860:	2402d6cc 	.word	0x2402d6cc

08007864 <WM_Init>:
 8007864:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007868:	4d2a      	ldr	r5, [pc, #168]	; (8007914 <WM_Init+0xb0>)
 800786a:	7828      	ldrb	r0, [r5, #0]
 800786c:	2800      	cmp	r0, #0
 800786e:	d14d      	bne.n	800790c <WM_Init+0xa8>
 8007870:	4b29      	ldr	r3, [pc, #164]	; (8007918 <WM_Init+0xb4>)
 8007872:	4604      	mov	r4, r0
 8007874:	4e29      	ldr	r6, [pc, #164]	; (800791c <WM_Init+0xb8>)
 8007876:	6018      	str	r0, [r3, #0]
 8007878:	4b29      	ldr	r3, [pc, #164]	; (8007920 <WM_Init+0xbc>)
 800787a:	4f2a      	ldr	r7, [pc, #168]	; (8007924 <WM_Init+0xc0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007950 <WM_Init+0xec>
 8007882:	6458      	str	r0, [r3, #68]	; 0x44
 8007884:	4b28      	ldr	r3, [pc, #160]	; (8007928 <WM_Init+0xc4>)
 8007886:	60a8      	str	r0, [r5, #8]
 8007888:	8018      	strh	r0, [r3, #0]
 800788a:	4b28      	ldr	r3, [pc, #160]	; (800792c <WM_Init+0xc8>)
 800788c:	8018      	strh	r0, [r3, #0]
 800788e:	4620      	mov	r0, r4
 8007890:	f7fc fa48 	bl	8003d24 <GUI_DEVICE__GetpDriver>
 8007894:	b1a8      	cbz	r0, 80078c2 <WM_Init+0x5e>
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	2302      	movs	r3, #2
 800789c:	2100      	movs	r1, #0
 800789e:	9602      	str	r6, [sp, #8]
 80078a0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80078a4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80078a8:	9103      	str	r1, [sp, #12]
 80078aa:	4608      	mov	r0, r1
 80078ac:	461a      	mov	r2, r3
 80078ae:	f7ff fd87 	bl	80073c0 <WM_CreateWindowAsChild>
 80078b2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80078b6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80078ba:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 80078be:	f7ff fd52 	bl	8007366 <WM_InvalidateWindow>
 80078c2:	3401      	adds	r4, #1
 80078c4:	2c02      	cmp	r4, #2
 80078c6:	d1e2      	bne.n	800788e <WM_Init+0x2a>
 80078c8:	4819      	ldr	r0, [pc, #100]	; (8007930 <WM_Init+0xcc>)
 80078ca:	f000 f8eb 	bl	8007aa4 <WM__AddCriticalHandle>
 80078ce:	4819      	ldr	r0, [pc, #100]	; (8007934 <WM_Init+0xd0>)
 80078d0:	f000 f8e8 	bl	8007aa4 <WM__AddCriticalHandle>
 80078d4:	4818      	ldr	r0, [pc, #96]	; (8007938 <WM_Init+0xd4>)
 80078d6:	f000 f8e5 	bl	8007aa4 <WM__AddCriticalHandle>
 80078da:	4818      	ldr	r0, [pc, #96]	; (800793c <WM_Init+0xd8>)
 80078dc:	f000 f8e2 	bl	8007aa4 <WM__AddCriticalHandle>
 80078e0:	4817      	ldr	r0, [pc, #92]	; (8007940 <WM_Init+0xdc>)
 80078e2:	f000 f8df 	bl	8007aa4 <WM__AddCriticalHandle>
 80078e6:	4817      	ldr	r0, [pc, #92]	; (8007944 <WM_Init+0xe0>)
 80078e8:	f000 f8dc 	bl	8007aa4 <WM__AddCriticalHandle>
 80078ec:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <WM_Init+0xc0>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	f7ff fd46 	bl	8007380 <WM_SelectWindow>
 80078f4:	f7ff ff56 	bl	80077a4 <WM_Activate>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4813      	ldr	r0, [pc, #76]	; (8007948 <WM_Init+0xe4>)
 80078fc:	702b      	strb	r3, [r5, #0]
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <WM_Init+0xe8>)
 8007900:	626b      	str	r3, [r5, #36]	; 0x24
 8007902:	b004      	add	sp, #16
 8007904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	f7fc b9f8 	b.w	8003cfc <GUI__RegisterExit>
 800790c:	b004      	add	sp, #16
 800790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007912:	bf00      	nop
 8007914:	2402d410 	.word	0x2402d410
 8007918:	2402d6b4 	.word	0x2402d6b4
 800791c:	080077fd 	.word	0x080077fd
 8007920:	24000028 	.word	0x24000028
 8007924:	2402d698 	.word	0x2402d698
 8007928:	2402d6b0 	.word	0x2402d6b0
 800792c:	2402d690 	.word	0x2402d690
 8007930:	2402d70c 	.word	0x2402d70c
 8007934:	2402d6fc 	.word	0x2402d6fc
 8007938:	2402d6ec 	.word	0x2402d6ec
 800793c:	2402d714 	.word	0x2402d714
 8007940:	2402d704 	.word	0x2402d704
 8007944:	2402d6f4 	.word	0x2402d6f4
 8007948:	2402d434 	.word	0x2402d434
 800794c:	08006cb1 	.word	0x08006cb1
 8007950:	2402d6cc 	.word	0x2402d6cc

08007954 <WM_GetDesktopWindow>:
 8007954:	4b03      	ldr	r3, [pc, #12]	; (8007964 <WM_GetDesktopWindow+0x10>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	7c5a      	ldrb	r2, [r3, #17]
 800795a:	4b03      	ldr	r3, [pc, #12]	; (8007968 <WM_GetDesktopWindow+0x14>)
 800795c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	24000028 	.word	0x24000028
 8007968:	2402d698 	.word	0x2402d698

0800796c <WM_GetFirstChild>:
 800796c:	b508      	push	{r3, lr}
 800796e:	4603      	mov	r3, r0
 8007970:	b110      	cbz	r0, 8007978 <WM_GetFirstChild+0xc>
 8007972:	f7fb fd1b 	bl	80033ac <GUI_ALLOC_h2p>
 8007976:	69c3      	ldr	r3, [r0, #28]
 8007978:	4618      	mov	r0, r3
 800797a:	bd08      	pop	{r3, pc}

0800797c <WM_GetParent>:
 800797c:	b508      	push	{r3, lr}
 800797e:	4603      	mov	r3, r0
 8007980:	b110      	cbz	r0, 8007988 <WM_GetParent+0xc>
 8007982:	f7fb fd13 	bl	80033ac <GUI_ALLOC_h2p>
 8007986:	6983      	ldr	r3, [r0, #24]
 8007988:	4618      	mov	r0, r3
 800798a:	bd08      	pop	{r3, pc}

0800798c <WM_BringToBottom>:
 800798c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007990:	4604      	mov	r4, r0
 8007992:	b087      	sub	sp, #28
 8007994:	2800      	cmp	r0, #0
 8007996:	d039      	beq.n	8007a0c <WM_BringToBottom+0x80>
 8007998:	f7fb fd12 	bl	80033c0 <GUI_ALLOC_LockH>
 800799c:	ad04      	add	r5, sp, #16
 800799e:	4603      	mov	r3, r0
 80079a0:	9001      	str	r0, [sp, #4]
 80079a2:	c803      	ldmia	r0, {r0, r1}
 80079a4:	6a1e      	ldr	r6, [r3, #32]
 80079a6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80079aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80079ae:	a801      	add	r0, sp, #4
 80079b0:	f7fb fd14 	bl	80033dc <GUI_ALLOC_UnlockH>
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 f843 	bl	8007a40 <WM__GetPrevSibling>
 80079ba:	4607      	mov	r7, r0
 80079bc:	b330      	cbz	r0, 8007a0c <WM_BringToBottom+0x80>
 80079be:	4620      	mov	r0, r4
 80079c0:	f7ff ffdc 	bl	800797c <WM_GetParent>
 80079c4:	f019 0f02 	tst.w	r9, #2
 80079c8:	4680      	mov	r8, r0
 80079ca:	d004      	beq.n	80079d6 <WM_BringToBottom+0x4a>
 80079cc:	4601      	mov	r1, r0
 80079ce:	4632      	mov	r2, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	f7ff fc89 	bl	80072e8 <WM__InvalidateRectEx>
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7fb fcf2 	bl	80033c0 <GUI_ALLOC_LockH>
 80079dc:	9001      	str	r0, [sp, #4]
 80079de:	4640      	mov	r0, r8
 80079e0:	f7fb fcee 	bl	80033c0 <GUI_ALLOC_LockH>
 80079e4:	9003      	str	r0, [sp, #12]
 80079e6:	4638      	mov	r0, r7
 80079e8:	f7fb fcea 	bl	80033c0 <GUI_ALLOC_LockH>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	9a01      	ldr	r2, [sp, #4]
 80079f0:	69d9      	ldr	r1, [r3, #28]
 80079f2:	6206      	str	r6, [r0, #32]
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	a801      	add	r0, sp, #4
 80079f8:	6211      	str	r1, [r2, #32]
 80079fa:	61dc      	str	r4, [r3, #28]
 80079fc:	f7fb fcee 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007a00:	a803      	add	r0, sp, #12
 8007a02:	f7fb fceb 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007a06:	a802      	add	r0, sp, #8
 8007a08:	f7fb fce8 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007a0c:	b007      	add	sp, #28
 8007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007a12 <WM_SendToParent>:
 8007a12:	b538      	push	{r3, r4, r5, lr}
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	b141      	cbz	r1, 8007a2c <WM_SendToParent+0x1a>
 8007a1a:	f7ff ffaf 	bl	800797c <WM_GetParent>
 8007a1e:	b128      	cbz	r0, 8007a2c <WM_SendToParent+0x1a>
 8007a20:	60a5      	str	r5, [r4, #8]
 8007a22:	4621      	mov	r1, r4
 8007a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a28:	f000 b81e 	b.w	8007a68 <WM__SendMessage>
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}

08007a2e <WM__GetFirstSibling>:
 8007a2e:	b508      	push	{r3, lr}
 8007a30:	f7ff ffa4 	bl	800797c <WM_GetParent>
 8007a34:	b118      	cbz	r0, 8007a3e <WM__GetFirstSibling+0x10>
 8007a36:	f7fb fcb9 	bl	80033ac <GUI_ALLOC_h2p>
 8007a3a:	69c0      	ldr	r0, [r0, #28]
 8007a3c:	bd08      	pop	{r3, pc}
 8007a3e:	bd08      	pop	{r3, pc}

08007a40 <WM__GetPrevSibling>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4605      	mov	r5, r0
 8007a44:	f7ff fff3 	bl	8007a2e <WM__GetFirstSibling>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	b154      	cbz	r4, 8007a62 <WM__GetPrevSibling+0x22>
 8007a4c:	42ac      	cmp	r4, r5
 8007a4e:	d007      	beq.n	8007a60 <WM__GetPrevSibling+0x20>
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7fb fcab 	bl	80033ac <GUI_ALLOC_h2p>
 8007a56:	6a03      	ldr	r3, [r0, #32]
 8007a58:	429d      	cmp	r5, r3
 8007a5a:	d002      	beq.n	8007a62 <WM__GetPrevSibling+0x22>
 8007a5c:	461c      	mov	r4, r3
 8007a5e:	e7f4      	b.n	8007a4a <WM__GetPrevSibling+0xa>
 8007a60:	2400      	movs	r4, #0
 8007a62:	4620      	mov	r0, r4
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a68 <WM__SendMessage>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4c0d      	ldr	r4, [pc, #52]	; (8007aa0 <WM__SendMessage+0x38>)
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460d      	mov	r5, r1
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	2b13      	cmp	r3, #19
 8007a74:	dc12      	bgt.n	8007a9c <WM__SendMessage+0x34>
 8007a76:	f7fb fc99 	bl	80033ac <GUI_ALLOC_h2p>
 8007a7a:	6902      	ldr	r2, [r0, #16]
 8007a7c:	606e      	str	r6, [r5, #4]
 8007a7e:	b142      	cbz	r2, 8007a92 <WM__SendMessage+0x2a>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	4628      	mov	r0, r5
 8007a84:	3301      	adds	r3, #1
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	4790      	blx	r2
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	4628      	mov	r0, r5
 8007a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a98:	f7ff be8c 	b.w	80077b4 <WM_DefaultProc>
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	bf00      	nop
 8007aa0:	2402d440 	.word	0x2402d440

08007aa4 <WM__AddCriticalHandle>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <WM__AddCriticalHandle+0xc>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	6002      	str	r2, [r0, #0]
 8007aaa:	6018      	str	r0, [r3, #0]
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	2402d6d4 	.word	0x2402d6d4

08007ab4 <WM__GetClientRectEx>:
 8007ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	b158      	cbz	r0, 8007ad2 <WM__GetClientRectEx+0x1e>
 8007aba:	b151      	cbz	r1, 8007ad2 <WM__GetClientRectEx+0x1e>
 8007abc:	ac02      	add	r4, sp, #8
 8007abe:	f7fb fc7f 	bl	80033c0 <GUI_ALLOC_LockH>
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007ac8:	f7ff fb2e 	bl	8007128 <WM__GetClientRectWin>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7fb fc85 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007ad2:	b003      	add	sp, #12
 8007ad4:	bd30      	pop	{r4, r5, pc}

08007ad6 <_GetIndexMask_0>:
 8007ad6:	b508      	push	{r3, lr}
 8007ad8:	f7fc ff4a 	bl	8004970 <LCD_GetNumColors>
 8007adc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007ae0:	d010      	beq.n	8007b04 <_GetIndexMask_0+0x2e>
 8007ae2:	287f      	cmp	r0, #127	; 0x7f
 8007ae4:	d810      	bhi.n	8007b08 <_GetIndexMask_0+0x32>
 8007ae6:	283f      	cmp	r0, #63	; 0x3f
 8007ae8:	d810      	bhi.n	8007b0c <_GetIndexMask_0+0x36>
 8007aea:	281f      	cmp	r0, #31
 8007aec:	d810      	bhi.n	8007b10 <_GetIndexMask_0+0x3a>
 8007aee:	280f      	cmp	r0, #15
 8007af0:	d810      	bhi.n	8007b14 <_GetIndexMask_0+0x3e>
 8007af2:	2807      	cmp	r0, #7
 8007af4:	d810      	bhi.n	8007b18 <_GetIndexMask_0+0x42>
 8007af6:	2803      	cmp	r0, #3
 8007af8:	d810      	bhi.n	8007b1c <_GetIndexMask_0+0x46>
 8007afa:	2801      	cmp	r0, #1
 8007afc:	bf94      	ite	ls
 8007afe:	2000      	movls	r0, #0
 8007b00:	2001      	movhi	r0, #1
 8007b02:	e00c      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b04:	2008      	movs	r0, #8
 8007b06:	e00a      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b08:	2007      	movs	r0, #7
 8007b0a:	e008      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b0c:	2006      	movs	r0, #6
 8007b0e:	e006      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b10:	2005      	movs	r0, #5
 8007b12:	e004      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b14:	2004      	movs	r0, #4
 8007b16:	e002      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b18:	2003      	movs	r0, #3
 8007b1a:	e000      	b.n	8007b1e <_GetIndexMask_0+0x48>
 8007b1c:	2002      	movs	r0, #2
 8007b1e:	2301      	movs	r3, #1
 8007b20:	fa03 f000 	lsl.w	r0, r3, r0
 8007b24:	3801      	subs	r0, #1
 8007b26:	bd08      	pop	{r3, pc}

08007b28 <_Index2Color_0>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	f7fc ff20 	bl	8004970 <LCD_GetNumColors>
 8007b30:	4605      	mov	r5, r0
 8007b32:	f7fc ff3b 	bl	80049ac <LCD_GetPalette>
 8007b36:	42a5      	cmp	r5, r4
 8007b38:	d903      	bls.n	8007b42 <_Index2Color_0+0x1a>
 8007b3a:	b118      	cbz	r0, 8007b44 <_Index2Color_0+0x1c>
 8007b3c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	2000      	movs	r0, #0
 8007b44:	bd38      	pop	{r3, r4, r5, pc}

08007b46 <_Color2Index_0>:
 8007b46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b4a:	4681      	mov	r9, r0
 8007b4c:	f7fc ff10 	bl	8004970 <LCD_GetNumColors>
 8007b50:	4607      	mov	r7, r0
 8007b52:	f7fc ff2b 	bl	80049ac <LCD_GetPalette>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b1e0      	cbz	r0, 8007b94 <_Color2Index_0+0x4e>
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8007b60:	454b      	cmp	r3, r9
 8007b62:	d017      	beq.n	8007b94 <_Color2Index_0+0x4e>
 8007b64:	3001      	adds	r0, #1
 8007b66:	4287      	cmp	r7, r0
 8007b68:	dcf8      	bgt.n	8007b5c <_Color2Index_0+0x16>
 8007b6a:	2400      	movs	r4, #0
 8007b6c:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8007b70:	4625      	mov	r5, r4
 8007b72:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8007b76:	4648      	mov	r0, r9
 8007b78:	f7fb fe4a 	bl	8003810 <GUI_CalcColorDist>
 8007b7c:	4580      	cmp	r8, r0
 8007b7e:	bf88      	it	hi
 8007b80:	462c      	movhi	r4, r5
 8007b82:	f105 0501 	add.w	r5, r5, #1
 8007b86:	bf88      	it	hi
 8007b88:	4680      	movhi	r8, r0
 8007b8a:	42af      	cmp	r7, r5
 8007b8c:	dcf1      	bgt.n	8007b72 <_Color2Index_0+0x2c>
 8007b8e:	4620      	mov	r0, r4
 8007b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007b98 <GUIMONO_DispChar>:
 8007b98:	4b4d      	ldr	r3, [pc, #308]	; (8007cd0 <GUIMONO_DispChar+0x138>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	69d1      	ldr	r1, [r2, #28]
 8007b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba2:	69cc      	ldr	r4, [r1, #28]
 8007ba4:	b08b      	sub	sp, #44	; 0x2c
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	4283      	cmp	r3, r0
 8007baa:	d808      	bhi.n	8007bbe <GUIMONO_DispChar+0x26>
 8007bac:	89e5      	ldrh	r5, [r4, #14]
 8007bae:	4285      	cmp	r5, r0
 8007bb0:	d305      	bcc.n	8007bbe <GUIMONO_DispChar+0x26>
 8007bb2:	6825      	ldr	r5, [r4, #0]
 8007bb4:	1ac3      	subs	r3, r0, r3
 8007bb6:	f04f 36ff 	mov.w	r6, #4294967295
 8007bba:	9506      	str	r5, [sp, #24]
 8007bbc:	e013      	b.n	8007be6 <GUIMONO_DispChar+0x4e>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d07c      	beq.n	8007cbe <GUIMONO_DispChar+0x126>
 8007bc4:	881d      	ldrh	r5, [r3, #0]
 8007bc6:	42a8      	cmp	r0, r5
 8007bc8:	d379      	bcc.n	8007cbe <GUIMONO_DispChar+0x126>
 8007bca:	885e      	ldrh	r6, [r3, #2]
 8007bcc:	4286      	cmp	r6, r0
 8007bce:	d376      	bcc.n	8007cbe <GUIMONO_DispChar+0x126>
 8007bd0:	1b40      	subs	r0, r0, r5
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	6866      	ldr	r6, [r4, #4]
 8007bd6:	b280      	uxth	r0, r0
 8007bd8:	9606      	str	r6, [sp, #24]
 8007bda:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8007bde:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8007be2:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8007be6:	1c58      	adds	r0, r3, #1
 8007be8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bea:	d068      	beq.n	8007cbe <GUIMONO_DispChar+0x126>
 8007bec:	f891 b018 	ldrb.w	fp, [r1, #24]
 8007bf0:	7ca1      	ldrb	r1, [r4, #18]
 8007bf2:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8007bf6:	fb1b f301 	smulbb	r3, fp, r1
 8007bfa:	4d35      	ldr	r5, [pc, #212]	; (8007cd0 <GUIMONO_DispChar+0x138>)
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8007c02:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	f894 a010 	ldrb.w	sl, [r4, #16]
 8007c0c:	f7fc fa7a 	bl	8004104 <LCD_SetDrawMode>
 8007c10:	6829      	ldr	r1, [r5, #0]
 8007c12:	9b07      	ldr	r3, [sp, #28]
 8007c14:	69ca      	ldr	r2, [r1, #28]
 8007c16:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8007c18:	9008      	str	r0, [sp, #32]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	9105      	str	r1, [sp, #20]
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	9906      	ldr	r1, [sp, #24]
 8007c22:	fb00 1003 	mla	r0, r0, r3, r1
 8007c26:	4641      	mov	r1, r8
 8007c28:	9004      	str	r0, [sp, #16]
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	7ca3      	ldrb	r3, [r4, #18]
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	2301      	movs	r3, #1
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	7ed3      	ldrb	r3, [r2, #27]
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	7e93      	ldrb	r3, [r2, #26]
 8007c3a:	4652      	mov	r2, sl
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	465b      	mov	r3, fp
 8007c40:	f7fc fbd6 	bl	80043f0 <LCD_DrawBitmap>
 8007c44:	1c73      	adds	r3, r6, #1
 8007c46:	d01a      	beq.n	8007c7e <GUIMONO_DispChar+0xe6>
 8007c48:	f049 0002 	orr.w	r0, r9, #2
 8007c4c:	f7fc fa5a 	bl	8004104 <LCD_SetDrawMode>
 8007c50:	682a      	ldr	r2, [r5, #0]
 8007c52:	9906      	ldr	r1, [sp, #24]
 8007c54:	4638      	mov	r0, r7
 8007c56:	69d3      	ldr	r3, [r2, #28]
 8007c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c5a:	9205      	str	r2, [sp, #20]
 8007c5c:	9a07      	ldr	r2, [sp, #28]
 8007c5e:	fb02 1606 	mla	r6, r2, r6, r1
 8007c62:	4641      	mov	r1, r8
 8007c64:	9604      	str	r6, [sp, #16]
 8007c66:	7ca2      	ldrb	r2, [r4, #18]
 8007c68:	9203      	str	r2, [sp, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	9202      	str	r2, [sp, #8]
 8007c6e:	7eda      	ldrb	r2, [r3, #27]
 8007c70:	9201      	str	r2, [sp, #4]
 8007c72:	4652      	mov	r2, sl
 8007c74:	7e9b      	ldrb	r3, [r3, #26]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	465b      	mov	r3, fp
 8007c7a:	f7fc fbb9 	bl	80043f0 <LCD_DrawBitmap>
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	7e5a      	ldrb	r2, [r3, #25]
 8007c84:	7e1b      	ldrb	r3, [r3, #24]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d915      	bls.n	8007cb6 <GUIMONO_DispChar+0x11e>
 8007c8a:	f1b9 0f02 	cmp.w	r9, #2
 8007c8e:	d012      	beq.n	8007cb6 <GUIMONO_DispChar+0x11e>
 8007c90:	f089 0004 	eor.w	r0, r9, #4
 8007c94:	f7fc fa36 	bl	8004104 <LCD_SetDrawMode>
 8007c98:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <GUIMONO_DispChar+0x138>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	7e18      	ldrb	r0, [r3, #24]
 8007ca0:	7ed9      	ldrb	r1, [r3, #27]
 8007ca2:	7e9a      	ldrb	r2, [r3, #26]
 8007ca4:	7e5b      	ldrb	r3, [r3, #25]
 8007ca6:	fb00 8101 	mla	r1, r0, r1, r8
 8007caa:	fb0a 7202 	mla	r2, sl, r2, r7
 8007cae:	4638      	mov	r0, r7
 8007cb0:	4443      	add	r3, r8
 8007cb2:	f7fc fa85 	bl	80041c0 <LCD_FillRect>
 8007cb6:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8007cba:	f7fc fa23 	bl	8004104 <LCD_SetDrawMode>
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <GUIMONO_DispChar+0x138>)
 8007cc0:	7c61      	ldrb	r1, [r4, #17]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8007cc6:	440b      	add	r3, r1
 8007cc8:	8453      	strh	r3, [r2, #34]	; 0x22
 8007cca:	b00b      	add	sp, #44	; 0x2c
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	24000028 	.word	0x24000028

08007cd4 <GUIMONO_GetCharDistX>:
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <GUIMONO_GetCharDistX+0x14>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	b109      	cbz	r1, 8007ce2 <GUIMONO_GetCharDistX+0xe>
 8007cde:	7c1a      	ldrb	r2, [r3, #16]
 8007ce0:	600a      	str	r2, [r1, #0]
 8007ce2:	7c58      	ldrb	r0, [r3, #17]
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	24000028 	.word	0x24000028

08007cec <GUIMONO_GetFontInfo>:
 8007cec:	2302      	movs	r3, #2
 8007cee:	800b      	strh	r3, [r1, #0]
 8007cf0:	4770      	bx	lr

08007cf2 <GUIMONO_IsInFont>:
 8007cf2:	69c3      	ldr	r3, [r0, #28]
 8007cf4:	899a      	ldrh	r2, [r3, #12]
 8007cf6:	428a      	cmp	r2, r1
 8007cf8:	d802      	bhi.n	8007d00 <GUIMONO_IsInFont+0xe>
 8007cfa:	89da      	ldrh	r2, [r3, #14]
 8007cfc:	428a      	cmp	r2, r1
 8007cfe:	d20f      	bcs.n	8007d20 <GUIMONO_IsInFont+0x2e>
 8007d00:	6898      	ldr	r0, [r3, #8]
 8007d02:	b180      	cbz	r0, 8007d26 <GUIMONO_IsInFont+0x34>
 8007d04:	8803      	ldrh	r3, [r0, #0]
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d30c      	bcc.n	8007d24 <GUIMONO_IsInFont+0x32>
 8007d0a:	8842      	ldrh	r2, [r0, #2]
 8007d0c:	428a      	cmp	r2, r1
 8007d0e:	d309      	bcc.n	8007d24 <GUIMONO_IsInFont+0x32>
 8007d10:	1ac9      	subs	r1, r1, r3
 8007d12:	6843      	ldr	r3, [r0, #4]
 8007d14:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8007d18:	43c0      	mvns	r0, r0
 8007d1a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8007d1e:	4770      	bx	lr
 8007d20:	2001      	movs	r0, #1
 8007d22:	4770      	bx	lr
 8007d24:	2000      	movs	r0, #0
 8007d26:	4770      	bx	lr

08007d28 <GUI__CompactPixelIndices>:
 8007d28:	2a08      	cmp	r2, #8
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	dd0e      	ble.n	8007d4c <GUI__CompactPixelIndices+0x24>
 8007d2e:	2a10      	cmp	r2, #16
 8007d30:	dc0a      	bgt.n	8007d48 <GUI__CompactPixelIndices+0x20>
 8007d32:	4603      	mov	r3, r0
 8007d34:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d3c:	f823 2b02 	strh.w	r2, [r3], #2
 8007d40:	428b      	cmp	r3, r1
 8007d42:	d1f9      	bne.n	8007d38 <GUI__CompactPixelIndices+0x10>
 8007d44:	2001      	movs	r0, #1
 8007d46:	bd10      	pop	{r4, pc}
 8007d48:	2000      	movs	r0, #0
 8007d4a:	bd10      	pop	{r4, pc}
 8007d4c:	2a02      	cmp	r2, #2
 8007d4e:	d12a      	bne.n	8007da6 <GUI__CompactPixelIndices+0x7e>
 8007d50:	4604      	mov	r4, r0
 8007d52:	6803      	ldr	r3, [r0, #0]
 8007d54:	2901      	cmp	r1, #1
 8007d56:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	d020      	beq.n	8007da0 <GUI__CompactPixelIndices+0x78>
 8007d5e:	6842      	ldr	r2, [r0, #4]
 8007d60:	2902      	cmp	r1, #2
 8007d62:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8007d66:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007d6a:	ea43 0302 	orr.w	r3, r3, r2
 8007d6e:	d101      	bne.n	8007d74 <GUI__CompactPixelIndices+0x4c>
 8007d70:	3008      	adds	r0, #8
 8007d72:	e016      	b.n	8007da2 <GUI__CompactPixelIndices+0x7a>
 8007d74:	6882      	ldr	r2, [r0, #8]
 8007d76:	2903      	cmp	r1, #3
 8007d78:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007d7c:	f002 020c 	and.w	r2, r2, #12
 8007d80:	ea43 0302 	orr.w	r3, r3, r2
 8007d84:	d101      	bne.n	8007d8a <GUI__CompactPixelIndices+0x62>
 8007d86:	300c      	adds	r0, #12
 8007d88:	e00b      	b.n	8007da2 <GUI__CompactPixelIndices+0x7a>
 8007d8a:	68c2      	ldr	r2, [r0, #12]
 8007d8c:	3904      	subs	r1, #4
 8007d8e:	3010      	adds	r0, #16
 8007d90:	f002 0203 	and.w	r2, r2, #3
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f804 3b01 	strb.w	r3, [r4], #1
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d1d9      	bne.n	8007d52 <GUI__CompactPixelIndices+0x2a>
 8007d9e:	e7d1      	b.n	8007d44 <GUI__CompactPixelIndices+0x1c>
 8007da0:	3004      	adds	r0, #4
 8007da2:	2100      	movs	r1, #0
 8007da4:	e7f7      	b.n	8007d96 <GUI__CompactPixelIndices+0x6e>
 8007da6:	2a04      	cmp	r2, #4
 8007da8:	d115      	bne.n	8007dd6 <GUI__CompactPixelIndices+0xae>
 8007daa:	4604      	mov	r4, r0
 8007dac:	2901      	cmp	r1, #1
 8007dae:	6803      	ldr	r3, [r0, #0]
 8007db0:	bf18      	it	ne
 8007db2:	6842      	ldrne	r2, [r0, #4]
 8007db4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007db8:	bf0c      	ite	eq
 8007dba:	2100      	moveq	r1, #0
 8007dbc:	3902      	subne	r1, #2
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	bf17      	itett	ne
 8007dc2:	f002 020f 	andne.w	r2, r2, #15
 8007dc6:	3004      	addeq	r0, #4
 8007dc8:	3008      	addne	r0, #8
 8007dca:	4313      	orrne	r3, r2
 8007dcc:	f804 3b01 	strb.w	r3, [r4], #1
 8007dd0:	2900      	cmp	r1, #0
 8007dd2:	d1eb      	bne.n	8007dac <GUI__CompactPixelIndices+0x84>
 8007dd4:	e7b6      	b.n	8007d44 <GUI__CompactPixelIndices+0x1c>
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	4603      	mov	r3, r0
 8007dda:	d154      	bne.n	8007e86 <GUI__CompactPixelIndices+0x15e>
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	2901      	cmp	r1, #1
 8007de0:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	d04b      	beq.n	8007e80 <GUI__CompactPixelIndices+0x158>
 8007de8:	685c      	ldr	r4, [r3, #4]
 8007dea:	2902      	cmp	r1, #2
 8007dec:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8007df0:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8007df4:	ea42 0204 	orr.w	r2, r2, r4
 8007df8:	d101      	bne.n	8007dfe <GUI__CompactPixelIndices+0xd6>
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	e041      	b.n	8007e82 <GUI__CompactPixelIndices+0x15a>
 8007dfe:	689c      	ldr	r4, [r3, #8]
 8007e00:	2903      	cmp	r1, #3
 8007e02:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8007e06:	f004 0420 	and.w	r4, r4, #32
 8007e0a:	ea42 0204 	orr.w	r2, r2, r4
 8007e0e:	d101      	bne.n	8007e14 <GUI__CompactPixelIndices+0xec>
 8007e10:	330c      	adds	r3, #12
 8007e12:	e036      	b.n	8007e82 <GUI__CompactPixelIndices+0x15a>
 8007e14:	68dc      	ldr	r4, [r3, #12]
 8007e16:	2904      	cmp	r1, #4
 8007e18:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8007e1c:	f004 0410 	and.w	r4, r4, #16
 8007e20:	ea42 0204 	orr.w	r2, r2, r4
 8007e24:	d101      	bne.n	8007e2a <GUI__CompactPixelIndices+0x102>
 8007e26:	3310      	adds	r3, #16
 8007e28:	e02b      	b.n	8007e82 <GUI__CompactPixelIndices+0x15a>
 8007e2a:	691c      	ldr	r4, [r3, #16]
 8007e2c:	2905      	cmp	r1, #5
 8007e2e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8007e32:	f004 0408 	and.w	r4, r4, #8
 8007e36:	ea42 0204 	orr.w	r2, r2, r4
 8007e3a:	d101      	bne.n	8007e40 <GUI__CompactPixelIndices+0x118>
 8007e3c:	3314      	adds	r3, #20
 8007e3e:	e020      	b.n	8007e82 <GUI__CompactPixelIndices+0x15a>
 8007e40:	695c      	ldr	r4, [r3, #20]
 8007e42:	2906      	cmp	r1, #6
 8007e44:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8007e48:	f004 0404 	and.w	r4, r4, #4
 8007e4c:	ea42 0204 	orr.w	r2, r2, r4
 8007e50:	d101      	bne.n	8007e56 <GUI__CompactPixelIndices+0x12e>
 8007e52:	3318      	adds	r3, #24
 8007e54:	e015      	b.n	8007e82 <GUI__CompactPixelIndices+0x15a>
 8007e56:	699c      	ldr	r4, [r3, #24]
 8007e58:	3907      	subs	r1, #7
 8007e5a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007e5e:	bf08      	it	eq
 8007e60:	331c      	addeq	r3, #28
 8007e62:	f004 0402 	and.w	r4, r4, #2
 8007e66:	ea42 0204 	orr.w	r2, r2, r4
 8007e6a:	bf1f      	itttt	ne
 8007e6c:	69dc      	ldrne	r4, [r3, #28]
 8007e6e:	3320      	addne	r3, #32
 8007e70:	f004 0401 	andne.w	r4, r4, #1
 8007e74:	4322      	orrne	r2, r4
 8007e76:	f800 2b01 	strb.w	r2, [r0], #1
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	d1ae      	bne.n	8007ddc <GUI__CompactPixelIndices+0xb4>
 8007e7e:	e761      	b.n	8007d44 <GUI__CompactPixelIndices+0x1c>
 8007e80:	3304      	adds	r3, #4
 8007e82:	2100      	movs	r1, #0
 8007e84:	e7f7      	b.n	8007e76 <GUI__CompactPixelIndices+0x14e>
 8007e86:	4401      	add	r1, r0
 8007e88:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e8c:	f803 2b01 	strb.w	r2, [r3], #1
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d1f9      	bne.n	8007e88 <GUI__CompactPixelIndices+0x160>
 8007e94:	e756      	b.n	8007d44 <GUI__CompactPixelIndices+0x1c>
	...

08007e98 <LCD_SetClipRectEx>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	4c09      	ldr	r4, [pc, #36]	; (8007ec0 <LCD_SetClipRectEx+0x28>)
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	4669      	mov	r1, sp
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	7c5a      	ldrb	r2, [r3, #17]
 8007ea4:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <LCD_SetClipRectEx+0x2c>)
 8007ea6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007eaa:	68c3      	ldr	r3, [r0, #12]
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	4798      	blx	r3
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	466a      	mov	r2, sp
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	3008      	adds	r0, #8
 8007eb8:	f7fc f885 	bl	8003fc6 <GUI__IntersectRects>
 8007ebc:	b003      	add	sp, #12
 8007ebe:	bd30      	pop	{r4, r5, pc}
 8007ec0:	24000028 	.word	0x24000028
 8007ec4:	2402d67c 	.word	0x2402d67c

08007ec8 <GUI_MEMDEV_GetBitsPerPixel>:
 8007ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eca:	4604      	mov	r4, r0
 8007ecc:	b170      	cbz	r0, 8007eec <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8007ece:	f7fb fa77 	bl	80033c0 <GUI_ALLOC_LockH>
 8007ed2:	6803      	ldr	r3, [r0, #0]
 8007ed4:	ad02      	add	r5, sp, #8
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4798      	blx	r3
 8007ee0:	f7fc fdd3 	bl	8004a8a <LCD__GetBPPDevice>
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7fb fa78 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007eec:	4620      	mov	r0, r4
 8007eee:	b003      	add	sp, #12
 8007ef0:	bd30      	pop	{r4, r5, pc}
	...

08007ef4 <GUI_MEMDEV_Delete>:
 8007ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	b1d0      	cbz	r0, 8007f30 <GUI_MEMDEV_Delete+0x3c>
 8007efa:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <GUI_MEMDEV_Delete+0x40>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f00:	4298      	cmp	r0, r3
 8007f02:	d101      	bne.n	8007f08 <GUI_MEMDEV_Delete+0x14>
 8007f04:	f7fb fd1f 	bl	8003946 <GUI_SelectLCD>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7fb fa59 	bl	80033c0 <GUI_ALLOC_LockH>
 8007f0e:	9001      	str	r0, [sp, #4]
 8007f10:	6940      	ldr	r0, [r0, #20]
 8007f12:	b108      	cbz	r0, 8007f18 <GUI_MEMDEV_Delete+0x24>
 8007f14:	f7fe fabe 	bl	8006494 <GUI_USAGE_DecUseCnt>
 8007f18:	ad02      	add	r5, sp, #8
 8007f1a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	f7fb ff10 	bl	8003d44 <GUI_DEVICE_Delete>
 8007f24:	4628      	mov	r0, r5
 8007f26:	f7fb fa59 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7fb fa76 	bl	800341c <GUI_ALLOC_Free>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	24000028 	.word	0x24000028

08007f38 <GUI_MEMDEV_GetDataPtr>:
 8007f38:	b513      	push	{r0, r1, r4, lr}
 8007f3a:	b158      	cbz	r0, 8007f54 <GUI_MEMDEV_GetDataPtr+0x1c>
 8007f3c:	f7fb fa40 	bl	80033c0 <GUI_ALLOC_LockH>
 8007f40:	ab02      	add	r3, sp, #8
 8007f42:	f100 0418 	add.w	r4, r0, #24
 8007f46:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fb fa46 	bl	80033dc <GUI_ALLOC_UnlockH>
 8007f50:	4620      	mov	r0, r4
 8007f52:	e7ff      	b.n	8007f54 <GUI_MEMDEV_GetDataPtr+0x1c>
 8007f54:	b002      	add	sp, #8
 8007f56:	bd10      	pop	{r4, pc}

08007f58 <__libc_init_array>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	4e0d      	ldr	r6, [pc, #52]	; (8007f90 <__libc_init_array+0x38>)
 8007f5c:	4c0d      	ldr	r4, [pc, #52]	; (8007f94 <__libc_init_array+0x3c>)
 8007f5e:	1ba4      	subs	r4, r4, r6
 8007f60:	10a4      	asrs	r4, r4, #2
 8007f62:	2500      	movs	r5, #0
 8007f64:	42a5      	cmp	r5, r4
 8007f66:	d109      	bne.n	8007f7c <__libc_init_array+0x24>
 8007f68:	4e0b      	ldr	r6, [pc, #44]	; (8007f98 <__libc_init_array+0x40>)
 8007f6a:	4c0c      	ldr	r4, [pc, #48]	; (8007f9c <__libc_init_array+0x44>)
 8007f6c:	f000 fe6a 	bl	8008c44 <_init>
 8007f70:	1ba4      	subs	r4, r4, r6
 8007f72:	10a4      	asrs	r4, r4, #2
 8007f74:	2500      	movs	r5, #0
 8007f76:	42a5      	cmp	r5, r4
 8007f78:	d105      	bne.n	8007f86 <__libc_init_array+0x2e>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f80:	4798      	blx	r3
 8007f82:	3501      	adds	r5, #1
 8007f84:	e7ee      	b.n	8007f64 <__libc_init_array+0xc>
 8007f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f8a:	4798      	blx	r3
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	e7f2      	b.n	8007f76 <__libc_init_array+0x1e>
 8007f90:	08009b00 	.word	0x08009b00
 8007f94:	08009b00 	.word	0x08009b00
 8007f98:	08009b00 	.word	0x08009b00
 8007f9c:	08009b04 	.word	0x08009b04

08007fa0 <memcpy>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	1e43      	subs	r3, r0, #1
 8007fa4:	440a      	add	r2, r1
 8007fa6:	4291      	cmp	r1, r2
 8007fa8:	d100      	bne.n	8007fac <memcpy+0xc>
 8007faa:	bd10      	pop	{r4, pc}
 8007fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb4:	e7f7      	b.n	8007fa6 <memcpy+0x6>

08007fb6 <memmove>:
 8007fb6:	4288      	cmp	r0, r1
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	eb01 0302 	add.w	r3, r1, r2
 8007fbe:	d807      	bhi.n	8007fd0 <memmove+0x1a>
 8007fc0:	1e42      	subs	r2, r0, #1
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	d00a      	beq.n	8007fdc <memmove+0x26>
 8007fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fce:	e7f8      	b.n	8007fc2 <memmove+0xc>
 8007fd0:	4283      	cmp	r3, r0
 8007fd2:	d9f5      	bls.n	8007fc0 <memmove+0xa>
 8007fd4:	1881      	adds	r1, r0, r2
 8007fd6:	1ad2      	subs	r2, r2, r3
 8007fd8:	42d3      	cmn	r3, r2
 8007fda:	d100      	bne.n	8007fde <memmove+0x28>
 8007fdc:	bd10      	pop	{r4, pc}
 8007fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fe2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fe6:	e7f7      	b.n	8007fd8 <memmove+0x22>

08007fe8 <memset>:
 8007fe8:	4402      	add	r2, r0
 8007fea:	4603      	mov	r3, r0
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d100      	bne.n	8007ff2 <memset+0xa>
 8007ff0:	4770      	bx	lr
 8007ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff6:	e7f9      	b.n	8007fec <memset+0x4>

08007ff8 <cos>:
 8007ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8007ffe:	ee17 3a90 	vmov	r3, s15
 8008002:	4a19      	ldr	r2, [pc, #100]	; (8008068 <cos+0x70>)
 8008004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008008:	4293      	cmp	r3, r2
 800800a:	dc04      	bgt.n	8008016 <cos+0x1e>
 800800c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8008060 <cos+0x68>
 8008010:	f000 fa1e 	bl	8008450 <__kernel_cos>
 8008014:	e004      	b.n	8008020 <cos+0x28>
 8008016:	4a15      	ldr	r2, [pc, #84]	; (800806c <cos+0x74>)
 8008018:	4293      	cmp	r3, r2
 800801a:	dd04      	ble.n	8008026 <cos+0x2e>
 800801c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008020:	b005      	add	sp, #20
 8008022:	f85d fb04 	ldr.w	pc, [sp], #4
 8008026:	4668      	mov	r0, sp
 8008028:	f000 f8d6 	bl	80081d8 <__ieee754_rem_pio2>
 800802c:	f000 0003 	and.w	r0, r0, #3
 8008030:	2801      	cmp	r0, #1
 8008032:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008036:	ed9d 0b00 	vldr	d0, [sp]
 800803a:	d007      	beq.n	800804c <cos+0x54>
 800803c:	2802      	cmp	r0, #2
 800803e:	d00a      	beq.n	8008056 <cos+0x5e>
 8008040:	2800      	cmp	r0, #0
 8008042:	d0e5      	beq.n	8008010 <cos+0x18>
 8008044:	2001      	movs	r0, #1
 8008046:	f000 fd0b 	bl	8008a60 <__kernel_sin>
 800804a:	e7e9      	b.n	8008020 <cos+0x28>
 800804c:	f000 fd08 	bl	8008a60 <__kernel_sin>
 8008050:	eeb1 0b40 	vneg.f64	d0, d0
 8008054:	e7e4      	b.n	8008020 <cos+0x28>
 8008056:	f000 f9fb 	bl	8008450 <__kernel_cos>
 800805a:	e7f9      	b.n	8008050 <cos+0x58>
 800805c:	f3af 8000 	nop.w
	...
 8008068:	3fe921fb 	.word	0x3fe921fb
 800806c:	7fefffff 	.word	0x7fefffff

08008070 <floor>:
 8008070:	ee10 1a90 	vmov	r1, s1
 8008074:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008078:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800807c:	2b13      	cmp	r3, #19
 800807e:	b530      	push	{r4, r5, lr}
 8008080:	ee10 0a10 	vmov	r0, s0
 8008084:	ee10 5a10 	vmov	r5, s0
 8008088:	dc33      	bgt.n	80080f2 <floor+0x82>
 800808a:	2b00      	cmp	r3, #0
 800808c:	da17      	bge.n	80080be <floor+0x4e>
 800808e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008150 <floor+0xe0>
 8008092:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008096:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809e:	dd09      	ble.n	80080b4 <floor+0x44>
 80080a0:	2900      	cmp	r1, #0
 80080a2:	da50      	bge.n	8008146 <floor+0xd6>
 80080a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080a8:	4a2b      	ldr	r2, [pc, #172]	; (8008158 <floor+0xe8>)
 80080aa:	4303      	orrs	r3, r0
 80080ac:	2000      	movs	r0, #0
 80080ae:	4283      	cmp	r3, r0
 80080b0:	bf18      	it	ne
 80080b2:	4611      	movne	r1, r2
 80080b4:	460b      	mov	r3, r1
 80080b6:	4602      	mov	r2, r0
 80080b8:	ec43 2b10 	vmov	d0, r2, r3
 80080bc:	e020      	b.n	8008100 <floor+0x90>
 80080be:	4a27      	ldr	r2, [pc, #156]	; (800815c <floor+0xec>)
 80080c0:	411a      	asrs	r2, r3
 80080c2:	ea01 0402 	and.w	r4, r1, r2
 80080c6:	4304      	orrs	r4, r0
 80080c8:	d01a      	beq.n	8008100 <floor+0x90>
 80080ca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008150 <floor+0xe0>
 80080ce:	ee30 0b07 	vadd.f64	d0, d0, d7
 80080d2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80080d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080da:	ddeb      	ble.n	80080b4 <floor+0x44>
 80080dc:	2900      	cmp	r1, #0
 80080de:	bfbe      	ittt	lt
 80080e0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80080e4:	fa40 f303 	asrlt.w	r3, r0, r3
 80080e8:	18c9      	addlt	r1, r1, r3
 80080ea:	ea21 0102 	bic.w	r1, r1, r2
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7e0      	b.n	80080b4 <floor+0x44>
 80080f2:	2b33      	cmp	r3, #51	; 0x33
 80080f4:	dd05      	ble.n	8008102 <floor+0x92>
 80080f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fa:	d101      	bne.n	8008100 <floor+0x90>
 80080fc:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008100:	bd30      	pop	{r4, r5, pc}
 8008102:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	40e2      	lsrs	r2, r4
 800810c:	4202      	tst	r2, r0
 800810e:	d0f7      	beq.n	8008100 <floor+0x90>
 8008110:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8008150 <floor+0xe0>
 8008114:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008118:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800811c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008120:	ddc8      	ble.n	80080b4 <floor+0x44>
 8008122:	2900      	cmp	r1, #0
 8008124:	da02      	bge.n	800812c <floor+0xbc>
 8008126:	2b14      	cmp	r3, #20
 8008128:	d103      	bne.n	8008132 <floor+0xc2>
 800812a:	3101      	adds	r1, #1
 800812c:	ea20 0002 	bic.w	r0, r0, r2
 8008130:	e7c0      	b.n	80080b4 <floor+0x44>
 8008132:	2401      	movs	r4, #1
 8008134:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008138:	fa04 f303 	lsl.w	r3, r4, r3
 800813c:	4418      	add	r0, r3
 800813e:	42a8      	cmp	r0, r5
 8008140:	bf38      	it	cc
 8008142:	1909      	addcc	r1, r1, r4
 8008144:	e7f2      	b.n	800812c <floor+0xbc>
 8008146:	2000      	movs	r0, #0
 8008148:	4601      	mov	r1, r0
 800814a:	e7b3      	b.n	80080b4 <floor+0x44>
 800814c:	f3af 8000 	nop.w
 8008150:	8800759c 	.word	0x8800759c
 8008154:	7e37e43c 	.word	0x7e37e43c
 8008158:	bff00000 	.word	0xbff00000
 800815c:	000fffff 	.word	0x000fffff

08008160 <sin>:
 8008160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008162:	eeb0 7b40 	vmov.f64	d7, d0
 8008166:	ee17 3a90 	vmov	r3, s15
 800816a:	4a19      	ldr	r2, [pc, #100]	; (80081d0 <sin+0x70>)
 800816c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008170:	4293      	cmp	r3, r2
 8008172:	dc05      	bgt.n	8008180 <sin+0x20>
 8008174:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80081c8 <sin+0x68>
 8008178:	2000      	movs	r0, #0
 800817a:	f000 fc71 	bl	8008a60 <__kernel_sin>
 800817e:	e004      	b.n	800818a <sin+0x2a>
 8008180:	4a14      	ldr	r2, [pc, #80]	; (80081d4 <sin+0x74>)
 8008182:	4293      	cmp	r3, r2
 8008184:	dd04      	ble.n	8008190 <sin+0x30>
 8008186:	ee30 0b40 	vsub.f64	d0, d0, d0
 800818a:	b005      	add	sp, #20
 800818c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008190:	4668      	mov	r0, sp
 8008192:	f000 f821 	bl	80081d8 <__ieee754_rem_pio2>
 8008196:	f000 0003 	and.w	r0, r0, #3
 800819a:	2801      	cmp	r0, #1
 800819c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081a0:	ed9d 0b00 	vldr	d0, [sp]
 80081a4:	d004      	beq.n	80081b0 <sin+0x50>
 80081a6:	2802      	cmp	r0, #2
 80081a8:	d005      	beq.n	80081b6 <sin+0x56>
 80081aa:	b950      	cbnz	r0, 80081c2 <sin+0x62>
 80081ac:	2001      	movs	r0, #1
 80081ae:	e7e4      	b.n	800817a <sin+0x1a>
 80081b0:	f000 f94e 	bl	8008450 <__kernel_cos>
 80081b4:	e7e9      	b.n	800818a <sin+0x2a>
 80081b6:	2001      	movs	r0, #1
 80081b8:	f000 fc52 	bl	8008a60 <__kernel_sin>
 80081bc:	eeb1 0b40 	vneg.f64	d0, d0
 80081c0:	e7e3      	b.n	800818a <sin+0x2a>
 80081c2:	f000 f945 	bl	8008450 <__kernel_cos>
 80081c6:	e7f9      	b.n	80081bc <sin+0x5c>
	...
 80081d0:	3fe921fb 	.word	0x3fe921fb
 80081d4:	7fefffff 	.word	0x7fefffff

080081d8 <__ieee754_rem_pio2>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	eeb0 7b40 	vmov.f64	d7, d0
 80081de:	ee17 5a90 	vmov	r5, s15
 80081e2:	4b95      	ldr	r3, [pc, #596]	; (8008438 <__ieee754_rem_pio2+0x260>)
 80081e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80081e8:	429e      	cmp	r6, r3
 80081ea:	b088      	sub	sp, #32
 80081ec:	4604      	mov	r4, r0
 80081ee:	dc07      	bgt.n	8008200 <__ieee754_rem_pio2+0x28>
 80081f0:	2200      	movs	r2, #0
 80081f2:	2300      	movs	r3, #0
 80081f4:	ed84 0b00 	vstr	d0, [r4]
 80081f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80081fc:	2000      	movs	r0, #0
 80081fe:	e01b      	b.n	8008238 <__ieee754_rem_pio2+0x60>
 8008200:	4b8e      	ldr	r3, [pc, #568]	; (800843c <__ieee754_rem_pio2+0x264>)
 8008202:	429e      	cmp	r6, r3
 8008204:	dc3b      	bgt.n	800827e <__ieee754_rem_pio2+0xa6>
 8008206:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800820a:	2d00      	cmp	r5, #0
 800820c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80083f8 <__ieee754_rem_pio2+0x220>
 8008210:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008214:	dd19      	ble.n	800824a <__ieee754_rem_pio2+0x72>
 8008216:	ee30 7b46 	vsub.f64	d7, d0, d6
 800821a:	429e      	cmp	r6, r3
 800821c:	d00e      	beq.n	800823c <__ieee754_rem_pio2+0x64>
 800821e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8008400 <__ieee754_rem_pio2+0x228>
 8008222:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008226:	ee37 7b45 	vsub.f64	d7, d7, d5
 800822a:	ed84 5b00 	vstr	d5, [r4]
 800822e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008232:	ed84 7b02 	vstr	d7, [r4, #8]
 8008236:	2001      	movs	r0, #1
 8008238:	b008      	add	sp, #32
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8008408 <__ieee754_rem_pio2+0x230>
 8008240:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008244:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8008410 <__ieee754_rem_pio2+0x238>
 8008248:	e7eb      	b.n	8008222 <__ieee754_rem_pio2+0x4a>
 800824a:	429e      	cmp	r6, r3
 800824c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008250:	d00e      	beq.n	8008270 <__ieee754_rem_pio2+0x98>
 8008252:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8008400 <__ieee754_rem_pio2+0x228>
 8008256:	ee37 5b06 	vadd.f64	d5, d7, d6
 800825a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800825e:	ed84 5b00 	vstr	d5, [r4]
 8008262:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008266:	f04f 30ff 	mov.w	r0, #4294967295
 800826a:	ed84 7b02 	vstr	d7, [r4, #8]
 800826e:	e7e3      	b.n	8008238 <__ieee754_rem_pio2+0x60>
 8008270:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8008408 <__ieee754_rem_pio2+0x230>
 8008274:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008278:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8008410 <__ieee754_rem_pio2+0x238>
 800827c:	e7eb      	b.n	8008256 <__ieee754_rem_pio2+0x7e>
 800827e:	4b70      	ldr	r3, [pc, #448]	; (8008440 <__ieee754_rem_pio2+0x268>)
 8008280:	429e      	cmp	r6, r3
 8008282:	dc6c      	bgt.n	800835e <__ieee754_rem_pio2+0x186>
 8008284:	f000 fc44 	bl	8008b10 <fabs>
 8008288:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800828c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8008418 <__ieee754_rem_pio2+0x240>
 8008290:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008294:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008298:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800829c:	ee17 0a90 	vmov	r0, s15
 80082a0:	eeb1 5b44 	vneg.f64	d5, d4
 80082a4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80083f8 <__ieee754_rem_pio2+0x220>
 80082a8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80082ac:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8008400 <__ieee754_rem_pio2+0x228>
 80082b0:	281f      	cmp	r0, #31
 80082b2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80082b6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80082ba:	dc08      	bgt.n	80082ce <__ieee754_rem_pio2+0xf6>
 80082bc:	1e42      	subs	r2, r0, #1
 80082be:	4b61      	ldr	r3, [pc, #388]	; (8008444 <__ieee754_rem_pio2+0x26c>)
 80082c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c4:	42b3      	cmp	r3, r6
 80082c6:	d002      	beq.n	80082ce <__ieee754_rem_pio2+0xf6>
 80082c8:	ed84 6b00 	vstr	d6, [r4]
 80082cc:	e022      	b.n	8008314 <__ieee754_rem_pio2+0x13c>
 80082ce:	ee16 3a90 	vmov	r3, s13
 80082d2:	1536      	asrs	r6, r6, #20
 80082d4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80082d8:	1af3      	subs	r3, r6, r3
 80082da:	2b10      	cmp	r3, #16
 80082dc:	ddf4      	ble.n	80082c8 <__ieee754_rem_pio2+0xf0>
 80082de:	eeb0 6b40 	vmov.f64	d6, d0
 80082e2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8008408 <__ieee754_rem_pio2+0x230>
 80082e6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80082ea:	ee30 7b46 	vsub.f64	d7, d0, d6
 80082ee:	eea5 7b03 	vfma.f64	d7, d5, d3
 80082f2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8008410 <__ieee754_rem_pio2+0x238>
 80082f6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80082fa:	ee36 3b47 	vsub.f64	d3, d6, d7
 80082fe:	ee13 3a90 	vmov	r3, s7
 8008302:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008306:	1af6      	subs	r6, r6, r3
 8008308:	2e31      	cmp	r6, #49	; 0x31
 800830a:	dc17      	bgt.n	800833c <__ieee754_rem_pio2+0x164>
 800830c:	eeb0 0b46 	vmov.f64	d0, d6
 8008310:	ed84 3b00 	vstr	d3, [r4]
 8008314:	ed94 6b00 	vldr	d6, [r4]
 8008318:	2d00      	cmp	r5, #0
 800831a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800831e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8008322:	ed84 7b02 	vstr	d7, [r4, #8]
 8008326:	da87      	bge.n	8008238 <__ieee754_rem_pio2+0x60>
 8008328:	eeb1 6b46 	vneg.f64	d6, d6
 800832c:	ed84 6b00 	vstr	d6, [r4]
 8008330:	eeb1 7b47 	vneg.f64	d7, d7
 8008334:	4240      	negs	r0, r0
 8008336:	ed84 7b02 	vstr	d7, [r4, #8]
 800833a:	e77d      	b.n	8008238 <__ieee754_rem_pio2+0x60>
 800833c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8008420 <__ieee754_rem_pio2+0x248>
 8008340:	eeb0 0b46 	vmov.f64	d0, d6
 8008344:	eea5 0b03 	vfma.f64	d0, d5, d3
 8008348:	ee36 7b40 	vsub.f64	d7, d6, d0
 800834c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8008428 <__ieee754_rem_pio2+0x250>
 8008350:	eea5 7b03 	vfma.f64	d7, d5, d3
 8008354:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8008358:	ee30 6b47 	vsub.f64	d6, d0, d7
 800835c:	e7b4      	b.n	80082c8 <__ieee754_rem_pio2+0xf0>
 800835e:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <__ieee754_rem_pio2+0x270>)
 8008360:	429e      	cmp	r6, r3
 8008362:	dd06      	ble.n	8008372 <__ieee754_rem_pio2+0x19a>
 8008364:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008368:	ed80 7b02 	vstr	d7, [r0, #8]
 800836c:	ed80 7b00 	vstr	d7, [r0]
 8008370:	e744      	b.n	80081fc <__ieee754_rem_pio2+0x24>
 8008372:	1532      	asrs	r2, r6, #20
 8008374:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008378:	ee10 0a10 	vmov	r0, s0
 800837c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008380:	ec41 0b17 	vmov	d7, r0, r1
 8008384:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008388:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8008430 <__ieee754_rem_pio2+0x258>
 800838c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008390:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008394:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008398:	ee27 7b05 	vmul.f64	d7, d7, d5
 800839c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80083a0:	a908      	add	r1, sp, #32
 80083a2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80083a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80083aa:	ed8d 6b04 	vstr	d6, [sp, #16]
 80083ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80083b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80083b6:	2303      	movs	r3, #3
 80083b8:	ed31 7b02 	vldmdb	r1!, {d7}
 80083bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80083c8:	d013      	beq.n	80083f2 <__ieee754_rem_pio2+0x21a>
 80083ca:	4920      	ldr	r1, [pc, #128]	; (800844c <__ieee754_rem_pio2+0x274>)
 80083cc:	9101      	str	r1, [sp, #4]
 80083ce:	2102      	movs	r1, #2
 80083d0:	9100      	str	r1, [sp, #0]
 80083d2:	a802      	add	r0, sp, #8
 80083d4:	4621      	mov	r1, r4
 80083d6:	f000 f8a7 	bl	8008528 <__kernel_rem_pio2>
 80083da:	2d00      	cmp	r5, #0
 80083dc:	f6bf af2c 	bge.w	8008238 <__ieee754_rem_pio2+0x60>
 80083e0:	ed94 7b00 	vldr	d7, [r4]
 80083e4:	eeb1 7b47 	vneg.f64	d7, d7
 80083e8:	ed84 7b00 	vstr	d7, [r4]
 80083ec:	ed94 7b02 	vldr	d7, [r4, #8]
 80083f0:	e79e      	b.n	8008330 <__ieee754_rem_pio2+0x158>
 80083f2:	4603      	mov	r3, r0
 80083f4:	e7e0      	b.n	80083b8 <__ieee754_rem_pio2+0x1e0>
 80083f6:	bf00      	nop
 80083f8:	54400000 	.word	0x54400000
 80083fc:	3ff921fb 	.word	0x3ff921fb
 8008400:	1a626331 	.word	0x1a626331
 8008404:	3dd0b461 	.word	0x3dd0b461
 8008408:	1a600000 	.word	0x1a600000
 800840c:	3dd0b461 	.word	0x3dd0b461
 8008410:	2e037073 	.word	0x2e037073
 8008414:	3ba3198a 	.word	0x3ba3198a
 8008418:	6dc9c883 	.word	0x6dc9c883
 800841c:	3fe45f30 	.word	0x3fe45f30
 8008420:	2e000000 	.word	0x2e000000
 8008424:	3ba3198a 	.word	0x3ba3198a
 8008428:	252049c1 	.word	0x252049c1
 800842c:	397b839a 	.word	0x397b839a
 8008430:	00000000 	.word	0x00000000
 8008434:	41700000 	.word	0x41700000
 8008438:	3fe921fb 	.word	0x3fe921fb
 800843c:	4002d97b 	.word	0x4002d97b
 8008440:	413921fb 	.word	0x413921fb
 8008444:	08009928 	.word	0x08009928
 8008448:	7fefffff 	.word	0x7fefffff
 800844c:	080099a8 	.word	0x080099a8

08008450 <__kernel_cos>:
 8008450:	ee10 1a90 	vmov	r1, s1
 8008454:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008458:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800845c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008460:	da05      	bge.n	800846e <__kernel_cos+0x1e>
 8008462:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8008466:	ee16 3a90 	vmov	r3, s13
 800846a:	2b00      	cmp	r3, #0
 800846c:	d03d      	beq.n	80084ea <__kernel_cos+0x9a>
 800846e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8008472:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008476:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80084f0 <__kernel_cos+0xa0>
 800847a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800847e:	ee24 6b06 	vmul.f64	d6, d4, d6
 8008482:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80084f8 <__kernel_cos+0xa8>
 8008486:	eea4 5b03 	vfma.f64	d5, d4, d3
 800848a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8008500 <__kernel_cos+0xb0>
 800848e:	eea5 3b04 	vfma.f64	d3, d5, d4
 8008492:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8008508 <__kernel_cos+0xb8>
 8008496:	eea3 5b04 	vfma.f64	d5, d3, d4
 800849a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8008510 <__kernel_cos+0xc0>
 800849e:	4b20      	ldr	r3, [pc, #128]	; (8008520 <__kernel_cos+0xd0>)
 80084a0:	eea5 3b04 	vfma.f64	d3, d5, d4
 80084a4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8008518 <__kernel_cos+0xc8>
 80084a8:	4299      	cmp	r1, r3
 80084aa:	eea3 5b04 	vfma.f64	d5, d3, d4
 80084ae:	ee25 5b04 	vmul.f64	d5, d5, d4
 80084b2:	eea4 1b05 	vfma.f64	d1, d4, d5
 80084b6:	dc04      	bgt.n	80084c2 <__kernel_cos+0x72>
 80084b8:	ee36 6b41 	vsub.f64	d6, d6, d1
 80084bc:	ee37 0b46 	vsub.f64	d0, d7, d6
 80084c0:	4770      	bx	lr
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <__kernel_cos+0xd4>)
 80084c4:	4299      	cmp	r1, r3
 80084c6:	dc0d      	bgt.n	80084e4 <__kernel_cos+0x94>
 80084c8:	2200      	movs	r2, #0
 80084ca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80084ce:	ec43 2b15 	vmov	d5, r2, r3
 80084d2:	ee37 0b45 	vsub.f64	d0, d7, d5
 80084d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084da:	ee36 6b41 	vsub.f64	d6, d6, d1
 80084de:	ee30 0b46 	vsub.f64	d0, d0, d6
 80084e2:	4770      	bx	lr
 80084e4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80084e8:	e7f3      	b.n	80084d2 <__kernel_cos+0x82>
 80084ea:	eeb0 0b47 	vmov.f64	d0, d7
 80084ee:	4770      	bx	lr
 80084f0:	be8838d4 	.word	0xbe8838d4
 80084f4:	bda8fae9 	.word	0xbda8fae9
 80084f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80084fc:	3e21ee9e 	.word	0x3e21ee9e
 8008500:	809c52ad 	.word	0x809c52ad
 8008504:	be927e4f 	.word	0xbe927e4f
 8008508:	19cb1590 	.word	0x19cb1590
 800850c:	3efa01a0 	.word	0x3efa01a0
 8008510:	16c15177 	.word	0x16c15177
 8008514:	bf56c16c 	.word	0xbf56c16c
 8008518:	5555554c 	.word	0x5555554c
 800851c:	3fa55555 	.word	0x3fa55555
 8008520:	3fd33332 	.word	0x3fd33332
 8008524:	3fe90000 	.word	0x3fe90000

08008528 <__kernel_rem_pio2>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	ed2d 8b06 	vpush	{d8-d10}
 8008530:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008534:	469b      	mov	fp, r3
 8008536:	460e      	mov	r6, r1
 8008538:	4bc7      	ldr	r3, [pc, #796]	; (8008858 <__kernel_rem_pio2+0x330>)
 800853a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800853c:	9002      	str	r0, [sp, #8]
 800853e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008542:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8008544:	1ed1      	subs	r1, r2, #3
 8008546:	2318      	movs	r3, #24
 8008548:	f06f 0417 	mvn.w	r4, #23
 800854c:	fb91 f1f3 	sdiv	r1, r1, r3
 8008550:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008554:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008558:	fb01 4404 	mla	r4, r1, r4, r4
 800855c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8008840 <__kernel_rem_pio2+0x318>
 8008560:	4414      	add	r4, r2
 8008562:	eba1 050a 	sub.w	r5, r1, sl
 8008566:	aa1a      	add	r2, sp, #104	; 0x68
 8008568:	eb09 070a 	add.w	r7, r9, sl
 800856c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008570:	4696      	mov	lr, r2
 8008572:	2300      	movs	r3, #0
 8008574:	42bb      	cmp	r3, r7
 8008576:	dd0f      	ble.n	8008598 <__kernel_rem_pio2+0x70>
 8008578:	af6a      	add	r7, sp, #424	; 0x1a8
 800857a:	2200      	movs	r2, #0
 800857c:	454a      	cmp	r2, r9
 800857e:	dc28      	bgt.n	80085d2 <__kernel_rem_pio2+0xaa>
 8008580:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008584:	eb0b 0302 	add.w	r3, fp, r2
 8008588:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800858c:	9d02      	ldr	r5, [sp, #8]
 800858e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8008840 <__kernel_rem_pio2+0x318>
 8008592:	f04f 0c00 	mov.w	ip, #0
 8008596:	e016      	b.n	80085c6 <__kernel_rem_pio2+0x9e>
 8008598:	42dd      	cmn	r5, r3
 800859a:	d409      	bmi.n	80085b0 <__kernel_rem_pio2+0x88>
 800859c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80085a0:	ee07 2a90 	vmov	s15, r2
 80085a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085a8:	ecae 7b02 	vstmia	lr!, {d7}
 80085ac:	3301      	adds	r3, #1
 80085ae:	e7e1      	b.n	8008574 <__kernel_rem_pio2+0x4c>
 80085b0:	eeb0 7b46 	vmov.f64	d7, d6
 80085b4:	e7f8      	b.n	80085a8 <__kernel_rem_pio2+0x80>
 80085b6:	ecb5 5b02 	vldmia	r5!, {d5}
 80085ba:	ed33 6b02 	vldmdb	r3!, {d6}
 80085be:	f10c 0c01 	add.w	ip, ip, #1
 80085c2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80085c6:	45d4      	cmp	ip, sl
 80085c8:	ddf5      	ble.n	80085b6 <__kernel_rem_pio2+0x8e>
 80085ca:	eca7 7b02 	vstmia	r7!, {d7}
 80085ce:	3201      	adds	r2, #1
 80085d0:	e7d4      	b.n	800857c <__kernel_rem_pio2+0x54>
 80085d2:	ab06      	add	r3, sp, #24
 80085d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80085d8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8008848 <__kernel_rem_pio2+0x320>
 80085dc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8008850 <__kernel_rem_pio2+0x328>
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80085e6:	9303      	str	r3, [sp, #12]
 80085e8:	464d      	mov	r5, r9
 80085ea:	ab92      	add	r3, sp, #584	; 0x248
 80085ec:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 80085f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80085f4:	3f01      	subs	r7, #1
 80085f6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80085fa:	00ff      	lsls	r7, r7, #3
 80085fc:	ab92      	add	r3, sp, #584	; 0x248
 80085fe:	19da      	adds	r2, r3, r7
 8008600:	3a98      	subs	r2, #152	; 0x98
 8008602:	2300      	movs	r3, #0
 8008604:	1ae9      	subs	r1, r5, r3
 8008606:	2900      	cmp	r1, #0
 8008608:	dc4e      	bgt.n	80086a8 <__kernel_rem_pio2+0x180>
 800860a:	4620      	mov	r0, r4
 800860c:	f000 fa8c 	bl	8008b28 <scalbn>
 8008610:	eeb0 8b40 	vmov.f64	d8, d0
 8008614:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008618:	ee28 0b00 	vmul.f64	d0, d8, d0
 800861c:	f7ff fd28 	bl	8008070 <floor>
 8008620:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008624:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008628:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800862c:	2c00      	cmp	r4, #0
 800862e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008632:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008636:	ee38 8b47 	vsub.f64	d8, d8, d7
 800863a:	dd4a      	ble.n	80086d2 <__kernel_rem_pio2+0x1aa>
 800863c:	1e69      	subs	r1, r5, #1
 800863e:	ab06      	add	r3, sp, #24
 8008640:	f1c4 0018 	rsb	r0, r4, #24
 8008644:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008648:	9a01      	ldr	r2, [sp, #4]
 800864a:	fa4c f300 	asr.w	r3, ip, r0
 800864e:	441a      	add	r2, r3
 8008650:	4083      	lsls	r3, r0
 8008652:	9201      	str	r2, [sp, #4]
 8008654:	ebac 0203 	sub.w	r2, ip, r3
 8008658:	ab06      	add	r3, sp, #24
 800865a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800865e:	f1c4 0317 	rsb	r3, r4, #23
 8008662:	fa42 f803 	asr.w	r8, r2, r3
 8008666:	f1b8 0f00 	cmp.w	r8, #0
 800866a:	dd43      	ble.n	80086f4 <__kernel_rem_pio2+0x1cc>
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	2000      	movs	r0, #0
 8008670:	3301      	adds	r3, #1
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	4601      	mov	r1, r0
 8008676:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800867a:	4285      	cmp	r5, r0
 800867c:	dc6e      	bgt.n	800875c <__kernel_rem_pio2+0x234>
 800867e:	2c00      	cmp	r4, #0
 8008680:	dd04      	ble.n	800868c <__kernel_rem_pio2+0x164>
 8008682:	2c01      	cmp	r4, #1
 8008684:	d07f      	beq.n	8008786 <__kernel_rem_pio2+0x25e>
 8008686:	2c02      	cmp	r4, #2
 8008688:	f000 8087 	beq.w	800879a <__kernel_rem_pio2+0x272>
 800868c:	f1b8 0f02 	cmp.w	r8, #2
 8008690:	d130      	bne.n	80086f4 <__kernel_rem_pio2+0x1cc>
 8008692:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008696:	ee30 8b48 	vsub.f64	d8, d0, d8
 800869a:	b359      	cbz	r1, 80086f4 <__kernel_rem_pio2+0x1cc>
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fa43 	bl	8008b28 <scalbn>
 80086a2:	ee38 8b40 	vsub.f64	d8, d8, d0
 80086a6:	e025      	b.n	80086f4 <__kernel_rem_pio2+0x1cc>
 80086a8:	ee20 7b09 	vmul.f64	d7, d0, d9
 80086ac:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80086b0:	a806      	add	r0, sp, #24
 80086b2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80086b6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80086ba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80086be:	ee10 1a10 	vmov	r1, s0
 80086c2:	ed32 0b02 	vldmdb	r2!, {d0}
 80086c6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80086ca:	ee37 0b00 	vadd.f64	d0, d7, d0
 80086ce:	3301      	adds	r3, #1
 80086d0:	e798      	b.n	8008604 <__kernel_rem_pio2+0xdc>
 80086d2:	d106      	bne.n	80086e2 <__kernel_rem_pio2+0x1ba>
 80086d4:	1e6b      	subs	r3, r5, #1
 80086d6:	aa06      	add	r2, sp, #24
 80086d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086dc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 80086e0:	e7c1      	b.n	8008666 <__kernel_rem_pio2+0x13e>
 80086e2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80086e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80086ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ee:	da32      	bge.n	8008756 <__kernel_rem_pio2+0x22e>
 80086f0:	f04f 0800 	mov.w	r8, #0
 80086f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fc:	f040 80b0 	bne.w	8008860 <__kernel_rem_pio2+0x338>
 8008700:	1e6b      	subs	r3, r5, #1
 8008702:	4618      	mov	r0, r3
 8008704:	2200      	movs	r2, #0
 8008706:	4548      	cmp	r0, r9
 8008708:	da4e      	bge.n	80087a8 <__kernel_rem_pio2+0x280>
 800870a:	2a00      	cmp	r2, #0
 800870c:	f000 8088 	beq.w	8008820 <__kernel_rem_pio2+0x2f8>
 8008710:	aa06      	add	r2, sp, #24
 8008712:	3c18      	subs	r4, #24
 8008714:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008718:	2900      	cmp	r1, #0
 800871a:	f000 808e 	beq.w	800883a <__kernel_rem_pio2+0x312>
 800871e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008722:	4620      	mov	r0, r4
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	f000 f9ff 	bl	8008b28 <scalbn>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800872e:	00d9      	lsls	r1, r3, #3
 8008730:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8008848 <__kernel_rem_pio2+0x320>
 8008734:	1850      	adds	r0, r2, r1
 8008736:	f100 0508 	add.w	r5, r0, #8
 800873a:	461c      	mov	r4, r3
 800873c:	2c00      	cmp	r4, #0
 800873e:	f280 80bd 	bge.w	80088bc <__kernel_rem_pio2+0x394>
 8008742:	2500      	movs	r5, #0
 8008744:	1b5c      	subs	r4, r3, r5
 8008746:	2c00      	cmp	r4, #0
 8008748:	f2c0 80dd 	blt.w	8008906 <__kernel_rem_pio2+0x3de>
 800874c:	4f43      	ldr	r7, [pc, #268]	; (800885c <__kernel_rem_pio2+0x334>)
 800874e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8008840 <__kernel_rem_pio2+0x318>
 8008752:	2400      	movs	r4, #0
 8008754:	e0cb      	b.n	80088ee <__kernel_rem_pio2+0x3c6>
 8008756:	f04f 0802 	mov.w	r8, #2
 800875a:	e787      	b.n	800866c <__kernel_rem_pio2+0x144>
 800875c:	ab06      	add	r3, sp, #24
 800875e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008762:	b949      	cbnz	r1, 8008778 <__kernel_rem_pio2+0x250>
 8008764:	b12b      	cbz	r3, 8008772 <__kernel_rem_pio2+0x24a>
 8008766:	aa06      	add	r2, sp, #24
 8008768:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800876c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008770:	2301      	movs	r3, #1
 8008772:	3001      	adds	r0, #1
 8008774:	4619      	mov	r1, r3
 8008776:	e780      	b.n	800867a <__kernel_rem_pio2+0x152>
 8008778:	aa06      	add	r2, sp, #24
 800877a:	ebac 0303 	sub.w	r3, ip, r3
 800877e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008782:	460b      	mov	r3, r1
 8008784:	e7f5      	b.n	8008772 <__kernel_rem_pio2+0x24a>
 8008786:	1e68      	subs	r0, r5, #1
 8008788:	ab06      	add	r3, sp, #24
 800878a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800878e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008792:	aa06      	add	r2, sp, #24
 8008794:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008798:	e778      	b.n	800868c <__kernel_rem_pio2+0x164>
 800879a:	1e68      	subs	r0, r5, #1
 800879c:	ab06      	add	r3, sp, #24
 800879e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80087a6:	e7f4      	b.n	8008792 <__kernel_rem_pio2+0x26a>
 80087a8:	a906      	add	r1, sp, #24
 80087aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80087ae:	3801      	subs	r0, #1
 80087b0:	430a      	orrs	r2, r1
 80087b2:	e7a8      	b.n	8008706 <__kernel_rem_pio2+0x1de>
 80087b4:	f10c 0c01 	add.w	ip, ip, #1
 80087b8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d0f9      	beq.n	80087b4 <__kernel_rem_pio2+0x28c>
 80087c0:	eb0b 0305 	add.w	r3, fp, r5
 80087c4:	aa1a      	add	r2, sp, #104	; 0x68
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	1898      	adds	r0, r3, r2
 80087ca:	3008      	adds	r0, #8
 80087cc:	1c69      	adds	r1, r5, #1
 80087ce:	3708      	adds	r7, #8
 80087d0:	2200      	movs	r2, #0
 80087d2:	4465      	add	r5, ip
 80087d4:	9005      	str	r0, [sp, #20]
 80087d6:	428d      	cmp	r5, r1
 80087d8:	f6ff af07 	blt.w	80085ea <__kernel_rem_pio2+0xc2>
 80087dc:	a81a      	add	r0, sp, #104	; 0x68
 80087de:	eb02 0c03 	add.w	ip, r2, r3
 80087e2:	4484      	add	ip, r0
 80087e4:	9803      	ldr	r0, [sp, #12]
 80087e6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80087ea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80087ee:	9001      	str	r0, [sp, #4]
 80087f0:	ee07 0a90 	vmov	s15, r0
 80087f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087f8:	9805      	ldr	r0, [sp, #20]
 80087fa:	ed8c 7b00 	vstr	d7, [ip]
 80087fe:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008840 <__kernel_rem_pio2+0x318>
 8008802:	eb00 0802 	add.w	r8, r0, r2
 8008806:	f04f 0c00 	mov.w	ip, #0
 800880a:	45d4      	cmp	ip, sl
 800880c:	dd0c      	ble.n	8008828 <__kernel_rem_pio2+0x300>
 800880e:	eb02 0c07 	add.w	ip, r2, r7
 8008812:	a86a      	add	r0, sp, #424	; 0x1a8
 8008814:	4484      	add	ip, r0
 8008816:	ed8c 7b02 	vstr	d7, [ip, #8]
 800881a:	3101      	adds	r1, #1
 800881c:	3208      	adds	r2, #8
 800881e:	e7da      	b.n	80087d6 <__kernel_rem_pio2+0x2ae>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	f04f 0c01 	mov.w	ip, #1
 8008826:	e7c7      	b.n	80087b8 <__kernel_rem_pio2+0x290>
 8008828:	ecbe 5b02 	vldmia	lr!, {d5}
 800882c:	ed38 6b02 	vldmdb	r8!, {d6}
 8008830:	f10c 0c01 	add.w	ip, ip, #1
 8008834:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008838:	e7e7      	b.n	800880a <__kernel_rem_pio2+0x2e2>
 800883a:	3b01      	subs	r3, #1
 800883c:	e768      	b.n	8008710 <__kernel_rem_pio2+0x1e8>
 800883e:	bf00      	nop
	...
 800884c:	3e700000 	.word	0x3e700000
 8008850:	00000000 	.word	0x00000000
 8008854:	41700000 	.word	0x41700000
 8008858:	08009af0 	.word	0x08009af0
 800885c:	08009ab0 	.word	0x08009ab0
 8008860:	4260      	negs	r0, r4
 8008862:	eeb0 0b48 	vmov.f64	d0, d8
 8008866:	f000 f95f 	bl	8008b28 <scalbn>
 800886a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8008a48 <__kernel_rem_pio2+0x520>
 800886e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008876:	db18      	blt.n	80088aa <__kernel_rem_pio2+0x382>
 8008878:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8008a50 <__kernel_rem_pio2+0x528>
 800887c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008880:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008884:	aa06      	add	r2, sp, #24
 8008886:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800888a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800888e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008892:	a906      	add	r1, sp, #24
 8008894:	ee10 3a10 	vmov	r3, s0
 8008898:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800889c:	1c6b      	adds	r3, r5, #1
 800889e:	ee17 2a10 	vmov	r2, s14
 80088a2:	3418      	adds	r4, #24
 80088a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088a8:	e739      	b.n	800871e <__kernel_rem_pio2+0x1f6>
 80088aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80088ae:	aa06      	add	r2, sp, #24
 80088b0:	ee10 3a10 	vmov	r3, s0
 80088b4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80088b8:	462b      	mov	r3, r5
 80088ba:	e730      	b.n	800871e <__kernel_rem_pio2+0x1f6>
 80088bc:	aa06      	add	r2, sp, #24
 80088be:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80088c2:	9202      	str	r2, [sp, #8]
 80088c4:	ee07 2a90 	vmov	s15, r2
 80088c8:	3c01      	subs	r4, #1
 80088ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088ce:	ee27 7b00 	vmul.f64	d7, d7, d0
 80088d2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80088d6:	ed25 7b02 	vstmdb	r5!, {d7}
 80088da:	e72f      	b.n	800873c <__kernel_rem_pio2+0x214>
 80088dc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80088e0:	ecb7 5b02 	vldmia	r7!, {d5}
 80088e4:	ed9c 6b00 	vldr	d6, [ip]
 80088e8:	3401      	adds	r4, #1
 80088ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80088ee:	454c      	cmp	r4, r9
 80088f0:	dc01      	bgt.n	80088f6 <__kernel_rem_pio2+0x3ce>
 80088f2:	42a5      	cmp	r5, r4
 80088f4:	daf2      	bge.n	80088dc <__kernel_rem_pio2+0x3b4>
 80088f6:	aa42      	add	r2, sp, #264	; 0x108
 80088f8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80088fc:	ed84 7b00 	vstr	d7, [r4]
 8008900:	3501      	adds	r5, #1
 8008902:	3808      	subs	r0, #8
 8008904:	e71e      	b.n	8008744 <__kernel_rem_pio2+0x21c>
 8008906:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8008908:	2a03      	cmp	r2, #3
 800890a:	d84e      	bhi.n	80089aa <__kernel_rem_pio2+0x482>
 800890c:	e8df f002 	tbb	[pc, r2]
 8008910:	021f1f3e 	.word	0x021f1f3e
 8008914:	3108      	adds	r1, #8
 8008916:	aa42      	add	r2, sp, #264	; 0x108
 8008918:	4411      	add	r1, r2
 800891a:	4608      	mov	r0, r1
 800891c:	461c      	mov	r4, r3
 800891e:	2c00      	cmp	r4, #0
 8008920:	dc61      	bgt.n	80089e6 <__kernel_rem_pio2+0x4be>
 8008922:	4608      	mov	r0, r1
 8008924:	461c      	mov	r4, r3
 8008926:	2c01      	cmp	r4, #1
 8008928:	dc6d      	bgt.n	8008a06 <__kernel_rem_pio2+0x4de>
 800892a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008a58 <__kernel_rem_pio2+0x530>
 800892e:	2b01      	cmp	r3, #1
 8008930:	dc79      	bgt.n	8008a26 <__kernel_rem_pio2+0x4fe>
 8008932:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8008936:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800893a:	f1b8 0f00 	cmp.w	r8, #0
 800893e:	d178      	bne.n	8008a32 <__kernel_rem_pio2+0x50a>
 8008940:	ed86 5b00 	vstr	d5, [r6]
 8008944:	ed86 6b02 	vstr	d6, [r6, #8]
 8008948:	ed86 7b04 	vstr	d7, [r6, #16]
 800894c:	e02d      	b.n	80089aa <__kernel_rem_pio2+0x482>
 800894e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8008a58 <__kernel_rem_pio2+0x530>
 8008952:	3108      	adds	r1, #8
 8008954:	aa42      	add	r2, sp, #264	; 0x108
 8008956:	4411      	add	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	2800      	cmp	r0, #0
 800895c:	da34      	bge.n	80089c8 <__kernel_rem_pio2+0x4a0>
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	d037      	beq.n	80089d4 <__kernel_rem_pio2+0x4ac>
 8008964:	eeb1 7b46 	vneg.f64	d7, d6
 8008968:	ed86 7b00 	vstr	d7, [r6]
 800896c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008970:	a844      	add	r0, sp, #272	; 0x110
 8008972:	2101      	movs	r1, #1
 8008974:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008978:	428b      	cmp	r3, r1
 800897a:	da2e      	bge.n	80089da <__kernel_rem_pio2+0x4b2>
 800897c:	f1b8 0f00 	cmp.w	r8, #0
 8008980:	d001      	beq.n	8008986 <__kernel_rem_pio2+0x45e>
 8008982:	eeb1 7b47 	vneg.f64	d7, d7
 8008986:	ed86 7b02 	vstr	d7, [r6, #8]
 800898a:	e00e      	b.n	80089aa <__kernel_rem_pio2+0x482>
 800898c:	aa92      	add	r2, sp, #584	; 0x248
 800898e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8008a58 <__kernel_rem_pio2+0x530>
 8008992:	4411      	add	r1, r2
 8008994:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008998:	2b00      	cmp	r3, #0
 800899a:	da0f      	bge.n	80089bc <__kernel_rem_pio2+0x494>
 800899c:	f1b8 0f00 	cmp.w	r8, #0
 80089a0:	d001      	beq.n	80089a6 <__kernel_rem_pio2+0x47e>
 80089a2:	eeb1 7b47 	vneg.f64	d7, d7
 80089a6:	ed86 7b00 	vstr	d7, [r6]
 80089aa:	9b01      	ldr	r3, [sp, #4]
 80089ac:	f003 0007 	and.w	r0, r3, #7
 80089b0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80089b4:	ecbd 8b06 	vpop	{d8-d10}
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	ed31 6b02 	vldmdb	r1!, {d6}
 80089c0:	3b01      	subs	r3, #1
 80089c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80089c6:	e7e7      	b.n	8008998 <__kernel_rem_pio2+0x470>
 80089c8:	ed31 7b02 	vldmdb	r1!, {d7}
 80089cc:	3801      	subs	r0, #1
 80089ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80089d2:	e7c2      	b.n	800895a <__kernel_rem_pio2+0x432>
 80089d4:	eeb0 7b46 	vmov.f64	d7, d6
 80089d8:	e7c6      	b.n	8008968 <__kernel_rem_pio2+0x440>
 80089da:	ecb0 6b02 	vldmia	r0!, {d6}
 80089de:	3101      	adds	r1, #1
 80089e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80089e4:	e7c8      	b.n	8008978 <__kernel_rem_pio2+0x450>
 80089e6:	ed10 7b04 	vldr	d7, [r0, #-16]
 80089ea:	ed30 5b02 	vldmdb	r0!, {d5}
 80089ee:	3c01      	subs	r4, #1
 80089f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80089f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80089f8:	ed00 6b02 	vstr	d6, [r0, #-8]
 80089fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008a00:	ed80 7b00 	vstr	d7, [r0]
 8008a04:	e78b      	b.n	800891e <__kernel_rem_pio2+0x3f6>
 8008a06:	ed10 7b04 	vldr	d7, [r0, #-16]
 8008a0a:	ed30 5b02 	vldmdb	r0!, {d5}
 8008a0e:	3c01      	subs	r4, #1
 8008a10:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008a14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a18:	ed00 6b02 	vstr	d6, [r0, #-8]
 8008a1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008a20:	ed80 7b00 	vstr	d7, [r0]
 8008a24:	e77f      	b.n	8008926 <__kernel_rem_pio2+0x3fe>
 8008a26:	ed31 6b02 	vldmdb	r1!, {d6}
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a30:	e77d      	b.n	800892e <__kernel_rem_pio2+0x406>
 8008a32:	eeb1 5b45 	vneg.f64	d5, d5
 8008a36:	eeb1 6b46 	vneg.f64	d6, d6
 8008a3a:	ed86 5b00 	vstr	d5, [r6]
 8008a3e:	eeb1 7b47 	vneg.f64	d7, d7
 8008a42:	ed86 6b02 	vstr	d6, [r6, #8]
 8008a46:	e77f      	b.n	8008948 <__kernel_rem_pio2+0x420>
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	41700000 	.word	0x41700000
 8008a50:	00000000 	.word	0x00000000
 8008a54:	3e700000 	.word	0x3e700000
	...

08008a60 <__kernel_sin>:
 8008a60:	ee10 3a90 	vmov	r3, s1
 8008a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008a6c:	da04      	bge.n	8008a78 <__kernel_sin+0x18>
 8008a6e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008a72:	ee17 3a90 	vmov	r3, s15
 8008a76:	b35b      	cbz	r3, 8008ad0 <__kernel_sin+0x70>
 8008a78:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008a7c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008a80:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008ad8 <__kernel_sin+0x78>
 8008a84:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008ae0 <__kernel_sin+0x80>
 8008a88:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008a8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008ae8 <__kernel_sin+0x88>
 8008a90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008a94:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008af0 <__kernel_sin+0x90>
 8008a98:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008a9c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008af8 <__kernel_sin+0x98>
 8008aa0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008aa4:	b930      	cbnz	r0, 8008ab4 <__kernel_sin+0x54>
 8008aa6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008b00 <__kernel_sin+0xa0>
 8008aaa:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008aae:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008ab2:	4770      	bx	lr
 8008ab4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008ab8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008abc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008ac0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008ac4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008b08 <__kernel_sin+0xa8>
 8008ac8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008acc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	5acfd57c 	.word	0x5acfd57c
 8008adc:	3de5d93a 	.word	0x3de5d93a
 8008ae0:	8a2b9ceb 	.word	0x8a2b9ceb
 8008ae4:	be5ae5e6 	.word	0xbe5ae5e6
 8008ae8:	57b1fe7d 	.word	0x57b1fe7d
 8008aec:	3ec71de3 	.word	0x3ec71de3
 8008af0:	19c161d5 	.word	0x19c161d5
 8008af4:	bf2a01a0 	.word	0xbf2a01a0
 8008af8:	1110f8a6 	.word	0x1110f8a6
 8008afc:	3f811111 	.word	0x3f811111
 8008b00:	55555549 	.word	0x55555549
 8008b04:	bfc55555 	.word	0xbfc55555
 8008b08:	55555549 	.word	0x55555549
 8008b0c:	3fc55555 	.word	0x3fc55555

08008b10 <fabs>:
 8008b10:	ec51 0b10 	vmov	r0, r1, d0
 8008b14:	ee10 2a10 	vmov	r2, s0
 8008b18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b1c:	ec43 2b10 	vmov	d0, r2, r3
 8008b20:	4770      	bx	lr
 8008b22:	0000      	movs	r0, r0
 8008b24:	0000      	movs	r0, r0
	...

08008b28 <scalbn>:
 8008b28:	b500      	push	{lr}
 8008b2a:	ed2d 8b02 	vpush	{d8}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	ed8d 0b00 	vstr	d0, [sp]
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008b3a:	b9a2      	cbnz	r2, 8008b66 <scalbn+0x3e>
 8008b3c:	9a00      	ldr	r2, [sp, #0]
 8008b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d03a      	beq.n	8008bbc <scalbn+0x94>
 8008b46:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008c00 <scalbn+0xd8>
 8008b4a:	4b35      	ldr	r3, [pc, #212]	; (8008c20 <scalbn+0xf8>)
 8008b4c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008b50:	4298      	cmp	r0, r3
 8008b52:	ed8d 7b00 	vstr	d7, [sp]
 8008b56:	da11      	bge.n	8008b7c <scalbn+0x54>
 8008b58:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8008c08 <scalbn+0xe0>
 8008b5c:	ed9d 6b00 	vldr	d6, [sp]
 8008b60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b64:	e007      	b.n	8008b76 <scalbn+0x4e>
 8008b66:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008b6a:	428a      	cmp	r2, r1
 8008b6c:	d10a      	bne.n	8008b84 <scalbn+0x5c>
 8008b6e:	ed9d 7b00 	vldr	d7, [sp]
 8008b72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008b76:	ed8d 7b00 	vstr	d7, [sp]
 8008b7a:	e01f      	b.n	8008bbc <scalbn+0x94>
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008b82:	3a36      	subs	r2, #54	; 0x36
 8008b84:	4402      	add	r2, r0
 8008b86:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b8a:	428a      	cmp	r2, r1
 8008b8c:	dd0a      	ble.n	8008ba4 <scalbn+0x7c>
 8008b8e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8008c10 <scalbn+0xe8>
 8008b92:	eeb0 0b48 	vmov.f64	d0, d8
 8008b96:	ed9d 1b00 	vldr	d1, [sp]
 8008b9a:	f000 f843 	bl	8008c24 <copysign>
 8008b9e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8008ba2:	e7e8      	b.n	8008b76 <scalbn+0x4e>
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	dd10      	ble.n	8008bca <scalbn+0xa2>
 8008ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bb4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008bb8:	e9cd 0100 	strd	r0, r1, [sp]
 8008bbc:	ed9d 0b00 	vldr	d0, [sp]
 8008bc0:	b003      	add	sp, #12
 8008bc2:	ecbd 8b02 	vpop	{d8}
 8008bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bca:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008bce:	da06      	bge.n	8008bde <scalbn+0xb6>
 8008bd0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008bd4:	4298      	cmp	r0, r3
 8008bd6:	dcda      	bgt.n	8008b8e <scalbn+0x66>
 8008bd8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8008c08 <scalbn+0xe0>
 8008bdc:	e7d9      	b.n	8008b92 <scalbn+0x6a>
 8008bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008be6:	3236      	adds	r2, #54	; 0x36
 8008be8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008bf0:	ec41 0b17 	vmov	d7, r0, r1
 8008bf4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8008c18 <scalbn+0xf0>
 8008bf8:	e7b2      	b.n	8008b60 <scalbn+0x38>
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w
 8008c00:	00000000 	.word	0x00000000
 8008c04:	43500000 	.word	0x43500000
 8008c08:	c2f8f359 	.word	0xc2f8f359
 8008c0c:	01a56e1f 	.word	0x01a56e1f
 8008c10:	8800759c 	.word	0x8800759c
 8008c14:	7e37e43c 	.word	0x7e37e43c
 8008c18:	00000000 	.word	0x00000000
 8008c1c:	3c900000 	.word	0x3c900000
 8008c20:	ffff3cb0 	.word	0xffff3cb0

08008c24 <copysign>:
 8008c24:	ec51 0b10 	vmov	r0, r1, d0
 8008c28:	ee11 0a90 	vmov	r0, s3
 8008c2c:	ee10 2a10 	vmov	r2, s0
 8008c30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008c34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008c38:	ea41 0300 	orr.w	r3, r1, r0
 8008c3c:	ec43 2b10 	vmov	d0, r2, r3
 8008c40:	4770      	bx	lr
	...

08008c44 <_init>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr

08008c50 <_fini>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	bf00      	nop
 8008c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c56:	bc08      	pop	{r3}
 8008c58:	469e      	mov	lr, r3
 8008c5a:	4770      	bx	lr
