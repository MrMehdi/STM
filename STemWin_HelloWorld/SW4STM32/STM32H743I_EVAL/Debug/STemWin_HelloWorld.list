
STemWin_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d30  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  24000000  08008c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .GUI_NUMBYTES_section 0002d000  2400003c  08008cd4  0002003c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006dc  2402d040  08035cd4  0004d040  2**3
                  ALLOC
  8 ._user_heap_stack 00006204  2402d71c  08035cd4  0004d71c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004d03c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000e784  00000000  00000000  0004d06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00028483  00000000  00000000  0005b7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003c62  00000000  00000000  00083c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c50  00000000  00000000  000878d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00182c8c  00000000  00000000  00088528  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  0020b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00007caf  00000000  00000000  0020c038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003be3b  00000000  00000000  00213ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  0024fb22  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000020e4  00000000  00000000  0024fc0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2402d040 	.word	0x2402d040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007fb0 	.word	0x08007fb0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2402d044 	.word	0x2402d044
 80002d4:	08007fb0 	.word	0x08007fb0

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002de:	e003      	b.n	80002e8 <LoopCopyDataInit>

080002e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002e6:	3104      	adds	r1, #4

080002e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f0:	d3f6      	bcc.n	80002e0 <CopyDataInit>
  ldr  r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002f4:	e002      	b.n	80002fc <LoopFillZerobss>

080002f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002f8:	f842 3b04 	str.w	r3, [r2], #4

080002fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000300:	d3f9      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000302:	f000 fb21 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000306:	f007 fe03 	bl	8007f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 f835 	bl	8000378 <main>
  bx  lr    
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000314:	08008c98 	.word	0x08008c98
  ldr  r0, =_sdata
 8000318:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800031c:	2400003c 	.word	0x2400003c
  ldr  r2, =_sbss
 8000320:	2402d040 	.word	0x2402d040
  ldr  r3, = _ebss
 8000324:	2402d71c 	.word	0x2402d71c

08000328 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>

0800032a <pulisci_schermo>:
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
  while(1) {};
}
#endif

 void pulisci_schermo(void) {
 800032a:	b508      	push	{r3, lr}
  GUI_SetLayerVisEx (1, 0);
 800032c:	2100      	movs	r1, #0
 800032e:	2001      	movs	r0, #1
 8000330:	f003 fdde 	bl	8003ef0 <GUI_SetLayerVisEx>
  GUI_SetBkColor(COLORE_SFONDO);
 8000334:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000338:	f003 fad4 	bl	80038e4 <GUI_SetBkColor>
  GUI_Clear();
}
 800033c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_Clear();
 8000340:	f003 bb82 	b.w	8003a48 <GUI_Clear>

08000344 <disegna_cerchio_centrale>:

/*ATTENZIONE! LO (0,0) Ã¨ in alto a sx*/
void disegna_cerchio_centrale(uint32_t pos_x, uint32_t pos_y, uint32_t raggio, uint32_t spessore_bordo)
{
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	4604      	mov	r4, r0
 8000348:	460d      	mov	r5, r1
 800034a:	4616      	mov	r6, r2
	//UTIL_LCD_FillRect(pos_x-raggio-d_int.raggio_indicatore_cerchio, pos_y-raggio-d_int.raggio_indicatore_cerchio, raggio*2+d_int.raggio_indicatore_cerchio, raggio*2+d_int.raggio_indicatore_cerchio, COLORE_SFONDO);

	GUI_SetBkColor(GUI_GREEN);
 800034c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
{
 8000350:	461f      	mov	r7, r3
	GUI_SetBkColor(GUI_GREEN);
 8000352:	f003 fac7 	bl	80038e4 <GUI_SetBkColor>
	GUI_FillCircle(pos_x, pos_y, raggio);
 8000356:	4632      	mov	r2, r6
 8000358:	4629      	mov	r1, r5
 800035a:	4620      	mov	r0, r4
 800035c:	f003 fa00 	bl	8003760 <GUI_FillCircle>
	GUI_SetBkColor(COLORE_SFONDO);
 8000360:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000364:	f003 fabe 	bl	80038e4 <GUI_SetBkColor>
	GUI_FillCircle(pos_x, pos_y, raggio-spessore_bordo);
 8000368:	1bf2      	subs	r2, r6, r7
 800036a:	4629      	mov	r1, r5
 800036c:	4620      	mov	r0, r4
}
 800036e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_FillCircle(pos_x, pos_y, raggio-spessore_bordo);
 8000372:	f003 b9f5 	b.w	8003760 <GUI_FillCircle>
	...

08000378 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09e      	sub	sp, #120	; 0x78
static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800037c:	f000 fc02 	bl	8000b84 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000380:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.BaseAddress      = SDRAM_DEVICE_ADDR;
 8000384:	f04f 4c50 	mov.w	ip, #3489660928	; 0xd0000000
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000388:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800038a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.BaseAddress      = SDRAM_DEVICE_ADDR;
 800038e:	4b78      	ldr	r3, [pc, #480]	; (8000570 <main+0x1f8>)
 8000390:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000394:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000398:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800039a:	f000 fc15 	bl	8000bc8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800039e:	2004      	movs	r0, #4
 80003a0:	f000 fc00 	bl	8000ba4 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003a8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ac:	4b71      	ldr	r3, [pc, #452]	; (8000574 <main+0x1fc>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003b8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003bc:	695a      	ldr	r2, [r3, #20]
 80003be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80003c2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80003cc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003d0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003d8:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003dc:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003e0:	f3c2 324e 	ubfx	r2, r2, #13, #15
 80003e4:	07a5      	lsls	r5, r4, #30
 80003e6:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003e8:	ea02 0c06 	and.w	ip, r2, r6
 80003ec:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003ee:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003f0:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003f4:	3901      	subs	r1, #1
 80003f6:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003fa:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80003fe:	1c4f      	adds	r7, r1, #1
 8000400:	d1f6      	bne.n	80003f0 <main+0x78>
 8000402:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000404:	f112 0f20 	cmn.w	r2, #32
 8000408:	d1ee      	bne.n	80003e8 <main+0x70>
 800040a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000414:	615a      	str	r2, [r3, #20]
 8000416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800041a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800041e:	f000 fafb 	bl	8000a18 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000422:	2002      	movs	r0, #2
 8000424:	f001 f878 	bl	8001518 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000428:	2300      	movs	r3, #0
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	4b52      	ldr	r3, [pc, #328]	; (8000578 <main+0x200>)
 800042e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000430:	f022 0201 	bic.w	r2, r2, #1
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
 8000436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	4b4f      	ldr	r3, [pc, #316]	; (800057c <main+0x204>)
 8000440:	699a      	ldr	r2, [r3, #24]
 8000442:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000446:	619a      	str	r2, [r3, #24]
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000452:	699a      	ldr	r2, [r3, #24]
 8000454:	0491      	lsls	r1, r2, #18
 8000456:	d5fc      	bpl.n	8000452 <main+0xda>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800045e:	2705      	movs	r7, #5
 8000460:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000462:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000464:	2608      	movs	r6, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000466:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000468:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800046a:	961b      	str	r6, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000470:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000472:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000474:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000476:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000478:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047a:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 800047c:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800047e:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000480:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000484:	e9cd 7116 	strd	r7, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000488:	f001 f86a 	bl	8001560 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 800048c:	b100      	cbz	r0, 8000490 <main+0x118>
 800048e:	e7fe      	b.n	800048e <main+0x116>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	233f      	movs	r3, #63	; 0x3f
 8000492:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000494:	f44f 6280 	mov.w	r2, #1024	; 0x400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000498:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800049e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004a0:	e9cd 0605 	strd	r0, r6, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004a4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 80004a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 80004aa:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004ae:	f001 fb8b 	bl	8001bc8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80004b2:	4606      	mov	r6, r0
 80004b4:	b100      	cbz	r0, 80004b8 <main+0x140>
 80004b6:	e7fe      	b.n	80004b6 <main+0x13e>
  __HAL_RCC_CSI_ENABLE() ;
 80004b8:	4c31      	ldr	r4, [pc, #196]	; (8000580 <main+0x208>)
 80004ba:	6823      	ldr	r3, [r4, #0]
 80004bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c0:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80004c2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80004c6:	f043 0302 	orr.w	r3, r3, #2
 80004ca:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80004ce:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	9302      	str	r3, [sp, #8]
 80004d8:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();  
 80004da:	f000 fae3 	bl	8000aa4 <HAL_EnableCompensationCell>
  BSP_SDRAM_Init(0);  
 80004de:	4630      	mov	r0, r6
  x_size=LCD_GetXSize();
 80004e0:	4e28      	ldr	r6, [pc, #160]	; (8000584 <main+0x20c>)
  BSP_SDRAM_Init(0);  
 80004e2:	f000 f927 	bl	8000734 <BSP_SDRAM_Init>
  x_size=LCD_GetXSize();
 80004e6:	f004 f9f9 	bl	80048dc <LCD_GetXSize>
 80004ea:	6030      	str	r0, [r6, #0]
  y_size=LCD_GetYSize();
 80004ec:	f004 f9fe 	bl	80048ec <LCD_GetYSize>
 80004f0:	6070      	str	r0, [r6, #4]
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80004f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80004f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004fa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80004fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  	  d_int.spessore_bordo = 5;
 8000502:	4c21      	ldr	r4, [pc, #132]	; (8000588 <main+0x210>)
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8000504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000508:	930b      	str	r3, [sp, #44]	; 0x2c
 800050a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GUI_Init();  
 800050c:	f003 faf6 	bl	8003afc <GUI_Init>
  	  d_int.raggio_cerchio_centrale = (y_size/4);
 8000510:	6873      	ldr	r3, [r6, #4]
  	  d_int.spessore_bordo = 5;
 8000512:	6027      	str	r7, [r4, #0]
  	  d_int.raggio_cerchio_centrale = (y_size/4);
 8000514:	089a      	lsrs	r2, r3, #2
 8000516:	6062      	str	r2, [r4, #4]
  	  d_int.centro_x_cerchio_centrale = (x_size/2);
 8000518:	6832      	ldr	r2, [r6, #0]
 800051a:	0851      	lsrs	r1, r2, #1
 800051c:	60a1      	str	r1, [r4, #8]
  	  d_int.centro_y_cerchio_centrale = (y_size/2);
 800051e:	0859      	lsrs	r1, r3, #1
  	  d_int.raggio_indicatore_cerchio = 5;
 8000520:	e9c4 1703 	strd	r1, r7, [r4, #12]
  	  d_int.angolo = (2*M_PI)/3;
 8000524:	a110      	add	r1, pc, #64	; (adr r1, 8000568 <main+0x1f0>)
 8000526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800052a:	e9c4 0106 	strd	r0, r1, [r4, #24]
  	  d_int.dim_barra_y =  2*(y_size/3);
 800052e:	fbb3 f1f5 	udiv	r1, r3, r5
  	  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 8000532:	fbb2 f5f5 	udiv	r5, r2, r5
  	  d_int.dim_barra_x = (x_size/8);
 8000536:	08d0      	lsrs	r0, r2, #3
  	  d_int.dim_barra_y =  2*(y_size/3);
 8000538:	0049      	lsls	r1, r1, #1
  	  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 800053a:	1a2d      	subs	r5, r5, r0
  	  d_int.dim_quadrato_piu_meno=(x_size/16);
 800053c:	0912      	lsrs	r2, r2, #4
  	  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 800053e:	1a5b      	subs	r3, r3, r1
  	  d_int.dim_barra_y =  2*(y_size/3);
 8000540:	6261      	str	r1, [r4, #36]	; 0x24
  	  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 8000542:	086d      	lsrs	r5, r5, #1
  	  d_int.dim_riquadro_etichetta_y=d_int.dim_quadrato_piu_meno;
 8000544:	63a2      	str	r2, [r4, #56]	; 0x38
  	  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 8000546:	085b      	lsrs	r3, r3, #1
  	  d_int.dim_barra_x = (x_size/8);
 8000548:	6220      	str	r0, [r4, #32]
  	  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 800054a:	62a5      	str	r5, [r4, #40]	; 0x28
  	  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 800054c:	62e3      	str	r3, [r4, #44]	; 0x2c
  	  d_int.dim_riquadro_etichetta_x=(x_size/8);
 800054e:	e9c4 200c 	strd	r2, r0, [r4, #48]	; 0x30
  	  pulisci_schermo();
 8000552:	f7ff feea 	bl	800032a <pulisci_schermo>
  	  disegna_cerchio_centrale(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.raggio_cerchio_centrale, d_int.spessore_bordo);
 8000556:	e9d4 3200 	ldrd	r3, r2, [r4]
 800055a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800055e:	f7ff fef1 	bl	8000344 <disegna_cerchio_centrale>
 8000562:	e7fe      	b.n	8000562 <main+0x1ea>
 8000564:	f3af 8000 	nop.w
 8000568:	382d7365 	.word	0x382d7365
 800056c:	4000c152 	.word	0x4000c152
 8000570:	03000018 	.word	0x03000018
 8000574:	e000ed00 	.word	0xe000ed00
 8000578:	58000400 	.word	0x58000400
 800057c:	58024800 	.word	0x58024800
 8000580:	58024400 	.word	0x58024400
 8000584:	2402d05c 	.word	0x2402d05c
 8000588:	2402d448 	.word	0x2402d448

0800058c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800058c:	4770      	bx	lr

0800058e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800058e:	e7fe      	b.n	800058e <HardFault_Handler>

08000590 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler>

08000592 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000592:	e7fe      	b.n	8000592 <BusFault_Handler>

08000594 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler>

08000596 <DebugMon_Handler>:
 8000596:	4770      	bx	lr

08000598 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000598:	b508      	push	{r3, lr}
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 800059a:	f000 fa6b 	bl	8000a74 <HAL_IncTick>
  
  OS_TimeMS++;
 800059e:	4a02      	ldr	r2, [pc, #8]	; (80005a8 <SysTick_Handler+0x10>)
 80005a0:	6813      	ldr	r3, [r2, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	bd08      	pop	{r3, pc}
 80005a8:	2402d4c0 	.word	0x2402d4c0

080005ac <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 80005ac:	4801      	ldr	r0, [pc, #4]	; (80005b4 <LTDC_IRQHandler+0x8>)
 80005ae:	f000 bd5b 	b.w	8001068 <HAL_LTDC_IRQHandler>
 80005b2:	bf00      	nop
 80005b4:	2402d4c4 	.word	0x2402d4c4

080005b8 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 80005b8:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 80005ba:	2201      	movs	r2, #1
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <IS42S32800G_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80005be:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80005c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80005c4:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005c6:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80005c8:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ce:	f002 f999 	bl	8002904 <HAL_SDRAM_SendCommand>
 80005d2:	3000      	adds	r0, #0
 80005d4:	bf18      	it	ne
 80005d6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80005d8:	4240      	negs	r0, r0
 80005da:	bd08      	pop	{r3, pc}
 80005dc:	2402d064 	.word	0x2402d064

080005e0 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 80005e0:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 80005e2:	2202      	movs	r2, #2
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <IS42S32800G_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80005e6:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80005ea:	2101      	movs	r1, #1
 80005ec:	2200      	movs	r2, #0
 80005ee:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f6:	4619      	mov	r1, r3
 80005f8:	f002 f984 	bl	8002904 <HAL_SDRAM_SendCommand>
 80005fc:	3000      	adds	r0, #0
 80005fe:	bf18      	it	ne
 8000600:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000602:	4240      	negs	r0, r0
 8000604:	bd08      	pop	{r3, pc}
 8000606:	bf00      	nop
 8000608:	2402d064 	.word	0x2402d064

0800060c <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 800060c:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800060e:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8000612:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000614:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8000616:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8000618:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 800061a:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 800061c:	6991      	ldr	r1, [r2, #24]
 800061e:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000620:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000622:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000624:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8000626:	4907      	ldr	r1, [pc, #28]	; (8000644 <IS42S32800G_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8000628:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800062a:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 800062c:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 800062e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000636:	f002 f965 	bl	8002904 <HAL_SDRAM_SendCommand>
 800063a:	3000      	adds	r0, #0
 800063c:	bf18      	it	ne
 800063e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000640:	4240      	negs	r0, r0
 8000642:	bd10      	pop	{r4, pc}
 8000644:	2402d064 	.word	0x2402d064

08000648 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8000648:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <IS42S32800G_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 800064c:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8000650:	2108      	movs	r1, #8
 8000652:	2200      	movs	r2, #0
 8000654:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800065c:	4619      	mov	r1, r3
 800065e:	f002 f951 	bl	8002904 <HAL_SDRAM_SendCommand>
 8000662:	3000      	adds	r0, #0
 8000664:	bf18      	it	ne
 8000666:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000668:	4240      	negs	r0, r0
 800066a:	bd08      	pop	{r3, pc}
 800066c:	2402d064 	.word	0x2402d064

08000670 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8000670:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000672:	f002 f966 	bl	8002942 <HAL_SDRAM_ProgramRefreshRate>
 8000676:	3000      	adds	r0, #0
 8000678:	bf18      	it	ne
 800067a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 800067c:	4240      	negs	r0, r0
 800067e:	bd08      	pop	{r3, pc}

08000680 <IS42S32800G_Init>:
{
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	460c      	mov	r4, r1
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000684:	6809      	ldr	r1, [r1, #0]
{
 8000686:	4605      	mov	r5, r0
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000688:	f7ff ff96 	bl	80005b8 <IS42S32800G_ClockEnable>
 800068c:	b110      	cbz	r0, 8000694 <IS42S32800G_Init+0x14>
  int32_t ret = IS42S32800G_ERROR;
 800068e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000692:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000694:	f000 f9fa 	bl	8000a8c <HAL_GetTick>
 8000698:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800069a:	f000 f9f7 	bl	8000a8c <HAL_GetTick>
 800069e:	4286      	cmp	r6, r0
 80006a0:	d0fb      	beq.n	800069a <IS42S32800G_Init+0x1a>
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80006a2:	6821      	ldr	r1, [r4, #0]
 80006a4:	4628      	mov	r0, r5
 80006a6:	f7ff ff9b 	bl	80005e0 <IS42S32800G_Precharge>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d1ef      	bne.n	800068e <IS42S32800G_Init+0xe>
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 80006ae:	4628      	mov	r0, r5
 80006b0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80006b4:	f7ff ffc8 	bl	8000648 <IS42S32800G_RefreshMode>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d1e8      	bne.n	800068e <IS42S32800G_Init+0xe>
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 80006bc:	4621      	mov	r1, r4
 80006be:	4628      	mov	r0, r5
 80006c0:	f7ff ffa4 	bl	800060c <IS42S32800G_ModeRegConfig>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d1e2      	bne.n	800068e <IS42S32800G_Init+0xe>
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 80006c8:	68a1      	ldr	r1, [r4, #8]
 80006ca:	4628      	mov	r0, r5
 80006cc:	f7ff ffd0 	bl	8000670 <IS42S32800G_RefreshRate>
 80006d0:	3000      	adds	r0, #0
 80006d2:	bf18      	it	ne
 80006d4:	2001      	movne	r0, #1
 80006d6:	4240      	negs	r0, r0
  return ret;
 80006d8:	e7db      	b.n	8000692 <IS42S32800G_Init+0x12>
	...

080006dc <MX_SDRAM_BANK2_Init>:

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80006dc:	2201      	movs	r2, #1
 80006de:	4914      	ldr	r1, [pc, #80]	; (8000730 <MX_SDRAM_BANK2_Init+0x54>)
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 80006e0:	2302      	movs	r3, #2
{
 80006e2:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80006e4:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80006e8:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80006ea:	2104      	movs	r1, #4
 80006ec:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80006ee:	2440      	movs	r4, #64	; 0x40
{
 80006f0:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80006f2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80006f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80006fa:	9307      	str	r3, [sp, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80006fc:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000706:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800070a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800070e:	e9c0 4209 	strd	r4, r2, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8000712:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 8000714:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8000718:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 800071a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800071e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8000722:	f002 f8c7 	bl	80028b4 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
}
 8000726:	3000      	adds	r0, #0
 8000728:	bf18      	it	ne
 800072a:	2001      	movne	r0, #1
 800072c:	b008      	add	sp, #32
 800072e:	bd10      	pop	{r4, pc}
 8000730:	52004140 	.word	0x52004140

08000734 <BSP_SDRAM_Init>:
{
 8000734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(Instance >= SDRAM_INSTANCES_NBR)
 8000738:	4605      	mov	r5, r0
{
 800073a:	b08e      	sub	sp, #56	; 0x38
  if(Instance >= SDRAM_INSTANCES_NBR)
 800073c:	2800      	cmp	r0, #0
 800073e:	f040 80e9 	bne.w	8000914 <BSP_SDRAM_Init+0x1e0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000742:	4b77      	ldr	r3, [pc, #476]	; (8000920 <BSP_SDRAM_Init+0x1ec>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000744:	f04f 0803 	mov.w	r8, #3

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000748:	ac0e      	add	r4, sp, #56	; 0x38
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800074a:	4876      	ldr	r0, [pc, #472]	; (8000924 <BSP_SDRAM_Init+0x1f0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800074c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8000750:	4f75      	ldr	r7, [pc, #468]	; (8000928 <BSP_SDRAM_Init+0x1f4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000756:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800075a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800075e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8000766:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000772:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000776:	f002 0201 	and.w	r2, r2, #1
 800077a:	9202      	str	r2, [sp, #8]
 800077c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000782:	f042 0208 	orr.w	r2, r2, #8
 8000786:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800078a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800078e:	f002 0208 	and.w	r2, r2, #8
 8000792:	9203      	str	r2, [sp, #12]
 8000794:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800079a:	f042 0210 	orr.w	r2, r2, #16
 800079e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007a6:	f002 0210 	and.w	r2, r2, #16
 80007aa:	9204      	str	r2, [sp, #16]
 80007ac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007b2:	f042 0220 	orr.w	r2, r2, #32
 80007b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007be:	f002 0220 	and.w	r2, r2, #32
 80007c2:	9205      	str	r2, [sp, #20]
 80007c4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007d6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80007da:	9206      	str	r2, [sp, #24]
 80007dc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007f2:	9207      	str	r2, [sp, #28]
 80007f4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000802:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800080c:	9308      	str	r3, [sp, #32]
 800080e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000816:	230c      	movs	r3, #12
 8000818:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800081c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000820:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000824:	4621      	mov	r1, r4
 8000826:	f000 fa35 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800082a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800082e:	4621      	mov	r1, r4
 8000830:	483e      	ldr	r0, [pc, #248]	; (800092c <BSP_SDRAM_Init+0x1f8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000832:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000834:	f000 fa2e 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000838:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800083c:	4621      	mov	r1, r4
 800083e:	483c      	ldr	r0, [pc, #240]	; (8000930 <BSP_SDRAM_Init+0x1fc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000840:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000842:	f000 fa27 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 8000846:	f248 133f 	movw	r3, #33087	; 0x813f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800084a:	4621      	mov	r1, r4
 800084c:	4839      	ldr	r0, [pc, #228]	; (8000934 <BSP_SDRAM_Init+0x200>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 800084e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000850:	f000 fa20 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000854:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000858:	4621      	mov	r1, r4
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <BSP_SDRAM_Init+0x204>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800085c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800085e:	f000 fa19 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000862:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000866:	4621      	mov	r1, r4
 8000868:	4834      	ldr	r0, [pc, #208]	; (800093c <BSP_SDRAM_Init+0x208>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800086a:	4c35      	ldr	r4, [pc, #212]	; (8000940 <BSP_SDRAM_Init+0x20c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800086c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800086e:	f000 fa11 	bl	8000c94 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800087a:	f240 2002 	movw	r0, #514	; 0x202
 800087e:	f640 0208 	movw	r2, #2056	; 0x808
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000882:	4626      	mov	r6, r4
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8000884:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000888:	e9c4 131c 	strd	r1, r3, [r4, #112]	; 0x70
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800088c:	e9c4 0220 	strd	r0, r2, [r4, #128]	; 0x80
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000890:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000892:	2220      	movs	r2, #32
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000894:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000898:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
  mdma_handle.Init.BufferTransferLength     = 128;
 800089c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80008a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <BSP_SDRAM_Init+0x210>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80008a6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80008aa:	f846 3f6c 	str.w	r3, [r6, #108]!

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80008ae:	4630      	mov	r0, r6
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 80008b0:	633e      	str	r6, [r7, #48]	; 0x30
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80008b2:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80008b6:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
  HAL_MDMA_DeInit(&mdma_handle);
 80008ba:	f000 fe0e 	bl	80014da <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 80008be:	4630      	mov	r0, r6
 80008c0:	f000 fd9c 	bl	80013fc <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80008c4:	462a      	mov	r2, r5
 80008c6:	210f      	movs	r1, #15
 80008c8:	207a      	movs	r0, #122	; 0x7a
 80008ca:	f000 f905 	bl	8000ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80008ce:	207a      	movs	r0, #122	; 0x7a
 80008d0:	f000 f934 	bl	8000b3c <HAL_NVIC_EnableIRQ>
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 80008d4:	4638      	mov	r0, r7
 80008d6:	f7ff ff01 	bl	80006dc <MX_SDRAM_BANK2_Init>
 80008da:	b9f0      	cbnz	r0, 800091a <BSP_SDRAM_Init+0x1e6>
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80008dc:	2308      	movs	r3, #8
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80008de:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80008e2:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 80008e6:	e9c4 3836 	strd	r3, r8, [r4, #216]	; 0xd8
        pRegMode.RefreshRate     = REFRESH_COUNT;
 80008ea:	f240 6303 	movw	r3, #1539	; 0x603
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 80008ee:	e9c4 3038 	strd	r3, r0, [r4, #224]	; 0xe0
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 80008f2:	2330      	movs	r3, #48	; 0x30
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 80008f4:	e9c4 303b 	strd	r3, r0, [r4, #236]	; 0xec
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80008f8:	f44f 7300 	mov.w	r3, #512	; 0x200
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80008fc:	4638      	mov	r0, r7
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80008fe:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 8000902:	f7ff febd 	bl	8000680 <IS42S32800G_Init>
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 8000906:	2800      	cmp	r0, #0
 8000908:	bf18      	it	ne
 800090a:	f06f 0004 	mvnne.w	r0, #4
}
 800090e:	b00e      	add	sp, #56	; 0x38
 8000910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8000914:	f06f 0001 	mvn.w	r0, #1
 8000918:	e7f9      	b.n	800090e <BSP_SDRAM_Init+0x1da>
        ret = BSP_ERROR_NO_INIT;
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800091e:	e7f6      	b.n	800090e <BSP_SDRAM_Init+0x1da>
 8000920:	58024400 	.word	0x58024400
 8000924:	58020c00 	.word	0x58020c00
 8000928:	2402d488 	.word	0x2402d488
 800092c:	58021000 	.word	0x58021000
 8000930:	58021400 	.word	0x58021400
 8000934:	58021800 	.word	0x58021800
 8000938:	58021c00 	.word	0x58021c00
 800093c:	58022000 	.word	0x58022000
 8000940:	2402d074 	.word	0x2402d074
 8000944:	52000040 	.word	0x52000040

08000948 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000948:	491a      	ldr	r1, [pc, #104]	; (80009b4 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800094a:	481b      	ldr	r0, [pc, #108]	; (80009b8 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000954:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <SystemInit+0x74>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	4020      	ands	r0, r4
 800096c:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800096e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000970:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000972:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800097a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800097c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000980:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000982:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800098a:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800098c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <SystemInit+0x78>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	041b      	lsls	r3, r3, #16
 8000996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800099a:	d202      	bcs.n	80009a2 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <SystemInit+0x7c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <SystemInit+0x80>)
 80009a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80009aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009ae:	608b      	str	r3, [r1, #8]
#endif  


}
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80009bc:	58024400 	.word	0x58024400
 80009c0:	5c001000 	.word	0x5c001000
 80009c4:	51008108 	.word	0x51008108
 80009c8:	52004000 	.word	0x52004000

080009cc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009d2:	4e0f      	ldr	r6, [pc, #60]	; (8000a10 <HAL_InitTick+0x40>)
{
 80009d4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80009d6:	7830      	ldrb	r0, [r6, #0]
 80009d8:	b908      	cbnz	r0, 80009de <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80009da:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_InitTick+0x44>)
 80009e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80009e8:	6810      	ldr	r0, [r2, #0]
 80009ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80009ee:	f000 f8b3 	bl	8000b58 <HAL_SYSTICK_Config>
 80009f2:	4604      	mov	r4, r0
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d1f0      	bne.n	80009da <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	2d0f      	cmp	r5, #15
 80009fa:	d8ee      	bhi.n	80009da <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	4602      	mov	r2, r0
 80009fe:	4629      	mov	r1, r5
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f868 	bl	8000ad8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	6075      	str	r5, [r6, #4]
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	e7e6      	b.n	80009dc <HAL_InitTick+0xc>
 8000a0e:	bf00      	nop
 8000a10:	24000008 	.word	0x24000008
 8000a14:	24000000 	.word	0x24000000

08000a18 <HAL_Init>:
{
 8000a18:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	f000 f84a 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a20:	f001 f836 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8000a24:	490f      	ldr	r1, [pc, #60]	; (8000a64 <HAL_Init+0x4c>)
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_Init+0x50>)
 8000a28:	698b      	ldr	r3, [r1, #24]
 8000a2a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	f003 031f 	and.w	r3, r3, #31
 8000a34:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a36:	698b      	ldr	r3, [r1, #24]
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	5cd3      	ldrb	r3, [r2, r3]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_Init+0x54>)
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_Init+0x58>)
 8000a4c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f7ff ffbe 	bl	80009d0 <HAL_InitTick>
 8000a54:	4604      	mov	r4, r0
 8000a56:	b918      	cbnz	r0, 8000a60 <HAL_Init+0x48>
  HAL_MspInit();
 8000a58:	f7ff ffb8 	bl	80009cc <HAL_MspInit>
}
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a60:	2401      	movs	r4, #1
 8000a62:	e7fb      	b.n	8000a5c <HAL_Init+0x44>
 8000a64:	58024400 	.word	0x58024400
 8000a68:	08007fc8 	.word	0x08007fc8
 8000a6c:	24000004 	.word	0x24000004
 8000a70:	24000000 	.word	0x24000000

08000a74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_IncTick+0x10>)
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_IncTick+0x14>)
 8000a78:	6811      	ldr	r1, [r2, #0]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	440b      	add	r3, r1
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2402d4bc 	.word	0x2402d4bc
 8000a88:	24000008 	.word	0x24000008

08000a8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a8c:	4b01      	ldr	r3, [pc, #4]	; (8000a94 <HAL_GetTick+0x8>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2402d4bc 	.word	0x2402d4bc

08000a98 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <HAL_GetREVID+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
}
 8000a9c:	0c00      	lsrs	r0, r0, #16
 8000a9e:	4770      	bx	lr
 8000aa0:	5c001000 	.word	0x5c001000

08000aa4 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000aa4:	4a02      	ldr	r2, [pc, #8]	; (8000ab0 <HAL_EnableCompensationCell+0xc>)
 8000aa6:	6a13      	ldr	r3, [r2, #32]
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6213      	str	r3, [r2, #32]
}
 8000aae:	4770      	bx	lr
 8000ab0:	58000400 	.word	0x58000400

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ace:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ad0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b570      	push	{r4, r5, r6, lr}
 8000adc:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ade:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	2d04      	cmp	r5, #4
 8000aee:	bf28      	it	cs
 8000af0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af8:	bf8c      	ite	hi
 8000afa:	3c03      	subhi	r4, #3
 8000afc:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000afe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	ea21 0303 	bic.w	r3, r1, r3
 8000b04:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	fa06 f404 	lsl.w	r4, r6, r4
 8000b0c:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	ea43 0304 	orr.w	r3, r3, r4
 8000b14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000b18:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	db06      	blt.n	8000b2a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b24:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	f000 000f 	and.w	r0, r0, #15
 8000b2e:	4a02      	ldr	r2, [pc, #8]	; (8000b38 <HAL_NVIC_SetPriority+0x60>)
 8000b30:	5413      	strb	r3, [r2, r0]
 8000b32:	e7f9      	b.n	8000b28 <HAL_NVIC_SetPriority+0x50>
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	e000ed14 	.word	0xe000ed14

08000b3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	db08      	blt.n	8000b52 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b40:	0942      	lsrs	r2, r0, #5
 8000b42:	2301      	movs	r3, #1
 8000b44:	f000 001f 	and.w	r0, r0, #31
 8000b48:	fa03 f000 	lsl.w	r0, r3, r0
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <HAL_NVIC_EnableIRQ+0x18>)
 8000b4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	3801      	subs	r0, #1
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5e:	d20a      	bcs.n	8000b76 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	21f0      	movs	r1, #240	; 0xf0
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b84:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_MPU_Disable+0x18>)
 8000b8a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b90:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b92:	2200      	movs	r2, #0
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_MPU_Disable+0x1c>)
 8000b96:	605a      	str	r2, [r3, #4]
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	e000ed90 	.word	0xe000ed90

08000ba4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ba6:	f040 0001 	orr.w	r0, r0, #1
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MPU_Enable+0x20>)
 8000bac:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bba:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00
 8000bc4:	e000ed90 	.word	0xe000ed90

08000bc8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bc8:	7843      	ldrb	r3, [r0, #1]
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <HAL_MPU_ConfigRegion+0x4c>)
{
 8000bcc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8000bce:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000bd0:	7801      	ldrb	r1, [r0, #0]
 8000bd2:	b1d9      	cbz	r1, 8000c0c <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000bd4:	6843      	ldr	r3, [r0, #4]
 8000bd6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bd8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bda:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bdc:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bde:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000be2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000be4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000be6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bea:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bf0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bf2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bf6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bfc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000c02:	7a01      	ldrb	r1, [r0, #8]
 8000c04:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c0a:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8000c0c:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8000c0e:	6111      	str	r1, [r2, #16]
}
 8000c10:	e7fb      	b.n	8000c0a <HAL_MPU_ConfigRegion+0x42>
 8000c12:	bf00      	nop
 8000c14:	e000ed90 	.word	0xe000ed90

08000c18 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000c18:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d036      	beq.n	8000c8e <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c20:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8000c24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c28:	b91b      	cbnz	r3, 8000c32 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c2a:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c2e:	f001 fff5 	bl	8002c1c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c32:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000c34:	69e0      	ldr	r0, [r4, #28]
 8000c36:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c38:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000c40:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8000c48:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c52:	68a2      	ldr	r2, [r4, #8]
 8000c54:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	f021 0101 	bic.w	r1, r1, #1
 8000c5e:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c60:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	0412      	lsls	r2, r2, #16
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c70:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8000c74:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000c78:	0552      	lsls	r2, r2, #21
 8000c7a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c7e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c80:	430a      	orrs	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c84:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c86:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c88:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8000c8c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	e7fc      	b.n	8000c8c <HAL_DMA2D_Init+0x74>
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c98:	680b      	ldr	r3, [r1, #0]
{
 8000c9a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e60 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca0:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ca4:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000ca6:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8000ca8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000e64 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cac:	9a01      	ldr	r2, [sp, #4]
 8000cae:	40da      	lsrs	r2, r3
 8000cb0:	d102      	bne.n	8000cb8 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8000cb2:	b005      	add	sp, #20
 8000cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb8:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8000cba:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cbc:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8000cbe:	ea17 0502 	ands.w	r5, r7, r2
 8000cc2:	f000 80b6 	beq.w	8000e32 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc6:	684a      	ldr	r2, [r1, #4]
 8000cc8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ccc:	2403      	movs	r4, #3
 8000cce:	f022 0a10 	bic.w	sl, r2, #16
 8000cd2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cd6:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000cda:	43e4      	mvns	r4, r4
 8000cdc:	2e01      	cmp	r6, #1
 8000cde:	d810      	bhi.n	8000d02 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000ce0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ce2:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce6:	68ce      	ldr	r6, [r1, #12]
 8000ce8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cec:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000cf0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cf2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cf4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf8:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000cfc:	409e      	lsls	r6, r3
 8000cfe:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000d00:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d02:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d0a:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d12:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8000d16:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d18:	d114      	bne.n	8000d44 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8000d1a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d1e:	f003 0b07 	and.w	fp, r3, #7
 8000d22:	270f      	movs	r7, #15
 8000d24:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000d28:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000d2c:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d30:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d34:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d38:	690e      	ldr	r6, [r1, #16]
 8000d3a:	fa06 f60b 	lsl.w	r6, r6, fp
 8000d3e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000d40:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8000d44:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d46:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d48:	f002 0603 	and.w	r6, r2, #3
 8000d4c:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000d50:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8000d54:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	00d4      	lsls	r4, r2, #3
 8000d58:	d56b      	bpl.n	8000e32 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000d5e:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d62:	f003 0703 	and.w	r7, r3, #3
 8000d66:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	f044 0402 	orr.w	r4, r4, #2
 8000d6e:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d72:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000d78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d7c:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000d80:	f004 0402 	and.w	r4, r4, #2
 8000d84:	9403      	str	r4, [sp, #12]
 8000d86:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d88:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8c:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d90:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d94:	4c31      	ldr	r4, [pc, #196]	; (8000e5c <HAL_GPIO_Init+0x1c8>)
 8000d96:	42a0      	cmp	r0, r4
 8000d98:	d04d      	beq.n	8000e36 <HAL_GPIO_Init+0x1a2>
 8000d9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d9e:	42a0      	cmp	r0, r4
 8000da0:	d04b      	beq.n	8000e3a <HAL_GPIO_Init+0x1a6>
 8000da2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000da6:	42a0      	cmp	r0, r4
 8000da8:	d049      	beq.n	8000e3e <HAL_GPIO_Init+0x1aa>
 8000daa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dae:	42a0      	cmp	r0, r4
 8000db0:	d047      	beq.n	8000e42 <HAL_GPIO_Init+0x1ae>
 8000db2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000db6:	42a0      	cmp	r0, r4
 8000db8:	d045      	beq.n	8000e46 <HAL_GPIO_Init+0x1b2>
 8000dba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dbe:	42a0      	cmp	r0, r4
 8000dc0:	d043      	beq.n	8000e4a <HAL_GPIO_Init+0x1b6>
 8000dc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dc6:	42a0      	cmp	r0, r4
 8000dc8:	d041      	beq.n	8000e4e <HAL_GPIO_Init+0x1ba>
 8000dca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dce:	42a0      	cmp	r0, r4
 8000dd0:	d03f      	beq.n	8000e52 <HAL_GPIO_Init+0x1be>
 8000dd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dd6:	42a0      	cmp	r0, r4
 8000dd8:	d03d      	beq.n	8000e56 <HAL_GPIO_Init+0x1c2>
 8000dda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dde:	42a0      	cmp	r0, r4
 8000de0:	bf14      	ite	ne
 8000de2:	240a      	movne	r4, #10
 8000de4:	2409      	moveq	r4, #9
 8000de6:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de8:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dea:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dee:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000df0:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8000df4:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8000df8:	bf54      	ite	pl
 8000dfa:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000dfc:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfe:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000e00:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000e04:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000e08:	bf54      	ite	pl
 8000e0a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e0c:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0e:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000e10:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000e14:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000e18:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000e1c:	bf54      	ite	pl
 8000e1e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e20:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e22:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000e24:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000e26:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000e28:	bf54      	ite	pl
 8000e2a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e2c:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000e2e:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000e32:	3301      	adds	r3, #1
 8000e34:	e73a      	b.n	8000cac <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e36:	2400      	movs	r4, #0
 8000e38:	e7d5      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e3a:	2401      	movs	r4, #1
 8000e3c:	e7d3      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e3e:	2402      	movs	r4, #2
 8000e40:	e7d1      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e42:	2403      	movs	r4, #3
 8000e44:	e7cf      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e46:	2404      	movs	r4, #4
 8000e48:	e7cd      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e4a:	2405      	movs	r4, #5
 8000e4c:	e7cb      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e4e:	2406      	movs	r4, #6
 8000e50:	e7c9      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e52:	2407      	movs	r4, #7
 8000e54:	e7c7      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e56:	2408      	movs	r4, #8
 8000e58:	e7c5      	b.n	8000de6 <HAL_GPIO_Init+0x152>
 8000e5a:	bf00      	nop
 8000e5c:	58020000 	.word	0x58020000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58000080 	.word	0x58000080

08000e68 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e68:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e6a:	f8d1 c000 	ldr.w	ip, [r1]
{
 8000e6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e72:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e74:	6804      	ldr	r4, [r0, #0]
 8000e76:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e78:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e7c:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e7e:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000e80:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8000e84:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e88:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e8a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e8e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e92:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e94:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e96:	68e0      	ldr	r0, [r4, #12]
 8000e98:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8000e9c:	4430      	add	r0, r6
 8000e9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000ea2:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000ea4:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000ea6:	68e0      	ldr	r0, [r4, #12]
 8000ea8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000eac:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000eae:	6898      	ldr	r0, [r3, #8]
 8000eb0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8000eb4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000eb6:	6888      	ldr	r0, [r1, #8]
 8000eb8:	68e6      	ldr	r6, [r4, #12]
 8000eba:	3001      	adds	r0, #1
 8000ebc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8000ec0:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000ec2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000ec4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ec8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000eca:	6918      	ldr	r0, [r3, #16]
 8000ecc:	f020 0007 	bic.w	r0, r0, #7
 8000ed0:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000ed2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000ed4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8000ed6:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000eda:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000ede:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000ee2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000ee6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000eea:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000eee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ef2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000ef4:	6958      	ldr	r0, [r3, #20]
 8000ef6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000efa:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000efc:	6948      	ldr	r0, [r1, #20]
 8000efe:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000f00:	69d8      	ldr	r0, [r3, #28]
 8000f02:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000f06:	f020 0007 	bic.w	r0, r0, #7
 8000f0a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000f0c:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8000f10:	4305      	orrs	r5, r0
 8000f12:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000f14:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000f16:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000f18:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000f1c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000f1e:	b31e      	cbz	r6, 8000f68 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000f20:	2e01      	cmp	r6, #1
 8000f22:	d023      	beq.n	8000f6c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000f24:	1eb0      	subs	r0, r6, #2
 8000f26:	2802      	cmp	r0, #2
 8000f28:	d922      	bls.n	8000f70 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000f2a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2002      	moveq	r0, #2
 8000f30:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000f32:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000f34:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000f38:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8000f3c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000f3e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000f40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000f42:	4345      	muls	r5, r0
 8000f44:	4378      	muls	r0, r7
 8000f46:	3007      	adds	r0, #7
 8000f48:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000f4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f50:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000f54:	f020 0007 	bic.w	r0, r0, #7
 8000f58:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000f5a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000f5c:	58a3      	ldr	r3, [r4, r2]
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	50a3      	str	r3, [r4, r2]
}
 8000f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000f68:	2004      	movs	r0, #4
 8000f6a:	e7e2      	b.n	8000f32 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	e7e0      	b.n	8000f32 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000f70:	2002      	movs	r0, #2
 8000f72:	e7de      	b.n	8000f32 <LTDC_SetConfig+0xca>

08000f74 <HAL_LTDC_Init>:
{
 8000f74:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8000f76:	4604      	mov	r4, r0
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d063      	beq.n	8001044 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000f7c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000f80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f84:	b91b      	cbnz	r3, 8000f8e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000f86:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000f8a:	f001 fe59 	bl	8002c40 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000f9c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f9e:	6999      	ldr	r1, [r3, #24]
 8000fa0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000fa4:	4302      	orrs	r2, r0
 8000fa6:	68e0      	ldr	r0, [r4, #12]
 8000fa8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000faa:	6920      	ldr	r0, [r4, #16]
 8000fac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000fae:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000fb0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000fb2:	4925      	ldr	r1, [pc, #148]	; (8001048 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000fb4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	400a      	ands	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fc2:	69a0      	ldr	r0, [r4, #24]
 8000fc4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000fc6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000fc8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	400a      	ands	r2, r1
 8000fce:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fd6:	6a20      	ldr	r0, [r4, #32]
 8000fd8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000fda:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000fdc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fec:	4302      	orrs	r2, r0
 8000fee:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4011      	ands	r1, r2
 8000ff4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000ff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000ff8:	695a      	ldr	r2, [r3, #20]
 8000ffa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ffe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001000:	430a      	orrs	r2, r1
 8001002:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001006:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800100a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800100e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001012:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001016:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800101a:	430a      	orrs	r2, r1
 800101c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001020:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001024:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102a:	f042 0206 	orr.w	r2, r2, #6
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001038:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800103a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800103e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8001042:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001044:	2001      	movs	r0, #1
 8001046:	e7fc      	b.n	8001042 <HAL_LTDC_Init+0xce>
 8001048:	f000f800 	.word	0xf000f800

0800104c <HAL_LTDC_DeInit>:
{
 800104c:	b510      	push	{r4, lr}
 800104e:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 8001050:	f001 fe6a 	bl	8002d28 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001054:	2000      	movs	r0, #0
 8001056:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 800105a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 800105e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 8001062:	bd10      	pop	{r4, pc}

08001064 <HAL_LTDC_ErrorCallback>:
 8001064:	4770      	bx	lr

08001066 <HAL_LTDC_ReloadEventCallback>:
 8001066:	4770      	bx	lr

08001068 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001068:	6803      	ldr	r3, [r0, #0]
{
 800106a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800106c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800106e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001070:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001072:	0772      	lsls	r2, r6, #29
 8001074:	d514      	bpl.n	80010a0 <HAL_LTDC_IRQHandler+0x38>
 8001076:	0769      	lsls	r1, r5, #29
 8001078:	d512      	bpl.n	80010a0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800107a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107c:	f022 0204 	bic.w	r2, r2, #4
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001082:	2204      	movs	r2, #4
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001086:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8001092:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001094:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001098:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800109c:	f7ff ffe2 	bl	8001064 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80010a0:	07b2      	lsls	r2, r6, #30
 80010a2:	d516      	bpl.n	80010d2 <HAL_LTDC_IRQHandler+0x6a>
 80010a4:	07ab      	lsls	r3, r5, #30
 80010a6:	d514      	bpl.n	80010d2 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80010a8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80010aa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80010ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ae:	f022 0202 	bic.w	r2, r2, #2
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80010b4:	2202      	movs	r2, #2
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80010b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80010bc:	4313      	orrs	r3, r2
 80010be:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80010c2:	2304      	movs	r3, #4
 80010c4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80010c8:	2300      	movs	r3, #0
 80010ca:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80010ce:	f7ff ffc9 	bl	8001064 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80010d2:	07f0      	lsls	r0, r6, #31
 80010d4:	d510      	bpl.n	80010f8 <HAL_LTDC_IRQHandler+0x90>
 80010d6:	07e9      	lsls	r1, r5, #31
 80010d8:	d50e      	bpl.n	80010f8 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80010da:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80010dc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80010de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80010e6:	2201      	movs	r2, #1
 80010e8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80010ea:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80010ec:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80010f0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80010f4:	f001 fe28 	bl	8002d48 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80010f8:	0732      	lsls	r2, r6, #28
 80010fa:	d511      	bpl.n	8001120 <HAL_LTDC_IRQHandler+0xb8>
 80010fc:	072b      	lsls	r3, r5, #28
 80010fe:	d50f      	bpl.n	8001120 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001100:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001102:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001106:	f022 0208 	bic.w	r2, r2, #8
 800110a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800110c:	2208      	movs	r2, #8
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001110:	2301      	movs	r3, #1
 8001112:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001116:	2300      	movs	r3, #0
 8001118:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800111c:	f7ff ffa3 	bl	8001066 <HAL_LTDC_ReloadEventCallback>
}
 8001120:	bd70      	pop	{r4, r5, r6, pc}

08001122 <HAL_LTDC_ConfigLayer>:
{
 8001122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001124:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8001128:	4606      	mov	r6, r0
 800112a:	468c      	mov	ip, r1
 800112c:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 800112e:	2b01      	cmp	r3, #1
 8001130:	f04f 0002 	mov.w	r0, #2
 8001134:	d01d      	beq.n	8001172 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001136:	2434      	movs	r4, #52	; 0x34
 8001138:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800113a:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 800113e:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001140:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8001144:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001148:	3438      	adds	r4, #56	; 0x38
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001158:	4630      	mov	r0, r6
 800115a:	4672      	mov	r2, lr
 800115c:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800115e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001160:	f7ff fe82 	bl	8000e68 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001164:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001166:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001168:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800116a:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800116e:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001174 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 8001174:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001178:	2b01      	cmp	r3, #1
 800117a:	f04f 0302 	mov.w	r3, #2
{
 800117e:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8001180:	d013      	beq.n	80011aa <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8001182:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001184:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8001188:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 800118c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001190:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001198:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800119a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800119e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80011a0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80011a4:	2300      	movs	r3, #0
 80011a6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80011aa:	4618      	mov	r0, r3
}
 80011ac:	bd10      	pop	{r4, pc}

080011ae <HAL_LTDC_ConfigCLUT>:
{
 80011ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80011b2:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
{
 80011b6:	4690      	mov	r8, r2
  __HAL_LOCK(hltdc);
 80011b8:	2c01      	cmp	r4, #1
 80011ba:	f04f 0402 	mov.w	r4, #2
 80011be:	d033      	beq.n	8001228 <HAL_LTDC_ConfigCLUT+0x7a>
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80011c0:	01df      	lsls	r7, r3, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80011c2:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80011c6:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80011c8:	2501      	movs	r5, #1
 80011ca:	3784      	adds	r7, #132	; 0x84
  for (counter = 0U; (counter < CLUTSize); counter++)
 80011cc:	2600      	movs	r6, #0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80011ce:	fb04 0303 	mla	r3, r4, r3, r0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011d2:	f04f 5c88 	mov.w	ip, #285212672	; 0x11000000
  __HAL_LOCK(hltdc);
 80011d6:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  for (counter = 0U; (counter < CLUTSize); counter++)
 80011da:	4546      	cmp	r6, r8
 80011dc:	d108      	bne.n	80011f0 <HAL_LTDC_ConfigCLUT+0x42>
  hltdc->State = HAL_LTDC_STATE_READY;
 80011de:	2301      	movs	r3, #1
 80011e0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80011e4:	2300      	movs	r3, #0
 80011e6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80011ea:	4618      	mov	r0, r3
}
 80011ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80011f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011f2:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 80011f6:	2a06      	cmp	r2, #6
 80011f8:	f404 057f 	and.w	r5, r4, #16711680	; 0xff0000
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011fc:	bf0e      	itee	eq
 80011fe:	fb0c fe06 	muleq.w	lr, ip, r6
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8001202:	b2a4      	uxthne	r4, r4
 8001204:	ea45 6506 	orrne.w	r5, r5, r6, lsl #24
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001208:	f106 0601 	add.w	r6, r6, #1
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800120c:	bf01      	itttt	eq
 800120e:	ea4e 0505 	orreq.w	r5, lr, r5
 8001212:	fa5f fe84 	uxtbeq.w	lr, r4
 8001216:	f404 447f 	andeq.w	r4, r4, #65280	; 0xff00
 800121a:	ea45 050e 	orreq.w	r5, r5, lr
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800121e:	432c      	orrs	r4, r5
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001220:	6805      	ldr	r5, [r0, #0]
 8001222:	443d      	add	r5, r7
 8001224:	642c      	str	r4, [r5, #64]	; 0x40
 8001226:	e7d8      	b.n	80011da <HAL_LTDC_ConfigCLUT+0x2c>
  __HAL_LOCK(hltdc);
 8001228:	4620      	mov	r0, r4
 800122a:	e7df      	b.n	80011ec <HAL_LTDC_ConfigCLUT+0x3e>

0800122c <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 800122c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001230:	2b01      	cmp	r3, #1
 8001232:	f04f 0302 	mov.w	r3, #2
 8001236:	d00f      	beq.n	8001258 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8001238:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800123a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800123e:	6803      	ldr	r3, [r0, #0]
 8001240:	3184      	adds	r1, #132	; 0x84
 8001242:	585a      	ldr	r2, [r3, r1]
 8001244:	f042 0202 	orr.w	r2, r2, #2
 8001248:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800124a:	2201      	movs	r2, #1
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800124e:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001250:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001254:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001258:	4618      	mov	r0, r3
}
 800125a:	4770      	bx	lr

0800125c <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 800125c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001260:	2b01      	cmp	r3, #1
 8001262:	f04f 0302 	mov.w	r3, #2
 8001266:	d00f      	beq.n	8001288 <HAL_LTDC_DisableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001268:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800126a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800126e:	6803      	ldr	r3, [r0, #0]
 8001270:	3184      	adds	r1, #132	; 0x84
 8001272:	585a      	ldr	r2, [r3, r1]
 8001274:	f022 0202 	bic.w	r2, r2, #2
 8001278:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800127a:	2201      	movs	r2, #1
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800127e:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001280:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001284:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001288:	4618      	mov	r0, r3
}
 800128a:	4770      	bx	lr

0800128c <HAL_LTDC_EnableCLUT>:
  __HAL_LOCK(hltdc);
 800128c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001290:	2b01      	cmp	r3, #1
 8001292:	f04f 0302 	mov.w	r3, #2
 8001296:	d00f      	beq.n	80012b8 <HAL_LTDC_EnableCLUT+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8001298:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800129a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800129e:	6803      	ldr	r3, [r0, #0]
 80012a0:	3184      	adds	r1, #132	; 0x84
 80012a2:	585a      	ldr	r2, [r3, r1]
 80012a4:	f042 0210 	orr.w	r2, r2, #16
 80012a8:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80012aa:	2201      	movs	r2, #1
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 80012ae:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80012b0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80012b4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80012b8:	4618      	mov	r0, r3
}
 80012ba:	4770      	bx	lr

080012bc <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 80012bc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f04f 0302 	mov.w	r3, #2
 80012c6:	d00c      	beq.n	80012e2 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80012ca:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80012ce:	6993      	ldr	r3, [r2, #24]
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80012dc:	2300      	movs	r3, #0
 80012de:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80012e2:	4618      	mov	r0, r3
}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	50001000 	.word	0x50001000

080012ec <HAL_LTDC_SetWindowPosition>:
{
 80012ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80012ee:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
{
 80012f2:	4605      	mov	r5, r0
 80012f4:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
 80012f6:	2c01      	cmp	r4, #1
 80012f8:	f04f 0402 	mov.w	r4, #2
 80012fc:	d01d      	beq.n	800133a <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80012fe:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 8001302:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8001304:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
 8001306:	435c      	muls	r4, r3
  __HAL_LOCK(hltdc);
 8001308:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 800130c:	1906      	adds	r6, r0, r4
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800130e:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 8001310:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8001312:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 8001314:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001318:	6e71      	ldr	r1, [r6, #100]	; 0x64
 800131a:	4411      	add	r1, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800131c:	4662      	mov	r2, ip
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800131e:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001320:	f104 0138 	add.w	r1, r4, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001324:	4401      	add	r1, r0
 8001326:	f7ff fd9f 	bl	8000e68 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800132a:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(hltdc);
 800132c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800132e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001330:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001334:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
}
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800133a:	4620      	mov	r0, r4
 800133c:	e7fc      	b.n	8001338 <HAL_LTDC_SetWindowPosition+0x4c>

0800133e <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 800133e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001342:	2b01      	cmp	r3, #1
 8001344:	f04f 0302 	mov.w	r3, #2
{
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800134c:	d015      	beq.n	800137a <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800134e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 8001352:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8001354:	2501      	movs	r5, #1
  pLayerCfg->Alpha = Alpha;
 8001356:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8001358:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 800135c:	18c6      	adds	r6, r0, r3
 800135e:	64f1      	str	r1, [r6, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001360:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001364:	4401      	add	r1, r0
 8001366:	f7ff fd7f 	bl	8000e68 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800136a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800136c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800136e:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001370:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001374:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8001378:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800137a:	4618      	mov	r0, r3
 800137c:	e7fc      	b.n	8001378 <HAL_LTDC_SetAlpha+0x3a>

0800137e <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 800137e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001382:	2b01      	cmp	r3, #1
 8001384:	f04f 0302 	mov.w	r3, #2
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800138c:	d015      	beq.n	80013ba <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800138e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8001392:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8001394:	2501      	movs	r5, #1
  pLayerCfg->FBStartAdress = Address;
 8001396:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8001398:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 800139c:	18c6      	adds	r6, r0, r3
 800139e:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80013a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80013a4:	4401      	add	r1, r0
 80013a6:	f7ff fd5f 	bl	8000e68 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80013aa:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80013ac:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80013ae:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80013b0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80013b4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80013ba:	4618      	mov	r0, r3
 80013bc:	e7fc      	b.n	80013b8 <HAL_LTDC_SetAddress+0x3a>
	...

080013c0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80013c0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	f04f 0302 	mov.w	r3, #2
 80013ca:	d012      	beq.n	80013f2 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80013cc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_LTDC_ProgramLineEvent+0x38>)
 80013dc:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80013de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80013ec:	2300      	movs	r3, #0
 80013ee:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80013f2:	4618      	mov	r0, r3
}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	50001000 	.word	0x50001000

080013fc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff fb44 	bl	8000a8c <HAL_GetTick>
 8001404:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001406:	2c00      	cmp	r4, #0
 8001408:	d061      	beq.n	80014ce <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800140a:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800140c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800140e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8001412:	2302      	movs	r3, #2
 8001414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8001418:	68d3      	ldr	r3, [r2, #12]
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	07d2      	lsls	r2, r2, #31
 8001426:	d448      	bmi.n	80014ba <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8001428:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800142c:	430a      	orrs	r2, r1
 800142e:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8001430:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8001434:	430a      	orrs	r2, r1
 8001436:	69e1      	ldr	r1, [r4, #28]
 8001438:	430a      	orrs	r2, r1
 800143a:	6a21      	ldr	r1, [r4, #32]
 800143c:	430a      	orrs	r2, r1
 800143e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001440:	430a      	orrs	r2, r1
 8001442:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001444:	430a      	orrs	r2, r1
 8001446:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001448:	430a      	orrs	r2, r1
 800144a:	68a1      	ldr	r1, [r4, #8]
 800144c:	430a      	orrs	r2, r1
 800144e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001450:	3901      	subs	r1, #1
 8001452:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8001456:	6861      	ldr	r1, [r4, #4]
 8001458:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800145c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800145e:	d103      	bne.n	8001468 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001466:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800146c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800146e:	2a00      	cmp	r2, #0
 8001470:	da04      	bge.n	800147c <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8001472:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8001474:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8001476:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800147a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800147c:	b292      	uxth	r2, r2
 800147e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8001480:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001482:	2a00      	cmp	r2, #0
 8001484:	da25      	bge.n	80014d2 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8001486:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8001488:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800148a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800148e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001490:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001492:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8001496:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800149a:	621a      	str	r2, [r3, #32]
 800149c:	f04f 0200 	mov.w	r2, #0
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80014a0:	d019      	beq.n	80014d6 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80014a2:	b2c9      	uxtb	r1, r1
 80014a4:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80014aa:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80014ac:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80014ae:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80014b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80014b4:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80014ba:	f7ff fae7 	bl	8000a8c <HAL_GetTick>
 80014be:	1b40      	subs	r0, r0, r5
 80014c0:	2805      	cmp	r0, #5
 80014c2:	d9ad      	bls.n	8001420 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	e7f2      	b.n	80014b8 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80014d2:	6a18      	ldr	r0, [r3, #32]
 80014d4:	e7dd      	b.n	8001492 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
 80014d8:	e7e5      	b.n	80014a6 <HAL_MDMA_Init+0xaa>

080014da <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80014da:	b1d8      	cbz	r0, 8001514 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 80014dc:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80014de:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 80014e0:	68d3      	ldr	r3, [r2, #12]
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80014ec:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80014ee:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80014f0:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80014f2:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80014f4:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80014f6:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80014f8:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80014fc:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80014fe:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001500:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8001502:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8001504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8001508:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800150c:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8001510:	4618      	mov	r0, r3
 8001512:	4770      	bx	lr
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
}
 8001516:	4770      	bx	lr

08001518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001518:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800151a:	4c10      	ldr	r4, [pc, #64]	; (800155c <HAL_PWREx_ConfigSupply+0x44>)
 800151c:	68e3      	ldr	r3, [r4, #12]
 800151e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001522:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001524:	d105      	bne.n	8001532 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001526:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800152a:	1a18      	subs	r0, r3, r0
 800152c:	bf18      	it	ne
 800152e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001530:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001532:	f023 0307 	bic.w	r3, r3, #7
 8001536:	4318      	orrs	r0, r3
 8001538:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800153a:	f7ff faa7 	bl	8000a8c <HAL_GetTick>
 800153e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001540:	6863      	ldr	r3, [r4, #4]
 8001542:	049b      	lsls	r3, r3, #18
 8001544:	d501      	bpl.n	800154a <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8001546:	2000      	movs	r0, #0
 8001548:	e7f2      	b.n	8001530 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800154a:	f7ff fa9f 	bl	8000a8c <HAL_GetTick>
 800154e:	1b40      	subs	r0, r0, r5
 8001550:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001554:	d9f4      	bls.n	8001540 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e7ea      	b.n	8001530 <HAL_PWREx_ConfigSupply+0x18>
 800155a:	bf00      	nop
 800155c:	58024800 	.word	0x58024800

08001560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001562:	4604      	mov	r4, r0
 8001564:	b908      	cbnz	r0, 800156a <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
 8001568:	e08e      	b.n	8001688 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	6803      	ldr	r3, [r0, #0]
 800156c:	07dd      	lsls	r5, r3, #31
 800156e:	d45e      	bmi.n	800162e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	0798      	lsls	r0, r3, #30
 8001574:	f100 80b0 	bmi.w	80016d8 <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	06da      	lsls	r2, r3, #27
 800157c:	d527      	bpl.n	80015ce <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157e:	4baa      	ldr	r3, [pc, #680]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 8001580:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001582:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001584:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001588:	2a08      	cmp	r2, #8
 800158a:	d007      	beq.n	800159c <HAL_RCC_OscConfig+0x3c>
 800158c:	2a18      	cmp	r2, #24
 800158e:	f040 810e 	bne.w	80017ae <HAL_RCC_OscConfig+0x24e>
 8001592:	f001 0203 	and.w	r2, r1, #3
 8001596:	2a01      	cmp	r2, #1
 8001598:	f040 8109 	bne.w	80017ae <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	05db      	lsls	r3, r3, #23
 80015a0:	d502      	bpl.n	80015a8 <HAL_RCC_OscConfig+0x48>
 80015a2:	69e3      	ldr	r3, [r4, #28]
 80015a4:	2b80      	cmp	r3, #128	; 0x80
 80015a6:	d1de      	bne.n	8001566 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015a8:	f7ff fa76 	bl	8000a98 <HAL_GetREVID>
 80015ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80015b0:	6a21      	ldr	r1, [r4, #32]
 80015b2:	4298      	cmp	r0, r3
 80015b4:	4b9c      	ldr	r3, [pc, #624]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 80015b6:	f200 80f3 	bhi.w	80017a0 <HAL_RCC_OscConfig+0x240>
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	2920      	cmp	r1, #32
 80015be:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80015c2:	bf0c      	ite	eq
 80015c4:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80015c8:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80015cc:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	0719      	lsls	r1, r3, #28
 80015d2:	f100 812d 	bmi.w	8001830 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	069a      	lsls	r2, r3, #26
 80015da:	f100 814e 	bmi.w	800187a <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	075d      	lsls	r5, r3, #29
 80015e2:	d51e      	bpl.n	8001622 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 80015e4:	4d91      	ldr	r5, [pc, #580]	; (800182c <HAL_RCC_OscConfig+0x2cc>)
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80015ee:	f7ff fa4d 	bl	8000a8c <HAL_GetTick>
 80015f2:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	05da      	lsls	r2, r3, #23
 80015f8:	f140 8164 	bpl.w	80018c4 <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	68a3      	ldr	r3, [r4, #8]
 80015fe:	4d8a      	ldr	r5, [pc, #552]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 8166 	bne.w	80018d2 <HAL_RCC_OscConfig+0x372>
 8001606:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001612:	f7ff fa3b 	bl	8000a8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001616:	4e84      	ldr	r6, [pc, #528]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001618:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800161a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800161c:	079b      	lsls	r3, r3, #30
 800161e:	f140 817e 	bpl.w	800191e <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001624:	2800      	cmp	r0, #0
 8001626:	f040 8181 	bne.w	800192c <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 800162a:	2000      	movs	r0, #0
 800162c:	e02c      	b.n	8001688 <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 8001630:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001632:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001634:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001638:	2a10      	cmp	r2, #16
 800163a:	d005      	beq.n	8001648 <HAL_RCC_OscConfig+0xe8>
 800163c:	2a18      	cmp	r2, #24
 800163e:	d10a      	bne.n	8001656 <HAL_RCC_OscConfig+0xf6>
 8001640:	f001 0203 	and.w	r2, r1, #3
 8001644:	2a02      	cmp	r2, #2
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0399      	lsls	r1, r3, #14
 800164c:	d590      	bpl.n	8001570 <HAL_RCC_OscConfig+0x10>
 800164e:	6863      	ldr	r3, [r4, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d18d      	bne.n	8001570 <HAL_RCC_OscConfig+0x10>
 8001654:	e787      	b.n	8001566 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	6863      	ldr	r3, [r4, #4]
 8001658:	4d73      	ldr	r5, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d114      	bne.n	800168a <HAL_RCC_OscConfig+0x12a>
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800166c:	f7ff fa0e 	bl	8000a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001670:	4e6d      	ldr	r6, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001672:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001674:	6833      	ldr	r3, [r6, #0]
 8001676:	039a      	lsls	r2, r3, #14
 8001678:	f53f af7a 	bmi.w	8001570 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fa06 	bl	8000a8c <HAL_GetTick>
 8001680:	1bc0      	subs	r0, r0, r7
 8001682:	42a8      	cmp	r0, r5
 8001684:	d9f6      	bls.n	8001674 <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
}
 8001688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168a:	b9b3      	cbnz	r3, 80016ba <HAL_RCC_OscConfig+0x15a>
 800168c:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	602b      	str	r3, [r5, #0]
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9f4 	bl	8000a8c <HAL_GetTick>
 80016a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	039b      	lsls	r3, r3, #14
 80016aa:	f57f af61 	bpl.w	8001570 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff f9ed 	bl	8000a8c <HAL_GetTick>
 80016b2:	1b80      	subs	r0, r0, r6
 80016b4:	42b8      	cmp	r0, r7
 80016b6:	d9f6      	bls.n	80016a6 <HAL_RCC_OscConfig+0x146>
 80016b8:	e7e5      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	d103      	bne.n	80016ca <HAL_RCC_OscConfig+0x16a>
 80016c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	e7ca      	b.n	8001660 <HAL_RCC_OscConfig+0x100>
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	e7c6      	b.n	8001666 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 80016da:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016de:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80016e2:	d003      	beq.n	80016ec <HAL_RCC_OscConfig+0x18c>
 80016e4:	2a18      	cmp	r2, #24
 80016e6:	d120      	bne.n	800172a <HAL_RCC_OscConfig+0x1ca>
 80016e8:	078e      	lsls	r6, r1, #30
 80016ea:	d11e      	bne.n	800172a <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	075d      	lsls	r5, r3, #29
 80016f0:	d503      	bpl.n	80016fa <HAL_RCC_OscConfig+0x19a>
 80016f2:	68e3      	ldr	r3, [r4, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f43f af36 	beq.w	8001566 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	f7ff f9cd 	bl	8000a98 <HAL_GetREVID>
 80016fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8001702:	6921      	ldr	r1, [r4, #16]
 8001704:	4298      	cmp	r0, r3
 8001706:	4b48      	ldr	r3, [pc, #288]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	d809      	bhi.n	8001720 <HAL_RCC_OscConfig+0x1c0>
 800170c:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8001710:	2940      	cmp	r1, #64	; 0x40
 8001712:	bf0c      	ite	eq
 8001714:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8001718:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e72b      	b.n	8001578 <HAL_RCC_OscConfig+0x18>
 8001720:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001724:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001728:	e7f8      	b.n	800171c <HAL_RCC_OscConfig+0x1bc>
 800172a:	4d3f      	ldr	r5, [pc, #252]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800172e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001730:	b332      	cbz	r2, 8001780 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001732:	f023 0319 	bic.w	r3, r3, #25
 8001736:	4313      	orrs	r3, r2
 8001738:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800173a:	f7ff f9a7 	bl	8000a8c <HAL_GetTick>
 800173e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	0758      	lsls	r0, r3, #29
 8001744:	d511      	bpl.n	800176a <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	f7ff f9a7 	bl	8000a98 <HAL_GetREVID>
 800174a:	f241 0303 	movw	r3, #4099	; 0x1003
 800174e:	6922      	ldr	r2, [r4, #16]
 8001750:	4298      	cmp	r0, r3
 8001752:	686b      	ldr	r3, [r5, #4]
 8001754:	d80f      	bhi.n	8001776 <HAL_RCC_OscConfig+0x216>
 8001756:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800175a:	2a40      	cmp	r2, #64	; 0x40
 800175c:	bf0c      	ite	eq
 800175e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001762:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001766:	606b      	str	r3, [r5, #4]
 8001768:	e706      	b.n	8001578 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff f98f 	bl	8000a8c <HAL_GetTick>
 800176e:	1b80      	subs	r0, r0, r6
 8001770:	2802      	cmp	r0, #2
 8001772:	d9e5      	bls.n	8001740 <HAL_RCC_OscConfig+0x1e0>
 8001774:	e787      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800177a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800177e:	e7f2      	b.n	8001766 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001786:	f7ff f981 	bl	8000a8c <HAL_GetTick>
 800178a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	0759      	lsls	r1, r3, #29
 8001790:	f57f aef2 	bpl.w	8001578 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff f97a 	bl	8000a8c <HAL_GetTick>
 8001798:	1b80      	subs	r0, r0, r6
 800179a:	2802      	cmp	r0, #2
 800179c:	d9f6      	bls.n	800178c <HAL_RCC_OscConfig+0x22c>
 800179e:	e772      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80017a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	e70f      	b.n	80015ce <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017ae:	69e3      	ldr	r3, [r4, #28]
 80017b0:	4d1d      	ldr	r5, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x2c8>)
 80017b2:	b343      	cbz	r3, 8001806 <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017bc:	f7ff f966 	bl	8000a8c <HAL_GetTick>
 80017c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	05df      	lsls	r7, r3, #23
 80017c6:	d511      	bpl.n	80017ec <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017c8:	f7ff f966 	bl	8000a98 <HAL_GetREVID>
 80017cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80017d0:	6a22      	ldr	r2, [r4, #32]
 80017d2:	4298      	cmp	r0, r3
 80017d4:	d810      	bhi.n	80017f8 <HAL_RCC_OscConfig+0x298>
 80017d6:	686b      	ldr	r3, [r5, #4]
 80017d8:	2a20      	cmp	r2, #32
 80017da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017de:	bf0c      	ite	eq
 80017e0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80017e4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80017e8:	606b      	str	r3, [r5, #4]
 80017ea:	e6f0      	b.n	80015ce <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017ec:	f7ff f94e 	bl	8000a8c <HAL_GetTick>
 80017f0:	1b80      	subs	r0, r0, r6
 80017f2:	2802      	cmp	r0, #2
 80017f4:	d9e5      	bls.n	80017c2 <HAL_RCC_OscConfig+0x262>
 80017f6:	e746      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f8:	68eb      	ldr	r3, [r5, #12]
 80017fa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80017fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001802:	60eb      	str	r3, [r5, #12]
 8001804:	e6e3      	b.n	80015ce <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800180c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800180e:	f7ff f93d 	bl	8000a8c <HAL_GetTick>
 8001812:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	05d8      	lsls	r0, r3, #23
 8001818:	f57f aed9 	bpl.w	80015ce <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800181c:	f7ff f936 	bl	8000a8c <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2802      	cmp	r0, #2
 8001824:	d9f6      	bls.n	8001814 <HAL_RCC_OscConfig+0x2b4>
 8001826:	e72e      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
 8001828:	58024400 	.word	0x58024400
 800182c:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001830:	6963      	ldr	r3, [r4, #20]
 8001832:	4d96      	ldr	r5, [pc, #600]	; (8001a8c <HAL_RCC_OscConfig+0x52c>)
 8001834:	b183      	cbz	r3, 8001858 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 8001836:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800183e:	f7ff f925 	bl	8000a8c <HAL_GetTick>
 8001842:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001844:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001846:	079b      	lsls	r3, r3, #30
 8001848:	f53f aec5 	bmi.w	80015d6 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff f91e 	bl	8000a8c <HAL_GetTick>
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	2802      	cmp	r0, #2
 8001854:	d9f6      	bls.n	8001844 <HAL_RCC_OscConfig+0x2e4>
 8001856:	e716      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8001858:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001860:	f7ff f914 	bl	8000a8c <HAL_GetTick>
 8001864:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001866:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001868:	079f      	lsls	r7, r3, #30
 800186a:	f57f aeb4 	bpl.w	80015d6 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff f90d 	bl	8000a8c <HAL_GetTick>
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f6      	bls.n	8001866 <HAL_RCC_OscConfig+0x306>
 8001878:	e705      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800187a:	69a3      	ldr	r3, [r4, #24]
 800187c:	4d83      	ldr	r5, [pc, #524]	; (8001a8c <HAL_RCC_OscConfig+0x52c>)
 800187e:	b183      	cbz	r3, 80018a2 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001886:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001888:	f7ff f900 	bl	8000a8c <HAL_GetTick>
 800188c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800188e:	682b      	ldr	r3, [r5, #0]
 8001890:	0498      	lsls	r0, r3, #18
 8001892:	f53f aea4 	bmi.w	80015de <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001896:	f7ff f8f9 	bl	8000a8c <HAL_GetTick>
 800189a:	1b80      	subs	r0, r0, r6
 800189c:	2802      	cmp	r0, #2
 800189e:	d9f6      	bls.n	800188e <HAL_RCC_OscConfig+0x32e>
 80018a0:	e6f1      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018aa:	f7ff f8ef 	bl	8000a8c <HAL_GetTick>
 80018ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	0499      	lsls	r1, r3, #18
 80018b4:	f57f ae93 	bpl.w	80015de <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018b8:	f7ff f8e8 	bl	8000a8c <HAL_GetTick>
 80018bc:	1b80      	subs	r0, r0, r6
 80018be:	2802      	cmp	r0, #2
 80018c0:	d9f6      	bls.n	80018b0 <HAL_RCC_OscConfig+0x350>
 80018c2:	e6e0      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff f8e2 	bl	8000a8c <HAL_GetTick>
 80018c8:	1b80      	subs	r0, r0, r6
 80018ca:	2864      	cmp	r0, #100	; 0x64
 80018cc:	f67f ae92 	bls.w	80015f4 <HAL_RCC_OscConfig+0x94>
 80018d0:	e6d9      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	b9b3      	cbnz	r3, 8001902 <HAL_RCC_OscConfig+0x3a2>
 80018d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	672b      	str	r3, [r5, #112]	; 0x70
 80018e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018e8:	f7ff f8d0 	bl	8000a8c <HAL_GetTick>
 80018ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018f0:	0798      	lsls	r0, r3, #30
 80018f2:	f57f ae96 	bpl.w	8001622 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff f8c9 	bl	8000a8c <HAL_GetTick>
 80018fa:	1b80      	subs	r0, r0, r6
 80018fc:	42b8      	cmp	r0, r7
 80018fe:	d9f6      	bls.n	80018ee <HAL_RCC_OscConfig+0x38e>
 8001900:	e6c1      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	2b05      	cmp	r3, #5
 8001904:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001906:	d103      	bne.n	8001910 <HAL_RCC_OscConfig+0x3b0>
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	672b      	str	r3, [r5, #112]	; 0x70
 800190e:	e67a      	b.n	8001606 <HAL_RCC_OscConfig+0xa6>
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	672b      	str	r3, [r5, #112]	; 0x70
 8001916:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	e676      	b.n	800160c <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff f8b5 	bl	8000a8c <HAL_GetTick>
 8001922:	1bc0      	subs	r0, r0, r7
 8001924:	42a8      	cmp	r0, r5
 8001926:	f67f ae78 	bls.w	800161a <HAL_RCC_OscConfig+0xba>
 800192a:	e6ac      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800192c:	4d57      	ldr	r5, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x52c>)
 800192e:	692b      	ldr	r3, [r5, #16]
 8001930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001934:	2b18      	cmp	r3, #24
 8001936:	d07a      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8001938:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001942:	d167      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8001944:	f7ff f8a2 	bl	8000a8c <HAL_GetTick>
 8001948:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800194a:	682b      	ldr	r3, [r5, #0]
 800194c:	0199      	lsls	r1, r3, #6
 800194e:	d45b      	bmi.n	8001a08 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001952:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001954:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	4313      	orrs	r3, r2
 800195e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001960:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001964:	62ab      	str	r3, [r5, #40]	; 0x28
 8001966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800196a:	3b01      	subs	r3, #1
 800196c:	3a01      	subs	r2, #1
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	0412      	lsls	r2, r2, #16
 8001972:	b29b      	uxth	r3, r3
 8001974:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001978:	4313      	orrs	r3, r2
 800197a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800197c:	3a01      	subs	r2, #1
 800197e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001982:	4313      	orrs	r3, r2
 8001984:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001986:	3a01      	subs	r2, #1
 8001988:	0612      	lsls	r2, r2, #24
 800198a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800198e:	4313      	orrs	r3, r2
 8001990:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001992:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800199a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800199c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800199e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019aa:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019b0:	f023 030c 	bic.w	r3, r3, #12
 80019b4:	4313      	orrs	r3, r2
 80019b6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019bc:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019c0:	4c32      	ldr	r4, [pc, #200]	; (8001a8c <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019c2:	4313      	orrs	r3, r2
 80019c4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80019de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019ee:	f7ff f84d 	bl	8000a8c <HAL_GetTick>
 80019f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	019a      	lsls	r2, r3, #6
 80019f8:	f53f ae17 	bmi.w	800162a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f846 	bl	8000a8c <HAL_GetTick>
 8001a00:	1b40      	subs	r0, r0, r5
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d9f6      	bls.n	80019f4 <HAL_RCC_OscConfig+0x494>
 8001a06:	e63e      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f840 	bl	8000a8c <HAL_GetTick>
 8001a0c:	1b80      	subs	r0, r0, r6
 8001a0e:	2802      	cmp	r0, #2
 8001a10:	d99b      	bls.n	800194a <HAL_RCC_OscConfig+0x3ea>
 8001a12:	e638      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 8001a14:	f7ff f83a 	bl	8000a8c <HAL_GetTick>
 8001a18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	f57f ae04 	bpl.w	800162a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f833 	bl	8000a8c <HAL_GetTick>
 8001a26:	1b00      	subs	r0, r0, r4
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d9f6      	bls.n	8001a1a <HAL_RCC_OscConfig+0x4ba>
 8001a2c:	e62b      	b.n	8001686 <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	f43f ae28 	beq.w	8001688 <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a3e:	4281      	cmp	r1, r0
 8001a40:	f47f ad91 	bne.w	8001566 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a44:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a4a:	428a      	cmp	r2, r1
 8001a4c:	f47f ad8b 	bne.w	8001566 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a52:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8001a56:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a58:	4291      	cmp	r1, r2
 8001a5a:	f47f ad84 	bne.w	8001566 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a60:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8001a64:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a66:	4291      	cmp	r1, r2
 8001a68:	f47f ad7d 	bne.w	8001566 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a6e:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001a72:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a74:	4291      	cmp	r1, r2
 8001a76:	f47f ad76 	bne.w	8001566 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a7c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001a80:	3801      	subs	r0, #1
    return HAL_ERROR;
 8001a82:	1a18      	subs	r0, r3, r0
 8001a84:	bf18      	it	ne
 8001a86:	2001      	movne	r0, #1
 8001a88:	e5fe      	b.n	8001688 <HAL_RCC_OscConfig+0x128>
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400

08001a90 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a90:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_RCC_GetSysClockFreq+0x11c>)
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001a98:	2a10      	cmp	r2, #16
{
 8001a9a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9c:	f000 8084 	beq.w	8001ba8 <HAL_RCC_GetSysClockFreq+0x118>
 8001aa0:	2a18      	cmp	r2, #24
 8001aa2:	d00c      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x2e>
 8001aa4:	b10a      	cbz	r2, 8001aaa <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001aa6:	4842      	ldr	r0, [pc, #264]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001aa8:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4841      	ldr	r0, [pc, #260]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x124>)
 8001aae:	f012 0f20 	tst.w	r2, #32
 8001ab2:	d0f9      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001aba:	40d8      	lsrs	r0, r3
 8001abc:	e7f4      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001abe:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ac0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ac4:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ac8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d0ec      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x18>
 8001ace:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ad2:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ad6:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 8001ada:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ade:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ae2:	4342      	muls	r2, r0
 8001ae4:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ae8:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8001aec:	2a01      	cmp	r2, #1
 8001aee:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8001af2:	d002      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x6a>
 8001af4:	d30f      	bcc.n	8001b16 <HAL_RCC_GetSysClockFreq+0x86>
 8001af6:	2a02      	cmp	r2, #2
 8001af8:	d048      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	ee07 3a10 	vmov	s14, r3
 8001b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b10:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8001bb8 <HAL_RCC_GetSysClockFreq+0x128>
 8001b14:	e037      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	0692      	lsls	r2, r2, #26
 8001b1a:	d527      	bpl.n	8001b6c <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x124>)
 8001b20:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b26:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2c:	ee07 2a10 	vmov	s14, r2
 8001b30:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001b34:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001b38:	ee06 3a90 	vmov	s13, r3
 8001b3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b44:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001b54:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001b56:	ee07 3a10 	vmov	s14, r3
 8001b5a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b62:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001b66:	ee17 0a90 	vmov	r0, s15
 8001b6a:	e79d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b72:	ee07 3a10 	vmov	s14, r3
 8001b76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b82:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001bbc <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b86:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001b8a:	e7dd      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b92:	ee07 3a10 	vmov	s14, r3
 8001b96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001ba2:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8001bc0 <HAL_RCC_GetSysClockFreq+0x130>
 8001ba6:	e7ee      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001baa:	e77d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x18>
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	003d0900 	.word	0x003d0900
 8001bb4:	03d09000 	.word	0x03d09000
 8001bb8:	4a742400 	.word	0x4a742400
 8001bbc:	4c742400 	.word	0x4c742400
 8001bc0:	4bbebc20 	.word	0x4bbebc20
 8001bc4:	017d7840 	.word	0x017d7840

08001bc8 <HAL_RCC_ClockConfig>:
{
 8001bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bcc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001bce:	4604      	mov	r4, r0
 8001bd0:	b910      	cbnz	r0, 8001bd8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bd2:	2001      	movs	r0, #1
}
 8001bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4a88      	ldr	r2, [pc, #544]	; (8001dfc <HAL_RCC_ClockConfig+0x234>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	428b      	cmp	r3, r1
 8001be2:	f0c0 8093 	bcc.w	8001d0c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	075f      	lsls	r7, r3, #29
 8001bea:	f100 809b 	bmi.w	8001d24 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bee:	071e      	lsls	r6, r3, #28
 8001bf0:	d50b      	bpl.n	8001c0a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bf2:	4983      	ldr	r1, [pc, #524]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001bf4:	6966      	ldr	r6, [r4, #20]
 8001bf6:	69c8      	ldr	r0, [r1, #28]
 8001bf8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001bfc:	4286      	cmp	r6, r0
 8001bfe:	d904      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c00:	69ca      	ldr	r2, [r1, #28]
 8001c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c06:	4332      	orrs	r2, r6
 8001c08:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	06d8      	lsls	r0, r3, #27
 8001c0c:	d50b      	bpl.n	8001c26 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c0e:	497c      	ldr	r1, [pc, #496]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001c10:	69a6      	ldr	r6, [r4, #24]
 8001c12:	69c8      	ldr	r0, [r1, #28]
 8001c14:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001c18:	4286      	cmp	r6, r0
 8001c1a:	d904      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c1c:	69ca      	ldr	r2, [r1, #28]
 8001c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c22:	4332      	orrs	r2, r6
 8001c24:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c26:	0699      	lsls	r1, r3, #26
 8001c28:	d50b      	bpl.n	8001c42 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c2a:	4975      	ldr	r1, [pc, #468]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001c2c:	69e6      	ldr	r6, [r4, #28]
 8001c2e:	6a08      	ldr	r0, [r1, #32]
 8001c30:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001c34:	4286      	cmp	r6, r0
 8001c36:	d904      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c38:	6a0a      	ldr	r2, [r1, #32]
 8001c3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c3e:	4332      	orrs	r2, r6
 8001c40:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c42:	079a      	lsls	r2, r3, #30
 8001c44:	d50b      	bpl.n	8001c5e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c46:	496e      	ldr	r1, [pc, #440]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001c48:	68e6      	ldr	r6, [r4, #12]
 8001c4a:	6988      	ldr	r0, [r1, #24]
 8001c4c:	f000 000f 	and.w	r0, r0, #15
 8001c50:	4286      	cmp	r6, r0
 8001c52:	d904      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	698a      	ldr	r2, [r1, #24]
 8001c56:	f022 020f 	bic.w	r2, r2, #15
 8001c5a:	4332      	orrs	r2, r6
 8001c5c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	07df      	lsls	r7, r3, #31
 8001c60:	d46e      	bmi.n	8001d40 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	079e      	lsls	r6, r3, #30
 8001c66:	f100 80a1 	bmi.w	8001dac <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6a:	4964      	ldr	r1, [pc, #400]	; (8001dfc <HAL_RCC_ClockConfig+0x234>)
 8001c6c:	680a      	ldr	r2, [r1, #0]
 8001c6e:	f002 020f 	and.w	r2, r2, #15
 8001c72:	42aa      	cmp	r2, r5
 8001c74:	f200 80a8 	bhi.w	8001dc8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c78:	0758      	lsls	r0, r3, #29
 8001c7a:	f100 80b1 	bmi.w	8001de0 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	0719      	lsls	r1, r3, #28
 8001c80:	d50b      	bpl.n	8001c9a <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c82:	495f      	ldr	r1, [pc, #380]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001c84:	6965      	ldr	r5, [r4, #20]
 8001c86:	69c8      	ldr	r0, [r1, #28]
 8001c88:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001c8c:	4285      	cmp	r5, r0
 8001c8e:	d204      	bcs.n	8001c9a <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c90:	69ca      	ldr	r2, [r1, #28]
 8001c92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c96:	432a      	orrs	r2, r5
 8001c98:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	06da      	lsls	r2, r3, #27
 8001c9c:	d50b      	bpl.n	8001cb6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c9e:	4958      	ldr	r1, [pc, #352]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001ca0:	69a5      	ldr	r5, [r4, #24]
 8001ca2:	69c8      	ldr	r0, [r1, #28]
 8001ca4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001ca8:	4285      	cmp	r5, r0
 8001caa:	d204      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cac:	69ca      	ldr	r2, [r1, #28]
 8001cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cb2:	432a      	orrs	r2, r5
 8001cb4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cb6:	069b      	lsls	r3, r3, #26
 8001cb8:	d50b      	bpl.n	8001cd2 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cba:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001cbc:	69e0      	ldr	r0, [r4, #28]
 8001cbe:	6a11      	ldr	r1, [r2, #32]
 8001cc0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001cc4:	4288      	cmp	r0, r1
 8001cc6:	d204      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cc8:	6a13      	ldr	r3, [r2, #32]
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cce:	4303      	orrs	r3, r0
 8001cd0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cd2:	f7ff fedd 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001cd6:	494a      	ldr	r1, [pc, #296]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001cd8:	4a4a      	ldr	r2, [pc, #296]	; (8001e04 <HAL_RCC_ClockConfig+0x23c>)
 8001cda:	698b      	ldr	r3, [r1, #24]
 8001cdc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce8:	698b      	ldr	r3, [r1, #24]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_RCC_ClockConfig+0x240>)
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa20 f303 	lsr.w	r3, r0, r3
 8001cfa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_RCC_ClockConfig+0x248>)
}
 8001d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f7fe be62 	b.w	80009d0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	f023 030f 	bic.w	r3, r3, #15
 8001d12:	430b      	orrs	r3, r1
 8001d14:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	f47f af58 	bne.w	8001bd2 <HAL_RCC_ClockConfig+0xa>
 8001d22:	e760      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d24:	4936      	ldr	r1, [pc, #216]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001d26:	6926      	ldr	r6, [r4, #16]
 8001d28:	6988      	ldr	r0, [r1, #24]
 8001d2a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001d2e:	4286      	cmp	r6, r0
 8001d30:	f67f af5d 	bls.w	8001bee <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d34:	698a      	ldr	r2, [r1, #24]
 8001d36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d3a:	4332      	orrs	r2, r6
 8001d3c:	618a      	str	r2, [r1, #24]
 8001d3e:	e756      	b.n	8001bee <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001d42:	68a1      	ldr	r1, [r4, #8]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d50:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	2902      	cmp	r1, #2
 8001d54:	d11d      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d56:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d5a:	f43f af3a 	beq.w	8001bd2 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d64:	4e26      	ldr	r6, [pc, #152]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	f022 0207 	bic.w	r2, r2, #7
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fe8d 	bl	8000a8c <HAL_GetTick>
 8001d72:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d74:	6933      	ldr	r3, [r6, #16]
 8001d76:	6862      	ldr	r2, [r4, #4]
 8001d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d7c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001d80:	f43f af6f 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7fe fe82 	bl	8000a8c <HAL_GetTick>
 8001d88:	1bc0      	subs	r0, r0, r7
 8001d8a:	4540      	cmp	r0, r8
 8001d8c:	d9f2      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001d8e:	2003      	movs	r0, #3
 8001d90:	e720      	b.n	8001bd4 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	2903      	cmp	r1, #3
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d96:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d9a:	e7de      	b.n	8001d5a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d9c:	2901      	cmp	r1, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001da0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001da4:	e7d9      	b.n	8001d5a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da6:	f012 0f04 	tst.w	r2, #4
 8001daa:	e7d6      	b.n	8001d5a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dac:	4914      	ldr	r1, [pc, #80]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001dae:	68e6      	ldr	r6, [r4, #12]
 8001db0:	6988      	ldr	r0, [r1, #24]
 8001db2:	f000 000f 	and.w	r0, r0, #15
 8001db6:	4286      	cmp	r6, r0
 8001db8:	f4bf af57 	bcs.w	8001c6a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	698a      	ldr	r2, [r1, #24]
 8001dbe:	f022 020f 	bic.w	r2, r2, #15
 8001dc2:	4332      	orrs	r2, r6
 8001dc4:	618a      	str	r2, [r1, #24]
 8001dc6:	e750      	b.n	8001c6a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc8:	680a      	ldr	r2, [r1, #0]
 8001dca:	f022 020f 	bic.w	r2, r2, #15
 8001dce:	432a      	orrs	r2, r5
 8001dd0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	680a      	ldr	r2, [r1, #0]
 8001dd4:	f002 020f 	and.w	r2, r2, #15
 8001dd8:	42aa      	cmp	r2, r5
 8001dda:	f47f aefa 	bne.w	8001bd2 <HAL_RCC_ClockConfig+0xa>
 8001dde:	e74b      	b.n	8001c78 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <HAL_RCC_ClockConfig+0x238>)
 8001de2:	6925      	ldr	r5, [r4, #16]
 8001de4:	6988      	ldr	r0, [r1, #24]
 8001de6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001dea:	4285      	cmp	r5, r0
 8001dec:	f4bf af47 	bcs.w	8001c7e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df0:	698a      	ldr	r2, [r1, #24]
 8001df2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001df6:	432a      	orrs	r2, r5
 8001df8:	618a      	str	r2, [r1, #24]
 8001dfa:	e740      	b.n	8001c7e <HAL_RCC_ClockConfig+0xb6>
 8001dfc:	52002000 	.word	0x52002000
 8001e00:	58024400 	.word	0x58024400
 8001e04:	08007fc8 	.word	0x08007fc8
 8001e08:	24000004 	.word	0x24000004
 8001e0c:	24000000 	.word	0x24000000
 8001e10:	2400000c 	.word	0x2400000c

08001e14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e16:	4c3a      	ldr	r4, [pc, #232]	; (8001f00 <RCCEx_PLL2_Config+0xec>)
{
 8001e18:	4606      	mov	r6, r0
 8001e1a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d069      	beq.n	8001efa <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e2c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fe2d 	bl	8000a8c <HAL_GetTick>
 8001e32:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	011a      	lsls	r2, r3, #4
 8001e38:	d44b      	bmi.n	8001ed2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e3c:	6832      	ldr	r2, [r6, #0]
 8001e3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e42:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001e46:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e48:	68b3      	ldr	r3, [r6, #8]
 8001e4a:	68f2      	ldr	r2, [r6, #12]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	0412      	lsls	r2, r2, #16
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	6872      	ldr	r2, [r6, #4]
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e64:	4313      	orrs	r3, r2
 8001e66:	6932      	ldr	r2, [r6, #16]
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	0612      	lsls	r2, r2, #24
 8001e6c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001e70:	4313      	orrs	r3, r2
 8001e72:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001e74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e76:	6972      	ldr	r2, [r6, #20]
 8001e78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001e80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e82:	69b2      	ldr	r2, [r6, #24]
 8001e84:	f023 0320 	bic.w	r3, r3, #32
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001e8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e8e:	f023 0310 	bic.w	r3, r3, #16
 8001e92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001e94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e96:	69f2      	ldr	r2, [r6, #28]
 8001e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ea0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ea4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ea8:	f043 0310 	orr.w	r3, r3, #16
 8001eac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001eb0:	b9b5      	cbnz	r5, 8001ee0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001eb8:	4c11      	ldr	r4, [pc, #68]	; (8001f00 <RCCEx_PLL2_Config+0xec>)
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ec0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec2:	f7fe fde3 	bl	8000a8c <HAL_GetTick>
 8001ec6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	d50f      	bpl.n	8001eee <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001ece:	2000      	movs	r0, #0
 8001ed0:	e005      	b.n	8001ede <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001ed2:	f7fe fddb 	bl	8000a8c <HAL_GetTick>
 8001ed6:	1bc0      	subs	r0, r0, r7
 8001ed8:	2802      	cmp	r0, #2
 8001eda:	d9ab      	bls.n	8001e34 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001edc:	2003      	movs	r0, #3
}
 8001ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001ee0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001ee2:	bf0c      	ite	eq
 8001ee4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001ee8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001eec:	e7e3      	b.n	8001eb6 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001eee:	f7fe fdcd 	bl	8000a8c <HAL_GetTick>
 8001ef2:	1b40      	subs	r0, r0, r5
 8001ef4:	2802      	cmp	r0, #2
 8001ef6:	d9e7      	bls.n	8001ec8 <RCCEx_PLL2_Config+0xb4>
 8001ef8:	e7f0      	b.n	8001edc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
 8001efc:	e7ef      	b.n	8001ede <RCCEx_PLL2_Config+0xca>
 8001efe:	bf00      	nop
 8001f00:	58024400 	.word	0x58024400

08001f04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f06:	4c3a      	ldr	r4, [pc, #232]	; (8001ff0 <RCCEx_PLL3_Config+0xec>)
{
 8001f08:	4606      	mov	r6, r0
 8001f0a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d069      	beq.n	8001fea <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1e:	f7fe fdb5 	bl	8000a8c <HAL_GetTick>
 8001f22:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	009a      	lsls	r2, r3, #2
 8001f28:	d44b      	bmi.n	8001fc2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f2c:	6832      	ldr	r2, [r6, #0]
 8001f2e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001f32:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f38:	68b3      	ldr	r3, [r6, #8]
 8001f3a:	68f2      	ldr	r2, [r6, #12]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	025b      	lsls	r3, r3, #9
 8001f42:	0412      	lsls	r2, r2, #16
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	6872      	ldr	r2, [r6, #4]
 8001f4e:	3a01      	subs	r2, #1
 8001f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f54:	4313      	orrs	r3, r2
 8001f56:	6932      	ldr	r2, [r6, #16]
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	0612      	lsls	r2, r2, #24
 8001f5c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001f60:	4313      	orrs	r3, r2
 8001f62:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f66:	6972      	ldr	r2, [r6, #20]
 8001f68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f72:	69b2      	ldr	r2, [r6, #24]
 8001f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001f84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f86:	69f2      	ldr	r2, [r6, #28]
 8001f88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f94:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001f96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001fa0:	b9b5      	cbnz	r5, 8001fd0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001fa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001fa8:	4c11      	ldr	r4, [pc, #68]	; (8001ff0 <RCCEx_PLL3_Config+0xec>)
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fd6b 	bl	8000a8c <HAL_GetTick>
 8001fb6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	d50f      	bpl.n	8001fde <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e005      	b.n	8001fce <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001fc2:	f7fe fd63 	bl	8000a8c <HAL_GetTick>
 8001fc6:	1bc0      	subs	r0, r0, r7
 8001fc8:	2802      	cmp	r0, #2
 8001fca:	d9ab      	bls.n	8001f24 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001fcc:	2003      	movs	r0, #3
}
 8001fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001fd0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001fd2:	bf0c      	ite	eq
 8001fd4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001fd8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001fdc:	e7e3      	b.n	8001fa6 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001fde:	f7fe fd55 	bl	8000a8c <HAL_GetTick>
 8001fe2:	1b40      	subs	r0, r0, r5
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	d9e7      	bls.n	8001fb8 <RCCEx_PLL3_Config+0xb4>
 8001fe8:	e7f0      	b.n	8001fcc <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7ef      	b.n	8001fce <RCCEx_PLL3_Config+0xca>
 8001fee:	bf00      	nop
 8001ff0:	58024400 	.word	0x58024400

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ff8:	6806      	ldr	r6, [r0, #0]
{
 8001ffa:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ffc:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8002000:	d023      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002002:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002008:	d018      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800200a:	d802      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800200c:	b183      	cbz	r3, 8002030 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 800200e:	2601      	movs	r6, #1
 8002010:	e01b      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002016:	d023      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002018:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800201c:	d1f7      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800201e:	4a9f      	ldr	r2, [pc, #636]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002020:	2600      	movs	r6, #0
 8002022:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002024:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002026:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800202a:	430b      	orrs	r3, r1
 800202c:	6513      	str	r3, [r2, #80]	; 0x50
 800202e:	e00c      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002030:	4a9a      	ldr	r2, [pc, #616]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002032:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800203a:	e7f0      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800203c:	2102      	movs	r1, #2
 800203e:	3004      	adds	r0, #4
 8002040:	f7ff fee8 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002044:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002046:	2800      	cmp	r0, #0
 8002048:	d0e9      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	05dd      	lsls	r5, r3, #23
 800204e:	d534      	bpl.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002050:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002052:	2b04      	cmp	r3, #4
 8002054:	d830      	bhi.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002056:	e8df f003 	tbb	[pc, r3]
 800205a:	0f08      	.short	0x0f08
 800205c:	0d29      	.short	0x0d29
 800205e:	0d          	.byte	0x0d
 800205f:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002060:	2102      	movs	r1, #2
 8002062:	3024      	adds	r0, #36	; 0x24
 8002064:	f7ff ff4e 	bl	8001f04 <RCCEx_PLL3_Config>
 8002068:	e7ec      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800206a:	4a8c      	ldr	r2, [pc, #560]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800206c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800206e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002072:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8002074:	4635      	mov	r5, r6
 8002076:	e004      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002078:	2100      	movs	r1, #0
 800207a:	1d20      	adds	r0, r4, #4
 800207c:	f7ff feca 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002080:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002082:	b9e5      	cbnz	r5, 80020be <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002084:	4a85      	ldr	r2, [pc, #532]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002086:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002088:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	430b      	orrs	r3, r1
 8002090:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	0598      	lsls	r0, r3, #22
 8002096:	d521      	bpl.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800209a:	2b80      	cmp	r3, #128	; 0x80
 800209c:	d03b      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800209e:	d810      	bhi.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80020a0:	b36b      	cbz	r3, 80020fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d031      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 80020a6:	2601      	movs	r6, #1
 80020a8:	4635      	mov	r5, r6
 80020aa:	e017      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020ac:	2100      	movs	r1, #0
 80020ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020b2:	f7ff ff27 	bl	8001f04 <RCCEx_PLL3_Config>
 80020b6:	e7e3      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 80020b8:	2601      	movs	r6, #1
 80020ba:	4635      	mov	r5, r6
 80020bc:	e7e9      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80020be:	462e      	mov	r6, r5
 80020c0:	e7e7      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80020c2:	2bc0      	cmp	r3, #192	; 0xc0
 80020c4:	d002      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80020c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ca:	d1ec      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 80020cc:	bb4d      	cbnz	r5, 8002122 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80020ce:	4a73      	ldr	r2, [pc, #460]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80020d0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80020d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80020d4:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80020d8:	430b      	orrs	r3, r1
 80020da:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	0559      	lsls	r1, r3, #21
 80020e0:	d530      	bpl.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 80020e2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ea:	d047      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x188>
 80020ec:	d81b      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d038      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80020f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f6:	d03b      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 80020f8:	2601      	movs	r6, #1
 80020fa:	4635      	mov	r5, r6
 80020fc:	e022      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020fe:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002100:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002106:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002108:	e7e0      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800210a:	2100      	movs	r1, #0
 800210c:	1d20      	adds	r0, r4, #4
 800210e:	f7ff fe81 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002112:	4605      	mov	r5, r0
      break;
 8002114:	e7da      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002116:	2100      	movs	r1, #0
 8002118:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800211c:	f7ff fef2 	bl	8001f04 <RCCEx_PLL3_Config>
 8002120:	e7f7      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8002122:	462e      	mov	r6, r5
 8002124:	e7da      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002126:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800212a:	d002      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800212c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002130:	d1e2      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8002132:	bb4d      	cbnz	r5, 8002188 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002134:	4a59      	ldr	r2, [pc, #356]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002136:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800213a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800213c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002140:	430b      	orrs	r3, r1
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	051a      	lsls	r2, r3, #20
 8002148:	d52f      	bpl.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 800214a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800214e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002152:	d041      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002154:	d81a      	bhi.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002156:	b39b      	cbz	r3, 80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d036      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 800215e:	2601      	movs	r6, #1
 8002160:	4635      	mov	r5, r6
 8002162:	e022      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002164:	4a4d      	ldr	r2, [pc, #308]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002166:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800216e:	e7e0      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002170:	2100      	movs	r1, #0
 8002172:	1d20      	adds	r0, r4, #4
 8002174:	f7ff fe4e 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002178:	4605      	mov	r5, r0
      break;
 800217a:	e7da      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800217c:	2100      	movs	r1, #0
 800217e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002182:	f7ff febf 	bl	8001f04 <RCCEx_PLL3_Config>
 8002186:	e7f7      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002188:	462e      	mov	r6, r5
 800218a:	e7db      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 800218c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002190:	d002      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002196:	d1e2      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8002198:	bb25      	cbnz	r5, 80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800219c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80021a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80021a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021a6:	430b      	orrs	r3, r1
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	d527      	bpl.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 80021b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d033      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80021b6:	d817      	bhi.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80021b8:	b1d3      	cbz	r3, 80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 80021ba:	2601      	movs	r6, #1
 80021bc:	4635      	mov	r5, r6
 80021be:	e01f      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021c0:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80021ca:	e7e5      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021cc:	2100      	movs	r1, #0
 80021ce:	1d20      	adds	r0, r4, #4
 80021d0:	f7ff fe20 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021d4:	4605      	mov	r5, r0
      break;
 80021d6:	e7df      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021d8:	2100      	movs	r1, #0
 80021da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021de:	f7ff fe91 	bl	8001f04 <RCCEx_PLL3_Config>
 80021e2:	e7f7      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80021e4:	462e      	mov	r6, r5
 80021e6:	e7e0      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d01e      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x236>
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d1e4      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 80021f0:	bb0d      	cbnz	r5, 8002236 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021f2:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80021f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021fc:	430b      	orrs	r3, r1
 80021fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	04df      	lsls	r7, r3, #19
 8002204:	d527      	bpl.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220c:	d03e      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800220e:	d814      	bhi.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x246>
 8002210:	b383      	cbz	r3, 8002274 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	d033      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8002218:	2601      	movs	r6, #1
 800221a:	4635      	mov	r5, r6
 800221c:	e01b      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002220:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002226:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002228:	e7e2      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800222a:	2102      	movs	r1, #2
 800222c:	1d20      	adds	r0, r4, #4
 800222e:	f7ff fdf1 	bl	8001e14 <RCCEx_PLL2_Config>
 8002232:	4605      	mov	r5, r0
      break;
 8002234:	e7dc      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8002236:	462e      	mov	r6, r5
 8002238:	e7e2      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800223a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800223e:	d002      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002244:	d1e8      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8002246:	bb3d      	cbnz	r5, 8002298 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800224a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800224c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800224e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002252:	430b      	orrs	r3, r1
 8002254:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	0498      	lsls	r0, r3, #18
 800225a:	d532      	bpl.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 800225c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800225e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002262:	d044      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002264:	d81c      	bhi.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002266:	b323      	cbz	r3, 80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d039      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 800226e:	2601      	movs	r6, #1
 8002270:	4635      	mov	r5, r6
 8002272:	e026      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002276:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800227e:	e7e2      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002280:	2100      	movs	r1, #0
 8002282:	1d20      	adds	r0, r4, #4
 8002284:	f7ff fdc6 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002288:	4605      	mov	r5, r0
      break;
 800228a:	e7dc      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800228c:	2100      	movs	r1, #0
 800228e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002292:	f7ff fe37 	bl	8001f04 <RCCEx_PLL3_Config>
 8002296:	e7f7      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8002298:	462e      	mov	r6, r5
 800229a:	e7dc      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800229c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80022a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022a4:	d005      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80022a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022aa:	d002      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80022ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022b0:	d1dd      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 80022b2:	bb15      	cbnz	r5, 80022fa <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80022b4:	4aa0      	ldr	r2, [pc, #640]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80022b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80022b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80022ba:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80022be:	430b      	orrs	r3, r1
 80022c0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	0459      	lsls	r1, r3, #17
 80022c6:	d52d      	bpl.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022c8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80022cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d0:	d04b      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022d2:	d814      	bhi.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80022d4:	b1e3      	cbz	r3, 8002310 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80022d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022da:	d040      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 80022dc:	2601      	movs	r6, #1
 80022de:	4635      	mov	r5, r6
 80022e0:	e020      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022e2:	2101      	movs	r1, #1
 80022e4:	1d20      	adds	r0, r4, #4
 80022e6:	f7ff fd95 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022ea:	4605      	mov	r5, r0
      break;
 80022ec:	e7e1      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022ee:	2101      	movs	r1, #1
 80022f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022f4:	f7ff fe06 	bl	8001f04 <RCCEx_PLL3_Config>
 80022f8:	e7f7      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80022fa:	462e      	mov	r6, r5
 80022fc:	e7e1      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d005      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002308:	d002      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800230a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800230e:	d1e5      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8002310:	2d00      	cmp	r5, #0
 8002312:	d130      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002314:	4a88      	ldr	r2, [pc, #544]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002316:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800231a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800231c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002320:	430b      	orrs	r3, r1
 8002322:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	041a      	lsls	r2, r3, #16
 8002328:	d50f      	bpl.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 800232a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800232c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002330:	d023      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002336:	d026      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002338:	bb5b      	cbnz	r3, 8002392 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 800233a:	bb6d      	cbnz	r5, 8002398 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800233c:	4a7e      	ldr	r2, [pc, #504]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800233e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002340:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002342:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002346:	430b      	orrs	r3, r1
 8002348:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	01db      	lsls	r3, r3, #7
 800234e:	d533      	bpl.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8002350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002352:	2b03      	cmp	r3, #3
 8002354:	d874      	bhi.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002356:	e8df f003 	tbb	[pc, r3]
 800235a:	2126      	.short	0x2126
 800235c:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800235e:	2101      	movs	r1, #1
 8002360:	1d20      	adds	r0, r4, #4
 8002362:	f7ff fd57 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002366:	4605      	mov	r5, r0
      break;
 8002368:	e7d2      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800236a:	2101      	movs	r1, #1
 800236c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002370:	f7ff fdc8 	bl	8001f04 <RCCEx_PLL3_Config>
 8002374:	e7f7      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002376:	462e      	mov	r6, r5
 8002378:	e7d4      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800237a:	4a6f      	ldr	r2, [pc, #444]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800237c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800237e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002382:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002384:	e7d9      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002386:	2101      	movs	r1, #1
 8002388:	1d20      	adds	r0, r4, #4
 800238a:	f7ff fd43 	bl	8001e14 <RCCEx_PLL2_Config>
 800238e:	4605      	mov	r5, r0
      break;
 8002390:	e7d3      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8002392:	2601      	movs	r6, #1
 8002394:	4635      	mov	r5, r6
 8002396:	e7d8      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002398:	462e      	mov	r6, r5
 800239a:	e7d6      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800239c:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800239e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80023a6:	2d00      	cmp	r5, #0
 80023a8:	d14d      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80023aa:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80023ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023b0:	f023 0303 	bic.w	r3, r3, #3
 80023b4:	430b      	orrs	r3, r1
 80023b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	025f      	lsls	r7, r3, #9
 80023bc:	d54d      	bpl.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023be:	4f5f      	ldr	r7, [pc, #380]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80023c8:	f7fe fb60 	bl	8000a8c <HAL_GetTick>
 80023cc:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	05d8      	lsls	r0, r3, #23
 80023d2:	d53a      	bpl.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 80023d4:	2d00      	cmp	r5, #0
 80023d6:	d161      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80023da:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80023de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023e0:	4042      	eors	r2, r0
 80023e2:	f412 7f40 	tst.w	r2, #768	; 0x300
 80023e6:	d00b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80023ea:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80023f0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80023f4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80023f8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80023fc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80023fe:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002400:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002404:	d036      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002406:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800240a:	494b      	ldr	r1, [pc, #300]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800240c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002410:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002414:	d13e      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002416:	6908      	ldr	r0, [r1, #16]
 8002418:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800241a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800241e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002422:	4302      	orrs	r2, r0
 8002424:	610a      	str	r2, [r1, #16]
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	4a43      	ldr	r2, [pc, #268]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800242c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800242e:	430b      	orrs	r3, r1
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	e012      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002434:	2102      	movs	r1, #2
 8002436:	1d20      	adds	r0, r4, #4
 8002438:	f7ff fcec 	bl	8001e14 <RCCEx_PLL2_Config>
 800243c:	4605      	mov	r5, r0
      break;
 800243e:	e7b2      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8002440:	2601      	movs	r6, #1
 8002442:	4635      	mov	r5, r6
 8002444:	e7b8      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002446:	462e      	mov	r6, r5
 8002448:	e7b6      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fb1f 	bl	8000a8c <HAL_GetTick>
 800244e:	eba0 0008 	sub.w	r0, r0, r8
 8002452:	2864      	cmp	r0, #100	; 0x64
 8002454:	d9bb      	bls.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8002456:	2603      	movs	r6, #3
 8002458:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	07da      	lsls	r2, r3, #31
 800245e:	d52d      	bpl.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002460:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002462:	2b10      	cmp	r3, #16
 8002464:	d03b      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8002466:	d81b      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002468:	b303      	cbz	r3, 80024ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800246a:	2b08      	cmp	r3, #8
 800246c:	d031      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 800246e:	2601      	movs	r6, #1
 8002470:	4635      	mov	r5, r6
 8002472:	e023      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8002474:	f7fe fb0a 	bl	8000a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002478:	4f2f      	ldr	r7, [pc, #188]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 800247a:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002482:	0799      	lsls	r1, r3, #30
 8002484:	d4bf      	bmi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fb01 	bl	8000a8c <HAL_GetTick>
 800248a:	eba0 0008 	sub.w	r0, r0, r8
 800248e:	4548      	cmp	r0, r9
 8002490:	d9f6      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002492:	e7e0      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002494:	690a      	ldr	r2, [r1, #16]
 8002496:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800249a:	e7c3      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800249c:	462e      	mov	r6, r5
 800249e:	e7dc      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d003      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80024a4:	2b28      	cmp	r3, #40	; 0x28
 80024a6:	d001      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80024a8:	2b18      	cmp	r3, #24
 80024aa:	d1e0      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 80024ac:	b9ed      	cbnz	r5, 80024ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80024b0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80024b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024b4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	079b      	lsls	r3, r3, #30
 80024c0:	d522      	bpl.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80024c2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d831      	bhi.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x538>
 80024c8:	e8df f003 	tbb	[pc, r3]
 80024cc:	162a1116 	.word	0x162a1116
 80024d0:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024d2:	2101      	movs	r1, #1
 80024d4:	1d20      	adds	r0, r4, #4
 80024d6:	f7ff fc9d 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024da:	4605      	mov	r5, r0
      break;
 80024dc:	e7e6      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024de:	2101      	movs	r1, #1
 80024e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024e4:	f7ff fd0e 	bl	8001f04 <RCCEx_PLL3_Config>
 80024e8:	e7f7      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80024ea:	462e      	mov	r6, r5
 80024ec:	e7e6      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024ee:	2101      	movs	r1, #1
 80024f0:	1d20      	adds	r0, r4, #4
 80024f2:	f7ff fc8f 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024f8:	b9dd      	cbnz	r5, 8002532 <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80024fc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80024fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002500:	f023 0307 	bic.w	r3, r3, #7
 8002504:	430b      	orrs	r3, r1
 8002506:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	075f      	lsls	r7, r3, #29
 800250c:	d528      	bpl.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800250e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002512:	2b05      	cmp	r3, #5
 8002514:	d83a      	bhi.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002516:	e8df f003 	tbb	[pc, r3]
 800251a:	151a      	.short	0x151a
 800251c:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002520:	2101      	movs	r1, #1
 8002522:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002526:	f7ff fced 	bl	8001f04 <RCCEx_PLL3_Config>
 800252a:	e7e4      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 800252c:	2601      	movs	r6, #1
 800252e:	4635      	mov	r5, r6
 8002530:	e7ea      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002532:	462e      	mov	r6, r5
 8002534:	e7e8      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002536:	bf00      	nop
 8002538:	58024400 	.word	0x58024400
 800253c:	58024800 	.word	0x58024800
 8002540:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002544:	2101      	movs	r1, #1
 8002546:	1d20      	adds	r0, r4, #4
 8002548:	f7ff fc64 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800254c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800254e:	bb05      	cbnz	r5, 8002592 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002550:	4a98      	ldr	r2, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002552:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002556:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002558:	f023 0307 	bic.w	r3, r3, #7
 800255c:	430b      	orrs	r3, r1
 800255e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	0698      	lsls	r0, r3, #26
 8002564:	d529      	bpl.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002566:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800256a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800256e:	d03a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002570:	d811      	bhi.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002572:	b1cb      	cbz	r3, 80025a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002578:	d02f      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 800257a:	2601      	movs	r6, #1
 800257c:	4635      	mov	r5, r6
 800257e:	e01c      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002580:	2101      	movs	r1, #1
 8002582:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002586:	f7ff fcbd 	bl	8001f04 <RCCEx_PLL3_Config>
 800258a:	e7df      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 800258c:	2601      	movs	r6, #1
 800258e:	4635      	mov	r5, r6
 8002590:	e7e6      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8002592:	462e      	mov	r6, r5
 8002594:	e7e4      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259a:	d005      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800259c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a0:	d002      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80025a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025a6:	d1e8      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 80025a8:	bb1d      	cbnz	r5, 80025f2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025aa:	4a82      	ldr	r2, [pc, #520]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80025ac:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80025b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80025b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	0659      	lsls	r1, r3, #25
 80025be:	d52c      	bpl.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80025c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c8:	d03f      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x656>
 80025ca:	d814      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80025cc:	b1e3      	cbz	r3, 8002608 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d034      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 80025d4:	2601      	movs	r6, #1
 80025d6:	4635      	mov	r5, r6
 80025d8:	e01f      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025da:	2100      	movs	r1, #0
 80025dc:	1d20      	adds	r0, r4, #4
 80025de:	f7ff fc19 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e2:	4605      	mov	r5, r0
      break;
 80025e4:	e7e0      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e6:	2102      	movs	r1, #2
 80025e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025ec:	f7ff fc8a 	bl	8001f04 <RCCEx_PLL3_Config>
 80025f0:	e7f7      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80025f2:	462e      	mov	r6, r5
 80025f4:	e7e1      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fa:	d005      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80025fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002600:	d002      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002606:	d1e5      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 8002608:	bb2d      	cbnz	r5, 8002656 <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800260a:	4a6a      	ldr	r2, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800260c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002610:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002612:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002616:	430b      	orrs	r3, r1
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	061a      	lsls	r2, r3, #24
 800261e:	d530      	bpl.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002620:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002628:	f000 80a4 	beq.w	8002774 <HAL_RCCEx_PeriphCLKConfig+0x780>
 800262c:	d815      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x666>
 800262e:	b1eb      	cbz	r3, 800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002634:	f000 8098 	beq.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 8002638:	2601      	movs	r6, #1
 800263a:	4635      	mov	r5, r6
 800263c:	e021      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800263e:	2100      	movs	r1, #0
 8002640:	1d20      	adds	r0, r4, #4
 8002642:	f7ff fbe7 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002646:	4605      	mov	r5, r0
      break;
 8002648:	e7de      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800264a:	2102      	movs	r1, #2
 800264c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002650:	f7ff fc58 	bl	8001f04 <RCCEx_PLL3_Config>
 8002654:	e7f7      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002656:	462e      	mov	r6, r5
 8002658:	e7df      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800265a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265e:	d005      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002660:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002664:	d002      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002666:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800266a:	d1e5      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 800266c:	2d00      	cmp	r5, #0
 800266e:	f040 8087 	bne.w	8002780 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002672:	4a50      	ldr	r2, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002674:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002678:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800267a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800267e:	430b      	orrs	r3, r1
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	071b      	lsls	r3, r3, #28
 8002686:	d514      	bpl.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002688:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	d107      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002692:	2102      	movs	r1, #2
 8002694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002698:	f7ff fc34 	bl	8001f04 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800269c:	2800      	cmp	r0, #0
 800269e:	bf18      	it	ne
 80026a0:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80026a2:	4a44      	ldr	r2, [pc, #272]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026a4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80026a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	06df      	lsls	r7, r3, #27
 80026b6:	d514      	bpl.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80026b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c0:	d107      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80026c2:	2102      	movs	r1, #2
 80026c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026c8:	f7ff fc1c 	bl	8001f04 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80026cc:	2800      	cmp	r0, #0
 80026ce:	bf18      	it	ne
 80026d0:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026d2:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80026d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026de:	430b      	orrs	r3, r1
 80026e0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	0318      	lsls	r0, r3, #12
 80026e6:	d517      	bpl.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 80026e8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80026ec:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80026f0:	d048      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80026f2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80026f6:	d005      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x710>
 80026f8:	2900      	cmp	r1, #0
 80026fa:	d149      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026fc:	1d20      	adds	r0, r4, #4
 80026fe:	f7ff fb89 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002702:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002704:	2d00      	cmp	r5, #0
 8002706:	d146      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002708:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800270a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800270e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002710:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002714:	430b      	orrs	r3, r1
 8002716:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	0359      	lsls	r1, r3, #13
 800271c:	d518      	bpl.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 800271e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002726:	d038      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8002728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800272c:	d007      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800272e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002732:	d139      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002734:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002736:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800273e:	bbb5      	cbnz	r5, 80027ae <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002742:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002746:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002748:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800274c:	430b      	orrs	r3, r1
 800274e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	03da      	lsls	r2, r3, #15
 8002754:	d53e      	bpl.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002756:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002758:	b373      	cbz	r3, 80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275e:	f000 808c 	beq.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 8002762:	2601      	movs	r6, #1
 8002764:	4635      	mov	r5, r6
 8002766:	e035      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002768:	2100      	movs	r1, #0
 800276a:	1d20      	adds	r0, r4, #4
 800276c:	f7ff fb52 	bl	8001e14 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002770:	4605      	mov	r5, r0
      break;
 8002772:	e77b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002774:	2102      	movs	r1, #2
 8002776:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800277a:	f7ff fbc3 	bl	8001f04 <RCCEx_PLL3_Config>
 800277e:	e7f7      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002780:	462e      	mov	r6, r5
 8002782:	e77e      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002784:	2102      	movs	r1, #2
 8002786:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800278a:	f7ff fbbb 	bl	8001f04 <RCCEx_PLL3_Config>
 800278e:	e7b8      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8002790:	2601      	movs	r6, #1
 8002792:	4635      	mov	r5, r6
 8002794:	e7c0      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x724>
 8002796:	462e      	mov	r6, r5
 8002798:	e7be      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800279a:	2101      	movs	r1, #1
 800279c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027a0:	f7ff fbb0 	bl	8001f04 <RCCEx_PLL3_Config>
 80027a4:	4605      	mov	r5, r0
      break;
 80027a6:	e7ca      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 80027a8:	2601      	movs	r6, #1
 80027aa:	4635      	mov	r5, r6
 80027ac:	e7d0      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80027ae:	462e      	mov	r6, r5
 80027b0:	e7ce      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80027b2:	bf00      	nop
 80027b4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b8:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80027c2:	2d00      	cmp	r5, #0
 80027c4:	d15f      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80027c6:	4a39      	ldr	r2, [pc, #228]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80027ca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	430b      	orrs	r3, r1
 80027d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	d507      	bpl.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80027da:	2102      	movs	r1, #2
 80027dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027e0:	f7ff fb90 	bl	8001f04 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80027e4:	2800      	cmp	r0, #0
 80027e6:	bf18      	it	ne
 80027e8:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	039f      	lsls	r7, r3, #14
 80027ee:	d50e      	bpl.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 80027f0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80027f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80027f6:	d050      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80027f8:	d847      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x896>
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d14b      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 80027fe:	2d00      	cmp	r5, #0
 8002800:	d151      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002802:	482a      	ldr	r0, [pc, #168]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002804:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002806:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800280a:	430a      	orrs	r2, r1
 800280c:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800280e:	02dd      	lsls	r5, r3, #11
 8002810:	d506      	bpl.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002812:	4926      	ldr	r1, [pc, #152]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002814:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002816:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002818:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800281c:	4302      	orrs	r2, r0
 800281e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002820:	00d8      	lsls	r0, r3, #3
 8002822:	d507      	bpl.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002824:	4921      	ldr	r1, [pc, #132]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002826:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800282a:	690a      	ldr	r2, [r1, #16]
 800282c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002830:	4302      	orrs	r2, r0
 8002832:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002834:	0299      	lsls	r1, r3, #10
 8002836:	d506      	bpl.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002838:	491c      	ldr	r1, [pc, #112]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800283a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800283c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800283e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002842:	4302      	orrs	r2, r0
 8002844:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002846:	005a      	lsls	r2, r3, #1
 8002848:	d509      	bpl.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800284c:	6911      	ldr	r1, [r2, #16]
 800284e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002852:	6111      	str	r1, [r2, #16]
 8002854:	6911      	ldr	r1, [r2, #16]
 8002856:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800285a:	4301      	orrs	r1, r0
 800285c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800285e:	2b00      	cmp	r3, #0
 8002860:	da06      	bge.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002864:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002866:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002868:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800286c:	430b      	orrs	r3, r1
 800286e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002870:	1c30      	adds	r0, r6, #0
 8002872:	bf18      	it	ne
 8002874:	2001      	movne	r0, #1
 8002876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800287a:	2102      	movs	r1, #2
 800287c:	1d20      	adds	r0, r4, #4
 800287e:	f7ff fac9 	bl	8001e14 <RCCEx_PLL2_Config>
 8002882:	4605      	mov	r5, r0
      break;
 8002884:	e79d      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002886:	462e      	mov	r6, r5
 8002888:	e7a4      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 800288a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800288e:	d0b6      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002890:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002894:	d0b3      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8002896:	2601      	movs	r6, #1
 8002898:	e7b9      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4804      	ldr	r0, [pc, #16]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800289c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800289e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028a2:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80028a4:	e7ab      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80028a6:	462e      	mov	r6, r5
 80028a8:	e7b1      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80028aa:	bf00      	nop
 80028ac:	58024400 	.word	0x58024400

080028b0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_SDRAM_Init>:
{
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	460d      	mov	r5, r1
  if (hsdram == NULL)
 80028b8:	4604      	mov	r4, r0
 80028ba:	b1f0      	cbz	r0, 80028fa <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80028bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80028c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028c4:	b91b      	cbnz	r3, 80028ce <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80028c6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80028ca:	f7ff fff1 	bl	80028b0 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028ce:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80028d0:	1d21      	adds	r1, r4, #4
 80028d2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80028d8:	f000 f84b 	bl	8002972 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80028dc:	6862      	ldr	r2, [r4, #4]
 80028de:	4629      	mov	r1, r5
 80028e0:	6820      	ldr	r0, [r4, #0]
 80028e2:	f000 f881 	bl	80029e8 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80028e6:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 80028e8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028f0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80028f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
 80028fc:	e7fc      	b.n	80028f8 <HAL_SDRAM_Init+0x44>
 80028fe:	bf00      	nop
 8002900:	52004000 	.word	0x52004000

08002904 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002908:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 800290c:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800290e:	b2c0      	uxtb	r0, r0
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002910:	2802      	cmp	r0, #2
 8002912:	d010      	beq.n	8002936 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8002914:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8002918:	2c01      	cmp	r4, #1
 800291a:	d110      	bne.n	800293e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800291c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800291e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002920:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002924:	f000 f896 	bl	8002a54 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002928:	6833      	ldr	r3, [r6, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d104      	bne.n	8002938 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800292e:	2305      	movs	r3, #5
 8002930:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002934:	2000      	movs	r0, #0
}
 8002936:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002938:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800293c:	e7fa      	b.n	8002934 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
 8002940:	e7f9      	b.n	8002936 <HAL_SDRAM_SendCommand+0x32>

08002942 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002942:	b538      	push	{r3, r4, r5, lr}
 8002944:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002946:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800294a:	b2c0      	uxtb	r0, r0
 800294c:	2802      	cmp	r0, #2
 800294e:	d00d      	beq.n	800296c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002950:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 8002954:	b2ed      	uxtb	r5, r5
 8002956:	2d01      	cmp	r5, #1
 8002958:	d109      	bne.n	800296e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800295a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800295c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800295e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002962:	f000 f887 	bl	8002a74 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002966:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002968:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800296c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800296e:	2001      	movs	r0, #1
 8002970:	e7fc      	b.n	800296c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08002972 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8002976:	680a      	ldr	r2, [r1, #0]
 8002978:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800297c:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8002980:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8002984:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8002988:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800298c:	4323      	orrs	r3, r4
 800298e:	b9a2      	cbnz	r2, 80029ba <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002990:	ea43 0209 	orr.w	r2, r3, r9
 8002994:	6801      	ldr	r1, [r0, #0]
 8002996:	432a      	orrs	r2, r5
 8002998:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800299c:	ea42 0308 	orr.w	r3, r2, r8
 80029a0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80029a4:	ea43 030e 	orr.w	r3, r3, lr
 80029a8:	ea43 030c 	orr.w	r3, r3, ip
 80029ac:	433b      	orrs	r3, r7
 80029ae:	4333      	orrs	r3, r6
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80029b4:	2000      	movs	r0, #0
 80029b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80029ba:	6802      	ldr	r2, [r0, #0]
 80029bc:	ea43 0309 	orr.w	r3, r3, r9
 80029c0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80029c4:	4313      	orrs	r3, r2
 80029c6:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80029c8:	ea45 0308 	orr.w	r3, r5, r8
 80029cc:	6842      	ldr	r2, [r0, #4]
 80029ce:	ea43 030e 	orr.w	r3, r3, lr
 80029d2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80029d6:	ea43 030c 	orr.w	r3, r3, ip
 80029da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80029de:	433b      	orrs	r3, r7
 80029e0:	4333      	orrs	r3, r6
 80029e2:	4313      	orrs	r3, r2
 80029e4:	6043      	str	r3, [r0, #4]
 80029e6:	e7e5      	b.n	80029b4 <FMC_SDRAM_Init+0x42>

080029e8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80029e8:	68cb      	ldr	r3, [r1, #12]
 80029ea:	f103 3cff 	add.w	ip, r3, #4294967295
 80029ee:	694b      	ldr	r3, [r1, #20]
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	3b01      	subs	r3, #1
 80029f4:	680f      	ldr	r7, [r1, #0]
 80029f6:	684c      	ldr	r4, [r1, #4]
 80029f8:	688e      	ldr	r6, [r1, #8]
 80029fa:	051b      	lsls	r3, r3, #20
 80029fc:	690d      	ldr	r5, [r1, #16]
 80029fe:	3c01      	subs	r4, #1
 8002a00:	6989      	ldr	r1, [r1, #24]
 8002a02:	3e01      	subs	r6, #1
 8002a04:	3d01      	subs	r5, #1
 8002a06:	3f01      	subs	r7, #1
 8002a08:	3901      	subs	r1, #1
 8002a0a:	0124      	lsls	r4, r4, #4
 8002a0c:	0236      	lsls	r6, r6, #8
 8002a0e:	042d      	lsls	r5, r5, #16
 8002a10:	0609      	lsls	r1, r1, #24
 8002a12:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8002a16:	b95a      	cbnz	r2, 8002a30 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a18:	433b      	orrs	r3, r7
 8002a1a:	6882      	ldr	r2, [r0, #8]
 8002a1c:	4323      	orrs	r3, r4
 8002a1e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002a22:	4333      	orrs	r3, r6
 8002a24:	432b      	orrs	r3, r5
 8002a26:	430b      	orrs	r3, r1
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a30:	6882      	ldr	r2, [r0, #8]
 8002a32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a36:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002a3a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002a3c:	ea44 0306 	orr.w	r3, r4, r6
 8002a40:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8002a42:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002a44:	68c2      	ldr	r2, [r0, #12]
 8002a46:	432b      	orrs	r3, r5
 8002a48:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60c3      	str	r3, [r0, #12]
 8002a52:	e7eb      	b.n	8002a2c <FMC_SDRAM_Timing_Init+0x44>

08002a54 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002a54:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8002a56:	e9d1 3400 	ldrd	r3, r4, [r1]
 8002a5a:	6902      	ldr	r2, [r0, #16]
 8002a5c:	4323      	orrs	r3, r4
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	68ca      	ldr	r2, [r1, #12]
 8002a62:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8002a66:	688a      	ldr	r2, [r1, #8]
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002a6e:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8002a70:	2000      	movs	r0, #0
 8002a72:	bd10      	pop	{r4, pc}

08002a74 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002a74:	6943      	ldr	r3, [r0, #20]
 8002a76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a7a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8002a7e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002a82:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	4770      	bx	lr

08002a88 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8002a88:	4770      	bx	lr
	...

08002a8c <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) 
{
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8002a8c:	f44f 3134 	mov.w	r1, #184320	; 0x2d000
 8002a90:	4801      	ldr	r0, [pc, #4]	; (8002a98 <GUI_X_Config+0xc>)
 8002a92:	f000 bc81 	b.w	8003398 <GUI_ALLOC_AssignMemory>
 8002a96:	bf00      	nop
 8002a98:	2400003c 	.word	0x2400003c

08002a9c <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8002a9c:	b530      	push	{r4, r5, lr}
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002a9e:	2800      	cmp	r0, #0
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002aa0:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <DMA2D_CopyBuffer+0x3c>)
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2402      	moveq	r4, #2
 8002aaa:	2403      	movne	r4, #3
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002aac:	6005      	str	r5, [r0, #0]
  	
  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8002aae:	60c1      	str	r1, [r0, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8002ab0:	63c2      	str	r2, [r0, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8002ab2:	9a04      	ldr	r2, [sp, #16]
 8002ab4:	6102      	str	r2, [r0, #16]
  DMA2D->OOR     = OffLineDst; 
 8002ab6:	9a05      	ldr	r2, [sp, #20]
 8002ab8:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8002aba:	61c4      	str	r4, [r0, #28]
  
  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8002abc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002ac0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002ac4:	6443      	str	r3, [r0, #68]	; 0x44
  
  DMA2D->CR     |= DMA2D_CR_START;   
 8002ac6:	6803      	ldr	r3, [r0, #0]
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6003      	str	r3, [r0, #0]
 
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 8002ace:	6803      	ldr	r3, [r0, #0]
 8002ad0:	07db      	lsls	r3, r3, #31
 8002ad2:	d4fc      	bmi.n	8002ace <DMA2D_CopyBuffer+0x32>
  {
  }
}
 8002ad4:	bd30      	pop	{r4, r5, pc}
 8002ad6:	bf00      	nop
 8002ad8:	52001000 	.word	0x52001000

08002adc <CUSTOM_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 8002adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002ae0:	241c      	movs	r4, #28
 8002ae2:	4e0e      	ldr	r6, [pc, #56]	; (8002b1c <CUSTOM_CopyRect+0x40>)
 8002ae4:	4344      	muls	r4, r0
 8002ae6:	1935      	adds	r5, r6, r4
 8002ae8:	5936      	ldr	r6, [r6, r4]
 8002aea:	696f      	ldr	r7, [r5, #20]
 8002aec:	68ec      	ldr	r4, [r5, #12]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002aee:	9d06      	ldr	r5, [sp, #24]
  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002af0:	fb02 1104 	mla	r1, r2, r4, r1
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002af4:	fb05 3504 	mla	r5, r5, r4, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002af8:	fb07 6101 	mla	r1, r7, r1, r6
 8002afc:	fb07 6205 	mla	r2, r7, r5, r6
{
 8002b00:	e9dd ce07 	ldrd	ip, lr, [sp, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002b04:	eba4 080c 	sub.w	r8, r4, ip
 8002b08:	f8cd e018 	str.w	lr, [sp, #24]
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	e9cd 8807 	strd	r8, r8, [sp, #28]
}
 8002b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002b16:	f7ff bfc1 	b.w	8002a9c <DMA2D_CopyBuffer>
 8002b1a:	bf00      	nop
 8002b1c:	2402d16c 	.word	0x2402d16c

08002b20 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 8002b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b24:	4605      	mov	r5, r0
 8002b26:	4688      	mov	r8, r1
 8002b28:	4617      	mov	r7, r2
 8002b2a:	4699      	mov	r9, r3
 8002b2c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  /* Data Cahce management */
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8002b30:	f000 fe5c 	bl	80037ec <GUI_GetDrawMode>
 8002b34:	2801      	cmp	r0, #1
 8002b36:	d111      	bne.n	8002b5c <CUSTOM_FillRect+0x3c>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2119      	movs	r1, #25
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f001 ffc8 	bl	8004ad2 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8002b42:	464a      	mov	r2, r9
 8002b44:	4639      	mov	r1, r7
 8002b46:	4640      	mov	r0, r8
 8002b48:	4623      	mov	r3, r4
 8002b4a:	f001 faff 	bl	800414c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002b4e:	4628      	mov	r0, r5
 8002b50:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <CUSTOM_FillRect+0xac>)
 8002b52:	2119      	movs	r1, #25
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
	}
}
 8002b54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002b58:	f001 bfbb 	b.w	8004ad2 <LCD_SetDevFunc>
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b5c:	211c      	movs	r1, #28
 8002b5e:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <CUSTOM_FillRect+0xb0>)
    xSize = x1 - x0 + 1;
 8002b60:	eba9 0c08 	sub.w	ip, r9, r8
    ySize = y1 - y0 + 1;
 8002b64:	1be4      	subs	r4, r4, r7
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b66:	4369      	muls	r1, r5
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002b68:	2d00      	cmp	r5, #0
    ySize = y1 - y0 + 1;
 8002b6a:	f104 0401 	add.w	r4, r4, #1
    xSize = x1 - x0 + 1;
 8002b6e:	f10c 0c01 	add.w	ip, ip, #1
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b72:	eb00 0e01 	add.w	lr, r0, r1
 8002b76:	5841      	ldr	r1, [r0, r1]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002b78:	b2a4      	uxth	r4, r4
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002b7a:	4816      	ldr	r0, [pc, #88]	; (8002bd4 <CUSTOM_FillRect+0xb4>)
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b7c:	f8de 9014 	ldr.w	r9, [lr, #20]
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002b80:	4d15      	ldr	r5, [pc, #84]	; (8002bd8 <CUSTOM_FillRect+0xb8>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002b82:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b86:	e9de 2303 	ldrd	r2, r3, [lr, #12]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b8a:	f8de e008 	ldr.w	lr, [lr, #8]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b8e:	fb03 f302 	mul.w	r3, r3, r2
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b92:	fb07 8802 	mla	r8, r7, r2, r8
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8002b96:	eba2 020c 	sub.w	r2, r2, ip
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b9a:	fb09 f303 	mul.w	r3, r9, r3
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b9e:	fb09 f808 	mul.w	r8, r9, r8
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002ba2:	6005      	str	r5, [r0, #0]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002ba4:	fb0e 8303 	mla	r3, lr, r3, r8
  DMA2D->OCOLR   = ColorIndex;                     
 8002ba8:	6386      	str	r6, [r0, #56]	; 0x38
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002baa:	440b      	add	r3, r1
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002bac:	bf0c      	ite	eq
 8002bae:	2102      	moveq	r1, #2
 8002bb0:	2103      	movne	r1, #3
  DMA2D->OMAR    = (U32)pDst;                      
 8002bb2:	63c3      	str	r3, [r0, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 8002bb4:	6402      	str	r2, [r0, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 8002bb6:	6341      	str	r1, [r0, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002bb8:	6444      	str	r4, [r0, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START; 
 8002bba:	6803      	ldr	r3, [r0, #0]
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6003      	str	r3, [r0, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 8002bc2:	6803      	ldr	r3, [r0, #0]
 8002bc4:	07db      	lsls	r3, r3, #31
 8002bc6:	d4fc      	bmi.n	8002bc2 <CUSTOM_FillRect+0xa2>
}
 8002bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bcc:	08002b21 	.word	0x08002b21
 8002bd0:	2402d16c 	.word	0x2402d16c
 8002bd4:	52001000 	.word	0x52001000
 8002bd8:	00030200 	.word	0x00030200

08002bdc <CUSTOM_CopyBuffer>:
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	4616      	mov	r6, r2
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002be0:	221c      	movs	r2, #28
 8002be2:	4f0d      	ldr	r7, [pc, #52]	; (8002c18 <CUSTOM_CopyBuffer+0x3c>)
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8002be4:	b085      	sub	sp, #20
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002be6:	4342      	muls	r2, r0
 8002be8:	18bc      	adds	r4, r7, r2
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 8002bea:	58bf      	ldr	r7, [r7, r2]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002bec:	2200      	movs	r2, #0
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002bee:	6965      	ldr	r5, [r4, #20]
 8002bf0:	e9d4 3c03 	ldrd	r3, ip, [r4, #12]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002bf4:	e9cd 2201 	strd	r2, r2, [sp, #4]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002bf8:	fb0c fe03 	mul.w	lr, ip, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002bfc:	f8cd c000 	str.w	ip, [sp]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002c00:	fb05 f50e 	mul.w	r5, r5, lr
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002c04:	fb05 7206 	mla	r2, r5, r6, r7
 8002c08:	fb05 7101 	mla	r1, r5, r1, r7
 8002c0c:	f7ff ff46 	bl	8002a9c <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8002c10:	60a6      	str	r6, [r4, #8]
}
 8002c12:	b005      	add	sp, #20
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2402d16c 	.word	0x2402d16c

08002c1c <HAL_DMA2D_MspInit>:
  __HAL_RCC_DMA2D_CLK_ENABLE();   
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_DMA2D_MspInit+0x20>)
{  
 8002c1e:	b082      	sub	sp, #8
  __HAL_RCC_DMA2D_CLK_ENABLE();   
 8002c20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c24:	f042 0210 	orr.w	r2, r2, #16
 8002c28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	9b01      	ldr	r3, [sp, #4]
}
 8002c38:	b002      	add	sp, #8
 8002c3a:	4770      	bx	lr
 8002c3c:	58024400 	.word	0x58024400

08002c40 <HAL_LTDC_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <HAL_LTDC_MspInit+0xd8>)
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c42:	4836      	ldr	r0, [pc, #216]	; (8002d1c <HAL_LTDC_MspInit+0xdc>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c44:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002c48:	f042 0208 	orr.w	r2, r2, #8
{  
 8002c4c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
{  
 8002c52:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c54:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c58:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c5a:	2600      	movs	r6, #0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c5c:	250e      	movs	r5, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c5e:	f002 0208 	and.w	r2, r2, #8
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c62:	a905      	add	r1, sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c68:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c6c:	f042 0210 	orr.w	r2, r2, #16
 8002c70:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002c74:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c78:	f002 0210 	and.w	r2, r2, #16
 8002c7c:	9201      	str	r2, [sp, #4]
 8002c7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c90:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002c94:	9202      	str	r2, [sp, #8]
 8002c96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002ca4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ca8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002cac:	9203      	str	r2, [sp, #12]
 8002cae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002cb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002cc0:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	9304      	str	r3, [sp, #16]
 8002cc8:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002cce:	e9cd 6407 	strd	r6, r4, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cd2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002cd6:	f7fd ffdd 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002cde:	a905      	add	r1, sp, #20
 8002ce0:	480f      	ldr	r0, [pc, #60]	; (8002d20 <HAL_LTDC_MspInit+0xe0>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002ce2:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ce4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002ce8:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002cec:	f7fd ffd2 	bl	8000c94 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002cf0:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002cf2:	a905      	add	r1, sp, #20
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <HAL_LTDC_MspInit+0xe4>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002cf6:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cf8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002cfc:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d00:	f7fd ffc8 	bl	8000c94 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8002d04:	4632      	mov	r2, r6
 8002d06:	4629      	mov	r1, r5
 8002d08:	2058      	movs	r0, #88	; 0x58
 8002d0a:	f7fd fee5 	bl	8000ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002d0e:	2058      	movs	r0, #88	; 0x58
 8002d10:	f7fd ff14 	bl	8000b3c <HAL_NVIC_EnableIRQ>
}
 8002d14:	b00a      	add	sp, #40	; 0x28
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58022000 	.word	0x58022000
 8002d20:	58022400 	.word	0x58022400
 8002d24:	58022800 	.word	0x58022800

08002d28 <HAL_LTDC_MspDeInit>:
  __HAL_RCC_LTDC_FORCE_RESET();
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_LTDC_MspDeInit+0x1c>)
 8002d2a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002d36:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002d42:	4770      	bx	lr
 8002d44:	58024400 	.word	0x58024400

08002d48 <HAL_LTDC_LineEventCallback>:
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8002d48:	b538      	push	{r3, r4, r5, lr}
    if (layer_prop[layer].pending_buffer >= 0) 
 8002d4a:	4c11      	ldr	r4, [pc, #68]	; (8002d90 <HAL_LTDC_LineEventCallback+0x48>)
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8002d4c:	4605      	mov	r5, r0
    if (layer_prop[layer].pending_buffer >= 0) 
 8002d4e:	6863      	ldr	r3, [r4, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db16      	blt.n	8002d82 <HAL_LTDC_LineEventCallback+0x3a>
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8002d54:	6863      	ldr	r3, [r4, #4]
 8002d56:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8002d5a:	434a      	muls	r2, r1
 8002d5c:	6961      	ldr	r1, [r4, #20]
 8002d5e:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	fb01 2303 	mla	r3, r1, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8002d66:	6802      	ldr	r2, [r0, #0]
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8002d68:	2000      	movs	r0, #0
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8002d6a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8002d6e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8002d76:	6861      	ldr	r1, [r4, #4]
 8002d78:	f001 f862 	bl	8003e40 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 8002d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d80:	6063      	str	r3, [r4, #4]
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8002d82:	4628      	mov	r0, r5
 8002d84:	2100      	movs	r1, #0
}
 8002d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8002d8a:	f7fe bb19 	b.w	80013c0 <HAL_LTDC_ProgramLineEvent>
 8002d8e:	bf00      	nop
 8002d90:	2402d16c 	.word	0x2402d16c

08002d94 <LCD_X_Config>:
{
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_LTDC_DeInit(&hltdc);
 8002d96:	4d4d      	ldr	r5, [pc, #308]	; (8002ecc <LCD_X_Config+0x138>)
  hltdc.Init.HorizontalSync = 29;
 8002d98:	2702      	movs	r7, #2
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d9a:	4c4d      	ldr	r4, [pc, #308]	; (8002ed0 <LCD_X_Config+0x13c>)
  hltdc.Init.TotalHeigh = 524;
 8002d9c:	2600      	movs	r6, #0
  HAL_LTDC_DeInit(&hltdc);
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f7fe f954 	bl	800104c <HAL_LTDC_DeInit>
  hltdc.Init.HorizontalSync = 29;
 8002da4:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedHBP = 143;
 8002da6:	228f      	movs	r2, #143	; 0x8f
  hltdc.Init.AccumulatedActiveW = 783;
 8002da8:	f240 310f 	movw	r1, #783	; 0x30f
  hltdc.Init.TotalWidth = 799;
 8002dac:	f240 301f 	movw	r0, #799	; 0x31f
  periph_clk_init_struct.PLL3.PLL3N = 160;
 8002db0:	f04f 0e05 	mov.w	lr, #5
  hltdc.Init.TotalHeigh = 524;
 8002db4:	86ae      	strh	r6, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002db6:	f885 6036 	strb.w	r6, [r5, #54]	; 0x36
  periph_clk_init_struct.PLL3.PLL3FRACN = 0;
 8002dba:	65e6      	str	r6, [r4, #92]	; 0x5c
  periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002dbc:	65a6      	str	r6, [r4, #88]	; 0x58
  hltdc.Init.HorizontalSync = 29;
 8002dbe:	e9c5 3705 	strd	r3, r7, [r5, #20]
  hltdc.Init.AccumulatedHBP = 143;
 8002dc2:	2322      	movs	r3, #34	; 0x22
 8002dc4:	e9c5 2307 	strd	r2, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 783;
 8002dc8:	f240 2302 	movw	r3, #514	; 0x202
 8002dcc:	e9c5 1309 	strd	r1, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalWidth = 799;
 8002dd0:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8002dd4:	e9c5 030b 	strd	r0, r3, [r5, #44]	; 0x2c
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002dd8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct); 
 8002ddc:	f104 001c 	add.w	r0, r4, #28
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002de0:	61e3      	str	r3, [r4, #28]
  periph_clk_init_struct.PLL3.PLL3N = 160;
 8002de2:	23a0      	movs	r3, #160	; 0xa0
 8002de4:	e9c4 e310 	strd	lr, r3, [r4, #64]	; 0x40
  periph_clk_init_struct.PLL3.PLL3R = 32;
 8002de8:	2320      	movs	r3, #32
 8002dea:	6523      	str	r3, [r4, #80]	; 0x50
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8002dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  periph_clk_init_struct.PLL3.PLL3Q = 2;
 8002df0:	e9c4 7712 	strd	r7, r7, [r4, #72]	; 0x48
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8002df4:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct); 
 8002df6:	f7ff f8fd 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
  hltdc.Instance = LTDC;
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <LCD_X_Config+0x140>)
  HAL_LTDC_Init(&hltdc);
 8002dfc:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8002dfe:	602b      	str	r3, [r5, #0]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002e00:	e9c5 6601 	strd	r6, r6, [r5, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002e04:	e9c5 6603 	strd	r6, r6, [r5, #12]
  HAL_LTDC_Init(&hltdc);
 8002e08:	f7fe f8b4 	bl	8000f74 <HAL_LTDC_Init>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f7fe fad6 	bl	80013c0 <HAL_LTDC_ProgramLineEvent>
  HAL_LTDC_EnableDither(&hltdc);
 8002e14:	4628      	mov	r0, r5
 8002e16:	f7fe fa51 	bl	80012bc <HAL_LTDC_EnableDither>
  hdma2d.Init.Mode         = DMA2D_R2M;
 8002e1a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance          = DMA2D; 
 8002e1e:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0x0;     
 8002e20:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
  hdma2d.Init.ColorMode    = DMA2D_INPUT_RGB565;
 8002e24:	e9c4 3737 	strd	r3, r7, [r4, #220]	; 0xdc
  hdma2d.Instance          = DMA2D; 
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <LCD_X_Config+0x144>)
 8002e2a:	f840 3fd8 	str.w	r3, [r0, #216]!
  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002e2e:	f7fd fef3 	bl	8000c18 <HAL_DMA2D_Init>
 8002e32:	4605      	mov	r5, r0
 8002e34:	b100      	cbz	r0, 8002e38 <LCD_X_Config+0xa4>
 8002e36:	e7fe      	b.n	8002e36 <LCD_X_Config+0xa2>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8002e38:	2103      	movs	r1, #3
 8002e3a:	f001 f815 	bl	8003e68 <GUI_MULTIBUF_ConfigEx>
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8002e3e:	462b      	mov	r3, r5
 8002e40:	462a      	mov	r2, r5
 8002e42:	4926      	ldr	r1, [pc, #152]	; (8002edc <LCD_X_Config+0x148>)
 8002e44:	4826      	ldr	r0, [pc, #152]	; (8002ee0 <LCD_X_Config+0x14c>)
 8002e46:	f000 ffc3 	bl	8003dd0 <GUI_DEVICE_CreateAndLink>
  if (LCD_GetSwapXYEx(0)) {
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f001 fd42 	bl	80048d4 <LCD_GetSwapXYEx>
 8002e50:	4606      	mov	r6, r0
 8002e52:	b370      	cbz	r0, 8002eb2 <LCD_X_Config+0x11e>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8002e54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002e58:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f001 fe68 	bl	8004b32 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8002e62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002e66:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002e6a:	4628      	mov	r0, r5
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002e6c:	f001 fea5 	bl	8004bba <LCD_SetVSizeEx>
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <LCD_X_Config+0x148>)
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002e72:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002e76:	2000      	movs	r0, #0
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002e78:	61a3      	str	r3, [r4, #24]
    layer_prop[i].pending_buffer = -1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002e7e:	6021      	str	r1, [r4, #0]
    layer_prop[i].pending_buffer = -1;
 8002e80:	6063      	str	r3, [r4, #4]
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002e82:	f001 fe84 	bl	8004b8e <LCD_SetVRAMAddrEx>
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002e86:	2000      	movs	r0, #0
 8002e88:	f001 fd18 	bl	80048bc <LCD_GetBitsPerPixelEx>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <LCD_X_Config+0x150>)
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002e8e:	10c0      	asrs	r0, r0, #3
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002e90:	2121      	movs	r1, #33	; 0x21
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002e92:	6160      	str	r0, [r4, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f001 fe1c 	bl	8004ad2 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <LCD_X_Config+0x154>)
 8002e9c:	2123      	movs	r1, #35	; 0x23
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f001 fe17 	bl	8004ad2 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002ea4:	4a11      	ldr	r2, [pc, #68]	; (8002eec <LCD_X_Config+0x158>)
 8002ea6:	2119      	movs	r1, #25
 8002ea8:	2000      	movs	r0, #0
}
 8002eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002eae:	f001 be10 	b.w	8004ad2 <LCD_SetDevFunc>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8002eb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002eb6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002eba:	f001 fe3a 	bl	8004b32 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002ebe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ec2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	e7d0      	b.n	8002e6c <LCD_X_Config+0xd8>
 8002eca:	bf00      	nop
 8002ecc:	2402d4c4 	.word	0x2402d4c4
 8002ed0:	2402d16c 	.word	0x2402d16c
 8002ed4:	50001000 	.word	0x50001000
 8002ed8:	52001000 	.word	0x52001000
 8002edc:	08007fd8 	.word	0x08007fd8
 8002ee0:	08008394 	.word	0x08008394
 8002ee4:	08002bdd 	.word	0x08002bdd
 8002ee8:	08002add 	.word	0x08002add
 8002eec:	08002b21 	.word	0x08002b21

08002ef0 <LCD_X_DisplayDriver>:
  switch (Cmd) 
 8002ef0:	3901      	subs	r1, #1
{
 8002ef2:	b530      	push	{r4, r5, lr}
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	b08f      	sub	sp, #60	; 0x3c
 8002ef8:	4615      	mov	r5, r2
  switch (Cmd) 
 8002efa:	290d      	cmp	r1, #13
 8002efc:	f200 80ab 	bhi.w	8003056 <LCD_X_DisplayDriver+0x166>
 8002f00:	e8df f001 	tbb	[pc, r1]
 8002f04:	4c35a907 	.word	0x4c35a907
 8002f08:	737a5a53 	.word	0x737a5a53
 8002f0c:	90a98a60 	.word	0x90a98a60
 8002f10:	459a      	.short	0x459a
  if (LayerIndex < GUI_NUM_LAYERS) 
 8002f12:	bb40      	cbnz	r0, 8002f66 <LCD_X_DisplayDriver+0x76>
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002f14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f18:	2102      	movs	r1, #2
    layer_cfg.WindowX1 = XSIZE_PHYS;
 8002f1a:	f44f 7220 	mov.w	r2, #640	; 0x280
    layer_cfg.WindowX0 = 0;
 8002f1e:	9001      	str	r0, [sp, #4]
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8002f20:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    layer_cfg.Backcolor.Green = 0;
 8002f24:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002f28:	e9cd 3104 	strd	r3, r1, [sp, #16]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8002f2c:	494b      	ldr	r1, [pc, #300]	; (800305c <LCD_X_DisplayDriver+0x16c>)
 8002f2e:	6809      	ldr	r1, [r1, #0]
 8002f30:	910a      	str	r1, [sp, #40]	; 0x28
    layer_cfg.Alpha = 255;
 8002f32:	21ff      	movs	r1, #255	; 0xff
    layer_cfg.WindowY0 = 0;
 8002f34:	e9cd 2002 	strd	r2, r0, [sp, #8]
    layer_cfg.Alpha0 = 0;
 8002f38:	e9cd 1006 	strd	r1, r0, [sp, #24]
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f3c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002f40:	2107      	movs	r1, #7
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8002f42:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f46:	e9cd 0108 	strd	r0, r1, [sp, #32]
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	a901      	add	r1, sp, #4
 8002f4e:	4844      	ldr	r0, [pc, #272]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002f50:	f7fe f8e7 	bl	8001122 <HAL_LTDC_ConfigLayer>
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8) 
 8002f54:	4620      	mov	r0, r4
 8002f56:	f001 fcb1 	bl	80048bc <LCD_GetBitsPerPixelEx>
 8002f5a:	2808      	cmp	r0, #8
 8002f5c:	dc03      	bgt.n	8002f66 <LCD_X_DisplayDriver+0x76>
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8002f5e:	4621      	mov	r1, r4
 8002f60:	483f      	ldr	r0, [pc, #252]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002f62:	f7fe f993 	bl	800128c <HAL_LTDC_EnableCLUT>
  int r = 0;
 8002f66:	2500      	movs	r5, #0
}
 8002f68:	4628      	mov	r0, r5
 8002f6a:	b00f      	add	sp, #60	; 0x3c
 8002f6c:	bd30      	pop	{r4, r5, pc}
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002f6e:	231c      	movs	r3, #28
 8002f70:	4a3a      	ldr	r2, [pc, #232]	; (800305c <LCD_X_DisplayDriver+0x16c>)
 8002f72:	686d      	ldr	r5, [r5, #4]
 8002f74:	4343      	muls	r3, r0
 8002f76:	18d0      	adds	r0, r2, r3
 8002f78:	58d3      	ldr	r3, [r2, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002f7a:	4622      	mov	r2, r4
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002f7c:	68c1      	ldr	r1, [r0, #12]
 8002f7e:	6940      	ldr	r0, [r0, #20]
 8002f80:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002f82:	fb00 3101 	mla	r1, r0, r1, r3
 8002f86:	4836      	ldr	r0, [pc, #216]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002f88:	f7fe f9f9 	bl	800137e <HAL_LTDC_SetAddress>
 8002f8c:	e7eb      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8002f8e:	4933      	ldr	r1, [pc, #204]	; (800305c <LCD_X_DisplayDriver+0x16c>)
 8002f90:	231c      	movs	r3, #28
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	fb03 1400 	mla	r4, r3, r0, r1
 8002f98:	6062      	str	r2, [r4, #4]
 8002f9a:	e7e4      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	482f      	ldr	r0, [pc, #188]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002fa4:	f7fe f903 	bl	80011ae <HAL_LTDC_ConfigCLUT>
 8002fa8:	e7dd      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    __HAL_LTDC_ENABLE(&hltdc);
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	6993      	ldr	r3, [r2, #24]
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc);
 8002fb4:	6193      	str	r3, [r2, #24]
 8002fb6:	e7d6      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	6993      	ldr	r3, [r2, #24]
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	e7f7      	b.n	8002fb4 <LCD_X_DisplayDriver+0xc4>
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002fc6:	01c4      	lsls	r4, r0, #7
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8002fc8:	6829      	ldr	r1, [r5, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2901      	cmp	r1, #1
 8002fce:	f102 0384 	add.w	r3, r2, #132	; 0x84
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8002fd2:	5919      	ldr	r1, [r3, r4]
 8002fd4:	bf0c      	ite	eq
 8002fd6:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8002fda:	f021 0101 	bicne.w	r1, r1, #1
 8002fde:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8002fe0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6253      	str	r3, [r2, #36]	; 0x24
 8002fe8:	e7bd      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8002fea:	4603      	mov	r3, r0
 8002fec:	e9d2 1200 	ldrd	r1, r2, [r2]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8002ff0:	481b      	ldr	r0, [pc, #108]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 8002ff2:	f7fe f97b 	bl	80012ec <HAL_LTDC_SetWindowPosition>
 8002ff6:	e7b6      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8002ff8:	aa01      	add	r2, sp, #4
 8002ffa:	4669      	mov	r1, sp
 8002ffc:	f000 ff58 	bl	8003eb0 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8003000:	4a16      	ldr	r2, [pc, #88]	; (800305c <LCD_X_DisplayDriver+0x16c>)
 8003002:	231c      	movs	r3, #28
 8003004:	fb03 2304 	mla	r3, r3, r4, r2
 8003008:	682a      	ldr	r2, [r5, #0]
 800300a:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800300c:	686a      	ldr	r2, [r5, #4]
 800300e:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003010:	4623      	mov	r3, r4
 8003012:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003016:	e7eb      	b.n	8002ff0 <LCD_X_DisplayDriver+0x100>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8003018:	4602      	mov	r2, r0
 800301a:	6829      	ldr	r1, [r5, #0]
 800301c:	4810      	ldr	r0, [pc, #64]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 800301e:	f7fe f98e 	bl	800133e <HAL_LTDC_SetAlpha>
 8003022:	e7a0      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8003024:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8003026:	4601      	mov	r1, r0
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LCD_X_DisplayDriver+0x170>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800302a:	b115      	cbz	r5, 8003032 <LCD_X_DisplayDriver+0x142>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800302c:	f7fe f8fe 	bl	800122c <HAL_LTDC_EnableColorKeying>
 8003030:	e799      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8003032:	f7fe f913 	bl	800125c <HAL_LTDC_DisableColorKeying>
 8003036:	e797      	b.n	8002f68 <LCD_X_DisplayDriver+0x78>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8003038:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 800303a:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800303c:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8003040:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8003044:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8003048:	4311      	orrs	r1, r2
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 800304a:	4602      	mov	r2, r0
 800304c:	4804      	ldr	r0, [pc, #16]	; (8003060 <LCD_X_DisplayDriver+0x170>)
 800304e:	4319      	orrs	r1, r3
 8003050:	f7fe f890 	bl	8001174 <HAL_LTDC_ConfigColorKeying>
 8003054:	e787      	b.n	8002f66 <LCD_X_DisplayDriver+0x76>
    r = -1;
 8003056:	f04f 35ff 	mov.w	r5, #4294967295
  return r;
 800305a:	e785      	b.n	8002f68 <LCD_X_DisplayDriver+0x78>
 800305c:	2402d16c 	.word	0x2402d16c
 8003060:	2402d4c4 	.word	0x2402d4c4

08003064 <LCD_Index2Color_M565>:
 8003064:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <LCD_Index2Color_M565+0x24>)
 800306a:	5cd1      	ldrb	r1, [r2, r3]
 800306c:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <LCD_Index2Color_M565+0x28>)
 8003072:	f000 001f 	and.w	r0, r0, #31
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	5c10      	ldrb	r0, [r2, r0]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003080:	4418      	add	r0, r3
 8003082:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8003086:	4770      	bx	lr
 8003088:	08008318 	.word	0x08008318
 800308c:	08008358 	.word	0x08008358

08003090 <_Color2Index_M565>:
 8003090:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <_Color2Index_M565+0x20>)
 8003096:	5cd1      	ldrb	r1, [r2, r3]
 8003098:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800309c:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <_Color2Index_M565+0x24>)
 800309e:	b2c0      	uxtb	r0, r0
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	5c10      	ldrb	r0, [r2, r0]
 80030a4:	02db      	lsls	r3, r3, #11
 80030a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80030aa:	4418      	add	r0, r3
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	08008018 	.word	0x08008018
 80030b4:	08008118 	.word	0x08008118

080030b8 <_GetIndexMask_M565>:
 80030b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030bc:	4770      	bx	lr
	...

080030c0 <_Color2IndexBulk>:
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	f8df e050 	ldr.w	lr, [pc, #80]	; 8003114 <_Color2IndexBulk+0x54>
 80030c6:	4606      	mov	r6, r0
 80030c8:	460d      	mov	r5, r1
 80030ca:	4614      	mov	r4, r2
 80030cc:	f8de e000 	ldr.w	lr, [lr]
 80030d0:	461f      	mov	r7, r3
 80030d2:	f1be 0f00 	cmp.w	lr, #0
 80030d6:	d003      	beq.n	80030e0 <_Color2IndexBulk+0x20>
 80030d8:	46f4      	mov	ip, lr
 80030da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80030de:	4760      	bx	ip
 80030e0:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003118 <_Color2IndexBulk+0x58>
 80030e4:	490a      	ldr	r1, [pc, #40]	; (8003110 <_Color2IndexBulk+0x50>)
 80030e6:	f856 2b04 	ldr.w	r2, [r6], #4
 80030ea:	3c01      	subs	r4, #1
 80030ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80030f0:	f81e 0003 	ldrb.w	r0, [lr, r3]
 80030f4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	5c8a      	ldrb	r2, [r1, r2]
 80030fe:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8003102:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8003106:	4413      	add	r3, r2
 8003108:	802b      	strh	r3, [r5, #0]
 800310a:	443d      	add	r5, r7
 800310c:	d1eb      	bne.n	80030e6 <_Color2IndexBulk+0x26>
 800310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003110:	08008118 	.word	0x08008118
 8003114:	2402d2ac 	.word	0x2402d2ac
 8003118:	08008018 	.word	0x08008018

0800311c <_Index2ColorBulk>:
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	4e16      	ldr	r6, [pc, #88]	; (8003178 <_Index2ColorBulk+0x5c>)
 8003120:	4686      	mov	lr, r0
 8003122:	460f      	mov	r7, r1
 8003124:	4614      	mov	r4, r2
 8003126:	6876      	ldr	r6, [r6, #4]
 8003128:	461d      	mov	r5, r3
 800312a:	b11e      	cbz	r6, 8003134 <_Index2ColorBulk+0x18>
 800312c:	46b4      	mov	ip, r6
 800312e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003132:	4760      	bx	ip
 8003134:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8003138:	1e50      	subs	r0, r2, #1
 800313a:	4e10      	ldr	r6, [pc, #64]	; (800317c <_Index2ColorBulk+0x60>)
 800313c:	3901      	subs	r1, #1
 800313e:	fb03 e000 	mla	r0, r3, r0, lr
 8003142:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8003146:	4f0e      	ldr	r7, [pc, #56]	; (8003180 <_Index2ColorBulk+0x64>)
 8003148:	8802      	ldrh	r2, [r0, #0]
 800314a:	3c01      	subs	r4, #1
 800314c:	eba0 0005 	sub.w	r0, r0, r5
 8003150:	ea4f 23d2 	mov.w	r3, r2, lsr #11
 8003154:	f816 e003 	ldrb.w	lr, [r6, r3]
 8003158:	f002 031f 	and.w	r3, r2, #31
 800315c:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8003160:	5cf3      	ldrb	r3, [r6, r3]
 8003162:	5cba      	ldrb	r2, [r7, r2]
 8003164:	eb03 430e 	add.w	r3, r3, lr, lsl #16
 8003168:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800316c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003170:	f841 3904 	str.w	r3, [r1], #-4
 8003174:	d1e8      	bne.n	8003148 <_Index2ColorBulk+0x2c>
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003178:	2402d2ac 	.word	0x2402d2ac
 800317c:	08008358 	.word	0x08008358
 8003180:	08008318 	.word	0x08008318

08003184 <_PushFreeBlock>:
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_PushFreeBlock+0x20>)
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	3201      	adds	r2, #1
 800318a:	b510      	push	{r4, lr}
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003190:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003192:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8003196:	604c      	str	r4, [r1, #4]
 8003198:	2100      	movs	r1, #0
 800319a:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800319e:	6258      	str	r0, [r3, #36]	; 0x24
 80031a0:	bd10      	pop	{r4, pc}
 80031a2:	bf00      	nop
 80031a4:	2402d56c 	.word	0x2402d56c

080031a8 <_RemoveFreeBlock>:
 80031a8:	b510      	push	{r4, lr}
 80031aa:	230f      	movs	r3, #15
 80031ac:	6844      	ldr	r4, [r0, #4]
 80031ae:	490d      	ldr	r1, [pc, #52]	; (80031e4 <_RemoveFreeBlock+0x3c>)
 80031b0:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80031b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b6:	4294      	cmp	r4, r2
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <_RemoveFreeBlock+0x3c>)
 80031ba:	d203      	bcs.n	80031c4 <_RemoveFreeBlock+0x1c>
 80031bc:	f113 33ff 	adds.w	r3, r3, #4294967295
 80031c0:	d2f6      	bcs.n	80031b0 <_RemoveFreeBlock+0x8>
 80031c2:	bd10      	pop	{r4, pc}
 80031c4:	2b0f      	cmp	r3, #15
 80031c6:	d80c      	bhi.n	80031e2 <_RemoveFreeBlock+0x3a>
 80031c8:	6811      	ldr	r1, [r2, #0]
 80031ca:	1b09      	subs	r1, r1, r4
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	6881      	ldr	r1, [r0, #8]
 80031d0:	68c0      	ldr	r0, [r0, #12]
 80031d2:	b101      	cbz	r1, 80031d6 <_RemoveFreeBlock+0x2e>
 80031d4:	6048      	str	r0, [r1, #4]
 80031d6:	b108      	cbz	r0, 80031dc <_RemoveFreeBlock+0x34>
 80031d8:	6001      	str	r1, [r0, #0]
 80031da:	bd10      	pop	{r4, pc}
 80031dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80031e0:	6459      	str	r1, [r3, #68]	; 0x44
 80031e2:	bd10      	pop	{r4, pc}
 80031e4:	2402d56c 	.word	0x2402d56c

080031e8 <_AddFreeMemory>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	4e27      	ldr	r6, [pc, #156]	; (8003288 <_AddFreeMemory+0xa0>)
 80031ec:	4605      	mov	r5, r0
 80031ee:	1808      	adds	r0, r1, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	68f3      	ldr	r3, [r6, #12]
 80031f4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80031f6:	3b01      	subs	r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	4283      	cmp	r3, r0
 80031fc:	d305      	bcc.n	800320a <_AddFreeMemory+0x22>
 80031fe:	594b      	ldr	r3, [r1, r5]
 8003200:	b91b      	cbnz	r3, 800320a <_AddFreeMemory+0x22>
 8003202:	6843      	ldr	r3, [r0, #4]
 8003204:	441d      	add	r5, r3
 8003206:	f7ff ffcf 	bl	80031a8 <_RemoveFreeBlock>
 800320a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800320c:	429c      	cmp	r4, r3
 800320e:	d90a      	bls.n	8003226 <_AddFreeMemory+0x3e>
 8003210:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8003214:	1be7      	subs	r7, r4, r7
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b92b      	cbnz	r3, 8003226 <_AddFreeMemory+0x3e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	463c      	mov	r4, r7
 800321e:	4638      	mov	r0, r7
 8003220:	441d      	add	r5, r3
 8003222:	f7ff ffc1 	bl	80031a8 <_RemoveFreeBlock>
 8003226:	230f      	movs	r3, #15
 8003228:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800322c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800322e:	4295      	cmp	r5, r2
 8003230:	d203      	bcs.n	800323a <_AddFreeMemory+0x52>
 8003232:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003236:	d2f7      	bcs.n	8003228 <_AddFreeMemory+0x40>
 8003238:	e023      	b.n	8003282 <_AddFreeMemory+0x9a>
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d821      	bhi.n	8003282 <_AddFreeMemory+0x9a>
 800323e:	3308      	adds	r3, #8
 8003240:	1960      	adds	r0, r4, r5
 8003242:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8003246:	6851      	ldr	r1, [r2, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	6124      	str	r4, [r4, #16]
 800324c:	60a1      	str	r1, [r4, #8]
 800324e:	e884 0024 	stmia.w	r4, {r2, r5}
 8003252:	f840 5c04 	str.w	r5, [r0, #-4]
 8003256:	f104 0008 	add.w	r0, r4, #8
 800325a:	b101      	cbz	r1, 800325e <_AddFreeMemory+0x76>
 800325c:	6048      	str	r0, [r1, #4]
 800325e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8003262:	60a1      	str	r1, [r4, #8]
 8003264:	60e2      	str	r2, [r4, #12]
 8003266:	6058      	str	r0, [r3, #4]
 8003268:	6833      	ldr	r3, [r6, #0]
 800326a:	4907      	ldr	r1, [pc, #28]	; (8003288 <_AddFreeMemory+0xa0>)
 800326c:	18ea      	adds	r2, r5, r3
 800326e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003272:	6032      	str	r2, [r6, #0]
 8003274:	b92b      	cbnz	r3, 8003282 <_AddFreeMemory+0x9a>
 8003276:	68cb      	ldr	r3, [r1, #12]
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	688a      	ldr	r2, [r1, #8]
 800327c:	4293      	cmp	r3, r2
 800327e:	bf88      	it	hi
 8003280:	608b      	strhi	r3, [r1, #8]
 8003282:	4628      	mov	r0, r5
 8003284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003286:	bf00      	nop
 8003288:	2402d56c 	.word	0x2402d56c

0800328c <_RemoveHoles>:
 800328c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	4f23      	ldr	r7, [pc, #140]	; (8003320 <_RemoveHoles+0x94>)
 8003292:	4683      	mov	fp, r0
 8003294:	68fe      	ldr	r6, [r7, #12]
 8003296:	46b8      	mov	r8, r7
 8003298:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800329a:	3e01      	subs	r6, #1
 800329c:	4426      	add	r6, r4
 800329e:	e894 0028 	ldmia.w	r4, {r3, r5}
 80032a2:	bb9b      	cbnz	r3, 800330c <_RemoveHoles+0x80>
 80032a4:	1961      	adds	r1, r4, r5
 80032a6:	428e      	cmp	r6, r1
 80032a8:	d930      	bls.n	800330c <_RemoveHoles+0x80>
 80032aa:	f854 a005 	ldr.w	sl, [r4, r5]
 80032ae:	f1ba 0f00 	cmp.w	sl, #0
 80032b2:	d02b      	beq.n	800330c <_RemoveHoles+0x80>
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d126      	bne.n	800330c <_RemoveHoles+0x80>
 80032be:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80032c2:	4620      	mov	r0, r4
 80032c4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	9101      	str	r1, [sp, #4]
 80032cc:	f7ff ff6c 	bl	80031a8 <_RemoveFreeBlock>
 80032d0:	9901      	ldr	r1, [sp, #4]
 80032d2:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80032d6:	6808      	ldr	r0, [r1, #0]
 80032d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80032dc:	4620      	mov	r0, r4
 80032de:	6054      	str	r4, [r2, #4]
 80032e0:	464a      	mov	r2, r9
 80032e2:	f004 fe44 	bl	8007f6e <memmove>
 80032e6:	9b00      	ldr	r3, [sp, #0]
 80032e8:	eb04 0109 	add.w	r1, r4, r9
 80032ec:	4628      	mov	r0, r5
 80032ee:	459a      	cmp	sl, r3
 80032f0:	bf02      	ittt	eq
 80032f2:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 80032f6:	1b5b      	subeq	r3, r3, r5
 80032f8:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 80032fc:	f7ff ff74 	bl	80031e8 <_AddFreeMemory>
 8003300:	f1bb 0f00 	cmp.w	fp, #0
 8003304:	d001      	beq.n	800330a <_RemoveHoles+0x7e>
 8003306:	4558      	cmp	r0, fp
 8003308:	d205      	bcs.n	8003316 <_RemoveHoles+0x8a>
 800330a:	464d      	mov	r5, r9
 800330c:	442c      	add	r4, r5
 800330e:	42a6      	cmp	r6, r4
 8003310:	d8c5      	bhi.n	800329e <_RemoveHoles+0x12>
 8003312:	2001      	movs	r0, #1
 8003314:	e000      	b.n	8003318 <_RemoveHoles+0x8c>
 8003316:	2000      	movs	r0, #0
 8003318:	b003      	add	sp, #12
 800331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	2402d56c 	.word	0x2402d56c

08003324 <GUI_ALLOC_FreeFixedBlock>:
 8003324:	b128      	cbz	r0, 8003332 <GUI_ALLOC_FreeFixedBlock+0xe>
 8003326:	4b03      	ldr	r3, [pc, #12]	; (8003334 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8003328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332a:	6002      	str	r2, [r0, #0]
 800332c:	b102      	cbz	r2, 8003330 <GUI_ALLOC_FreeFixedBlock+0xc>
 800332e:	6050      	str	r0, [r2, #4]
 8003330:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003332:	4770      	bx	lr
 8003334:	2402d56c 	.word	0x2402d56c

08003338 <GUI_ALLOC_h2p>:
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <GUI_ALLOC_h2p+0x10>)
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003340:	6840      	ldr	r0, [r0, #4]
 8003342:	3008      	adds	r0, #8
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2402d56c 	.word	0x2402d56c

0800334c <GUI_ALLOC_LockH>:
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <GUI_ALLOC_LockH+0x18>)
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	3201      	adds	r2, #1
 8003352:	61da      	str	r2, [r3, #28]
 8003354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003356:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 800335a:	3301      	adds	r3, #1
 800335c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 8003360:	f7ff bfea 	b.w	8003338 <GUI_ALLOC_h2p>
 8003364:	2402d56c 	.word	0x2402d56c

08003368 <GUI_ALLOC_UnlockH>:
 8003368:	6803      	ldr	r3, [r0, #0]
 800336a:	490a      	ldr	r1, [pc, #40]	; (8003394 <GUI_ALLOC_UnlockH+0x2c>)
 800336c:	b530      	push	{r4, r5, lr}
 800336e:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8003372:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003374:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d903      	bls.n	8003384 <GUI_ALLOC_UnlockH+0x1c>
 800337c:	69ca      	ldr	r2, [r1, #28]
 800337e:	b10a      	cbz	r2, 8003384 <GUI_ALLOC_UnlockH+0x1c>
 8003380:	3a01      	subs	r2, #1
 8003382:	61ca      	str	r2, [r1, #28]
 8003384:	3b01      	subs	r3, #1
 8003386:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 800338a:	2300      	movs	r3, #0
 800338c:	6003      	str	r3, [r0, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	bd30      	pop	{r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	2402d56c 	.word	0x2402d56c

08003398 <GUI_ALLOC_AssignMemory>:
 8003398:	4b02      	ldr	r3, [pc, #8]	; (80033a4 <GUI_ALLOC_AssignMemory+0xc>)
 800339a:	f021 0103 	bic.w	r1, r1, #3
 800339e:	6018      	str	r0, [r3, #0]
 80033a0:	6059      	str	r1, [r3, #4]
 80033a2:	4770      	bx	lr
 80033a4:	2402d2b4 	.word	0x2402d2b4

080033a8 <GUI_ALLOC_Free>:
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4604      	mov	r4, r0
 80033ac:	b160      	cbz	r0, 80033c8 <GUI_ALLOC_Free+0x20>
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <GUI_ALLOC_Free+0x24>)
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	6848      	ldr	r0, [r1, #4]
 80033ba:	f7ff ff15 	bl	80031e8 <_AddFreeMemory>
 80033be:	4620      	mov	r0, r4
 80033c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c4:	f7ff bede 	b.w	8003184 <_PushFreeBlock>
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	2402d56c 	.word	0x2402d56c

080033d0 <_EnlargeBlocks>:
 80033d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d4:	4c22      	ldr	r4, [pc, #136]	; (8003460 <_EnlargeBlocks+0x90>)
 80033d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033d8:	b93b      	cbnz	r3, 80033ea <_EnlargeBlocks+0x1a>
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <_EnlargeBlocks+0x94>)
 80033dc:	689d      	ldr	r5, [r3, #8]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	3508      	adds	r5, #8
 80033e2:	fbb3 f5f5 	udiv	r5, r3, r5
 80033e6:	3502      	adds	r5, #2
 80033e8:	e003      	b.n	80033f2 <_EnlargeBlocks+0x22>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	1d1d      	adds	r5, r3, #4
 80033ee:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80033f2:	00e8      	lsls	r0, r5, #3
 80033f4:	f000 f8c0 	bl	8003578 <_Alloc>
 80033f8:	4680      	mov	r8, r0
 80033fa:	b360      	cbz	r0, 8003456 <_EnlargeBlocks+0x86>
 80033fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fe:	6922      	ldr	r2, [r4, #16]
 8003400:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8003404:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003406:	00d2      	lsls	r2, r2, #3
 8003408:	685e      	ldr	r6, [r3, #4]
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <_EnlargeBlocks+0x98>)
 800340c:	3608      	adds	r6, #8
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4630      	mov	r0, r6
 8003412:	4798      	blx	r3
 8003414:	6922      	ldr	r2, [r4, #16]
 8003416:	1e69      	subs	r1, r5, #1
 8003418:	6366      	str	r6, [r4, #52]	; 0x34
 800341a:	4613      	mov	r3, r2
 800341c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8003420:	428b      	cmp	r3, r1
 8003422:	d205      	bcs.n	8003430 <_EnlargeBlocks+0x60>
 8003424:	3301      	adds	r3, #1
 8003426:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800342a:	f840 3c04 	str.w	r3, [r0, #-4]
 800342e:	e7f7      	b.n	8003420 <_EnlargeBlocks+0x50>
 8003430:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8003434:	f04f 0800 	mov.w	r8, #0
 8003438:	4638      	mov	r0, r7
 800343a:	f8c6 8004 	str.w	r8, [r6, #4]
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	6262      	str	r2, [r4, #36]	; 0x24
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	6125      	str	r5, [r4, #16]
 8003446:	442b      	add	r3, r5
 8003448:	6063      	str	r3, [r4, #4]
 800344a:	b13f      	cbz	r7, 800345c <_EnlargeBlocks+0x8c>
 800344c:	f7ff ffac 	bl	80033a8 <GUI_ALLOC_Free>
 8003450:	4640      	mov	r0, r8
 8003452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003456:	2001      	movs	r0, #1
 8003458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003460:	2402d56c 	.word	0x2402d56c
 8003464:	2402d2b4 	.word	0x2402d2b4
 8003468:	2400002c 	.word	0x2400002c

0800346c <_InitOnce>:
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <_InitOnce+0x60>)
 800346e:	b570      	push	{r4, r5, r6, lr}
 8003470:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003474:	bb43      	cbnz	r3, 80034c8 <_InitOnce+0x5c>
 8003476:	2301      	movs	r3, #1
 8003478:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <_InitOnce+0x64>)
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	b911      	cbnz	r1, 8003488 <_InitOnce+0x1c>
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	0889      	lsrs	r1, r1, #2
 8003486:	6099      	str	r1, [r3, #8]
 8003488:	215a      	movs	r1, #90	; 0x5a
 800348a:	2610      	movs	r6, #16
 800348c:	6211      	str	r1, [r2, #32]
 800348e:	2100      	movs	r1, #0
 8003490:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8003494:	fa06 f501 	lsl.w	r5, r6, r1
 8003498:	3101      	adds	r1, #1
 800349a:	4c0c      	ldr	r4, [pc, #48]	; (80034cc <_InitOnce+0x60>)
 800349c:	6405      	str	r5, [r0, #64]	; 0x40
 800349e:	2910      	cmp	r1, #16
 80034a0:	d1f6      	bne.n	8003490 <_InitOnce+0x24>
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	2501      	movs	r5, #1
 80034a6:	6858      	ldr	r0, [r3, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	63a1      	str	r1, [r4, #56]	; 0x38
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	f1a0 0314 	sub.w	r3, r0, #20
 80034b2:	60e0      	str	r0, [r4, #12]
 80034b4:	440b      	add	r3, r1
 80034b6:	6363      	str	r3, [r4, #52]	; 0x34
 80034b8:	605d      	str	r5, [r3, #4]
 80034ba:	6265      	str	r5, [r4, #36]	; 0x24
 80034bc:	6065      	str	r5, [r4, #4]
 80034be:	f7ff fe93 	bl	80031e8 <_AddFreeMemory>
 80034c2:	f7ff ff85 	bl	80033d0 <_EnlargeBlocks>
 80034c6:	6325      	str	r5, [r4, #48]	; 0x30
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
 80034ca:	bf00      	nop
 80034cc:	2402d56c 	.word	0x2402d56c
 80034d0:	2402d2b4 	.word	0x2402d2b4

080034d4 <GUI_ALLOC_GetFixedBlock>:
 80034d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	4607      	mov	r7, r0
 80034da:	4e26      	ldr	r6, [pc, #152]	; (8003574 <GUI_ALLOC_GetFixedBlock+0xa0>)
 80034dc:	f7ff ffc6 	bl	800346c <_InitOnce>
 80034e0:	3703      	adds	r7, #3
 80034e2:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80034e4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80034e6:	f027 0703 	bic.w	r7, r7, #3
 80034ea:	4614      	mov	r4, r2
 80034ec:	3704      	adds	r7, #4
 80034ee:	4287      	cmp	r7, r0
 80034f0:	bf38      	it	cc
 80034f2:	4607      	movcc	r7, r0
 80034f4:	b134      	cbz	r4, 8003504 <GUI_ALLOC_GetFixedBlock+0x30>
 80034f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80034fa:	429f      	cmp	r7, r3
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	d02c      	beq.n	800355a <GUI_ALLOC_GetFixedBlock+0x86>
 8003500:	461c      	mov	r4, r3
 8003502:	e7f7      	b.n	80034f4 <GUI_ALLOC_GetFixedBlock+0x20>
 8003504:	68f3      	ldr	r3, [r6, #12]
 8003506:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8003508:	eb02 0803 	add.w	r8, r2, r3
 800350c:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8003510:	ebc5 0508 	rsb	r5, r5, r8
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	b133      	cbz	r3, 8003526 <GUI_ALLOC_GetFixedBlock+0x52>
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff feb7 	bl	800328c <_RemoveHoles>
 800351e:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8003522:	ebc5 0508 	rsb	r5, r5, r8
 8003526:	682b      	ldr	r3, [r5, #0]
 8003528:	bb0b      	cbnz	r3, 800356e <GUI_ALLOC_GetFixedBlock+0x9a>
 800352a:	686b      	ldr	r3, [r5, #4]
 800352c:	429f      	cmp	r7, r3
 800352e:	dc1e      	bgt.n	800356e <GUI_ALLOC_GetFixedBlock+0x9a>
 8003530:	4628      	mov	r0, r5
 8003532:	1d1c      	adds	r4, r3, #4
 8003534:	f7ff fe38 	bl	80031a8 <_RemoveFreeBlock>
 8003538:	68f3      	ldr	r3, [r6, #12]
 800353a:	6868      	ldr	r0, [r5, #4]
 800353c:	1be4      	subs	r4, r4, r7
 800353e:	1bdb      	subs	r3, r3, r7
 8003540:	1bc0      	subs	r0, r0, r7
 8003542:	442c      	add	r4, r5
 8003544:	60f3      	str	r3, [r6, #12]
 8003546:	6973      	ldr	r3, [r6, #20]
 8003548:	443b      	add	r3, r7
 800354a:	6173      	str	r3, [r6, #20]
 800354c:	d002      	beq.n	8003554 <GUI_ALLOC_GetFixedBlock+0x80>
 800354e:	4629      	mov	r1, r5
 8003550:	f7ff fe4a 	bl	80031e8 <_AddFreeMemory>
 8003554:	f844 7c04 	str.w	r7, [r4, #-4]
 8003558:	e009      	b.n	800356e <GUI_ALLOC_GetFixedBlock+0x9a>
 800355a:	b10b      	cbz	r3, 8003560 <GUI_ALLOC_GetFixedBlock+0x8c>
 800355c:	6861      	ldr	r1, [r4, #4]
 800355e:	6059      	str	r1, [r3, #4]
 8003560:	6861      	ldr	r1, [r4, #4]
 8003562:	b101      	cbz	r1, 8003566 <GUI_ALLOC_GetFixedBlock+0x92>
 8003564:	600b      	str	r3, [r1, #0]
 8003566:	42a2      	cmp	r2, r4
 8003568:	d101      	bne.n	800356e <GUI_ALLOC_GetFixedBlock+0x9a>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	63f3      	str	r3, [r6, #60]	; 0x3c
 800356e:	4620      	mov	r0, r4
 8003570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003574:	2402d56c 	.word	0x2402d56c

08003578 <_Alloc>:
 8003578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800357c:	4e39      	ldr	r6, [pc, #228]	; (8003664 <_Alloc+0xec>)
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff ff74 	bl	800346c <_InitOnce>
 8003584:	6c35      	ldr	r5, [r6, #64]	; 0x40
 8003586:	6833      	ldr	r3, [r6, #0]
 8003588:	42ac      	cmp	r4, r5
 800358a:	bf24      	itt	cs
 800358c:	3403      	addcs	r4, #3
 800358e:	f024 0503 	biccs.w	r5, r4, #3
 8003592:	4c34      	ldr	r4, [pc, #208]	; (8003664 <_Alloc+0xec>)
 8003594:	350c      	adds	r5, #12
 8003596:	42ab      	cmp	r3, r5
 8003598:	d33e      	bcc.n	8003618 <_Alloc+0xa0>
 800359a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800359c:	6862      	ldr	r2, [r4, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d90f      	bls.n	80035c2 <_Alloc+0x4a>
 80035a2:	6873      	ldr	r3, [r6, #4]
 80035a4:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80035a6:	3b01      	subs	r3, #1
 80035a8:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80035ac:	6073      	str	r3, [r6, #4]
 80035ae:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80035b0:	eb03 0208 	add.w	r2, r3, r8
 80035b4:	6852      	ldr	r2, [r2, #4]
 80035b6:	6272      	str	r2, [r6, #36]	; 0x24
 80035b8:	2201      	movs	r2, #1
 80035ba:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 80035be:	b957      	cbnz	r7, 80035d6 <_Alloc+0x5e>
 80035c0:	e02a      	b.n	8003618 <_Alloc+0xa0>
 80035c2:	3b01      	subs	r3, #1
 80035c4:	6323      	str	r3, [r4, #48]	; 0x30
 80035c6:	f7ff ff03 	bl	80033d0 <_EnlargeBlocks>
 80035ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035cc:	3301      	adds	r3, #1
 80035ce:	6323      	str	r3, [r4, #48]	; 0x30
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d0e6      	beq.n	80035a2 <_Alloc+0x2a>
 80035d4:	e020      	b.n	8003618 <_Alloc+0xa0>
 80035d6:	230f      	movs	r3, #15
 80035d8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80035dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035de:	4295      	cmp	r5, r2
 80035e0:	d20c      	bcs.n	80035fc <_Alloc+0x84>
 80035e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80035e6:	d2f7      	bcs.n	80035d8 <_Alloc+0x60>
 80035e8:	e008      	b.n	80035fc <_Alloc+0x84>
 80035ea:	6894      	ldr	r4, [r2, #8]
 80035ec:	b12c      	cbz	r4, 80035fa <_Alloc+0x82>
 80035ee:	6862      	ldr	r2, [r4, #4]
 80035f0:	4295      	cmp	r5, r2
 80035f2:	d914      	bls.n	800361e <_Alloc+0xa6>
 80035f4:	68a2      	ldr	r2, [r4, #8]
 80035f6:	2a00      	cmp	r2, #0
 80035f8:	d1f7      	bne.n	80035ea <_Alloc+0x72>
 80035fa:	3301      	adds	r3, #1
 80035fc:	2b0f      	cmp	r3, #15
 80035fe:	d803      	bhi.n	8003608 <_Alloc+0x90>
 8003600:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8003604:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003606:	e7f6      	b.n	80035f6 <_Alloc+0x7e>
 8003608:	4628      	mov	r0, r5
 800360a:	f7ff fe3f 	bl	800328c <_RemoveHoles>
 800360e:	2800      	cmp	r0, #0
 8003610:	d0e1      	beq.n	80035d6 <_Alloc+0x5e>
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff fdb6 	bl	8003184 <_PushFreeBlock>
 8003618:	2000      	movs	r0, #0
 800361a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800361e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003622:	4620      	mov	r0, r4
 8003624:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003626:	ebc5 0209 	rsb	r2, r5, r9
 800362a:	330c      	adds	r3, #12
 800362c:	429a      	cmp	r2, r3
 800362e:	bf38      	it	cc
 8003630:	464d      	movcc	r5, r9
 8003632:	f7ff fdb9 	bl	80031a8 <_RemoveFreeBlock>
 8003636:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003638:	1961      	adds	r1, r4, r5
 800363a:	454d      	cmp	r5, r9
 800363c:	4498      	add	r8, r3
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f8c8 4004 	str.w	r4, [r8, #4]
 8003646:	6027      	str	r7, [r4, #0]
 8003648:	6065      	str	r5, [r4, #4]
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	6124      	str	r4, [r4, #16]
 800364e:	f841 5c04 	str.w	r5, [r1, #-4]
 8003652:	da03      	bge.n	800365c <_Alloc+0xe4>
 8003654:	ebc5 0009 	rsb	r0, r5, r9
 8003658:	f7ff fdc6 	bl	80031e8 <_AddFreeMemory>
 800365c:	4638      	mov	r0, r7
 800365e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003662:	bf00      	nop
 8003664:	2402d56c 	.word	0x2402d56c

08003668 <GUI_ALLOC_AllocNoInit>:
 8003668:	b108      	cbz	r0, 800366e <GUI_ALLOC_AllocNoInit+0x6>
 800366a:	f7ff bf85 	b.w	8003578 <_Alloc>
 800366e:	4770      	bx	lr

08003670 <GUI_ALLOC_AllocZero>:
 8003670:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003672:	4606      	mov	r6, r0
 8003674:	f7ff fff8 	bl	8003668 <GUI_ALLOC_AllocNoInit>
 8003678:	4605      	mov	r5, r0
 800367a:	b160      	cbz	r0, 8003696 <GUI_ALLOC_AllocZero+0x26>
 800367c:	f7ff fe66 	bl	800334c <GUI_ALLOC_LockH>
 8003680:	ac02      	add	r4, sp, #8
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <GUI_ALLOC_AllocZero+0x2c>)
 8003684:	4632      	mov	r2, r6
 8003686:	f844 0d04 	str.w	r0, [r4, #-4]!
 800368a:	2100      	movs	r1, #0
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4798      	blx	r3
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff fe69 	bl	8003368 <GUI_ALLOC_UnlockH>
 8003696:	4628      	mov	r0, r5
 8003698:	b002      	add	sp, #8
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	24000030 	.word	0x24000030

080036a0 <GL_FillCircle>:
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	f240 26c3 	movw	r6, #707	; 0x2c3
 80036a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ac:	b085      	sub	sp, #20
 80036ae:	4f2b      	ldr	r7, [pc, #172]	; (800375c <GL_FillCircle+0xbc>)
 80036b0:	4356      	muls	r6, r2
 80036b2:	4614      	mov	r4, r2
 80036b4:	4680      	mov	r8, r0
 80036b6:	2501      	movs	r5, #1
 80036b8:	4689      	mov	r9, r1
 80036ba:	fb96 f6f3 	sdiv	r6, r6, r3
 80036be:	2302      	movs	r3, #2
 80036c0:	3601      	adds	r6, #1
 80036c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80036c6:	fb02 3302 	mla	r3, r2, r2, r3
 80036ca:	4402      	add	r2, r0
 80036cc:	1b00      	subs	r0, r0, r4
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4798      	blx	r3
 80036d8:	eb08 0305 	add.w	r3, r8, r5
 80036dc:	9302      	str	r3, [sp, #8]
 80036de:	f108 33ff 	add.w	r3, r8, #4294967295
 80036e2:	9303      	str	r3, [sp, #12]
 80036e4:	42b5      	cmp	r5, r6
 80036e6:	dc35      	bgt.n	8003754 <GL_FillCircle+0xb4>
 80036e8:	fb04 f304 	mul.w	r3, r4, r4
 80036ec:	9a01      	ldr	r2, [sp, #4]
 80036ee:	fb05 3305 	mla	r3, r5, r5, r3
 80036f2:	429a      	cmp	r2, r3
 80036f4:	da18      	bge.n	8003728 <GL_FillCircle+0x88>
 80036f6:	42b4      	cmp	r4, r6
 80036f8:	dd15      	ble.n	8003726 <GL_FillCircle+0x86>
 80036fa:	9b02      	ldr	r3, [sp, #8]
 80036fc:	eb04 0109 	add.w	r1, r4, r9
 8003700:	ebc5 0a03 	rsb	sl, r5, r3
 8003704:	9b03      	ldr	r3, [sp, #12]
 8003706:	eb03 0b05 	add.w	fp, r3, r5
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	4650      	mov	r0, sl
 800370e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003710:	465a      	mov	r2, fp
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4798      	blx	r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	465a      	mov	r2, fp
 800371a:	ebc4 0109 	rsb	r1, r4, r9
 800371e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003720:	4650      	mov	r0, sl
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4798      	blx	r3
 8003726:	3c01      	subs	r4, #1
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	ebc4 0a08 	rsb	sl, r4, r8
 800372e:	eb04 0b08 	add.w	fp, r4, r8
 8003732:	eb09 0105 	add.w	r1, r9, r5
 8003736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003738:	4650      	mov	r0, sl
 800373a:	465a      	mov	r2, fp
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4798      	blx	r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	ebc5 0109 	rsb	r1, r5, r9
 8003746:	465a      	mov	r2, fp
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	4650      	mov	r0, sl
 800374c:	3501      	adds	r5, #1
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4798      	blx	r3
 8003752:	e7c7      	b.n	80036e4 <GL_FillCircle+0x44>
 8003754:	b005      	add	sp, #20
 8003756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375a:	bf00      	nop
 800375c:	24000028 	.word	0x24000028

08003760 <GUI_FillCircle>:
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <GUI_FillCircle+0x38>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003768:	4604      	mov	r4, r0
 800376a:	2000      	movs	r0, #0
 800376c:	460d      	mov	r5, r1
 800376e:	4616      	mov	r6, r2
 8003770:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8003772:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 8003776:	f003 ff71 	bl	800765c <WM__InitIVRSearch>
 800377a:	b150      	cbz	r0, 8003792 <GUI_FillCircle+0x32>
 800377c:	4445      	add	r5, r8
 800377e:	443c      	add	r4, r7
 8003780:	4632      	mov	r2, r6
 8003782:	4629      	mov	r1, r5
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff ff8b 	bl	80036a0 <GL_FillCircle>
 800378a:	f003 fea5 	bl	80074d8 <WM__GetNextIVR>
 800378e:	2800      	cmp	r0, #0
 8003790:	d1f6      	bne.n	8003780 <GUI_FillCircle+0x20>
 8003792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003796:	bf00      	nop
 8003798:	24000028 	.word	0x24000028

0800379c <GUI_CalcColorDist>:
 800379c:	b2c3      	uxtb	r3, r0
 800379e:	b2ca      	uxtb	r2, r1
 80037a0:	1a9a      	subs	r2, r3, r2
 80037a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80037a6:	b292      	uxth	r2, r2
 80037a8:	b510      	push	{r4, lr}
 80037aa:	b214      	sxth	r4, r2
 80037ac:	2c00      	cmp	r4, #0
 80037ae:	bfbc      	itt	lt
 80037b0:	4252      	neglt	r2, r2
 80037b2:	b214      	sxthlt	r4, r2
 80037b4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80037b8:	0c09      	lsrs	r1, r1, #16
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b289      	uxth	r1, r1
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	b208      	sxth	r0, r1
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	bfbc      	itt	lt
 80037cc:	425b      	neglt	r3, r3
 80037ce:	b21a      	sxthlt	r2, r3
 80037d0:	2800      	cmp	r0, #0
 80037d2:	bfb8      	it	lt
 80037d4:	4249      	neglt	r1, r1
 80037d6:	fb02 f202 	mul.w	r2, r2, r2
 80037da:	bfb8      	it	lt
 80037dc:	b208      	sxthlt	r0, r1
 80037de:	fb04 2204 	mla	r2, r4, r4, r2
 80037e2:	b280      	uxth	r0, r0
 80037e4:	fb00 2000 	mla	r0, r0, r0, r2
 80037e8:	bd10      	pop	{r4, pc}
	...

080037ec <GUI_GetDrawMode>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <GUI_GetDrawMode+0x8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	7c18      	ldrb	r0, [r3, #16]
 80037f2:	4770      	bx	lr
 80037f4:	24000028 	.word	0x24000028

080037f8 <GUI_GetVersionString>:
 80037f8:	4804      	ldr	r0, [pc, #16]	; (800380c <GUI_GetVersionString+0x14>)
 80037fa:	2335      	movs	r3, #53	; 0x35
 80037fc:	7003      	strb	r3, [r0, #0]
 80037fe:	2334      	movs	r3, #52	; 0x34
 8003800:	7083      	strb	r3, [r0, #2]
 8003802:	70c3      	strb	r3, [r0, #3]
 8003804:	2361      	movs	r3, #97	; 0x61
 8003806:	7103      	strb	r3, [r0, #4]
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	24000010 	.word	0x24000010

08003810 <GUI_MergeRect>:
 8003810:	b510      	push	{r4, lr}
 8003812:	b338      	cbz	r0, 8003864 <GUI_MergeRect+0x54>
 8003814:	b309      	cbz	r1, 800385a <GUI_MergeRect+0x4a>
 8003816:	b30a      	cbz	r2, 800385c <GUI_MergeRect+0x4c>
 8003818:	f9b2 4000 	ldrsh.w	r4, [r2]
 800381c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003820:	42a3      	cmp	r3, r4
 8003822:	bfa8      	it	ge
 8003824:	4623      	movge	r3, r4
 8003826:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800382a:	8003      	strh	r3, [r0, #0]
 800382c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003830:	42a3      	cmp	r3, r4
 8003832:	bfa8      	it	ge
 8003834:	4623      	movge	r3, r4
 8003836:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800383a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800383e:	8043      	strh	r3, [r0, #2]
 8003840:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8003844:	42a3      	cmp	r3, r4
 8003846:	bfb8      	it	lt
 8003848:	4623      	movlt	r3, r4
 800384a:	8083      	strh	r3, [r0, #4]
 800384c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8003850:	4293      	cmp	r3, r2
 8003852:	bfb8      	it	lt
 8003854:	4613      	movlt	r3, r2
 8003856:	80c3      	strh	r3, [r0, #6]
 8003858:	bd10      	pop	{r4, pc}
 800385a:	4611      	mov	r1, r2
 800385c:	680b      	ldr	r3, [r1, #0]
 800385e:	6003      	str	r3, [r0, #0]
 8003860:	684b      	ldr	r3, [r1, #4]
 8003862:	6043      	str	r3, [r0, #4]
 8003864:	bd10      	pop	{r4, pc}

08003866 <GUI_MoveRect>:
 8003866:	b168      	cbz	r0, 8003884 <GUI_MoveRect+0x1e>
 8003868:	b289      	uxth	r1, r1
 800386a:	8803      	ldrh	r3, [r0, #0]
 800386c:	b292      	uxth	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	8003      	strh	r3, [r0, #0]
 8003872:	8883      	ldrh	r3, [r0, #4]
 8003874:	4419      	add	r1, r3
 8003876:	8843      	ldrh	r3, [r0, #2]
 8003878:	4413      	add	r3, r2
 800387a:	8081      	strh	r1, [r0, #4]
 800387c:	8043      	strh	r3, [r0, #2]
 800387e:	88c3      	ldrh	r3, [r0, #6]
 8003880:	441a      	add	r2, r3
 8003882:	80c2      	strh	r2, [r0, #6]
 8003884:	4770      	bx	lr
	...

08003888 <GUI_GotoXY>:
 8003888:	4b02      	ldr	r3, [pc, #8]	; (8003894 <GUI_GotoXY+0xc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	8458      	strh	r0, [r3, #34]	; 0x22
 800388e:	2000      	movs	r0, #0
 8003890:	8499      	strh	r1, [r3, #36]	; 0x24
 8003892:	4770      	bx	lr
 8003894:	24000028 	.word	0x24000028

08003898 <GUI_RectsIntersect>:
 8003898:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800389c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dc14      	bgt.n	80038ce <GUI_RectsIntersect+0x36>
 80038a4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80038a8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dc0e      	bgt.n	80038ce <GUI_RectsIntersect+0x36>
 80038b0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80038b4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dc08      	bgt.n	80038ce <GUI_RectsIntersect+0x36>
 80038bc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80038c0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80038c4:	4283      	cmp	r3, r0
 80038c6:	bfcc      	ite	gt
 80038c8:	2000      	movgt	r0, #0
 80038ca:	2001      	movle	r0, #1
 80038cc:	4770      	bx	lr
 80038ce:	2000      	movs	r0, #0
 80038d0:	4770      	bx	lr

080038d2 <GUI_SelectLCD>:
 80038d2:	b508      	push	{r3, lr}
 80038d4:	f001 f8c4 	bl	8004a60 <LCD_SelectLCD>
 80038d8:	f001 f988 	bl	8004bec <LCD_UpdateColorIndices>
 80038dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038e0:	f003 bf3c 	b.w	800775c <WM_Activate>

080038e4 <GUI_SetBkColor>:
 80038e4:	f000 bf10 	b.w	8004708 <LCD_SetBkColor>

080038e8 <GUI_SetOrg>:
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <GUI_SetOrg+0x28>)
 80038ea:	460a      	mov	r2, r1
 80038ec:	b410      	push	{r4}
 80038ee:	8018      	strh	r0, [r3, #0]
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <GUI_SetOrg+0x2c>)
 80038f2:	8019      	strh	r1, [r3, #0]
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <GUI_SetOrg+0x30>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	7c59      	ldrb	r1, [r3, #17]
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <GUI_SetOrg+0x34>)
 80038fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003900:	68d9      	ldr	r1, [r3, #12]
 8003902:	6a0c      	ldr	r4, [r1, #32]
 8003904:	4601      	mov	r1, r0
 8003906:	4618      	mov	r0, r3
 8003908:	4623      	mov	r3, r4
 800390a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800390e:	4718      	bx	r3
 8003910:	2402d654 	.word	0x2402d654
 8003914:	2402d644 	.word	0x2402d644
 8003918:	24000028 	.word	0x24000028
 800391c:	2402d67c 	.word	0x2402d67c

08003920 <_InitContext>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4d19      	ldr	r5, [pc, #100]	; (8003988 <_InitContext+0x68>)
 8003924:	4604      	mov	r4, r0
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <_InitContext+0x6c>)
 8003928:	f104 0108 	add.w	r1, r4, #8
 800392c:	6703      	str	r3, [r0, #112]	; 0x70
 800392e:	692b      	ldr	r3, [r5, #16]
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	639b      	str	r3, [r3, #56]	; 0x38
 8003934:	641b      	str	r3, [r3, #64]	; 0x40
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	6142      	str	r2, [r0, #20]
 800393e:	7c5a      	ldrb	r2, [r3, #17]
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <_InitContext+0x70>)
 8003942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003946:	68c3      	ldr	r3, [r0, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4798      	blx	r3
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <_InitContext+0x74>)
 800394e:	6663      	str	r3, [r4, #100]	; 0x64
 8003950:	686b      	ldr	r3, [r5, #4]
 8003952:	61e3      	str	r3, [r4, #28]
 8003954:	692b      	ldr	r3, [r5, #16]
 8003956:	3308      	adds	r3, #8
 8003958:	6163      	str	r3, [r4, #20]
 800395a:	2301      	movs	r3, #1
 800395c:	7623      	strb	r3, [r4, #24]
 800395e:	76e3      	strb	r3, [r4, #27]
 8003960:	f003 ffd4 	bl	800790c <WM_GetDesktopWindow>
 8003964:	2303      	movs	r3, #3
 8003966:	64a0      	str	r0, [r4, #72]	; 0x48
 8003968:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800396c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003970:	68e8      	ldr	r0, [r5, #12]
 8003972:	6323      	str	r3, [r4, #48]	; 0x30
 8003974:	6363      	str	r3, [r4, #52]	; 0x34
 8003976:	f000 fec7 	bl	8004708 <LCD_SetBkColor>
 800397a:	68a8      	ldr	r0, [r5, #8]
 800397c:	f000 feca 	bl	8004714 <LCD_SetColor>
 8003980:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_InitContext+0x78>)
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <_InitContext+0x7c>)
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	24000018 	.word	0x24000018
 800398c:	2402d348 	.word	0x2402d348
 8003990:	2402d67c 	.word	0x2402d67c
 8003994:	08007ff0 	.word	0x08007ff0
 8003998:	08008008 	.word	0x08008008
 800399c:	2402d674 	.word	0x2402d674

080039a0 <_OnExit>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	2400      	movs	r4, #0
 80039a4:	4d09      	ldr	r5, [pc, #36]	; (80039cc <_OnExit+0x2c>)
 80039a6:	4e0a      	ldr	r6, [pc, #40]	; (80039d0 <_OnExit+0x30>)
 80039a8:	2274      	movs	r2, #116	; 0x74
 80039aa:	4621      	mov	r1, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	6833      	ldr	r3, [r6, #0]
 80039b0:	67ec      	str	r4, [r5, #124]	; 0x7c
 80039b2:	4798      	blx	r3
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	2208      	movs	r2, #8
 80039b8:	4621      	mov	r1, r4
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <_OnExit+0x34>)
 80039bc:	4798      	blx	r3
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <_OnExit+0x38>)
 80039c0:	611d      	str	r5, [r3, #16]
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <_OnExit+0x3c>)
 80039c4:	701c      	strb	r4, [r3, #0]
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <_OnExit+0x40>)
 80039c8:	601c      	str	r4, [r3, #0]
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	2402d2c8 	.word	0x2402d2c8
 80039d0:	24000030 	.word	0x24000030
 80039d4:	2402d67c 	.word	0x2402d67c
 80039d8:	24000018 	.word	0x24000018
 80039dc:	2402d664 	.word	0x2402d664
 80039e0:	2402d640 	.word	0x2402d640

080039e4 <GUI_ClearRect>:
 80039e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039e8:	4604      	mov	r4, r0
 80039ea:	2004      	movs	r0, #4
 80039ec:	4616      	mov	r6, r2
 80039ee:	461f      	mov	r7, r3
 80039f0:	460d      	mov	r5, r1
 80039f2:	f000 fb4d 	bl	8004090 <LCD_SetDrawMode>
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <GUI_ClearRect+0x60>)
 80039f8:	4680      	mov	r8, r0
 80039fa:	4668      	mov	r0, sp
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	4414      	add	r4, r2
 8003a04:	4416      	add	r6, r2
 8003a06:	441d      	add	r5, r3
 8003a08:	441f      	add	r7, r3
 8003a0a:	f8ad 4000 	strh.w	r4, [sp]
 8003a0e:	f8ad 6004 	strh.w	r6, [sp, #4]
 8003a12:	f8ad 5002 	strh.w	r5, [sp, #2]
 8003a16:	f8ad 7006 	strh.w	r7, [sp, #6]
 8003a1a:	f003 fe1f 	bl	800765c <WM__InitIVRSearch>
 8003a1e:	b928      	cbnz	r0, 8003a2c <GUI_ClearRect+0x48>
 8003a20:	4640      	mov	r0, r8
 8003a22:	f000 fb35 	bl	8004090 <LCD_SetDrawMode>
 8003a26:	b002      	add	sp, #8
 8003a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4632      	mov	r2, r6
 8003a30:	4629      	mov	r1, r5
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 fb8a 	bl	800414c <LCD_FillRect>
 8003a38:	f003 fd4e 	bl	80074d8 <WM__GetNextIVR>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d1f5      	bne.n	8003a2c <GUI_ClearRect+0x48>
 8003a40:	e7ee      	b.n	8003a20 <GUI_ClearRect+0x3c>
 8003a42:	bf00      	nop
 8003a44:	24000018 	.word	0x24000018

08003a48 <GUI_Clear>:
 8003a48:	2100      	movs	r1, #0
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	f7ff ff1b 	bl	8003888 <GUI_GotoXY>
 8003a52:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003a56:	4903      	ldr	r1, [pc, #12]	; (8003a64 <GUI_Clear+0x1c>)
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a60:	f7ff bfc0 	b.w	80039e4 <GUI_ClearRect>
 8003a64:	ffffc001 	.word	0xffffc001

08003a68 <GUI__Config>:
 8003a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6a:	4d1f      	ldr	r5, [pc, #124]	; (8003ae8 <GUI__Config+0x80>)
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d136      	bne.n	8003ae2 <GUI__Config+0x7a>
 8003a74:	2301      	movs	r3, #1
 8003a76:	466a      	mov	r2, sp
 8003a78:	466e      	mov	r6, sp
 8003a7a:	67eb      	str	r3, [r5, #124]	; 0x7c
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <GUI__Config+0x84>)
 8003a7e:	f103 0708 	add.w	r7, r3, #8
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	42bb      	cmp	r3, r7
 8003a8e:	c403      	stmia	r4!, {r0, r1}
 8003a90:	4622      	mov	r2, r4
 8003a92:	d1f6      	bne.n	8003a82 <GUI__Config+0x1a>
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	8899      	ldrh	r1, [r3, #4]
 8003a98:	799b      	ldrb	r3, [r3, #6]
 8003a9a:	6020      	str	r0, [r4, #0]
 8003a9c:	71a3      	strb	r3, [r4, #6]
 8003a9e:	4633      	mov	r3, r6
 8003aa0:	80a1      	strh	r1, [r4, #4]
 8003aa2:	4c13      	ldr	r4, [pc, #76]	; (8003af0 <GUI__Config+0x88>)
 8003aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aa8:	f804 2b01 	strb.w	r2, [r4], #1
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	d1f8      	bne.n	8003aa4 <GUI__Config+0x3c>
 8003ab2:	f7ff fea1 	bl	80037f8 <GUI_GetVersionString>
 8003ab6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003aba:	4622      	mov	r2, r4
 8003abc:	f804 3b01 	strb.w	r3, [r4], #1
 8003ac0:	7803      	ldrb	r3, [r0, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f7      	bne.n	8003ab6 <GUI__Config+0x4e>
 8003ac6:	7053      	strb	r3, [r2, #1]
 8003ac8:	f7fe ffe0 	bl	8002a8c <GUI_X_Config>
 8003acc:	f7ff f962 	bl	8002d94 <LCD_X_Config>
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <GUI__Config+0x8c>)
 8003ad2:	4809      	ldr	r0, [pc, #36]	; (8003af8 <GUI__Config+0x90>)
 8003ad4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8003ad8:	b005      	add	sp, #20
 8003ada:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003ade:	f000 b8d1 	b.w	8003c84 <GUI__RegisterExit>
 8003ae2:	b005      	add	sp, #20
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2402d2c8 	.word	0x2402d2c8
 8003aec:	08007ff8 	.word	0x08007ff8
 8003af0:	2402d348 	.word	0x2402d348
 8003af4:	080039a1 	.word	0x080039a1
 8003af8:	2402d35c 	.word	0x2402d35c

08003afc <GUI_Init>:
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4a53      	ldr	r2, [pc, #332]	; (8003c50 <GUI_Init+0x154>)
 8003b04:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <GUI_Init+0x154>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <GUI_Init+0x158>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b16:	f240 4249 	movw	r2, #1097	; 0x449
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b4b      	ldr	r3, [pc, #300]	; (8003c54 <GUI_Init+0x158>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2c:	f240 4151 	movw	r1, #1105	; 0x451
 8003b30:	428b      	cmp	r3, r1
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4b44      	ldr	r3, [pc, #272]	; (8003c54 <GUI_Init+0x158>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b48:	f240 4252 	movw	r2, #1106	; 0x452
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	430b      	orrs	r3, r1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d010      	beq.n	8003b7e <GUI_Init+0x82>
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <GUI_Init+0x15c>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	bf00      	nop
 8003b64:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <GUI_Init+0x15c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1fb      	bne.n	8003b64 <GUI_Init+0x68>
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <GUI_Init+0x160>)
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <GUI_Init+0x164>)
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <GUI_Init+0x160>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <GUI_Init+0x168>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d018      	beq.n	8003bae <GUI_Init+0xb2>
 8003b7c:	e7fe      	b.n	8003b7c <GUI_Init+0x80>
 8003b7e:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <GUI_Init+0x16c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b86:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003b8a:	d110      	bne.n	8003bae <GUI_Init+0xb2>
 8003b8c:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <GUI_Init+0x170>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	bf00      	nop
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <GUI_Init+0x170>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1fb      	bne.n	8003b94 <GUI_Init+0x98>
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <GUI_Init+0x174>)
 8003b9e:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <GUI_Init+0x164>)
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <GUI_Init+0x174>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2f      	ldr	r2, [pc, #188]	; (8003c64 <GUI_Init+0x168>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d000      	beq.n	8003bae <GUI_Init+0xb2>
 8003bac:	e7fe      	b.n	8003bac <GUI_Init+0xb0>
 8003bae:	f7ff ff5b 	bl	8003a68 <GUI__Config>
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <GUI_Init+0x178>)
 8003bb4:	222e      	movs	r2, #46	; 0x2e
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	f7fe ff66 	bl	8002a88 <GUI_X_Init>
 8003bbc:	482e      	ldr	r0, [pc, #184]	; (8003c78 <GUI_Init+0x17c>)
 8003bbe:	f7ff feaf 	bl	8003920 <_InitContext>
 8003bc2:	f000 fcfb 	bl	80045bc <emWin_LCD_Init>
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	f000 feda 	bl	8004980 <LCD_GetXSizeDisplay>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2dc      	uxtb	r4, r3
 8003bd8:	f000 fed8 	bl	800498c <LCD_GetYSizeDisplay>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4323      	orrs	r3, r4
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <GUI_Init+0x108>
 8003bf0:	f000 feba 	bl	8004968 <LCD_GetXSizeMax>
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	f000 feba 	bl	800496e <LCD_GetYSizeMax>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f000 feb8 	bl	8004974 <LCD_SetDisplaySize>
 8003c04:	2100      	movs	r1, #0
 8003c06:	2000      	movs	r0, #0
 8003c08:	f7ff fe6e 	bl	80038e8 <GUI_SetOrg>
 8003c0c:	f003 fe06 	bl	800781c <WM_Init>
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <GUI_Init+0x180>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <GUI_Init+0x142>
 8003c18:	e00d      	b.n	8003c36 <GUI_Init+0x13a>
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <GUI_Init+0x180>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <GUI_Init+0x130>
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <GUI_Init+0x180>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4798      	blx	r3
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <GUI_Init+0x180>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <GUI_Init+0x180>)
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <GUI_Init+0x180>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ed      	bne.n	8003c1a <GUI_Init+0x11e>
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <GUI_Init+0x184>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	e0002000 	.word	0xe0002000
 8003c54:	e0042000 	.word	0xe0042000
 8003c58:	40023008 	.word	0x40023008
 8003c5c:	40023000 	.word	0x40023000
 8003c60:	f407a5c2 	.word	0xf407a5c2
 8003c64:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c68:	5c001000 	.word	0x5c001000
 8003c6c:	58024c08 	.word	0x58024c08
 8003c70:	58024c00 	.word	0x58024c00
 8003c74:	2402d634 	.word	0x2402d634
 8003c78:	2402d2c8 	.word	0x2402d2c8
 8003c7c:	2402d340 	.word	0x2402d340
 8003c80:	2402d65c 	.word	0x2402d65c

08003c84 <GUI__RegisterExit>:
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <GUI__RegisterExit+0x24>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <GUI__RegisterExit+0x24>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	2402d33c 	.word	0x2402d33c

08003cac <GUI_DEVICE__GetpDriver>:
 8003cac:	2801      	cmp	r0, #1
 8003cae:	dc09      	bgt.n	8003cc4 <GUI_DEVICE__GetpDriver+0x18>
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <GUI_DEVICE__GetpDriver+0x1c>)
 8003cb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003cb6:	b120      	cbz	r0, 8003cc2 <GUI_DEVICE__GetpDriver+0x16>
 8003cb8:	68c3      	ldr	r3, [r0, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	b11b      	cbz	r3, 8003cc6 <GUI_DEVICE__GetpDriver+0x1a>
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	e7f9      	b.n	8003cb6 <GUI_DEVICE__GetpDriver+0xa>
 8003cc2:	4770      	bx	lr
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	4770      	bx	lr
 8003cc8:	2402d67c 	.word	0x2402d67c

08003ccc <GUI_DEVICE_Delete>:
 8003ccc:	f7ff bb2a 	b.w	8003324 <GUI_ALLOC_FreeFixedBlock>

08003cd0 <GUI_DEVICE_Create>:
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4617      	mov	r7, r2
 8003cda:	461c      	mov	r4, r3
 8003cdc:	dd01      	ble.n	8003ce2 <GUI_DEVICE_Create+0x12>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce2:	201c      	movs	r0, #28
 8003ce4:	f7ff fbf6 	bl	80034d4 <GUI_ALLOC_GetFixedBlock>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d0f8      	beq.n	8003cde <GUI_DEVICE_Create+0xe>
 8003cec:	b10d      	cbz	r5, 8003cf2 <GUI_DEVICE_Create+0x22>
 8003cee:	6105      	str	r5, [r0, #16]
 8003cf0:	e009      	b.n	8003d06 <GUI_DEVICE_Create+0x36>
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <GUI_DEVICE_Create+0x48>)
 8003cf4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003cf8:	b129      	cbz	r1, 8003d06 <GUI_DEVICE_Create+0x36>
 8003cfa:	680b      	ldr	r3, [r1, #0]
 8003cfc:	b10b      	cbz	r3, 8003d02 <GUI_DEVICE_Create+0x32>
 8003cfe:	4619      	mov	r1, r3
 8003d00:	e7fb      	b.n	8003cfa <GUI_DEVICE_Create+0x2a>
 8003d02:	690b      	ldr	r3, [r1, #16]
 8003d04:	6103      	str	r3, [r0, #16]
 8003d06:	2300      	movs	r3, #0
 8003d08:	6184      	str	r4, [r0, #24]
 8003d0a:	8287      	strh	r7, [r0, #20]
 8003d0c:	60c6      	str	r6, [r0, #12]
 8003d0e:	6003      	str	r3, [r0, #0]
 8003d10:	6043      	str	r3, [r0, #4]
 8003d12:	6083      	str	r3, [r0, #8]
 8003d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	2402d67c 	.word	0x2402d67c

08003d1c <GUI_DEVICE_Unlink>:
 8003d1c:	6981      	ldr	r1, [r0, #24]
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <GUI_DEVICE_Unlink+0x2c>)
 8003d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d24:	4298      	cmp	r0, r3
 8003d26:	6803      	ldr	r3, [r0, #0]
 8003d28:	d104      	bne.n	8003d34 <GUI_DEVICE_Unlink+0x18>
 8003d2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003d2e:	b10b      	cbz	r3, 8003d34 <GUI_DEVICE_Unlink+0x18>
 8003d30:	2200      	movs	r2, #0
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	6842      	ldr	r2, [r0, #4]
 8003d36:	b102      	cbz	r2, 8003d3a <GUI_DEVICE_Unlink+0x1e>
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	6803      	ldr	r3, [r0, #0]
 8003d3c:	b103      	cbz	r3, 8003d40 <GUI_DEVICE_Unlink+0x24>
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	2300      	movs	r3, #0
 8003d42:	6003      	str	r3, [r0, #0]
 8003d44:	6043      	str	r3, [r0, #4]
 8003d46:	4770      	bx	lr
 8003d48:	2402d67c 	.word	0x2402d67c

08003d4c <GUI_DEVICE_Link>:
 8003d4c:	b530      	push	{r4, r5, lr}
 8003d4e:	b908      	cbnz	r0, 8003d54 <GUI_DEVICE_Link+0x8>
 8003d50:	2001      	movs	r0, #1
 8003d52:	bd30      	pop	{r4, r5, pc}
 8003d54:	6984      	ldr	r4, [r0, #24]
 8003d56:	2c01      	cmp	r4, #1
 8003d58:	dcfa      	bgt.n	8003d50 <GUI_DEVICE_Link+0x4>
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <GUI_DEVICE_Link+0x7c>)
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	4294      	cmp	r4, r2
 8003d60:	bfa4      	itt	ge
 8003d62:	1c62      	addge	r2, r4, #1
 8003d64:	701a      	strbge	r2, [r3, #0]
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <GUI_DEVICE_Link+0x80>)
 8003d68:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	b91b      	cbnz	r3, 8003d78 <GUI_DEVICE_Link+0x2c>
 8003d70:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd30      	pop	{r4, r5, pc}
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	b10a      	cbz	r2, 8003d80 <GUI_DEVICE_Link+0x34>
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	e7fb      	b.n	8003d78 <GUI_DEVICE_Link+0x2c>
 8003d80:	68c2      	ldr	r2, [r0, #12]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	68d9      	ldr	r1, [r3, #12]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4291      	cmp	r1, r2
 8003d8a:	dd03      	ble.n	8003d94 <GUI_DEVICE_Link+0x48>
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f8      	bne.n	8003d84 <GUI_DEVICE_Link+0x38>
 8003d92:	e7dd      	b.n	8003d50 <GUI_DEVICE_Link+0x4>
 8003d94:	d109      	bne.n	8003daa <GUI_DEVICE_Link+0x5e>
 8003d96:	8a81      	ldrh	r1, [r0, #20]
 8003d98:	2901      	cmp	r1, #1
 8003d9a:	d106      	bne.n	8003daa <GUI_DEVICE_Link+0x5e>
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	b121      	cbz	r1, 8003daa <GUI_DEVICE_Link+0x5e>
 8003da0:	460b      	mov	r3, r1
 8003da2:	68c9      	ldr	r1, [r1, #12]
 8003da4:	6809      	ldr	r1, [r1, #0]
 8003da6:	428a      	cmp	r2, r1
 8003da8:	ddf8      	ble.n	8003d9c <GUI_DEVICE_Link+0x50>
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	b112      	cbz	r2, 8003db4 <GUI_DEVICE_Link+0x68>
 8003dae:	6010      	str	r0, [r2, #0]
 8003db0:	6042      	str	r2, [r0, #4]
 8003db2:	e001      	b.n	8003db8 <GUI_DEVICE_Link+0x6c>
 8003db4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8003db8:	6058      	str	r0, [r3, #4]
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	bf08      	it	eq
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	6003      	str	r3, [r0, #0]
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bd30      	pop	{r4, r5, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2402d62e 	.word	0x2402d62e
 8003dcc:	2402d67c 	.word	0x2402d67c

08003dd0 <GUI_DEVICE_CreateAndLink>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	f7ff ff7c 	bl	8003cd0 <GUI_DEVICE_Create>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	b148      	cbz	r0, 8003df0 <GUI_DEVICE_CreateAndLink+0x20>
 8003ddc:	f7ff ffb6 	bl	8003d4c <GUI_DEVICE_Link>
 8003de0:	68e3      	ldr	r3, [r4, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	b923      	cbnz	r3, 8003df0 <GUI_DEVICE_CreateAndLink+0x20>
 8003de6:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <GUI_DEVICE_CreateAndLink+0x24>)
 8003de8:	3516      	adds	r5, #22
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8003df0:	4620      	mov	r0, r4
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	24000028 	.word	0x24000028

08003df8 <_OnExit>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4c0e      	ldr	r4, [pc, #56]	; (8003e34 <_OnExit+0x3c>)
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4d0e      	ldr	r5, [pc, #56]	; (8003e38 <_OnExit+0x40>)
 8003e00:	2100      	movs	r1, #0
 8003e02:	4620      	mov	r0, r4
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	4798      	blx	r3
 8003e08:	2208      	movs	r2, #8
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	18a0      	adds	r0, r4, r2
 8003e10:	4798      	blx	r3
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	2208      	movs	r2, #8
 8003e16:	2100      	movs	r1, #0
 8003e18:	f104 0010 	add.w	r0, r4, #16
 8003e1c:	4798      	blx	r3
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	2100      	movs	r1, #0
 8003e24:	f104 0018 	add.w	r0, r4, #24
 8003e28:	4798      	blx	r3
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <_OnExit+0x44>)
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
 8003e32:	bf00      	nop
 8003e34:	2402d364 	.word	0x2402d364
 8003e38:	24000030 	.word	0x24000030
 8003e3c:	2402d630 	.word	0x2402d630

08003e40 <GUI_MULTIBUF_ConfirmEx>:
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <GUI_MULTIBUF_ConfirmEx+0x24>)
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	2a00      	cmp	r2, #0
 8003e46:	bf18      	it	ne
 8003e48:	2000      	movne	r0, #0
 8003e4a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	6994      	ldr	r4, [r2, #24]
 8003e52:	2c00      	cmp	r4, #0
 8003e54:	bfa2      	ittt	ge
 8003e56:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 8003e5a:	f04f 33ff 	movge.w	r3, #4294967295
 8003e5e:	6193      	strge	r3, [r2, #24]
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	bf00      	nop
 8003e64:	2402d364 	.word	0x2402d364

08003e68 <GUI_MULTIBUF_ConfigEx>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4c0a      	ldr	r4, [pc, #40]	; (8003e94 <GUI_MULTIBUF_ConfigEx+0x2c>)
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	460e      	mov	r6, r1
 8003e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e72:	b92b      	cbnz	r3, 8003e80 <GUI_MULTIBUF_ConfigEx+0x18>
 8003e74:	4620      	mov	r0, r4
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <GUI_MULTIBUF_ConfigEx+0x30>)
 8003e78:	f840 3f24 	str.w	r3, [r0, #36]!
 8003e7c:	f7ff ff02 	bl	8003c84 <GUI__RegisterExit>
 8003e80:	6a23      	ldr	r3, [r4, #32]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <GUI_MULTIBUF_ConfigEx+0x34>)
 8003e86:	bf18      	it	ne
 8003e88:	2500      	movne	r5, #0
 8003e8a:	2e01      	cmp	r6, #1
 8003e8c:	bfb8      	it	lt
 8003e8e:	2601      	movlt	r6, #1
 8003e90:	555e      	strb	r6, [r3, r5]
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	2402d364 	.word	0x2402d364
 8003e98:	08003df9 	.word	0x08003df9
 8003e9c:	2402d62c 	.word	0x2402d62c

08003ea0 <GUI_StoreKey>:
 8003ea0:	4b02      	ldr	r3, [pc, #8]	; (8003eac <GUI_StoreKey+0xc>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	b902      	cbnz	r2, 8003ea8 <GUI_StoreKey+0x8>
 8003ea6:	6018      	str	r0, [r3, #0]
 8003ea8:	f000 b82e 	b.w	8003f08 <GUI_SignalEvent>
 8003eac:	2402d390 	.word	0x2402d390

08003eb0 <GUI_GetLayerPosEx>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	f000 fdf3 	bl	8004aa0 <LCD_GetPosEx>
 8003eba:	b110      	cbz	r0, 8003ec2 <GUI_GetLayerPosEx+0x12>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}

08003ec4 <GUI_SelectLayer>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4d08      	ldr	r5, [pc, #32]	; (8003ee8 <GUI_SelectLayer+0x24>)
 8003ec8:	2801      	cmp	r0, #1
 8003eca:	4604      	mov	r4, r0
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	7c5e      	ldrb	r6, [r3, #17]
 8003ed0:	d808      	bhi.n	8003ee4 <GUI_SelectLayer+0x20>
 8003ed2:	f7ff feeb 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8003ed6:	b128      	cbz	r0, 8003ee4 <GUI_SelectLayer+0x20>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	745c      	strb	r4, [r3, #17]
 8003edc:	f7ff fcf9 	bl	80038d2 <GUI_SelectLCD>
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <GUI_SelectLayer+0x28>)
 8003ee2:	601c      	str	r4, [r3, #0]
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	24000028 	.word	0x24000028
 8003eec:	2402d6b8 	.word	0x2402d6b8

08003ef0 <GUI_SetLayerVisEx>:
 8003ef0:	f000 be37 	b.w	8004b62 <LCD_SetVisEx>

08003ef4 <_GetCharCode>:
 8003ef4:	7800      	ldrb	r0, [r0, #0]
 8003ef6:	4770      	bx	lr

08003ef8 <_GetCharSize>:
 8003ef8:	2001      	movs	r0, #1
 8003efa:	4770      	bx	lr

08003efc <_CalcSizeOfChar>:
 8003efc:	2001      	movs	r0, #1
 8003efe:	4770      	bx	lr

08003f00 <_Encode>:
 8003f00:	7001      	strb	r1, [r0, #0]
 8003f02:	2001      	movs	r0, #1
 8003f04:	4770      	bx	lr
	...

08003f08 <GUI_SignalEvent>:
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <GUI_SignalEvent+0xc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b103      	cbz	r3, 8003f10 <GUI_SignalEvent+0x8>
 8003f0e:	4718      	bx	r3
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	2402d3f0 	.word	0x2402d3f0

08003f18 <GUI__IntersectRect>:
 8003f18:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003f1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003f26:	bfb8      	it	lt
 8003f28:	8003      	strhlt	r3, [r0, #0]
 8003f2a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8003f34:	bfb8      	it	lt
 8003f36:	8043      	strhlt	r3, [r0, #2]
 8003f38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003f42:	bfc8      	it	gt
 8003f44:	8083      	strhgt	r3, [r0, #4]
 8003f46:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	bfc8      	it	gt
 8003f4e:	80c3      	strhgt	r3, [r0, #6]
 8003f50:	4770      	bx	lr

08003f52 <GUI__IntersectRects>:
 8003f52:	b570      	push	{r4, r5, r6, lr}
 8003f54:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003f58:	4606      	mov	r6, r0
 8003f5a:	f9b2 5000 	ldrsh.w	r5, [r2]
 8003f5e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8003f62:	429d      	cmp	r5, r3
 8003f64:	bfb8      	it	lt
 8003f66:	461d      	movlt	r5, r3
 8003f68:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003f6c:	8005      	strh	r5, [r0, #0]
 8003f6e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8003f72:	4283      	cmp	r3, r0
 8003f74:	bfb8      	it	lt
 8003f76:	4603      	movlt	r3, r0
 8003f78:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8003f7c:	4284      	cmp	r4, r0
 8003f7e:	8073      	strh	r3, [r6, #2]
 8003f80:	bfa8      	it	ge
 8003f82:	4604      	movge	r4, r0
 8003f84:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8003f88:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8003f8c:	80b4      	strh	r4, [r6, #4]
 8003f8e:	4282      	cmp	r2, r0
 8003f90:	bfa8      	it	ge
 8003f92:	4602      	movge	r2, r0
 8003f94:	42a5      	cmp	r5, r4
 8003f96:	80f2      	strh	r2, [r6, #6]
 8003f98:	dc04      	bgt.n	8003fa4 <GUI__IntersectRects+0x52>
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bfcc      	ite	gt
 8003f9e:	2000      	movgt	r0, #0
 8003fa0:	2001      	movle	r0, #1
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}

08003fa8 <GUI__memset>:
 8003fa8:	b2c9      	uxtb	r1, r1
 8003faa:	4603      	mov	r3, r0
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	b12a      	cbz	r2, 8003fbc <GUI__memset+0x14>
 8003fb0:	079c      	lsls	r4, r3, #30
 8003fb2:	d003      	beq.n	8003fbc <GUI__memset+0x14>
 8003fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	e7f8      	b.n	8003fae <GUI__memset+0x6>
 8003fbc:	0895      	lsrs	r5, r2, #2
 8003fbe:	d101      	bne.n	8003fc4 <GUI__memset+0x1c>
 8003fc0:	441a      	add	r2, r3
 8003fc2:	e01a      	b.n	8003ffa <GUI__memset+0x52>
 8003fc4:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8003fc8:	f002 0203 	and.w	r2, r2, #3
 8003fcc:	434c      	muls	r4, r1
 8003fce:	2d03      	cmp	r5, #3
 8003fd0:	461e      	mov	r6, r3
 8003fd2:	f103 0310 	add.w	r3, r3, #16
 8003fd6:	dd09      	ble.n	8003fec <GUI__memset+0x44>
 8003fd8:	f843 4c10 	str.w	r4, [r3, #-16]
 8003fdc:	3d04      	subs	r5, #4
 8003fde:	f843 4c0c 	str.w	r4, [r3, #-12]
 8003fe2:	f843 4c08 	str.w	r4, [r3, #-8]
 8003fe6:	f843 4c04 	str.w	r4, [r3, #-4]
 8003fea:	e7f0      	b.n	8003fce <GUI__memset+0x26>
 8003fec:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8003ff0:	429e      	cmp	r6, r3
 8003ff2:	d0e5      	beq.n	8003fc0 <GUI__memset+0x18>
 8003ff4:	f846 4b04 	str.w	r4, [r6], #4
 8003ff8:	e7fa      	b.n	8003ff0 <GUI__memset+0x48>
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d002      	beq.n	8004004 <GUI__memset+0x5c>
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7fa      	b.n	8003ffa <GUI__memset+0x52>
 8004004:	bd70      	pop	{r4, r5, r6, pc}

08004006 <GUI__memset16>:
 8004006:	b570      	push	{r4, r5, r6, lr}
 8004008:	0784      	lsls	r4, r0, #30
 800400a:	bf42      	ittt	mi
 800400c:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8004010:	8001      	strhmi	r1, [r0, #0]
 8004012:	3002      	addmi	r0, #2
 8004014:	0854      	lsrs	r4, r2, #1
 8004016:	d023      	beq.n	8004060 <GUI__memset16+0x5a>
 8004018:	2c03      	cmp	r4, #3
 800401a:	4623      	mov	r3, r4
 800401c:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8004020:	d802      	bhi.n	8004028 <GUI__memset16+0x22>
 8004022:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004026:	e016      	b.n	8004056 <GUI__memset16+0x50>
 8004028:	f100 0310 	add.w	r3, r0, #16
 800402c:	4626      	mov	r6, r4
 800402e:	3e04      	subs	r6, #4
 8004030:	f843 5c10 	str.w	r5, [r3, #-16]
 8004034:	f843 5c0c 	str.w	r5, [r3, #-12]
 8004038:	3310      	adds	r3, #16
 800403a:	2e03      	cmp	r6, #3
 800403c:	f843 5c18 	str.w	r5, [r3, #-24]
 8004040:	f843 5c14 	str.w	r5, [r3, #-20]
 8004044:	dcf3      	bgt.n	800402e <GUI__memset16+0x28>
 8004046:	3c04      	subs	r4, #4
 8004048:	08a3      	lsrs	r3, r4, #2
 800404a:	1c5e      	adds	r6, r3, #1
 800404c:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8004050:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8004054:	e7e5      	b.n	8004022 <GUI__memset16+0x1c>
 8004056:	4298      	cmp	r0, r3
 8004058:	d002      	beq.n	8004060 <GUI__memset16+0x5a>
 800405a:	f840 5b04 	str.w	r5, [r0], #4
 800405e:	e7fa      	b.n	8004056 <GUI__memset16+0x50>
 8004060:	07d3      	lsls	r3, r2, #31
 8004062:	bf48      	it	mi
 8004064:	8001      	strhmi	r1, [r0, #0]
 8004066:	bd70      	pop	{r4, r5, r6, pc}

08004068 <_SetDrawMode>:
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <_SetDrawMode+0x24>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	7c1a      	ldrb	r2, [r3, #16]
 8004070:	ea82 0100 	eor.w	r1, r2, r0
 8004074:	0749      	lsls	r1, r1, #29
 8004076:	d505      	bpl.n	8004084 <_SetDrawMode+0x1c>
 8004078:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800407a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	680e      	ldr	r6, [r1, #0]
 8004080:	6026      	str	r6, [r4, #0]
 8004082:	600d      	str	r5, [r1, #0]
 8004084:	7418      	strb	r0, [r3, #16]
 8004086:	4610      	mov	r0, r2
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	bf00      	nop
 800408c:	24000028 	.word	0x24000028

08004090 <LCD_SetDrawMode>:
 8004090:	4b01      	ldr	r3, [pc, #4]	; (8004098 <LCD_SetDrawMode+0x8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4718      	bx	r3
 8004098:	24000034 	.word	0x24000034

0800409c <LCD_DrawPixel>:
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <LCD_DrawPixel+0x58>)
 800409e:	460a      	mov	r2, r1
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80040a6:	4291      	cmp	r1, r2
 80040a8:	b430      	push	{r4, r5}
 80040aa:	4604      	mov	r4, r0
 80040ac:	dc20      	bgt.n	80040f0 <LCD_DrawPixel+0x54>
 80040ae:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80040b2:	428a      	cmp	r2, r1
 80040b4:	dc1c      	bgt.n	80040f0 <LCD_DrawPixel+0x54>
 80040b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80040ba:	4281      	cmp	r1, r0
 80040bc:	dc18      	bgt.n	80040f0 <LCD_DrawPixel+0x54>
 80040be:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80040c2:	4288      	cmp	r0, r1
 80040c4:	dc14      	bgt.n	80040f0 <LCD_DrawPixel+0x54>
 80040c6:	7c19      	ldrb	r1, [r3, #16]
 80040c8:	7c58      	ldrb	r0, [r3, #17]
 80040ca:	f011 0f01 	tst.w	r1, #1
 80040ce:	490a      	ldr	r1, [pc, #40]	; (80040f8 <LCD_DrawPixel+0x5c>)
 80040d0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80040d4:	d004      	beq.n	80040e0 <LCD_DrawPixel+0x44>
 80040d6:	68c3      	ldr	r3, [r0, #12]
 80040d8:	4621      	mov	r1, r4
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	bc30      	pop	{r4, r5}
 80040de:	4718      	bx	r3
 80040e0:	68c1      	ldr	r1, [r0, #12]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	698d      	ldr	r5, [r1, #24]
 80040e6:	4621      	mov	r1, r4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	46ac      	mov	ip, r5
 80040ec:	bc30      	pop	{r4, r5}
 80040ee:	4760      	bx	ip
 80040f0:	bc30      	pop	{r4, r5}
 80040f2:	4770      	bx	lr
 80040f4:	24000028 	.word	0x24000028
 80040f8:	2402d67c 	.word	0x2402d67c

080040fc <LCD_DrawHLine>:
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <LCD_DrawHLine+0x48>)
 80040fe:	b430      	push	{r4, r5}
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	460d      	mov	r5, r1
 8004104:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8004108:	428b      	cmp	r3, r1
 800410a:	dc19      	bgt.n	8004140 <LCD_DrawHLine+0x44>
 800410c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004110:	4299      	cmp	r1, r3
 8004112:	dc15      	bgt.n	8004140 <LCD_DrawHLine+0x44>
 8004114:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8004118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411c:	4281      	cmp	r1, r0
 800411e:	bfb8      	it	lt
 8004120:	4601      	movlt	r1, r0
 8004122:	4293      	cmp	r3, r2
 8004124:	bfa8      	it	ge
 8004126:	4613      	movge	r3, r2
 8004128:	4299      	cmp	r1, r3
 800412a:	dc09      	bgt.n	8004140 <LCD_DrawHLine+0x44>
 800412c:	7c60      	ldrb	r0, [r4, #17]
 800412e:	4a06      	ldr	r2, [pc, #24]	; (8004148 <LCD_DrawHLine+0x4c>)
 8004130:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004134:	68c2      	ldr	r2, [r0, #12]
 8004136:	6894      	ldr	r4, [r2, #8]
 8004138:	462a      	mov	r2, r5
 800413a:	46a4      	mov	ip, r4
 800413c:	bc30      	pop	{r4, r5}
 800413e:	4760      	bx	ip
 8004140:	bc30      	pop	{r4, r5}
 8004142:	4770      	bx	lr
 8004144:	24000028 	.word	0x24000028
 8004148:	2402d67c 	.word	0x2402d67c

0800414c <LCD_FillRect>:
 800414c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800414e:	4c13      	ldr	r4, [pc, #76]	; (800419c <LCD_FillRect+0x50>)
 8004150:	6824      	ldr	r4, [r4, #0]
 8004152:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8004156:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800415a:	4285      	cmp	r5, r0
 800415c:	bfb8      	it	lt
 800415e:	4605      	movlt	r5, r0
 8004160:	4296      	cmp	r6, r2
 8004162:	bfa8      	it	ge
 8004164:	4616      	movge	r6, r2
 8004166:	42ae      	cmp	r6, r5
 8004168:	db15      	blt.n	8004196 <LCD_FillRect+0x4a>
 800416a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800416e:	428a      	cmp	r2, r1
 8004170:	bfb8      	it	lt
 8004172:	460a      	movlt	r2, r1
 8004174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004178:	428b      	cmp	r3, r1
 800417a:	bfa8      	it	ge
 800417c:	460b      	movge	r3, r1
 800417e:	429a      	cmp	r2, r3
 8004180:	dc09      	bgt.n	8004196 <LCD_FillRect+0x4a>
 8004182:	7c60      	ldrb	r0, [r4, #17]
 8004184:	4906      	ldr	r1, [pc, #24]	; (80041a0 <LCD_FillRect+0x54>)
 8004186:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800418a:	68c1      	ldr	r1, [r0, #12]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4633      	mov	r3, r6
 8004190:	690c      	ldr	r4, [r1, #16]
 8004192:	4629      	mov	r1, r5
 8004194:	47a0      	blx	r4
 8004196:	b002      	add	sp, #8
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	bf00      	nop
 800419c:	24000028 	.word	0x24000028
 80041a0:	2402d67c 	.word	0x2402d67c

080041a4 <LCD__DrawBitmap_1bpp>:
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	b08f      	sub	sp, #60	; 0x3c
 80041aa:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8004378 <LCD__DrawBitmap_1bpp+0x1d4>
 80041ae:	460c      	mov	r4, r1
 80041b0:	4617      	mov	r7, r2
 80041b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80041b4:	f8de e000 	ldr.w	lr, [lr]
 80041b8:	9502      	str	r5, [sp, #8]
 80041ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80041bc:	9007      	str	r0, [sp, #28]
 80041be:	9508      	str	r5, [sp, #32]
 80041c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	9503      	str	r5, [sp, #12]
 80041c6:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80041ca:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80041cc:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80041d0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80041d2:	f1be 0f00 	cmp.w	lr, #0
 80041d6:	d002      	beq.n	80041de <LCD__DrawBitmap_1bpp+0x3a>
 80041d8:	f8de 4000 	ldr.w	r4, [lr]
 80041dc:	e054      	b.n	8004288 <LCD__DrawBitmap_1bpp+0xe4>
 80041de:	9b02      	ldr	r3, [sp, #8]
 80041e0:	9a08      	ldr	r2, [sp, #32]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d154      	bne.n	8004292 <LCD__DrawBitmap_1bpp+0xee>
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <LCD__DrawBitmap_1bpp+0x1cc>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80041f0:	1a53      	subs	r3, r2, r1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dd0a      	ble.n	800420c <LCD__DrawBitmap_1bpp+0x68>
 80041f6:	9901      	ldr	r1, [sp, #4]
 80041f8:	ebc3 0e01 	rsb	lr, r3, r1
 80041fc:	f1be 0f00 	cmp.w	lr, #0
 8004200:	f340 80b2 	ble.w	8004368 <LCD__DrawBitmap_1bpp+0x1c4>
 8004204:	9903      	ldr	r1, [sp, #12]
 8004206:	fb01 6603 	mla	r6, r1, r3, r6
 800420a:	e002      	b.n	8004212 <LCD__DrawBitmap_1bpp+0x6e>
 800420c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004210:	460a      	mov	r2, r1
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	441c      	add	r4, r3
 8004216:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800421a:	3c01      	subs	r4, #1
 800421c:	1ae4      	subs	r4, r4, r3
 800421e:	2c00      	cmp	r4, #0
 8004220:	dd05      	ble.n	800422e <LCD__DrawBitmap_1bpp+0x8a>
 8004222:	ebc4 0e0e 	rsb	lr, r4, lr
 8004226:	f1be 0f00 	cmp.w	lr, #0
 800422a:	f340 809d 	ble.w	8004368 <LCD__DrawBitmap_1bpp+0x1c4>
 800422e:	9b07      	ldr	r3, [sp, #28]
 8004230:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8004234:	443b      	add	r3, r7
 8004236:	3b01      	subs	r3, #1
 8004238:	1a5b      	subs	r3, r3, r1
 800423a:	2b00      	cmp	r3, #0
 800423c:	bfc8      	it	gt
 800423e:	1aff      	subgt	r7, r7, r3
 8004240:	9b07      	ldr	r3, [sp, #28]
 8004242:	1b59      	subs	r1, r3, r5
 8004244:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8004248:	4299      	cmp	r1, r3
 800424a:	da09      	bge.n	8004260 <LCD__DrawBitmap_1bpp+0xbc>
 800424c:	1a5b      	subs	r3, r3, r1
 800424e:	441d      	add	r5, r3
 8004250:	1aff      	subs	r7, r7, r3
 8004252:	f023 0307 	bic.w	r3, r3, #7
 8004256:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 800425a:	f005 0507 	and.w	r5, r5, #7
 800425e:	4419      	add	r1, r3
 8004260:	2f00      	cmp	r7, #0
 8004262:	f340 8081 	ble.w	8004368 <LCD__DrawBitmap_1bpp+0x1c4>
 8004266:	7c40      	ldrb	r0, [r0, #17]
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <LCD__DrawBitmap_1bpp+0x1d0>)
 800426a:	9c03      	ldr	r4, [sp, #12]
 800426c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004270:	68c3      	ldr	r3, [r0, #12]
 8004272:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8004276:	951c      	str	r5, [sp, #112]	; 0x70
 8004278:	961b      	str	r6, [sp, #108]	; 0x6c
 800427a:	941a      	str	r4, [sp, #104]	; 0x68
 800427c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8004280:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8004284:	685c      	ldr	r4, [r3, #4]
 8004286:	463b      	mov	r3, r7
 8004288:	46a4      	mov	ip, r4
 800428a:	b00f      	add	sp, #60	; 0x3c
 800428c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004290:	4760      	bx	ip
 8004292:	f1ca 0308 	rsb	r3, sl, #8
 8004296:	4675      	mov	r5, lr
 8004298:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004370 <LCD__DrawBitmap_1bpp+0x1cc>
 800429c:	930b      	str	r3, [sp, #44]	; 0x2c
 800429e:	9b02      	ldr	r3, [sp, #8]
 80042a0:	f8cd e014 	str.w	lr, [sp, #20]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	930d      	str	r3, [sp, #52]	; 0x34
 80042a8:	9b05      	ldr	r3, [sp, #20]
 80042aa:	9a01      	ldr	r2, [sp, #4]
 80042ac:	4293      	cmp	r3, r2
 80042ae:	da5b      	bge.n	8004368 <LCD__DrawBitmap_1bpp+0x1c4>
 80042b0:	9b08      	ldr	r3, [sp, #32]
 80042b2:	18e3      	adds	r3, r4, r3
 80042b4:	9309      	str	r3, [sp, #36]	; 0x24
 80042b6:	3b01      	subs	r3, #1
 80042b8:	930a      	str	r3, [sp, #40]	; 0x28
 80042ba:	f8d9 3000 	ldr.w	r3, [r9]
 80042be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042c0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80042c4:	428a      	cmp	r2, r1
 80042c6:	dc48      	bgt.n	800435a <LCD__DrawBitmap_1bpp+0x1b6>
 80042c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042cc:	429c      	cmp	r4, r3
 80042ce:	dc44      	bgt.n	800435a <LCD__DrawBitmap_1bpp+0x1b6>
 80042d0:	9b07      	ldr	r3, [sp, #28]
 80042d2:	f04f 0800 	mov.w	r8, #0
 80042d6:	9606      	str	r6, [sp, #24]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	f8cd 8010 	str.w	r8, [sp, #16]
 80042de:	9b04      	ldr	r3, [sp, #16]
 80042e0:	42bb      	cmp	r3, r7
 80042e2:	da3a      	bge.n	800435a <LCD__DrawBitmap_1bpp+0x1b6>
 80042e4:	f1b8 0f00 	cmp.w	r8, #0
 80042e8:	d105      	bne.n	80042f6 <LCD__DrawBitmap_1bpp+0x152>
 80042ea:	9b06      	ldr	r3, [sp, #24]
 80042ec:	f04f 0808 	mov.w	r8, #8
 80042f0:	781d      	ldrb	r5, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	9306      	str	r3, [sp, #24]
 80042f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042f8:	ebca 0808 	rsb	r8, sl, r8
 80042fc:	fa45 f303 	asr.w	r3, r5, r3
 8004300:	fa05 f50a 	lsl.w	r5, r5, sl
 8004304:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8004308:	b2ed      	uxtb	r5, r5
 800430a:	d104      	bne.n	8004316 <LCD__DrawBitmap_1bpp+0x172>
 800430c:	f8d9 2000 	ldr.w	r2, [r9]
 8004310:	7c12      	ldrb	r2, [r2, #16]
 8004312:	0792      	lsls	r2, r2, #30
 8004314:	d419      	bmi.n	800434a <LCD__DrawBitmap_1bpp+0x1a6>
 8004316:	f8d9 2000 	ldr.w	r2, [r9]
 800431a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800431c:	6810      	ldr	r0, [r2, #0]
 800431e:	900c      	str	r0, [sp, #48]	; 0x30
 8004320:	f1bb 0f00 	cmp.w	fp, #0
 8004324:	d002      	beq.n	800432c <LCD__DrawBitmap_1bpp+0x188>
 8004326:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800432a:	e000      	b.n	800432e <LCD__DrawBitmap_1bpp+0x18a>
 800432c:	b2db      	uxtb	r3, r3
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	9900      	ldr	r1, [sp, #0]
 8004332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004336:	440a      	add	r2, r1
 8004338:	9800      	ldr	r0, [sp, #0]
 800433a:	4621      	mov	r1, r4
 800433c:	f7ff ff06 	bl	800414c <LCD_FillRect>
 8004340:	f8d9 3000 	ldr.w	r3, [r9]
 8004344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	9b04      	ldr	r3, [sp, #16]
 800434c:	9a02      	ldr	r2, [sp, #8]
 800434e:	3301      	adds	r3, #1
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	4413      	add	r3, r2
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	e7c1      	b.n	80042de <LCD__DrawBitmap_1bpp+0x13a>
 800435a:	9b05      	ldr	r3, [sp, #20]
 800435c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800435e:	3301      	adds	r3, #1
 8004360:	9305      	str	r3, [sp, #20]
 8004362:	9b03      	ldr	r3, [sp, #12]
 8004364:	441e      	add	r6, r3
 8004366:	e79f      	b.n	80042a8 <LCD__DrawBitmap_1bpp+0x104>
 8004368:	b00f      	add	sp, #60	; 0x3c
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	24000028 	.word	0x24000028
 8004374:	2402d67c 	.word	0x2402d67c
 8004378:	2402d638 	.word	0x2402d638

0800437c <LCD_DrawBitmap>:
 800437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004380:	b08f      	sub	sp, #60	; 0x3c
 8004382:	f8df e218 	ldr.w	lr, [pc, #536]	; 800459c <LCD_DrawBitmap+0x220>
 8004386:	4605      	mov	r5, r0
 8004388:	4690      	mov	r8, r2
 800438a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800438c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800438e:	9402      	str	r4, [sp, #8]
 8004390:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004392:	f8de e000 	ldr.w	lr, [lr]
 8004396:	9408      	str	r4, [sp, #32]
 8004398:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800439a:	9100      	str	r1, [sp, #0]
 800439c:	9403      	str	r4, [sp, #12]
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80043a2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80043a4:	9604      	str	r6, [sp, #16]
 80043a6:	f1be 0f00 	cmp.w	lr, #0
 80043aa:	d002      	beq.n	80043b2 <LCD_DrawBitmap+0x36>
 80043ac:	f8de 4000 	ldr.w	r4, [lr]
 80043b0:	e07a      	b.n	80044a8 <LCD_DrawBitmap+0x12c>
 80043b2:	9b02      	ldr	r3, [sp, #8]
 80043b4:	9a08      	ldr	r2, [sp, #32]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d17a      	bne.n	80044b2 <LCD_DrawBitmap+0x136>
 80043bc:	4b75      	ldr	r3, [pc, #468]	; (8004594 <LCD_DrawBitmap+0x218>)
 80043be:	9901      	ldr	r1, [sp, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	9b00      	ldr	r3, [sp, #0]
 80043c4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	dd07      	ble.n	80043de <LCD_DrawBitmap+0x62>
 80043ce:	1ac9      	subs	r1, r1, r3
 80043d0:	2900      	cmp	r1, #0
 80043d2:	f340 80db 	ble.w	800458c <LCD_DrawBitmap+0x210>
 80043d6:	9e03      	ldr	r6, [sp, #12]
 80043d8:	fb06 4403 	mla	r4, r6, r3, r4
 80043dc:	e000      	b.n	80043e0 <LCD_DrawBitmap+0x64>
 80043de:	9a00      	ldr	r2, [sp, #0]
 80043e0:	e89d 0048 	ldmia.w	sp, {r3, r6}
 80043e4:	441e      	add	r6, r3
 80043e6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80043ea:	3e01      	subs	r6, #1
 80043ec:	1af6      	subs	r6, r6, r3
 80043ee:	2e00      	cmp	r6, #0
 80043f0:	dd03      	ble.n	80043fa <LCD_DrawBitmap+0x7e>
 80043f2:	1b89      	subs	r1, r1, r6
 80043f4:	2900      	cmp	r1, #0
 80043f6:	f340 80c9 	ble.w	800458c <LCD_DrawBitmap+0x210>
 80043fa:	eb05 0308 	add.w	r3, r5, r8
 80043fe:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	1b9b      	subs	r3, r3, r6
 8004406:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	bfc8      	it	gt
 800440e:	ebc3 0808 	rsbgt	r8, r3, r8
 8004412:	42b5      	cmp	r5, r6
 8004414:	da31      	bge.n	800447a <LCD_DrawBitmap+0xfe>
 8004416:	1b73      	subs	r3, r6, r5
 8004418:	2f08      	cmp	r7, #8
 800441a:	ebc3 0808 	rsb	r8, r3, r8
 800441e:	d027      	beq.n	8004470 <LCD_DrawBitmap+0xf4>
 8004420:	dc0d      	bgt.n	800443e <LCD_DrawBitmap+0xc2>
 8004422:	2f02      	cmp	r7, #2
 8004424:	d014      	beq.n	8004450 <LCD_DrawBitmap+0xd4>
 8004426:	2f04      	cmp	r7, #4
 8004428:	d01a      	beq.n	8004460 <LCD_DrawBitmap+0xe4>
 800442a:	2f01      	cmp	r7, #1
 800442c:	d126      	bne.n	800447c <LCD_DrawBitmap+0x100>
 800442e:	f023 0607 	bic.w	r6, r3, #7
 8004432:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	4435      	add	r5, r6
 800443c:	e01e      	b.n	800447c <LCD_DrawBitmap+0x100>
 800443e:	2f18      	cmp	r7, #24
 8004440:	d018      	beq.n	8004474 <LCD_DrawBitmap+0xf8>
 8004442:	2f20      	cmp	r7, #32
 8004444:	d016      	beq.n	8004474 <LCD_DrawBitmap+0xf8>
 8004446:	2f10      	cmp	r7, #16
 8004448:	d118      	bne.n	800447c <LCD_DrawBitmap+0x100>
 800444a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800444e:	e013      	b.n	8004478 <LCD_DrawBitmap+0xfc>
 8004450:	f023 0603 	bic.w	r6, r3, #3
 8004454:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	4435      	add	r5, r6
 800445e:	e00d      	b.n	800447c <LCD_DrawBitmap+0x100>
 8004460:	f023 0601 	bic.w	r6, r3, #1
 8004464:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	4435      	add	r5, r6
 800446e:	e005      	b.n	800447c <LCD_DrawBitmap+0x100>
 8004470:	441c      	add	r4, r3
 8004472:	e001      	b.n	8004478 <LCD_DrawBitmap+0xfc>
 8004474:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004478:	4635      	mov	r5, r6
 800447a:	2300      	movs	r3, #0
 800447c:	f1b8 0f00 	cmp.w	r8, #0
 8004480:	f340 8084 	ble.w	800458c <LCD_DrawBitmap+0x210>
 8004484:	7c46      	ldrb	r6, [r0, #17]
 8004486:	4844      	ldr	r0, [pc, #272]	; (8004598 <LCD_DrawBitmap+0x21c>)
 8004488:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800448c:	9e04      	ldr	r6, [sp, #16]
 800448e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8004492:	931c      	str	r3, [sp, #112]	; 0x70
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	9118      	str	r1, [sp, #96]	; 0x60
 8004498:	4629      	mov	r1, r5
 800449a:	931a      	str	r3, [sp, #104]	; 0x68
 800449c:	4643      	mov	r3, r8
 800449e:	961d      	str	r6, [sp, #116]	; 0x74
 80044a0:	941b      	str	r4, [sp, #108]	; 0x6c
 80044a2:	9719      	str	r7, [sp, #100]	; 0x64
 80044a4:	f8de 4004 	ldr.w	r4, [lr, #4]
 80044a8:	46a4      	mov	ip, r4
 80044aa:	b00f      	add	sp, #60	; 0x3c
 80044ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	4760      	bx	ip
 80044b2:	f1c7 0308 	rsb	r3, r7, #8
 80044b6:	46f3      	mov	fp, lr
 80044b8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004594 <LCD_DrawBitmap+0x218>
 80044bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80044be:	9b02      	ldr	r3, [sp, #8]
 80044c0:	f8cd e018 	str.w	lr, [sp, #24]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	930d      	str	r3, [sp, #52]	; 0x34
 80044c8:	9b06      	ldr	r3, [sp, #24]
 80044ca:	9a01      	ldr	r2, [sp, #4]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	da5d      	bge.n	800458c <LCD_DrawBitmap+0x210>
 80044d0:	9a00      	ldr	r2, [sp, #0]
 80044d2:	9b08      	ldr	r3, [sp, #32]
 80044d4:	4413      	add	r3, r2
 80044d6:	9309      	str	r3, [sp, #36]	; 0x24
 80044d8:	3b01      	subs	r3, #1
 80044da:	930a      	str	r3, [sp, #40]	; 0x28
 80044dc:	f8da 3000 	ldr.w	r3, [sl]
 80044e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044e2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80044e6:	428a      	cmp	r2, r1
 80044e8:	dc48      	bgt.n	800457c <LCD_DrawBitmap+0x200>
 80044ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044ee:	9a00      	ldr	r2, [sp, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dc43      	bgt.n	800457c <LCD_DrawBitmap+0x200>
 80044f4:	f04f 0900 	mov.w	r9, #0
 80044f8:	462e      	mov	r6, r5
 80044fa:	9407      	str	r4, [sp, #28]
 80044fc:	f8cd 9014 	str.w	r9, [sp, #20]
 8004500:	9b05      	ldr	r3, [sp, #20]
 8004502:	4543      	cmp	r3, r8
 8004504:	da3a      	bge.n	800457c <LCD_DrawBitmap+0x200>
 8004506:	f1b9 0f00 	cmp.w	r9, #0
 800450a:	d106      	bne.n	800451a <LCD_DrawBitmap+0x19e>
 800450c:	9b07      	ldr	r3, [sp, #28]
 800450e:	f04f 0908 	mov.w	r9, #8
 8004512:	f893 b000 	ldrb.w	fp, [r3]
 8004516:	3301      	adds	r3, #1
 8004518:	9307      	str	r3, [sp, #28]
 800451a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800451c:	fa0b f207 	lsl.w	r2, fp, r7
 8004520:	ebc7 0909 	rsb	r9, r7, r9
 8004524:	fa4b f303 	asr.w	r3, fp, r3
 8004528:	fa5f fb82 	uxtb.w	fp, r2
 800452c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8004530:	d104      	bne.n	800453c <LCD_DrawBitmap+0x1c0>
 8004532:	f8da 2000 	ldr.w	r2, [sl]
 8004536:	7c12      	ldrb	r2, [r2, #16]
 8004538:	0792      	lsls	r2, r2, #30
 800453a:	d417      	bmi.n	800456c <LCD_DrawBitmap+0x1f0>
 800453c:	f8da 2000 	ldr.w	r2, [sl]
 8004540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004542:	6810      	ldr	r0, [r2, #0]
 8004544:	900c      	str	r0, [sp, #48]	; 0x30
 8004546:	9804      	ldr	r0, [sp, #16]
 8004548:	b110      	cbz	r0, 8004550 <LCD_DrawBitmap+0x1d4>
 800454a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800454e:	e000      	b.n	8004552 <LCD_DrawBitmap+0x1d6>
 8004550:	b2db      	uxtb	r3, r3
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4630      	mov	r0, r6
 8004556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455a:	4432      	add	r2, r6
 800455c:	9900      	ldr	r1, [sp, #0]
 800455e:	f7ff fdf5 	bl	800414c <LCD_FillRect>
 8004562:	f8da 3000 	ldr.w	r3, [sl]
 8004566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	9b05      	ldr	r3, [sp, #20]
 800456e:	9a02      	ldr	r2, [sp, #8]
 8004570:	3301      	adds	r3, #1
 8004572:	9305      	str	r3, [sp, #20]
 8004574:	4633      	mov	r3, r6
 8004576:	4413      	add	r3, r2
 8004578:	461e      	mov	r6, r3
 800457a:	e7c1      	b.n	8004500 <LCD_DrawBitmap+0x184>
 800457c:	9b06      	ldr	r3, [sp, #24]
 800457e:	3301      	adds	r3, #1
 8004580:	9306      	str	r3, [sp, #24]
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	441c      	add	r4, r3
 8004586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	e79d      	b.n	80044c8 <LCD_DrawBitmap+0x14c>
 800458c:	b00f      	add	sp, #60	; 0x3c
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	bf00      	nop
 8004594:	24000028 	.word	0x24000028
 8004598:	2402d67c 	.word	0x2402d67c
 800459c:	2402d638 	.word	0x2402d638

080045a0 <LCD_SetClipRectMax>:
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <LCD_SetClipRectMax+0x14>)
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <LCD_SetClipRectMax+0x18>)
 80045a6:	7c4a      	ldrb	r2, [r1, #17]
 80045a8:	3108      	adds	r1, #8
 80045aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80045ae:	68c3      	ldr	r3, [r0, #12]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4718      	bx	r3
 80045b4:	24000028 	.word	0x24000028
 80045b8:	2402d67c 	.word	0x2402d67c

080045bc <emWin_LCD_Init>:
 80045bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045be:	f7ff ffef 	bl	80045a0 <LCD_SetClipRectMax>
 80045c2:	f000 f8bb 	bl	800473c <LCD_InitColors>
 80045c6:	4604      	mov	r4, r0
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d144      	bne.n	8004656 <emWin_LCD_Init+0x9a>
 80045cc:	4605      	mov	r5, r0
 80045ce:	4628      	mov	r0, r5
 80045d0:	f7ff fb6c 	bl	8003cac <GUI_DEVICE__GetpDriver>
 80045d4:	9001      	str	r0, [sp, #4]
 80045d6:	b150      	cbz	r0, 80045ee <emWin_LCD_Init+0x32>
 80045d8:	68c3      	ldr	r3, [r0, #12]
 80045da:	210c      	movs	r1, #12
 80045dc:	a801      	add	r0, sp, #4
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	4798      	blx	r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d034      	beq.n	8004652 <emWin_LCD_Init+0x96>
 80045e8:	9801      	ldr	r0, [sp, #4]
 80045ea:	4798      	blx	r3
 80045ec:	4304      	orrs	r4, r0
 80045ee:	3501      	adds	r5, #1
 80045f0:	2d02      	cmp	r5, #2
 80045f2:	d1ec      	bne.n	80045ce <emWin_LCD_Init+0x12>
 80045f4:	bb7c      	cbnz	r4, 8004656 <emWin_LCD_Init+0x9a>
 80045f6:	f000 f8f7 	bl	80047e8 <LCD_InitLUT>
 80045fa:	4b18      	ldr	r3, [pc, #96]	; (800465c <emWin_LCD_Init+0xa0>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004602:	429a      	cmp	r2, r3
 8004604:	d101      	bne.n	800460a <emWin_LCD_Init+0x4e>
 8004606:	2000      	movs	r0, #0
 8004608:	e026      	b.n	8004658 <emWin_LCD_Init+0x9c>
 800460a:	2401      	movs	r4, #1
 800460c:	4620      	mov	r0, r4
 800460e:	f7ff fb4d 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004612:	9001      	str	r0, [sp, #4]
 8004614:	b1c8      	cbz	r0, 800464a <emWin_LCD_Init+0x8e>
 8004616:	4620      	mov	r0, r4
 8004618:	f7ff fc54 	bl	8003ec4 <GUI_SelectLayer>
 800461c:	2004      	movs	r0, #4
 800461e:	f7ff fd37 	bl	8004090 <LCD_SetDrawMode>
 8004622:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004626:	2100      	movs	r1, #0
 8004628:	461a      	mov	r2, r3
 800462a:	4608      	mov	r0, r1
 800462c:	f7ff fd8e 	bl	800414c <LCD_FillRect>
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff fd2d 	bl	8004090 <LCD_SetDrawMode>
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	210e      	movs	r1, #14
 800463a:	a801      	add	r0, sp, #4
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	4798      	blx	r3
 8004642:	4603      	mov	r3, r0
 8004644:	b108      	cbz	r0, 800464a <emWin_LCD_Init+0x8e>
 8004646:	9801      	ldr	r0, [sp, #4]
 8004648:	4798      	blx	r3
 800464a:	f114 34ff 	adds.w	r4, r4, #4294967295
 800464e:	d2dd      	bcs.n	800460c <emWin_LCD_Init+0x50>
 8004650:	e7d9      	b.n	8004606 <emWin_LCD_Init+0x4a>
 8004652:	2001      	movs	r0, #1
 8004654:	e000      	b.n	8004658 <emWin_LCD_Init+0x9c>
 8004656:	4620      	mov	r0, r4
 8004658:	b003      	add	sp, #12
 800465a:	bd30      	pop	{r4, r5, pc}
 800465c:	24000024 	.word	0x24000024

08004660 <LCD_Color2Index>:
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <LCD_Color2Index+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	7c5a      	ldrb	r2, [r3, #17]
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <LCD_Color2Index+0x18>)
 8004668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4718      	bx	r3
 8004672:	bf00      	nop
 8004674:	24000028 	.word	0x24000028
 8004678:	2402d67c 	.word	0x2402d67c

0800467c <LCD_Index2Color>:
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <LCD_Index2Color+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	7c5a      	ldrb	r2, [r3, #17]
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <LCD_Index2Color+0x18>)
 8004684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4718      	bx	r3
 800468e:	bf00      	nop
 8004690:	24000028 	.word	0x24000028
 8004694:	2402d67c 	.word	0x2402d67c

08004698 <LCD_SetColorIndex>:
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <LCD_SetColorIndex+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	7c1a      	ldrb	r2, [r3, #16]
 800469e:	0752      	lsls	r2, r2, #29
 80046a0:	bf4c      	ite	mi
 80046a2:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80046a4:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80046a6:	6018      	str	r0, [r3, #0]
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	24000028 	.word	0x24000028

080046b0 <_SetColor>:
 80046b0:	b508      	push	{r3, lr}
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <_SetColor+0x1c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046b8:	4281      	cmp	r1, r0
 80046ba:	d006      	beq.n	80046ca <_SetColor+0x1a>
 80046bc:	6318      	str	r0, [r3, #48]	; 0x30
 80046be:	f7ff ffcf 	bl	8004660 <LCD_Color2Index>
 80046c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046c6:	f7ff bfe7 	b.w	8004698 <LCD_SetColorIndex>
 80046ca:	bd08      	pop	{r3, pc}
 80046cc:	24000028 	.word	0x24000028

080046d0 <LCD_SetBkColorIndex>:
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <LCD_SetBkColorIndex+0x14>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	7c1a      	ldrb	r2, [r3, #16]
 80046d6:	0752      	lsls	r2, r2, #29
 80046d8:	bf4c      	ite	mi
 80046da:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80046dc:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80046de:	6018      	str	r0, [r3, #0]
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	24000028 	.word	0x24000028

080046e8 <_SetBkColor>:
 80046e8:	b508      	push	{r3, lr}
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <_SetBkColor+0x1c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046f0:	4281      	cmp	r1, r0
 80046f2:	d006      	beq.n	8004702 <_SetBkColor+0x1a>
 80046f4:	6358      	str	r0, [r3, #52]	; 0x34
 80046f6:	f7ff ffb3 	bl	8004660 <LCD_Color2Index>
 80046fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046fe:	f7ff bfe7 	b.w	80046d0 <LCD_SetBkColorIndex>
 8004702:	bd08      	pop	{r3, pc}
 8004704:	24000028 	.word	0x24000028

08004708 <LCD_SetBkColor>:
 8004708:	4b01      	ldr	r3, [pc, #4]	; (8004710 <LCD_SetBkColor+0x8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4718      	bx	r3
 8004710:	24000034 	.word	0x24000034

08004714 <LCD_SetColor>:
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <LCD_SetColor+0x8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4718      	bx	r3
 800471c:	24000034 	.word	0x24000034

08004720 <_OnExit>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4c04      	ldr	r4, [pc, #16]	; (8004734 <_OnExit+0x14>)
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	f7fe fdfd 	bl	8003324 <GUI_ALLOC_FreeFixedBlock>
 800472a:	2300      	movs	r3, #0
 800472c:	4a02      	ldr	r2, [pc, #8]	; (8004738 <_OnExit+0x18>)
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	bd10      	pop	{r4, pc}
 8004734:	2402d68c 	.word	0x2402d68c
 8004738:	2402d3f8 	.word	0x2402d3f8

0800473c <LCD_InitColors>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d0a      	ldr	r5, [pc, #40]	; (8004768 <LCD_InitColors+0x2c>)
 8004740:	682c      	ldr	r4, [r5, #0]
 8004742:	b964      	cbnz	r4, 800475e <LCD_InitColors+0x22>
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <LCD_InitColors+0x30>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	0080      	lsls	r0, r0, #2
 800474a:	f7fe fec3 	bl	80034d4 <GUI_ALLOC_GetFixedBlock>
 800474e:	6028      	str	r0, [r5, #0]
 8004750:	b138      	cbz	r0, 8004762 <LCD_InitColors+0x26>
 8004752:	4807      	ldr	r0, [pc, #28]	; (8004770 <LCD_InitColors+0x34>)
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <LCD_InitColors+0x38>)
 8004756:	f840 3f04 	str.w	r3, [r0, #4]!
 800475a:	f7ff fa93 	bl	8003c84 <GUI__RegisterExit>
 800475e:	2000      	movs	r0, #0
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	2001      	movs	r0, #1
 8004764:	bd38      	pop	{r3, r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	2402d68c 	.word	0x2402d68c
 800476c:	24000038 	.word	0x24000038
 8004770:	2402d3f8 	.word	0x2402d3f8
 8004774:	08004721 	.word	0x08004721

08004778 <LCD_GetpPalConvTableUncached>:
 8004778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800477c:	4604      	mov	r4, r0
 800477e:	b318      	cbz	r0, 80047c8 <LCD_GetpPalConvTableUncached+0x50>
 8004780:	6887      	ldr	r7, [r0, #8]
 8004782:	b31f      	cbz	r7, 80047cc <LCD_GetpPalConvTableUncached+0x54>
 8004784:	4d14      	ldr	r5, [pc, #80]	; (80047d8 <LCD_GetpPalConvTableUncached+0x60>)
 8004786:	6828      	ldr	r0, [r5, #0]
 8004788:	b320      	cbz	r0, 80047d4 <LCD_GetpPalConvTableUncached+0x5c>
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004790:	dc1f      	bgt.n	80047d2 <LCD_GetpPalConvTableUncached+0x5a>
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <LCD_GetpPalConvTableUncached+0x64>)
 8004794:	2600      	movs	r6, #0
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	bfa8      	it	ge
 800479c:	461a      	movge	r2, r3
 800479e:	4690      	mov	r8, r2
 80047a0:	4546      	cmp	r6, r8
 80047a2:	da09      	bge.n	80047b8 <LCD_GetpPalConvTableUncached+0x40>
 80047a4:	f8d5 9000 	ldr.w	r9, [r5]
 80047a8:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80047ac:	f7ff ff58 	bl	8004660 <LCD_Color2Index>
 80047b0:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 80047b4:	3601      	adds	r6, #1
 80047b6:	e7f3      	b.n	80047a0 <LCD_GetpPalConvTableUncached+0x28>
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <LCD_GetpPalConvTableUncached+0x68>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	b10b      	cbz	r3, 80047c2 <LCD_GetpPalConvTableUncached+0x4a>
 80047be:	4620      	mov	r0, r4
 80047c0:	4798      	blx	r3
 80047c2:	6828      	ldr	r0, [r5, #0]
 80047c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047cc:	4638      	mov	r0, r7
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	2000      	movs	r0, #0
 80047d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d8:	2402d68c 	.word	0x2402d68c
 80047dc:	24000038 	.word	0x24000038
 80047e0:	2402d3f8 	.word	0x2402d3f8

080047e4 <LCD_GetpPalConvTableBM>:
 80047e4:	f7ff bfc8 	b.w	8004778 <LCD_GetpPalConvTableUncached>

080047e8 <LCD_InitLUT>:
 80047e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	4e1d      	ldr	r6, [pc, #116]	; (8004864 <LCD_InitLUT+0x7c>)
 80047ee:	f000 f928 	bl	8004a42 <LCD_GetNumLayers>
 80047f2:	2400      	movs	r4, #0
 80047f4:	4680      	mov	r8, r0
 80047f6:	46b1      	mov	r9, r6
 80047f8:	f8df a070 	ldr.w	sl, [pc, #112]	; 800486c <LCD_InitLUT+0x84>
 80047fc:	4544      	cmp	r4, r8
 80047fe:	da2d      	bge.n	800485c <LCD_InitLUT+0x74>
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff fa53 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004806:	b338      	cbz	r0, 8004858 <LCD_InitLUT+0x70>
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	4620      	mov	r0, r4
 800480c:	f893 b011 	ldrb.w	fp, [r3, #17]
 8004810:	745c      	strb	r4, [r3, #17]
 8004812:	f000 f853 	bl	80048bc <LCD_GetBitsPerPixelEx>
 8004816:	2808      	cmp	r0, #8
 8004818:	dd04      	ble.n	8004824 <LCD_InitLUT+0x3c>
 800481a:	f8d9 3000 	ldr.w	r3, [r9]
 800481e:	f883 b011 	strb.w	fp, [r3, #17]
 8004822:	e019      	b.n	8004858 <LCD_InitLUT+0x70>
 8004824:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <LCD_InitLUT+0x80>)
 800482c:	429a      	cmp	r2, r3
 800482e:	d0f4      	beq.n	800481a <LCD_InitLUT+0x32>
 8004830:	4620      	mov	r0, r4
 8004832:	2500      	movs	r5, #0
 8004834:	f000 f845 	bl	80048c2 <LCD_GetNumColorsEx>
 8004838:	4603      	mov	r3, r0
 800483a:	429d      	cmp	r5, r3
 800483c:	daed      	bge.n	800481a <LCD_InitLUT+0x32>
 800483e:	b2ef      	uxtb	r7, r5
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	3501      	adds	r5, #1
 8004844:	4638      	mov	r0, r7
 8004846:	f7ff ff19 	bl	800467c <LCD_Index2Color>
 800484a:	4639      	mov	r1, r7
 800484c:	4602      	mov	r2, r0
 800484e:	4620      	mov	r0, r4
 8004850:	f000 f957 	bl	8004b02 <LCD_SetLUTEntryEx>
 8004854:	9b01      	ldr	r3, [sp, #4]
 8004856:	e7f0      	b.n	800483a <LCD_InitLUT+0x52>
 8004858:	3401      	adds	r4, #1
 800485a:	e7cf      	b.n	80047fc <LCD_InitLUT+0x14>
 800485c:	b003      	add	sp, #12
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	bf00      	nop
 8004864:	24000028 	.word	0x24000028
 8004868:	08008b78 	.word	0x08008b78
 800486c:	2402d67c 	.word	0x2402d67c

08004870 <_GetDevProp>:
 8004870:	2801      	cmp	r0, #1
 8004872:	b510      	push	{r4, lr}
 8004874:	460c      	mov	r4, r1
 8004876:	dc08      	bgt.n	800488a <_GetDevProp+0x1a>
 8004878:	f7ff fa18 	bl	8003cac <GUI_DEVICE__GetpDriver>
 800487c:	b128      	cbz	r0, 800488a <_GetDevProp+0x1a>
 800487e:	68c3      	ldr	r3, [r0, #12]
 8004880:	4621      	mov	r1, r4
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004888:	4718      	bx	r3
 800488a:	2000      	movs	r0, #0
 800488c:	bd10      	pop	{r4, pc}

0800488e <_GetMaxValue>:
 800488e:	b538      	push	{r3, r4, r5, lr}
 8004890:	4601      	mov	r1, r0
 8004892:	4605      	mov	r5, r0
 8004894:	2001      	movs	r0, #1
 8004896:	f7ff ffeb 	bl	8004870 <_GetDevProp>
 800489a:	4604      	mov	r4, r0
 800489c:	4629      	mov	r1, r5
 800489e:	2000      	movs	r0, #0
 80048a0:	f7ff ffe6 	bl	8004870 <_GetDevProp>
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	bfb8      	it	lt
 80048a8:	4620      	movlt	r0, r4
 80048aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80048ae:	bd38      	pop	{r3, r4, r5, pc}

080048b0 <LCD_GetXSizeEx>:
 80048b0:	2101      	movs	r1, #1
 80048b2:	f7ff bfdd 	b.w	8004870 <_GetDevProp>

080048b6 <LCD_GetYSizeEx>:
 80048b6:	2102      	movs	r1, #2
 80048b8:	f7ff bfda 	b.w	8004870 <_GetDevProp>

080048bc <LCD_GetBitsPerPixelEx>:
 80048bc:	2108      	movs	r1, #8
 80048be:	f7ff bfd7 	b.w	8004870 <_GetDevProp>

080048c2 <LCD_GetNumColorsEx>:
 80048c2:	2109      	movs	r1, #9
 80048c4:	f7ff bfd4 	b.w	8004870 <_GetDevProp>

080048c8 <LCD_GetMirrorXEx>:
 80048c8:	210c      	movs	r1, #12
 80048ca:	f7ff bfd1 	b.w	8004870 <_GetDevProp>

080048ce <LCD_GetMirrorYEx>:
 80048ce:	210d      	movs	r1, #13
 80048d0:	f7ff bfce 	b.w	8004870 <_GetDevProp>

080048d4 <LCD_GetSwapXYEx>:
 80048d4:	210e      	movs	r1, #14
 80048d6:	f7ff bfcb 	b.w	8004870 <_GetDevProp>
	...

080048dc <LCD_GetXSize>:
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <LCD_GetXSize+0xc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	7c58      	ldrb	r0, [r3, #17]
 80048e2:	f7ff bfe5 	b.w	80048b0 <LCD_GetXSizeEx>
 80048e6:	bf00      	nop
 80048e8:	24000028 	.word	0x24000028

080048ec <LCD_GetYSize>:
 80048ec:	4b02      	ldr	r3, [pc, #8]	; (80048f8 <LCD_GetYSize+0xc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	7c58      	ldrb	r0, [r3, #17]
 80048f2:	f7ff bfe0 	b.w	80048b6 <LCD_GetYSizeEx>
 80048f6:	bf00      	nop
 80048f8:	24000028 	.word	0x24000028

080048fc <LCD_GetNumColors>:
 80048fc:	4b02      	ldr	r3, [pc, #8]	; (8004908 <LCD_GetNumColors+0xc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	7c58      	ldrb	r0, [r3, #17]
 8004902:	f7ff bfde 	b.w	80048c2 <LCD_GetNumColorsEx>
 8004906:	bf00      	nop
 8004908:	24000028 	.word	0x24000028

0800490c <GUI_GetBitsPerPixelEx>:
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <GUI_GetBitsPerPixelEx+0x10>)
 800490e:	2108      	movs	r1, #8
 8004910:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004914:	68c3      	ldr	r3, [r0, #12]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	4718      	bx	r3
 800491a:	bf00      	nop
 800491c:	2402d67c 	.word	0x2402d67c

08004920 <LCD_GetPaletteEx>:
 8004920:	b510      	push	{r4, lr}
 8004922:	f7ff f9c3 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004926:	b128      	cbz	r0, 8004934 <LCD_GetPaletteEx+0x14>
 8004928:	68c3      	ldr	r3, [r0, #12]
 800492a:	2102      	movs	r1, #2
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004932:	4718      	bx	r3
 8004934:	bd10      	pop	{r4, pc}
	...

08004938 <LCD_GetPalette>:
 8004938:	4b02      	ldr	r3, [pc, #8]	; (8004944 <LCD_GetPalette+0xc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	7c58      	ldrb	r0, [r3, #17]
 800493e:	f7ff bfef 	b.w	8004920 <LCD_GetPaletteEx>
 8004942:	bf00      	nop
 8004944:	24000028 	.word	0x24000028

08004948 <GUI_GetpfIndex2ColorEx>:
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <GUI_GetpfIndex2ColorEx+0xc>)
 800494a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	6858      	ldr	r0, [r3, #4]
 8004952:	4770      	bx	lr
 8004954:	2402d67c 	.word	0x2402d67c

08004958 <GUI_GetpfColor2IndexEx>:
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <GUI_GetpfColor2IndexEx+0xc>)
 800495a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	4770      	bx	lr
 8004964:	2402d67c 	.word	0x2402d67c

08004968 <LCD_GetXSizeMax>:
 8004968:	2001      	movs	r0, #1
 800496a:	f7ff bf90 	b.w	800488e <_GetMaxValue>

0800496e <LCD_GetYSizeMax>:
 800496e:	2002      	movs	r0, #2
 8004970:	f7ff bf8d 	b.w	800488e <_GetMaxValue>

08004974 <LCD_SetDisplaySize>:
 8004974:	4b01      	ldr	r3, [pc, #4]	; (800497c <LCD_SetDisplaySize+0x8>)
 8004976:	e883 0003 	stmia.w	r3, {r0, r1}
 800497a:	4770      	bx	lr
 800497c:	2402d404 	.word	0x2402d404

08004980 <LCD_GetXSizeDisplay>:
 8004980:	4b01      	ldr	r3, [pc, #4]	; (8004988 <LCD_GetXSizeDisplay+0x8>)
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	2402d404 	.word	0x2402d404

0800498c <LCD_GetYSizeDisplay>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <LCD_GetYSizeDisplay+0x8>)
 800498e:	6858      	ldr	r0, [r3, #4]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2402d404 	.word	0x2402d404

08004998 <LCD__GetBPP>:
 8004998:	2800      	cmp	r0, #0
 800499a:	d03b      	beq.n	8004a14 <LCD__GetBPP+0x7c>
 800499c:	f030 0301 	bics.w	r3, r0, #1
 80049a0:	d029      	beq.n	80049f6 <LCD__GetBPP+0x5e>
 80049a2:	f030 0303 	bics.w	r3, r0, #3
 80049a6:	d028      	beq.n	80049fa <LCD__GetBPP+0x62>
 80049a8:	f030 0307 	bics.w	r3, r0, #7
 80049ac:	d027      	beq.n	80049fe <LCD__GetBPP+0x66>
 80049ae:	f030 030f 	bics.w	r3, r0, #15
 80049b2:	d026      	beq.n	8004a02 <LCD__GetBPP+0x6a>
 80049b4:	f030 031f 	bics.w	r3, r0, #31
 80049b8:	d025      	beq.n	8004a06 <LCD__GetBPP+0x6e>
 80049ba:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80049be:	d024      	beq.n	8004a0a <LCD__GetBPP+0x72>
 80049c0:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	b30b      	cbz	r3, 8004a0e <LCD__GetBPP+0x76>
 80049ca:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80049ce:	f023 030f 	bic.w	r3, r3, #15
 80049d2:	b1e3      	cbz	r3, 8004a0e <LCD__GetBPP+0x76>
 80049d4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80049d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049dc:	b1bb      	cbz	r3, 8004a0e <LCD__GetBPP+0x76>
 80049de:	0c03      	lsrs	r3, r0, #16
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	b1a3      	cbz	r3, 8004a0e <LCD__GetBPP+0x76>
 80049e4:	0c83      	lsrs	r3, r0, #18
 80049e6:	049b      	lsls	r3, r3, #18
 80049e8:	b19b      	cbz	r3, 8004a12 <LCD__GetBPP+0x7a>
 80049ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80049ee:	bf0c      	ite	eq
 80049f0:	2018      	moveq	r0, #24
 80049f2:	2020      	movne	r0, #32
 80049f4:	4770      	bx	lr
 80049f6:	2001      	movs	r0, #1
 80049f8:	4770      	bx	lr
 80049fa:	2002      	movs	r0, #2
 80049fc:	4770      	bx	lr
 80049fe:	2003      	movs	r0, #3
 8004a00:	4770      	bx	lr
 8004a02:	2004      	movs	r0, #4
 8004a04:	4770      	bx	lr
 8004a06:	2005      	movs	r0, #5
 8004a08:	4770      	bx	lr
 8004a0a:	2008      	movs	r0, #8
 8004a0c:	4770      	bx	lr
 8004a0e:	2010      	movs	r0, #16
 8004a10:	4770      	bx	lr
 8004a12:	2012      	movs	r0, #18
 8004a14:	4770      	bx	lr

08004a16 <LCD__GetBPPDevice>:
 8004a16:	b508      	push	{r3, lr}
 8004a18:	f7ff ffbe 	bl	8004998 <LCD__GetBPP>
 8004a1c:	2801      	cmp	r0, #1
 8004a1e:	d00f      	beq.n	8004a40 <LCD__GetBPPDevice+0x2a>
 8004a20:	1e83      	subs	r3, r0, #2
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d909      	bls.n	8004a3a <LCD__GetBPPDevice+0x24>
 8004a26:	f1a0 0309 	sub.w	r3, r0, #9
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	d907      	bls.n	8004a3e <LCD__GetBPPDevice+0x28>
 8004a2e:	3811      	subs	r0, #17
 8004a30:	280f      	cmp	r0, #15
 8004a32:	bf8c      	ite	hi
 8004a34:	2000      	movhi	r0, #0
 8004a36:	2020      	movls	r0, #32
 8004a38:	bd08      	pop	{r3, pc}
 8004a3a:	2008      	movs	r0, #8
 8004a3c:	bd08      	pop	{r3, pc}
 8004a3e:	2010      	movs	r0, #16
 8004a40:	bd08      	pop	{r3, pc}

08004a42 <LCD_GetNumLayers>:
 8004a42:	b510      	push	{r4, lr}
 8004a44:	2000      	movs	r0, #0
 8004a46:	f7ff f931 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004a4a:	1c04      	adds	r4, r0, #0
 8004a4c:	f04f 0001 	mov.w	r0, #1
 8004a50:	bf18      	it	ne
 8004a52:	2401      	movne	r4, #1
 8004a54:	f7ff f92a 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004a58:	b100      	cbz	r0, 8004a5c <LCD_GetNumLayers+0x1a>
 8004a5a:	3401      	adds	r4, #1
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	bd10      	pop	{r4, pc}

08004a60 <LCD_SelectLCD>:
 8004a60:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <LCD_SelectLCD+0x38>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	b510      	push	{r4, lr}
 8004a66:	7c51      	ldrb	r1, [r2, #17]
 8004a68:	461c      	mov	r4, r3
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <LCD_SelectLCD+0x3c>)
 8004a6c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004a70:	b140      	cbz	r0, 8004a84 <LCD_SelectLCD+0x24>
 8004a72:	68c3      	ldr	r3, [r0, #12]
 8004a74:	b113      	cbz	r3, 8004a7c <LCD_SelectLCD+0x1c>
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d001      	beq.n	8004a80 <LCD_SelectLCD+0x20>
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	e7f7      	b.n	8004a70 <LCD_SelectLCD+0x10>
 8004a80:	f7ff f94c 	bl	8003d1c <GUI_DEVICE_Unlink>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	661a      	str	r2, [r3, #96]	; 0x60
 8004a8a:	f103 0208 	add.w	r2, r3, #8
 8004a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a92:	615a      	str	r2, [r3, #20]
 8004a94:	f7ff bd84 	b.w	80045a0 <LCD_SetClipRectMax>
 8004a98:	24000028 	.word	0x24000028
 8004a9c:	2402d67c 	.word	0x2402d67c

08004aa0 <LCD_GetPosEx>:
 8004aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	4615      	mov	r5, r2
 8004aa6:	f7ff f901 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004aaa:	9001      	str	r0, [sp, #4]
 8004aac:	b908      	cbnz	r0, 8004ab2 <LCD_GetPosEx+0x12>
 8004aae:	2001      	movs	r0, #1
 8004ab0:	e00d      	b.n	8004ace <LCD_GetPosEx+0x2e>
 8004ab2:	68c3      	ldr	r3, [r0, #12]
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	eb0d 0001 	add.w	r0, sp, r1
 8004abc:	4798      	blx	r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0f4      	beq.n	8004aae <LCD_GetPosEx+0xe>
 8004ac4:	9801      	ldr	r0, [sp, #4]
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4798      	blx	r3
 8004acc:	2000      	movs	r0, #0
 8004ace:	b003      	add	sp, #12
 8004ad0:	bd30      	pop	{r4, r5, pc}

08004ad2 <LCD_SetDevFunc>:
 8004ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	4615      	mov	r5, r2
 8004ad8:	f7ff f8e8 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004adc:	9001      	str	r0, [sp, #4]
 8004ade:	b908      	cbnz	r0, 8004ae4 <LCD_SetDevFunc+0x12>
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e00c      	b.n	8004afe <LCD_SetDevFunc+0x2c>
 8004ae4:	68c3      	ldr	r3, [r0, #12]
 8004ae6:	2116      	movs	r1, #22
 8004ae8:	a801      	add	r0, sp, #4
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	4798      	blx	r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d0f5      	beq.n	8004ae0 <LCD_SetDevFunc+0xe>
 8004af4:	9801      	ldr	r0, [sp, #4]
 8004af6:	462a      	mov	r2, r5
 8004af8:	4621      	mov	r1, r4
 8004afa:	4798      	blx	r3
 8004afc:	2000      	movs	r0, #0
 8004afe:	b003      	add	sp, #12
 8004b00:	bd30      	pop	{r4, r5, pc}

08004b02 <LCD_SetLUTEntryEx>:
 8004b02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	4615      	mov	r5, r2
 8004b08:	f7ff f8d0 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004b0c:	9001      	str	r0, [sp, #4]
 8004b0e:	b908      	cbnz	r0, 8004b14 <LCD_SetLUTEntryEx+0x12>
 8004b10:	2001      	movs	r0, #1
 8004b12:	e00c      	b.n	8004b2e <LCD_SetLUTEntryEx+0x2c>
 8004b14:	68c3      	ldr	r3, [r0, #12]
 8004b16:	2110      	movs	r1, #16
 8004b18:	a801      	add	r0, sp, #4
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	4798      	blx	r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d0f5      	beq.n	8004b10 <LCD_SetLUTEntryEx+0xe>
 8004b24:	9801      	ldr	r0, [sp, #4]
 8004b26:	462a      	mov	r2, r5
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4798      	blx	r3
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	b003      	add	sp, #12
 8004b30:	bd30      	pop	{r4, r5, pc}

08004b32 <LCD_SetSizeEx>:
 8004b32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b34:	460c      	mov	r4, r1
 8004b36:	4615      	mov	r5, r2
 8004b38:	f7ff f8b8 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004b3c:	9001      	str	r0, [sp, #4]
 8004b3e:	b908      	cbnz	r0, 8004b44 <LCD_SetSizeEx+0x12>
 8004b40:	2001      	movs	r0, #1
 8004b42:	e00c      	b.n	8004b5e <LCD_SetSizeEx+0x2c>
 8004b44:	68c3      	ldr	r3, [r0, #12]
 8004b46:	210b      	movs	r1, #11
 8004b48:	a801      	add	r0, sp, #4
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	4798      	blx	r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d0f5      	beq.n	8004b40 <LCD_SetSizeEx+0xe>
 8004b54:	9801      	ldr	r0, [sp, #4]
 8004b56:	462a      	mov	r2, r5
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4798      	blx	r3
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	b003      	add	sp, #12
 8004b60:	bd30      	pop	{r4, r5, pc}

08004b62 <LCD_SetVisEx>:
 8004b62:	b513      	push	{r0, r1, r4, lr}
 8004b64:	460c      	mov	r4, r1
 8004b66:	f7ff f8a1 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004b6a:	9001      	str	r0, [sp, #4]
 8004b6c:	b908      	cbnz	r0, 8004b72 <LCD_SetVisEx+0x10>
 8004b6e:	2001      	movs	r0, #1
 8004b70:	e00b      	b.n	8004b8a <LCD_SetVisEx+0x28>
 8004b72:	68c3      	ldr	r3, [r0, #12]
 8004b74:	2106      	movs	r1, #6
 8004b76:	a801      	add	r0, sp, #4
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	4798      	blx	r3
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d0f5      	beq.n	8004b6e <LCD_SetVisEx+0xc>
 8004b82:	9801      	ldr	r0, [sp, #4]
 8004b84:	4621      	mov	r1, r4
 8004b86:	4798      	blx	r3
 8004b88:	2000      	movs	r0, #0
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd10      	pop	{r4, pc}

08004b8e <LCD_SetVRAMAddrEx>:
 8004b8e:	b513      	push	{r0, r1, r4, lr}
 8004b90:	460c      	mov	r4, r1
 8004b92:	f7ff f88b 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004b96:	9001      	str	r0, [sp, #4]
 8004b98:	b908      	cbnz	r0, 8004b9e <LCD_SetVRAMAddrEx+0x10>
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	e00b      	b.n	8004bb6 <LCD_SetVRAMAddrEx+0x28>
 8004b9e:	68c3      	ldr	r3, [r0, #12]
 8004ba0:	2109      	movs	r1, #9
 8004ba2:	a801      	add	r0, sp, #4
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	4798      	blx	r3
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0f5      	beq.n	8004b9a <LCD_SetVRAMAddrEx+0xc>
 8004bae:	9801      	ldr	r0, [sp, #4]
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4798      	blx	r3
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	b002      	add	sp, #8
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <LCD_SetVSizeEx>:
 8004bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4615      	mov	r5, r2
 8004bc0:	f7ff f874 	bl	8003cac <GUI_DEVICE__GetpDriver>
 8004bc4:	9001      	str	r0, [sp, #4]
 8004bc6:	b908      	cbnz	r0, 8004bcc <LCD_SetVSizeEx+0x12>
 8004bc8:	2001      	movs	r0, #1
 8004bca:	e00c      	b.n	8004be6 <LCD_SetVSizeEx+0x2c>
 8004bcc:	68c3      	ldr	r3, [r0, #12]
 8004bce:	210a      	movs	r1, #10
 8004bd0:	a801      	add	r0, sp, #4
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	4798      	blx	r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d0f5      	beq.n	8004bc8 <LCD_SetVSizeEx+0xe>
 8004bdc:	9801      	ldr	r0, [sp, #4]
 8004bde:	462a      	mov	r2, r5
 8004be0:	4621      	mov	r1, r4
 8004be2:	4798      	blx	r3
 8004be4:	2000      	movs	r0, #0
 8004be6:	b003      	add	sp, #12
 8004be8:	bd30      	pop	{r4, r5, pc}
	...

08004bec <LCD_UpdateColorIndices>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4c07      	ldr	r4, [pc, #28]	; (8004c0c <LCD_UpdateColorIndices+0x20>)
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bf4:	f7ff fd34 	bl	8004660 <LCD_Color2Index>
 8004bf8:	f7ff fd4e 	bl	8004698 <LCD_SetColorIndex>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004c00:	f7ff fd2e 	bl	8004660 <LCD_Color2Index>
 8004c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c08:	f7ff bd62 	b.w	80046d0 <LCD_SetBkColorIndex>
 8004c0c:	24000028 	.word	0x24000028

08004c10 <_GetRect>:
 8004c10:	6882      	ldr	r2, [r0, #8]
 8004c12:	2300      	movs	r3, #0
 8004c14:	800b      	strh	r3, [r1, #0]
 8004c16:	804b      	strh	r3, [r1, #2]
 8004c18:	6993      	ldr	r3, [r2, #24]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	808b      	strh	r3, [r1, #4]
 8004c1e:	69d3      	ldr	r3, [r2, #28]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	80cb      	strh	r3, [r1, #6]
 8004c24:	4770      	bx	lr

08004c26 <_SetPixelIndex>:
 8004c26:	b510      	push	{r4, lr}
 8004c28:	6884      	ldr	r4, [r0, #8]
 8004c2a:	6a20      	ldr	r0, [r4, #32]
 8004c2c:	fb00 1202 	mla	r2, r0, r2, r1
 8004c30:	6821      	ldr	r1, [r4, #0]
 8004c32:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <_GetPixelIndex>:
 8004c38:	6880      	ldr	r0, [r0, #8]
 8004c3a:	6a03      	ldr	r3, [r0, #32]
 8004c3c:	fb03 1202 	mla	r2, r3, r2, r1
 8004c40:	6803      	ldr	r3, [r0, #0]
 8004c42:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8004c46:	4770      	bx	lr

08004c48 <_XorPixel>:
 8004c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	4616      	mov	r6, r2
 8004c52:	f7ff fff1 	bl	8004c38 <_GetPixelIndex>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	4607      	mov	r7, r0
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4798      	blx	r3
 8004c5e:	4632      	mov	r2, r6
 8004c60:	ea87 0300 	eor.w	r3, r7, r0
 8004c64:	4629      	mov	r1, r5
 8004c66:	4620      	mov	r0, r4
 8004c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	f7ff bfdb 	b.w	8004c26 <_SetPixelIndex>

08004c70 <_GetDevProp>:
 8004c70:	3901      	subs	r1, #1
 8004c72:	6883      	ldr	r3, [r0, #8]
 8004c74:	290d      	cmp	r1, #13
 8004c76:	d814      	bhi.n	8004ca2 <_GetDevProp+0x32>
 8004c78:	e8df f001 	tbb	[pc, r1]
 8004c7c:	0f0d0b09 	.word	0x0f0d0b09
 8004c80:	16131313 	.word	0x16131313
 8004c84:	07111107 	.word	0x07111107
 8004c88:	0707      	.short	0x0707
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4770      	bx	lr
 8004c8e:	6918      	ldr	r0, [r3, #16]
 8004c90:	4770      	bx	lr
 8004c92:	6958      	ldr	r0, [r3, #20]
 8004c94:	4770      	bx	lr
 8004c96:	6998      	ldr	r0, [r3, #24]
 8004c98:	4770      	bx	lr
 8004c9a:	69d8      	ldr	r0, [r3, #28]
 8004c9c:	4770      	bx	lr
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	4770      	bx	lr
 8004ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca6:	4770      	bx	lr
 8004ca8:	2010      	movs	r0, #16
 8004caa:	4770      	bx	lr

08004cac <_GetDevData>:
 8004cac:	2901      	cmp	r1, #1
 8004cae:	4802      	ldr	r0, [pc, #8]	; (8004cb8 <_GetDevData+0xc>)
 8004cb0:	bf18      	it	ne
 8004cb2:	2000      	movne	r0, #0
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	08008b04 	.word	0x08008b04

08004cbc <_ReadRect>:
 8004cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cc0:	6886      	ldr	r6, [r0, #8]
 8004cc2:	9d07      	ldr	r5, [sp, #28]
 8004cc4:	6a30      	ldr	r0, [r6, #32]
 8004cc6:	6836      	ldr	r6, [r6, #0]
 8004cc8:	0047      	lsls	r7, r0, #1
 8004cca:	fb00 1002 	mla	r0, r0, r2, r1
 8004cce:	9c08      	ldr	r4, [sp, #32]
 8004cd0:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8004cd4:	07c8      	lsls	r0, r1, #31
 8004cd6:	1a41      	subs	r1, r0, r1
 8004cd8:	18c8      	adds	r0, r1, r3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4419      	add	r1, r3
 8004cde:	0040      	lsls	r0, r0, #1
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	0049      	lsls	r1, r1, #1
 8004ce4:	eb03 0c06 	add.w	ip, r3, r6
 8004ce8:	f1a4 0e02 	sub.w	lr, r4, #2
 8004cec:	eb04 0800 	add.w	r8, r4, r0
 8004cf0:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8004cf4:	f82e 9f02 	strh.w	r9, [lr, #2]!
 8004cf8:	45c6      	cmp	lr, r8
 8004cfa:	d1f9      	bne.n	8004cf0 <_ReadRect+0x34>
 8004cfc:	3201      	adds	r2, #1
 8004cfe:	440c      	add	r4, r1
 8004d00:	443b      	add	r3, r7
 8004d02:	f102 3eff 	add.w	lr, r2, #4294967295
 8004d06:	45ae      	cmp	lr, r5
 8004d08:	dbec      	blt.n	8004ce4 <_ReadRect+0x28>
 8004d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004d10 <_GetDevFunc>:
 8004d10:	3901      	subs	r1, #1
 8004d12:	2928      	cmp	r1, #40	; 0x28
 8004d14:	d848      	bhi.n	8004da8 <_GetDevFunc+0x98>
 8004d16:	e8df f001 	tbb	[pc, r1]
 8004d1a:	1f45      	.short	0x1f45
 8004d1c:	21471d1b 	.word	0x21471d1b
 8004d20:	17494747 	.word	0x17494747
 8004d24:	25472319 	.word	0x25472319
 8004d28:	47474727 	.word	0x47474727
 8004d2c:	332d2b29 	.word	0x332d2b29
 8004d30:	47354747 	.word	0x47354747
 8004d34:	47474747 	.word	0x47474747
 8004d38:	312f3947 	.word	0x312f3947
 8004d3c:	473d4741 	.word	0x473d4741
 8004d40:	4747      	.short	0x4747
 8004d42:	15          	.byte	0x15
 8004d43:	00          	.byte	0x00
 8004d44:	481a      	ldr	r0, [pc, #104]	; (8004db0 <_GetDevFunc+0xa0>)
 8004d46:	4770      	bx	lr
 8004d48:	481a      	ldr	r0, [pc, #104]	; (8004db4 <_GetDevFunc+0xa4>)
 8004d4a:	4770      	bx	lr
 8004d4c:	481a      	ldr	r0, [pc, #104]	; (8004db8 <_GetDevFunc+0xa8>)
 8004d4e:	4770      	bx	lr
 8004d50:	481a      	ldr	r0, [pc, #104]	; (8004dbc <_GetDevFunc+0xac>)
 8004d52:	4770      	bx	lr
 8004d54:	481a      	ldr	r0, [pc, #104]	; (8004dc0 <_GetDevFunc+0xb0>)
 8004d56:	4770      	bx	lr
 8004d58:	481a      	ldr	r0, [pc, #104]	; (8004dc4 <_GetDevFunc+0xb4>)
 8004d5a:	4770      	bx	lr
 8004d5c:	481a      	ldr	r0, [pc, #104]	; (8004dc8 <_GetDevFunc+0xb8>)
 8004d5e:	4770      	bx	lr
 8004d60:	481a      	ldr	r0, [pc, #104]	; (8004dcc <_GetDevFunc+0xbc>)
 8004d62:	4770      	bx	lr
 8004d64:	481a      	ldr	r0, [pc, #104]	; (8004dd0 <_GetDevFunc+0xc0>)
 8004d66:	4770      	bx	lr
 8004d68:	481a      	ldr	r0, [pc, #104]	; (8004dd4 <_GetDevFunc+0xc4>)
 8004d6a:	4770      	bx	lr
 8004d6c:	481a      	ldr	r0, [pc, #104]	; (8004dd8 <_GetDevFunc+0xc8>)
 8004d6e:	4770      	bx	lr
 8004d70:	481a      	ldr	r0, [pc, #104]	; (8004ddc <_GetDevFunc+0xcc>)
 8004d72:	4770      	bx	lr
 8004d74:	481a      	ldr	r0, [pc, #104]	; (8004de0 <_GetDevFunc+0xd0>)
 8004d76:	4770      	bx	lr
 8004d78:	481a      	ldr	r0, [pc, #104]	; (8004de4 <_GetDevFunc+0xd4>)
 8004d7a:	4770      	bx	lr
 8004d7c:	481a      	ldr	r0, [pc, #104]	; (8004de8 <_GetDevFunc+0xd8>)
 8004d7e:	4770      	bx	lr
 8004d80:	481a      	ldr	r0, [pc, #104]	; (8004dec <_GetDevFunc+0xdc>)
 8004d82:	4770      	bx	lr
 8004d84:	6803      	ldr	r3, [r0, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d8a:	4770      	bx	lr
 8004d8c:	6803      	ldr	r3, [r0, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004d92:	4770      	bx	lr
 8004d94:	6803      	ldr	r3, [r0, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004d9a:	4770      	bx	lr
 8004d9c:	6803      	ldr	r3, [r0, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004da2:	4770      	bx	lr
 8004da4:	4812      	ldr	r0, [pc, #72]	; (8004df0 <_GetDevFunc+0xe0>)
 8004da6:	4770      	bx	lr
 8004da8:	2000      	movs	r0, #0
 8004daa:	4770      	bx	lr
 8004dac:	4811      	ldr	r0, [pc, #68]	; (8004df4 <_GetDevFunc+0xe4>)
 8004dae:	4770      	bx	lr
 8004db0:	080057d5 	.word	0x080057d5
 8004db4:	080059e3 	.word	0x080059e3
 8004db8:	080059a1 	.word	0x080059a1
 8004dbc:	080058a7 	.word	0x080058a7
 8004dc0:	080057b9 	.word	0x080057b9
 8004dc4:	08005855 	.word	0x08005855
 8004dc8:	0800582d 	.word	0x0800582d
 8004dcc:	08005813 	.word	0x08005813
 8004dd0:	08004e45 	.word	0x08004e45
 8004dd4:	08004e3b 	.word	0x08004e3b
 8004dd8:	08004e25 	.word	0x08004e25
 8004ddc:	08004e0f 	.word	0x08004e0f
 8004de0:	08004df9 	.word	0x08004df9
 8004de4:	08005755 	.word	0x08005755
 8004de8:	080057ed 	.word	0x080057ed
 8004dec:	08005707 	.word	0x08005707
 8004df0:	08004cbd 	.word	0x08004cbd
 8004df4:	0800587d 	.word	0x0800587d

08004df8 <_SetChroma>:
 8004df8:	b507      	push	{r0, r1, r2, lr}
 8004dfa:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004dfe:	466a      	mov	r2, sp
 8004e00:	210d      	movs	r1, #13
 8004e02:	6980      	ldr	r0, [r0, #24]
 8004e04:	f7fe f874 	bl	8002ef0 <LCD_X_DisplayDriver>
 8004e08:	b003      	add	sp, #12
 8004e0a:	f85d fb04 	ldr.w	pc, [sp], #4

08004e0e <_SetChromaMode>:
 8004e0e:	b507      	push	{r0, r1, r2, lr}
 8004e10:	aa02      	add	r2, sp, #8
 8004e12:	6980      	ldr	r0, [r0, #24]
 8004e14:	f842 1d04 	str.w	r1, [r2, #-4]!
 8004e18:	210c      	movs	r1, #12
 8004e1a:	f7fe f869 	bl	8002ef0 <LCD_X_DisplayDriver>
 8004e1e:	b003      	add	sp, #12
 8004e20:	f85d fb04 	ldr.w	pc, [sp], #4

08004e24 <_SetAlphaMode>:
 8004e24:	b507      	push	{r0, r1, r2, lr}
 8004e26:	aa02      	add	r2, sp, #8
 8004e28:	6980      	ldr	r0, [r0, #24]
 8004e2a:	f842 1d04 	str.w	r1, [r2, #-4]!
 8004e2e:	210b      	movs	r1, #11
 8004e30:	f7fe f85e 	bl	8002ef0 <LCD_X_DisplayDriver>
 8004e34:	b003      	add	sp, #12
 8004e36:	f85d fb04 	ldr.w	pc, [sp], #4

08004e3a <_Off>:
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2106      	movs	r1, #6
 8004e3e:	6980      	ldr	r0, [r0, #24]
 8004e40:	f7fe b856 	b.w	8002ef0 <LCD_X_DisplayDriver>

08004e44 <_On>:
 8004e44:	2200      	movs	r2, #0
 8004e46:	2105      	movs	r1, #5
 8004e48:	6980      	ldr	r0, [r0, #24]
 8004e4a:	f7fe b851 	b.w	8002ef0 <LCD_X_DisplayDriver>

08004e4e <_SetOrg>:
 8004e4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e52:	2300      	movs	r3, #0
 8004e54:	4607      	mov	r7, r0
 8004e56:	6884      	ldr	r4, [r0, #8]
 8004e58:	460d      	mov	r5, r1
 8004e5a:	6980      	ldr	r0, [r0, #24]
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	f7ff fd31 	bl	80048c8 <LCD_GetMirrorXEx>
 8004e66:	4680      	mov	r8, r0
 8004e68:	69b8      	ldr	r0, [r7, #24]
 8004e6a:	f7ff fd30 	bl	80048ce <LCD_GetMirrorYEx>
 8004e6e:	4681      	mov	r9, r0
 8004e70:	69b8      	ldr	r0, [r7, #24]
 8004e72:	f7ff fd2f 	bl	80048d4 <LCD_GetSwapXYEx>
 8004e76:	0080      	lsls	r0, r0, #2
 8004e78:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8004e7c:	ea40 0008 	orr.w	r0, r0, r8
 8004e80:	2807      	cmp	r0, #7
 8004e82:	d826      	bhi.n	8004ed2 <_SetOrg+0x84>
 8004e84:	e8df f000 	tbb	[pc, r0]
 8004e88:	0b0f0408 	.word	0x0b0f0408
 8004e8c:	1b1f1519 	.word	0x1b1f1519
 8004e90:	69a3      	ldr	r3, [r4, #24]
 8004e92:	6921      	ldr	r1, [r4, #16]
 8004e94:	1a59      	subs	r1, r3, r1
 8004e96:	1b4d      	subs	r5, r1, r5
 8004e98:	9500      	str	r5, [sp, #0]
 8004e9a:	9601      	str	r6, [sp, #4]
 8004e9c:	e019      	b.n	8004ed2 <_SetOrg+0x84>
 8004e9e:	69a3      	ldr	r3, [r4, #24]
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	1b5d      	subs	r5, r3, r5
 8004ea6:	69e3      	ldr	r3, [r4, #28]
 8004ea8:	6962      	ldr	r2, [r4, #20]
 8004eaa:	9500      	str	r5, [sp, #0]
 8004eac:	1a9a      	subs	r2, r3, r2
 8004eae:	1b96      	subs	r6, r2, r6
 8004eb0:	e7f3      	b.n	8004e9a <_SetOrg+0x4c>
 8004eb2:	69e3      	ldr	r3, [r4, #28]
 8004eb4:	6962      	ldr	r2, [r4, #20]
 8004eb6:	1a9a      	subs	r2, r3, r2
 8004eb8:	1b96      	subs	r6, r2, r6
 8004eba:	9600      	str	r6, [sp, #0]
 8004ebc:	e008      	b.n	8004ed0 <_SetOrg+0x82>
 8004ebe:	69e3      	ldr	r3, [r4, #28]
 8004ec0:	6962      	ldr	r2, [r4, #20]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	1b9e      	subs	r6, r3, r6
 8004ec6:	69a3      	ldr	r3, [r4, #24]
 8004ec8:	6921      	ldr	r1, [r4, #16]
 8004eca:	9600      	str	r6, [sp, #0]
 8004ecc:	1a59      	subs	r1, r3, r1
 8004ece:	1b4d      	subs	r5, r1, r5
 8004ed0:	9501      	str	r5, [sp, #4]
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	69b8      	ldr	r0, [r7, #24]
 8004ed8:	f7fe f80a 	bl	8002ef0 <LCD_X_DisplayDriver>
 8004edc:	b003      	add	sp, #12
 8004ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004ee4 <_FillRect>:
 8004ee4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	6885      	ldr	r5, [r0, #8]
 8004eea:	469c      	mov	ip, r3
 8004eec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8004ef0:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8004ef4:	4e6c      	ldr	r6, [pc, #432]	; (80050a8 <_FillRect+0x1c4>)
 8004ef6:	f1b9 0f00 	cmp.w	r9, #0
 8004efa:	d008      	beq.n	8004f0e <_FillRect+0x2a>
 8004efc:	6834      	ldr	r4, [r6, #0]
 8004efe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8004f00:	6824      	ldr	r4, [r4, #0]
 8004f02:	f8cd 8000 	str.w	r8, [sp]
 8004f06:	9401      	str	r4, [sp, #4]
 8004f08:	6980      	ldr	r0, [r0, #24]
 8004f0a:	47c8      	blx	r9
 8004f0c:	e0c8      	b.n	80050a0 <_FillRect+0x1bc>
 8004f0e:	f8d6 e000 	ldr.w	lr, [r6]
 8004f12:	0848      	lsrs	r0, r1, #1
 8004f14:	6a2e      	ldr	r6, [r5, #32]
 8004f16:	ebc1 0c0c 	rsb	ip, r1, ip
 8004f1a:	f001 0101 	and.w	r1, r1, #1
 8004f1e:	1076      	asrs	r6, r6, #1
 8004f20:	fb06 0302 	mla	r3, r6, r2, r0
 8004f24:	6828      	ldr	r0, [r5, #0]
 8004f26:	ebc2 0208 	rsb	r2, r2, r8
 8004f2a:	f10c 0501 	add.w	r5, ip, #1
 8004f2e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004f32:	f89e 3010 	ldrb.w	r3, [lr, #16]
 8004f36:	1c57      	adds	r7, r2, #1
 8004f38:	f013 0f01 	tst.w	r3, #1
 8004f3c:	d03d      	beq.n	8004fba <_FillRect+0xd6>
 8004f3e:	b181      	cbz	r1, 8004f62 <_FillRect+0x7e>
 8004f40:	00b1      	lsls	r1, r6, #2
 8004f42:	463d      	mov	r5, r7
 8004f44:	4604      	mov	r4, r0
 8004f46:	b145      	cbz	r5, 8004f5a <_FillRect+0x76>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	3d01      	subs	r5, #1
 8004f4c:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8004f50:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	440c      	add	r4, r1
 8004f58:	e7f5      	b.n	8004f46 <_FillRect+0x62>
 8004f5a:	fb01 0107 	mla	r1, r1, r7, r0
 8004f5e:	4665      	mov	r5, ip
 8004f60:	3004      	adds	r0, #4
 8004f62:	2d01      	cmp	r5, #1
 8004f64:	dd1b      	ble.n	8004f9e <_FillRect+0xba>
 8004f66:	1eab      	subs	r3, r5, #2
 8004f68:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8004f6c:	463c      	mov	r4, r7
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	fb0e 0202 	mla	r2, lr, r2, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	3301      	adds	r3, #1
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	b174      	cbz	r4, 8004f9a <_FillRect+0xb6>
 8004f7c:	3c01      	subs	r4, #1
 8004f7e:	4628      	mov	r0, r5
 8004f80:	4694      	mov	ip, r2
 8004f82:	f8dc 1000 	ldr.w	r1, [ip]
 8004f86:	3802      	subs	r0, #2
 8004f88:	43c9      	mvns	r1, r1
 8004f8a:	2801      	cmp	r0, #1
 8004f8c:	f84c 1b04 	str.w	r1, [ip], #4
 8004f90:	dcf7      	bgt.n	8004f82 <_FillRect+0x9e>
 8004f92:	18d0      	adds	r0, r2, r3
 8004f94:	ebce 0202 	rsb	r2, lr, r2
 8004f98:	e7ef      	b.n	8004f7a <_FillRect+0x96>
 8004f9a:	f005 0501 	and.w	r5, r5, #1
 8004f9e:	2d01      	cmp	r5, #1
 8004fa0:	d17e      	bne.n	80050a0 <_FillRect+0x1bc>
 8004fa2:	00b6      	lsls	r6, r6, #2
 8004fa4:	2f00      	cmp	r7, #0
 8004fa6:	d07b      	beq.n	80050a0 <_FillRect+0x1bc>
 8004fa8:	6803      	ldr	r3, [r0, #0]
 8004faa:	3f01      	subs	r7, #1
 8004fac:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8004fb0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8004fb4:	6003      	str	r3, [r0, #0]
 8004fb6:	4430      	add	r0, r6
 8004fb8:	e7f4      	b.n	8004fa4 <_FillRect+0xc0>
 8004fba:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 8004fbe:	f8d3 e000 	ldr.w	lr, [r3]
 8004fc2:	ea4f 480e 	mov.w	r8, lr, lsl #16
 8004fc6:	b171      	cbz	r1, 8004fe6 <_FillRect+0x102>
 8004fc8:	00b1      	lsls	r1, r6, #2
 8004fca:	463d      	mov	r5, r7
 8004fcc:	4604      	mov	r4, r0
 8004fce:	b135      	cbz	r5, 8004fde <_FillRect+0xfa>
 8004fd0:	8823      	ldrh	r3, [r4, #0]
 8004fd2:	3d01      	subs	r5, #1
 8004fd4:	ea43 0308 	orr.w	r3, r3, r8
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	440c      	add	r4, r1
 8004fdc:	e7f7      	b.n	8004fce <_FillRect+0xea>
 8004fde:	fb01 0107 	mla	r1, r1, r7, r0
 8004fe2:	4665      	mov	r5, ip
 8004fe4:	3004      	adds	r0, #4
 8004fe6:	2d0f      	cmp	r5, #15
 8004fe8:	eb08 030e 	add.w	r3, r8, lr
 8004fec:	dd2f      	ble.n	800504e <_FillRect+0x16a>
 8004fee:	f1a5 0910 	sub.w	r9, r5, #16
 8004ff2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8004ff6:	46b8      	mov	r8, r7
 8004ff8:	ea4f 1419 	mov.w	r4, r9, lsr #4
 8004ffc:	fb0a 0c02 	mla	ip, sl, r2, r0
 8005000:	4608      	mov	r0, r1
 8005002:	3401      	adds	r4, #1
 8005004:	0164      	lsls	r4, r4, #5
 8005006:	f1b8 0f00 	cmp.w	r8, #0
 800500a:	d01d      	beq.n	8005048 <_FillRect+0x164>
 800500c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005010:	f10c 0120 	add.w	r1, ip, #32
 8005014:	4648      	mov	r0, r9
 8005016:	3810      	subs	r0, #16
 8005018:	f841 3c20 	str.w	r3, [r1, #-32]
 800501c:	f841 3c1c 	str.w	r3, [r1, #-28]
 8005020:	f101 0120 	add.w	r1, r1, #32
 8005024:	f841 3c38 	str.w	r3, [r1, #-56]
 8005028:	f841 3c34 	str.w	r3, [r1, #-52]
 800502c:	f841 3c30 	str.w	r3, [r1, #-48]
 8005030:	f841 3c2c 	str.w	r3, [r1, #-44]
 8005034:	f841 3c28 	str.w	r3, [r1, #-40]
 8005038:	f841 3c24 	str.w	r3, [r1, #-36]
 800503c:	d5eb      	bpl.n	8005016 <_FillRect+0x132>
 800503e:	eb0c 0004 	add.w	r0, ip, r4
 8005042:	ebca 0c0c 	rsb	ip, sl, ip
 8005046:	e7de      	b.n	8005006 <_FillRect+0x122>
 8005048:	f005 050f 	and.w	r5, r5, #15
 800504c:	4601      	mov	r1, r0
 800504e:	2d01      	cmp	r5, #1
 8005050:	dd1b      	ble.n	800508a <_FillRect+0x1a6>
 8005052:	1eac      	subs	r4, r5, #2
 8005054:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8005058:	46b8      	mov	r8, r7
 800505a:	0864      	lsrs	r4, r4, #1
 800505c:	fb0c 0202 	mla	r2, ip, r2, r0
 8005060:	4608      	mov	r0, r1
 8005062:	3401      	adds	r4, #1
 8005064:	00a4      	lsls	r4, r4, #2
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	d00c      	beq.n	8005086 <_FillRect+0x1a2>
 800506c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005070:	4629      	mov	r1, r5
 8005072:	4610      	mov	r0, r2
 8005074:	3902      	subs	r1, #2
 8005076:	f840 3b04 	str.w	r3, [r0], #4
 800507a:	2901      	cmp	r1, #1
 800507c:	dcfa      	bgt.n	8005074 <_FillRect+0x190>
 800507e:	1910      	adds	r0, r2, r4
 8005080:	ebcc 0202 	rsb	r2, ip, r2
 8005084:	e7ef      	b.n	8005066 <_FillRect+0x182>
 8005086:	f005 0501 	and.w	r5, r5, #1
 800508a:	2d01      	cmp	r5, #1
 800508c:	d108      	bne.n	80050a0 <_FillRect+0x1bc>
 800508e:	00b6      	lsls	r6, r6, #2
 8005090:	b137      	cbz	r7, 80050a0 <_FillRect+0x1bc>
 8005092:	8843      	ldrh	r3, [r0, #2]
 8005094:	3f01      	subs	r7, #1
 8005096:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 800509a:	6003      	str	r3, [r0, #0]
 800509c:	4430      	add	r0, r6
 800509e:	e7f7      	b.n	8005090 <_FillRect+0x1ac>
 80050a0:	b002      	add	sp, #8
 80050a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a6:	bf00      	nop
 80050a8:	24000028 	.word	0x24000028

080050ac <_DrawHLine>:
 80050ac:	b507      	push	{r0, r1, r2, lr}
 80050ae:	9200      	str	r2, [sp, #0]
 80050b0:	f7ff ff18 	bl	8004ee4 <_FillRect>
 80050b4:	b003      	add	sp, #12
 80050b6:	f85d fb04 	ldr.w	pc, [sp], #4

080050ba <_DrawVLine>:
 80050ba:	b507      	push	{r0, r1, r2, lr}
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	460b      	mov	r3, r1
 80050c0:	f7ff ff10 	bl	8004ee4 <_FillRect>
 80050c4:	b003      	add	sp, #12
 80050c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080050cc <_DrawBitmap>:
 80050cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d0:	b08b      	sub	sp, #44	; 0x2c
 80050d2:	4683      	mov	fp, r0
 80050d4:	4688      	mov	r8, r1
 80050d6:	6887      	ldr	r7, [r0, #8]
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050dc:	9203      	str	r2, [sp, #12]
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050e2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80050e4:	9305      	str	r3, [sp, #20]
 80050e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80050e8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ee:	3b01      	subs	r3, #1
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	f200 82f3 	bhi.w	80056dc <_DrawBitmap+0x610>
 80050f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80050fa:	0023      	.short	0x0023
 80050fc:	02f10019 	.word	0x02f10019
 8005100:	02f10010 	.word	0x02f10010
 8005104:	02f102f1 	.word	0x02f102f1
 8005108:	02f10210 	.word	0x02f10210
 800510c:	02f102f1 	.word	0x02f102f1
 8005110:	02f102f1 	.word	0x02f102f1
 8005114:	02f102f1 	.word	0x02f102f1
 8005118:	02bd      	.short	0x02bd
 800511a:	2300      	movs	r3, #0
 800511c:	9a01      	ldr	r2, [sp, #4]
 800511e:	9306      	str	r3, [sp, #24]
 8005120:	9b02      	ldr	r3, [sp, #8]
 8005122:	18cb      	adds	r3, r1, r3
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	4413      	add	r3, r2
 8005128:	9309      	str	r3, [sp, #36]	; 0x24
 800512a:	e169      	b.n	8005400 <_DrawBitmap+0x334>
 800512c:	2300      	movs	r3, #0
 800512e:	9306      	str	r3, [sp, #24]
 8005130:	9b02      	ldr	r3, [sp, #8]
 8005132:	18cb      	adds	r3, r1, r3
 8005134:	9308      	str	r3, [sp, #32]
 8005136:	9a08      	ldr	r2, [sp, #32]
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	4413      	add	r3, r2
 800513c:	9309      	str	r3, [sp, #36]	; 0x24
 800513e:	e0bc      	b.n	80052ba <_DrawBitmap+0x1ee>
 8005140:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8005142:	b126      	cbz	r6, 800514e <_DrawBitmap+0x82>
 8005144:	4ba3      	ldr	r3, [pc, #652]	; (80053d4 <_DrawBitmap+0x308>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	7c1b      	ldrb	r3, [r3, #16]
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	d502      	bpl.n	8005154 <_DrawBitmap+0x88>
 800514e:	f04f 0900 	mov.w	r9, #0
 8005152:	e061      	b.n	8005218 <_DrawBitmap+0x14c>
 8005154:	9b05      	ldr	r3, [sp, #20]
 8005156:	4641      	mov	r1, r8
 8005158:	9518      	str	r5, [sp, #96]	; 0x60
 800515a:	46b4      	mov	ip, r6
 800515c:	9317      	str	r3, [sp, #92]	; 0x5c
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	9a03      	ldr	r2, [sp, #12]
 8005162:	9316      	str	r3, [sp, #88]	; 0x58
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	9315      	str	r3, [sp, #84]	; 0x54
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	9314      	str	r3, [sp, #80]	; 0x50
 800516c:	4623      	mov	r3, r4
 800516e:	6980      	ldr	r0, [r0, #24]
 8005170:	b00b      	add	sp, #44	; 0x2c
 8005172:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005176:	4760      	bx	ip
 8005178:	686b      	ldr	r3, [r5, #4]
 800517a:	f8db a008 	ldr.w	sl, [fp, #8]
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	9902      	ldr	r1, [sp, #8]
 8005182:	9b03      	ldr	r3, [sp, #12]
 8005184:	f8da 2020 	ldr.w	r2, [sl, #32]
 8005188:	4441      	add	r1, r8
 800518a:	444b      	add	r3, r9
 800518c:	fb02 1303 	mla	r3, r2, r3, r1
 8005190:	9a02      	ldr	r2, [sp, #8]
 8005192:	4991      	ldr	r1, [pc, #580]	; (80053d8 <_DrawBitmap+0x30c>)
 8005194:	f1c2 0708 	rsb	r7, r2, #8
 8005198:	7822      	ldrb	r2, [r4, #0]
 800519a:	5c8e      	ldrb	r6, [r1, r2]
 800519c:	0059      	lsls	r1, r3, #1
 800519e:	9a02      	ldr	r2, [sp, #8]
 80051a0:	4116      	asrs	r6, r2
 80051a2:	4a8c      	ldr	r2, [pc, #560]	; (80053d4 <_DrawBitmap+0x308>)
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	7c12      	ldrb	r2, [r2, #16]
 80051a8:	f002 0203 	and.w	r2, r2, #3
 80051ac:	2a02      	cmp	r2, #2
 80051ae:	d037      	beq.n	8005220 <_DrawBitmap+0x154>
 80051b0:	2a03      	cmp	r2, #3
 80051b2:	d04e      	beq.n	8005252 <_DrawBitmap+0x186>
 80051b4:	2a01      	cmp	r2, #1
 80051b6:	d04c      	beq.n	8005252 <_DrawBitmap+0x186>
 80051b8:	682a      	ldr	r2, [r5, #0]
 80051ba:	9901      	ldr	r1, [sp, #4]
 80051bc:	9208      	str	r2, [sp, #32]
 80051be:	f8da 2000 	ldr.w	r2, [sl]
 80051c2:	9406      	str	r4, [sp, #24]
 80051c4:	9209      	str	r2, [sp, #36]	; 0x24
 80051c6:	42b9      	cmp	r1, r7
 80051c8:	460a      	mov	r2, r1
 80051ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051cc:	bf28      	it	cs
 80051ce:	463a      	movcs	r2, r7
 80051d0:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 80051d4:	4696      	mov	lr, r2
 80051d6:	9808      	ldr	r0, [sp, #32]
 80051d8:	f016 0f01 	tst.w	r6, #1
 80051dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051e0:	4682      	mov	sl, r0
 80051e2:	9807      	ldr	r0, [sp, #28]
 80051e4:	bf18      	it	ne
 80051e6:	4682      	movne	sl, r0
 80051e8:	f1be 0e01 	subs.w	lr, lr, #1
 80051ec:	f82c ab02 	strh.w	sl, [ip], #2
 80051f0:	d1f1      	bne.n	80051d6 <_DrawBitmap+0x10a>
 80051f2:	1abf      	subs	r7, r7, r2
 80051f4:	4413      	add	r3, r2
 80051f6:	eba1 0102 	sub.w	r1, r1, r2
 80051fa:	d107      	bne.n	800520c <_DrawBitmap+0x140>
 80051fc:	9a06      	ldr	r2, [sp, #24]
 80051fe:	2708      	movs	r7, #8
 8005200:	4875      	ldr	r0, [pc, #468]	; (80053d8 <_DrawBitmap+0x30c>)
 8005202:	7852      	ldrb	r2, [r2, #1]
 8005204:	5c86      	ldrb	r6, [r0, r2]
 8005206:	9a06      	ldr	r2, [sp, #24]
 8005208:	3201      	adds	r2, #1
 800520a:	9206      	str	r2, [sp, #24]
 800520c:	2900      	cmp	r1, #0
 800520e:	d1da      	bne.n	80051c6 <_DrawBitmap+0xfa>
 8005210:	9b05      	ldr	r3, [sp, #20]
 8005212:	f109 0901 	add.w	r9, r9, #1
 8005216:	441c      	add	r4, r3
 8005218:	9b04      	ldr	r3, [sp, #16]
 800521a:	4599      	cmp	r9, r3
 800521c:	dbac      	blt.n	8005178 <_DrawBitmap+0xac>
 800521e:	e25d      	b.n	80056dc <_DrawBitmap+0x610>
 8005220:	460b      	mov	r3, r1
 8005222:	4620      	mov	r0, r4
 8005224:	9901      	ldr	r1, [sp, #4]
 8005226:	07f2      	lsls	r2, r6, #31
 8005228:	bf42      	ittt	mi
 800522a:	f8da 2000 	ldrmi.w	r2, [sl]
 800522e:	f8bd e01c 	ldrhmi.w	lr, [sp, #28]
 8005232:	f822 e003 	strhmi.w	lr, [r2, r3]
 8005236:	3f01      	subs	r7, #1
 8005238:	f103 0302 	add.w	r3, r3, #2
 800523c:	bf09      	itett	eq
 800523e:	7842      	ldrbeq	r2, [r0, #1]
 8005240:	0876      	lsrne	r6, r6, #1
 8005242:	4e65      	ldreq	r6, [pc, #404]	; (80053d8 <_DrawBitmap+0x30c>)
 8005244:	3001      	addeq	r0, #1
 8005246:	bf04      	itt	eq
 8005248:	2708      	moveq	r7, #8
 800524a:	5cb6      	ldrbeq	r6, [r6, r2]
 800524c:	3901      	subs	r1, #1
 800524e:	d1ea      	bne.n	8005226 <_DrawBitmap+0x15a>
 8005250:	e7de      	b.n	8005210 <_DrawBitmap+0x144>
 8005252:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005256:	9106      	str	r1, [sp, #24]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4798      	blx	r3
 800525c:	9906      	ldr	r1, [sp, #24]
 800525e:	9a01      	ldr	r2, [sp, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	4621      	mov	r1, r4
 8005264:	f016 0f01 	tst.w	r6, #1
 8005268:	bf1f      	itttt	ne
 800526a:	f8da c000 	ldrne.w	ip, [sl]
 800526e:	f833 e00c 	ldrhne.w	lr, [r3, ip]
 8005272:	ea80 0e0e 	eorne.w	lr, r0, lr
 8005276:	f823 e00c 	strhne.w	lr, [r3, ip]
 800527a:	3f01      	subs	r7, #1
 800527c:	f103 0302 	add.w	r3, r3, #2
 8005280:	bf09      	itett	eq
 8005282:	784e      	ldrbeq	r6, [r1, #1]
 8005284:	0876      	lsrne	r6, r6, #1
 8005286:	4f54      	ldreq	r7, [pc, #336]	; (80053d8 <_DrawBitmap+0x30c>)
 8005288:	3101      	addeq	r1, #1
 800528a:	bf04      	itt	eq
 800528c:	5dbe      	ldrbeq	r6, [r7, r6]
 800528e:	2708      	moveq	r7, #8
 8005290:	3a01      	subs	r2, #1
 8005292:	d1e7      	bne.n	8005264 <_DrawBitmap+0x198>
 8005294:	e7bc      	b.n	8005210 <_DrawBitmap+0x144>
 8005296:	9b06      	ldr	r3, [sp, #24]
 8005298:	9a03      	ldr	r2, [sp, #12]
 800529a:	7826      	ldrb	r6, [r4, #0]
 800529c:	4413      	add	r3, r2
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	4b4c      	ldr	r3, [pc, #304]	; (80053d4 <_DrawBitmap+0x308>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	7c1b      	ldrb	r3, [r3, #16]
 80052a6:	f013 0303 	ands.w	r3, r3, #3
 80052aa:	d00b      	beq.n	80052c4 <_DrawBitmap+0x1f8>
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d04c      	beq.n	800534a <_DrawBitmap+0x27e>
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	441c      	add	r4, r3
 80052b4:	9b06      	ldr	r3, [sp, #24]
 80052b6:	3301      	adds	r3, #1
 80052b8:	9306      	str	r3, [sp, #24]
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	4293      	cmp	r3, r2
 80052c0:	dbe9      	blt.n	8005296 <_DrawBitmap+0x1ca>
 80052c2:	e20b      	b.n	80056dc <_DrawBitmap+0x610>
 80052c4:	9f02      	ldr	r7, [sp, #8]
 80052c6:	46a0      	mov	r8, r4
 80052c8:	9908      	ldr	r1, [sp, #32]
 80052ca:	b305      	cbz	r5, 800530e <_DrawBitmap+0x242>
 80052cc:	9a01      	ldr	r2, [sp, #4]
 80052ce:	eb01 0902 	add.w	r9, r1, r2
 80052d2:	f1c7 0303 	rsb	r3, r7, #3
 80052d6:	20c0      	movs	r0, #192	; 0xc0
 80052d8:	3701      	adds	r7, #1
 80052da:	f101 0a01 	add.w	sl, r1, #1
 80052de:	005a      	lsls	r2, r3, #1
 80052e0:	f1c2 0306 	rsb	r3, r2, #6
 80052e4:	fa40 f303 	asr.w	r3, r0, r3
 80052e8:	4658      	mov	r0, fp
 80052ea:	4033      	ands	r3, r6
 80052ec:	40d3      	lsrs	r3, r2
 80052ee:	9a07      	ldr	r2, [sp, #28]
 80052f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80052f4:	f7ff fc97 	bl	8004c26 <_SetPixelIndex>
 80052f8:	2f04      	cmp	r7, #4
 80052fa:	4651      	mov	r1, sl
 80052fc:	bf02      	ittt	eq
 80052fe:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8005302:	2700      	moveq	r7, #0
 8005304:	f108 0801 	addeq.w	r8, r8, #1
 8005308:	45ca      	cmp	sl, r9
 800530a:	d1e2      	bne.n	80052d2 <_DrawBitmap+0x206>
 800530c:	e7d0      	b.n	80052b0 <_DrawBitmap+0x1e4>
 800530e:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8005312:	f1c7 0203 	rsb	r2, r7, #3
 8005316:	3701      	adds	r7, #1
 8005318:	4658      	mov	r0, fp
 800531a:	f101 0901 	add.w	r9, r1, #1
 800531e:	0052      	lsls	r2, r2, #1
 8005320:	f1c2 0306 	rsb	r3, r2, #6
 8005324:	fa4a f303 	asr.w	r3, sl, r3
 8005328:	4033      	ands	r3, r6
 800532a:	40d3      	lsrs	r3, r2
 800532c:	9a07      	ldr	r2, [sp, #28]
 800532e:	f7ff fc7a 	bl	8004c26 <_SetPixelIndex>
 8005332:	2f04      	cmp	r7, #4
 8005334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005336:	4649      	mov	r1, r9
 8005338:	bf02      	ittt	eq
 800533a:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 800533e:	2700      	moveq	r7, #0
 8005340:	f108 0801 	addeq.w	r8, r8, #1
 8005344:	4599      	cmp	r9, r3
 8005346:	d1e4      	bne.n	8005312 <_DrawBitmap+0x246>
 8005348:	e7b2      	b.n	80052b0 <_DrawBitmap+0x1e4>
 800534a:	9f02      	ldr	r7, [sp, #8]
 800534c:	46a1      	mov	r9, r4
 800534e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005352:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8005356:	b355      	cbz	r5, 80053ae <_DrawBitmap+0x2e2>
 8005358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535a:	ebc8 0103 	rsb	r1, r8, r3
 800535e:	f1c7 0303 	rsb	r3, r7, #3
 8005362:	0058      	lsls	r0, r3, #1
 8005364:	f1c0 0206 	rsb	r2, r0, #6
 8005368:	fa4a f202 	asr.w	r2, sl, r2
 800536c:	ea02 0306 	and.w	r3, r2, r6
 8005370:	40c3      	lsrs	r3, r0
 8005372:	d005      	beq.n	8005380 <_DrawBitmap+0x2b4>
 8005374:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005378:	4658      	mov	r0, fp
 800537a:	9a07      	ldr	r2, [sp, #28]
 800537c:	f7ff fc53 	bl	8004c26 <_SetPixelIndex>
 8005380:	3701      	adds	r7, #1
 8005382:	2f04      	cmp	r7, #4
 8005384:	bf02      	ittt	eq
 8005386:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 800538a:	2700      	moveq	r7, #0
 800538c:	f109 0901 	addeq.w	r9, r9, #1
 8005390:	f1b8 0801 	subs.w	r8, r8, #1
 8005394:	d1e0      	bne.n	8005358 <_DrawBitmap+0x28c>
 8005396:	e78b      	b.n	80052b0 <_DrawBitmap+0x1e4>
 8005398:	3701      	adds	r7, #1
 800539a:	2f04      	cmp	r7, #4
 800539c:	bf02      	ittt	eq
 800539e:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 80053a2:	2700      	moveq	r7, #0
 80053a4:	f109 0901 	addeq.w	r9, r9, #1
 80053a8:	f1b8 0801 	subs.w	r8, r8, #1
 80053ac:	d080      	beq.n	80052b0 <_DrawBitmap+0x1e4>
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	ebc8 0103 	rsb	r1, r8, r3
 80053b4:	f1c7 0303 	rsb	r3, r7, #3
 80053b8:	0058      	lsls	r0, r3, #1
 80053ba:	f1c0 0206 	rsb	r2, r0, #6
 80053be:	fa4a f202 	asr.w	r2, sl, r2
 80053c2:	ea02 0306 	and.w	r3, r2, r6
 80053c6:	40c3      	lsrs	r3, r0
 80053c8:	d0e6      	beq.n	8005398 <_DrawBitmap+0x2cc>
 80053ca:	9a07      	ldr	r2, [sp, #28]
 80053cc:	4658      	mov	r0, fp
 80053ce:	f7ff fc2a 	bl	8004c26 <_SetPixelIndex>
 80053d2:	e7e1      	b.n	8005398 <_DrawBitmap+0x2cc>
 80053d4:	24000028 	.word	0x24000028
 80053d8:	08008b90 	.word	0x08008b90
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	9a06      	ldr	r2, [sp, #24]
 80053e0:	7826      	ldrb	r6, [r4, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	9307      	str	r3, [sp, #28]
 80053e6:	4bbb      	ldr	r3, [pc, #748]	; (80056d4 <_DrawBitmap+0x608>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	7c1b      	ldrb	r3, [r3, #16]
 80053ec:	f013 0303 	ands.w	r3, r3, #3
 80053f0:	d00b      	beq.n	800540a <_DrawBitmap+0x33e>
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d049      	beq.n	800548a <_DrawBitmap+0x3be>
 80053f6:	9b05      	ldr	r3, [sp, #20]
 80053f8:	441c      	add	r4, r3
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	3301      	adds	r3, #1
 80053fe:	9306      	str	r3, [sp, #24]
 8005400:	9b06      	ldr	r3, [sp, #24]
 8005402:	9a04      	ldr	r2, [sp, #16]
 8005404:	4293      	cmp	r3, r2
 8005406:	dbe9      	blt.n	80053dc <_DrawBitmap+0x310>
 8005408:	e168      	b.n	80056dc <_DrawBitmap+0x610>
 800540a:	9f02      	ldr	r7, [sp, #8]
 800540c:	46a0      	mov	r8, r4
 800540e:	9908      	ldr	r1, [sp, #32]
 8005410:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8005414:	b1ed      	cbz	r5, 8005452 <_DrawBitmap+0x386>
 8005416:	f1c7 0301 	rsb	r3, r7, #1
 800541a:	3701      	adds	r7, #1
 800541c:	4658      	mov	r0, fp
 800541e:	f101 0901 	add.w	r9, r1, #1
 8005422:	009a      	lsls	r2, r3, #2
 8005424:	f1c2 0304 	rsb	r3, r2, #4
 8005428:	fa4a f303 	asr.w	r3, sl, r3
 800542c:	4033      	ands	r3, r6
 800542e:	40d3      	lsrs	r3, r2
 8005430:	9a07      	ldr	r2, [sp, #28]
 8005432:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005436:	f7ff fbf6 	bl	8004c26 <_SetPixelIndex>
 800543a:	2f02      	cmp	r7, #2
 800543c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543e:	4649      	mov	r1, r9
 8005440:	bf02      	ittt	eq
 8005442:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8005446:	2700      	moveq	r7, #0
 8005448:	f108 0801 	addeq.w	r8, r8, #1
 800544c:	4599      	cmp	r9, r3
 800544e:	d1e2      	bne.n	8005416 <_DrawBitmap+0x34a>
 8005450:	e7d1      	b.n	80053f6 <_DrawBitmap+0x32a>
 8005452:	f1c7 0201 	rsb	r2, r7, #1
 8005456:	3701      	adds	r7, #1
 8005458:	4658      	mov	r0, fp
 800545a:	f101 0901 	add.w	r9, r1, #1
 800545e:	0092      	lsls	r2, r2, #2
 8005460:	f1c2 0304 	rsb	r3, r2, #4
 8005464:	fa4a f303 	asr.w	r3, sl, r3
 8005468:	4033      	ands	r3, r6
 800546a:	40d3      	lsrs	r3, r2
 800546c:	9a07      	ldr	r2, [sp, #28]
 800546e:	f7ff fbda 	bl	8004c26 <_SetPixelIndex>
 8005472:	2f02      	cmp	r7, #2
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	4649      	mov	r1, r9
 8005478:	bf02      	ittt	eq
 800547a:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 800547e:	2700      	moveq	r7, #0
 8005480:	f108 0801 	addeq.w	r8, r8, #1
 8005484:	4599      	cmp	r9, r3
 8005486:	d1e4      	bne.n	8005452 <_DrawBitmap+0x386>
 8005488:	e7b5      	b.n	80053f6 <_DrawBitmap+0x32a>
 800548a:	9f02      	ldr	r7, [sp, #8]
 800548c:	46a1      	mov	r9, r4
 800548e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005492:	b315      	cbz	r5, 80054da <_DrawBitmap+0x40e>
 8005494:	9a08      	ldr	r2, [sp, #32]
 8005496:	eb08 0a02 	add.w	sl, r8, r2
 800549a:	f1c7 0301 	rsb	r3, r7, #1
 800549e:	ebc8 010a 	rsb	r1, r8, sl
 80054a2:	0098      	lsls	r0, r3, #2
 80054a4:	23f0      	movs	r3, #240	; 0xf0
 80054a6:	f1c0 0204 	rsb	r2, r0, #4
 80054aa:	fa43 f202 	asr.w	r2, r3, r2
 80054ae:	ea02 0306 	and.w	r3, r2, r6
 80054b2:	40c3      	lsrs	r3, r0
 80054b4:	d005      	beq.n	80054c2 <_DrawBitmap+0x3f6>
 80054b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80054ba:	4658      	mov	r0, fp
 80054bc:	9a07      	ldr	r2, [sp, #28]
 80054be:	f7ff fbb2 	bl	8004c26 <_SetPixelIndex>
 80054c2:	3701      	adds	r7, #1
 80054c4:	2f02      	cmp	r7, #2
 80054c6:	bf02      	ittt	eq
 80054c8:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 80054cc:	2700      	moveq	r7, #0
 80054ce:	f109 0901 	addeq.w	r9, r9, #1
 80054d2:	f1b8 0801 	subs.w	r8, r8, #1
 80054d6:	d1e0      	bne.n	800549a <_DrawBitmap+0x3ce>
 80054d8:	e78d      	b.n	80053f6 <_DrawBitmap+0x32a>
 80054da:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 80054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e0:	ebc8 0103 	rsb	r1, r8, r3
 80054e4:	f1c7 0301 	rsb	r3, r7, #1
 80054e8:	0098      	lsls	r0, r3, #2
 80054ea:	f1c0 0204 	rsb	r2, r0, #4
 80054ee:	fa4a f202 	asr.w	r2, sl, r2
 80054f2:	ea02 0306 	and.w	r3, r2, r6
 80054f6:	40c3      	lsrs	r3, r0
 80054f8:	d003      	beq.n	8005502 <_DrawBitmap+0x436>
 80054fa:	9a07      	ldr	r2, [sp, #28]
 80054fc:	4658      	mov	r0, fp
 80054fe:	f7ff fb92 	bl	8004c26 <_SetPixelIndex>
 8005502:	3701      	adds	r7, #1
 8005504:	2f02      	cmp	r7, #2
 8005506:	bf02      	ittt	eq
 8005508:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 800550c:	2700      	moveq	r7, #0
 800550e:	f109 0901 	addeq.w	r9, r9, #1
 8005512:	f1b8 0801 	subs.w	r8, r8, #1
 8005516:	d1e2      	bne.n	80054de <_DrawBitmap+0x412>
 8005518:	e76d      	b.n	80053f6 <_DrawBitmap+0x32a>
 800551a:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800551c:	4b6d      	ldr	r3, [pc, #436]	; (80056d4 <_DrawBitmap+0x608>)
 800551e:	b926      	cbnz	r6, 800552a <_DrawBitmap+0x45e>
 8005520:	f8d3 c000 	ldr.w	ip, [r3]
 8005524:	f04f 0e00 	mov.w	lr, #0
 8005528:	e019      	b.n	800555e <_DrawBitmap+0x492>
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	7c12      	ldrb	r2, [r2, #16]
 800552e:	0792      	lsls	r2, r2, #30
 8005530:	d4f6      	bmi.n	8005520 <_DrawBitmap+0x454>
 8005532:	2d00      	cmp	r5, #0
 8005534:	d0f4      	beq.n	8005520 <_DrawBitmap+0x454>
 8005536:	9b05      	ldr	r3, [sp, #20]
 8005538:	46b4      	mov	ip, r6
 800553a:	9517      	str	r5, [sp, #92]	; 0x5c
 800553c:	9316      	str	r3, [sp, #88]	; 0x58
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	9a03      	ldr	r2, [sp, #12]
 8005542:	9315      	str	r3, [sp, #84]	; 0x54
 8005544:	9b01      	ldr	r3, [sp, #4]
 8005546:	9314      	str	r3, [sp, #80]	; 0x50
 8005548:	4623      	mov	r3, r4
 800554a:	6980      	ldr	r0, [r0, #24]
 800554c:	b00b      	add	sp, #44	; 0x2c
 800554e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005552:	4760      	bx	ip
 8005554:	b93d      	cbnz	r5, 8005566 <_DrawBitmap+0x49a>
 8005556:	9b05      	ldr	r3, [sp, #20]
 8005558:	f10e 0e01 	add.w	lr, lr, #1
 800555c:	441c      	add	r4, r3
 800555e:	9b04      	ldr	r3, [sp, #16]
 8005560:	459e      	cmp	lr, r3
 8005562:	dbf7      	blt.n	8005554 <_DrawBitmap+0x488>
 8005564:	e0ba      	b.n	80056dc <_DrawBitmap+0x610>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	4473      	add	r3, lr
 800556c:	fb02 8303 	mla	r3, r2, r3, r8
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005576:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800557a:	f012 0203 	ands.w	r2, r2, #3
 800557e:	d003      	beq.n	8005588 <_DrawBitmap+0x4bc>
 8005580:	2a02      	cmp	r2, #2
 8005582:	d1e8      	bne.n	8005556 <_DrawBitmap+0x48a>
 8005584:	2200      	movs	r2, #0
 8005586:	e070      	b.n	800566a <_DrawBitmap+0x59e>
 8005588:	4621      	mov	r1, r4
 800558a:	9a01      	ldr	r2, [sp, #4]
 800558c:	2a07      	cmp	r2, #7
 800558e:	f101 0608 	add.w	r6, r1, #8
 8005592:	f103 0010 	add.w	r0, r3, #16
 8005596:	dd33      	ble.n	8005600 <_DrawBitmap+0x534>
 8005598:	f816 3c08 	ldrb.w	r3, [r6, #-8]
 800559c:	3a08      	subs	r2, #8
 800559e:	4631      	mov	r1, r6
 80055a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055a4:	f820 3c10 	strh.w	r3, [r0, #-16]
 80055a8:	f816 3c07 	ldrb.w	r3, [r6, #-7]
 80055ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055b0:	f820 3c0e 	strh.w	r3, [r0, #-14]
 80055b4:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 80055b8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055bc:	f820 3c0c 	strh.w	r3, [r0, #-12]
 80055c0:	f816 3c05 	ldrb.w	r3, [r6, #-5]
 80055c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055c8:	f820 3c0a 	strh.w	r3, [r0, #-10]
 80055cc:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 80055d0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055d4:	f820 3c08 	strh.w	r3, [r0, #-8]
 80055d8:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 80055dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055e0:	f820 3c06 	strh.w	r3, [r0, #-6]
 80055e4:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 80055e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055ec:	f820 3c04 	strh.w	r3, [r0, #-4]
 80055f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055f4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055f8:	f820 3c02 	strh.w	r3, [r0, #-2]
 80055fc:	4603      	mov	r3, r0
 80055fe:	e7c5      	b.n	800558c <_DrawBitmap+0x4c0>
 8005600:	2a03      	cmp	r2, #3
 8005602:	4618      	mov	r0, r3
 8005604:	460e      	mov	r6, r1
 8005606:	f103 0308 	add.w	r3, r3, #8
 800560a:	f101 0104 	add.w	r1, r1, #4
 800560e:	dd19      	ble.n	8005644 <_DrawBitmap+0x578>
 8005610:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8005614:	3a04      	subs	r2, #4
 8005616:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800561a:	f823 0c08 	strh.w	r0, [r3, #-8]
 800561e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8005622:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8005626:	f823 0c06 	strh.w	r0, [r3, #-6]
 800562a:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800562e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8005632:	f823 0c04 	strh.w	r0, [r3, #-4]
 8005636:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800563a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800563e:	f823 0c02 	strh.w	r0, [r3, #-2]
 8005642:	e7dd      	b.n	8005600 <_DrawBitmap+0x534>
 8005644:	3e01      	subs	r6, #1
 8005646:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800564a:	4282      	cmp	r2, r0
 800564c:	d083      	beq.n	8005556 <_DrawBitmap+0x48a>
 800564e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005652:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005656:	f820 3b02 	strh.w	r3, [r0], #2
 800565a:	e7f6      	b.n	800564a <_DrawBitmap+0x57e>
 800565c:	5ca1      	ldrb	r1, [r4, r2]
 800565e:	b119      	cbz	r1, 8005668 <_DrawBitmap+0x59c>
 8005660:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005664:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8005668:	3201      	adds	r2, #1
 800566a:	9901      	ldr	r1, [sp, #4]
 800566c:	1a89      	subs	r1, r1, r2
 800566e:	2900      	cmp	r1, #0
 8005670:	dcf4      	bgt.n	800565c <_DrawBitmap+0x590>
 8005672:	e770      	b.n	8005556 <_DrawBitmap+0x48a>
 8005674:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8005676:	b925      	cbnz	r5, 8005682 <_DrawBitmap+0x5b6>
 8005678:	9b01      	ldr	r3, [sp, #4]
 800567a:	2600      	movs	r6, #0
 800567c:	4f16      	ldr	r7, [pc, #88]	; (80056d8 <_DrawBitmap+0x60c>)
 800567e:	005d      	lsls	r5, r3, #1
 8005680:	e012      	b.n	80056a8 <_DrawBitmap+0x5dc>
 8005682:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <_DrawBitmap+0x608>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	7c1b      	ldrb	r3, [r3, #16]
 8005688:	07db      	lsls	r3, r3, #31
 800568a:	d4f5      	bmi.n	8005678 <_DrawBitmap+0x5ac>
 800568c:	9b05      	ldr	r3, [sp, #20]
 800568e:	46ac      	mov	ip, r5
 8005690:	9a03      	ldr	r2, [sp, #12]
 8005692:	9316      	str	r3, [sp, #88]	; 0x58
 8005694:	9b04      	ldr	r3, [sp, #16]
 8005696:	9315      	str	r3, [sp, #84]	; 0x54
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	9314      	str	r3, [sp, #80]	; 0x50
 800569c:	4623      	mov	r3, r4
 800569e:	6980      	ldr	r0, [r0, #24]
 80056a0:	b00b      	add	sp, #44	; 0x2c
 80056a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a6:	4760      	bx	ip
 80056a8:	9b04      	ldr	r3, [sp, #16]
 80056aa:	429e      	cmp	r6, r3
 80056ac:	da16      	bge.n	80056dc <_DrawBitmap+0x610>
 80056ae:	f8db 2008 	ldr.w	r2, [fp, #8]
 80056b2:	4621      	mov	r1, r4
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	18f0      	adds	r0, r6, r3
 80056b8:	6a13      	ldr	r3, [r2, #32]
 80056ba:	3601      	adds	r6, #1
 80056bc:	fb03 8300 	mla	r3, r3, r0, r8
 80056c0:	6810      	ldr	r0, [r2, #0]
 80056c2:	462a      	mov	r2, r5
 80056c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	4798      	blx	r3
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	441c      	add	r4, r3
 80056d0:	e7ea      	b.n	80056a8 <_DrawBitmap+0x5dc>
 80056d2:	bf00      	nop
 80056d4:	24000028 	.word	0x24000028
 80056d8:	2400002c 	.word	0x2400002c
 80056dc:	b00b      	add	sp, #44	; 0x2c
 80056de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop

080056e4 <_InitOnce.isra.3>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	6805      	ldr	r5, [r0, #0]
 80056e8:	4604      	mov	r4, r0
 80056ea:	b93d      	cbnz	r5, 80056fc <_InitOnce.isra.3+0x18>
 80056ec:	2050      	movs	r0, #80	; 0x50
 80056ee:	f7fd fef1 	bl	80034d4 <GUI_ALLOC_GetFixedBlock>
 80056f2:	2250      	movs	r2, #80	; 0x50
 80056f4:	6020      	str	r0, [r4, #0]
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fe fc56 	bl	8003fa8 <GUI__memset>
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	fab0 f080 	clz	r0, r0
 8005702:	0940      	lsrs	r0, r0, #5
 8005704:	bd38      	pop	{r3, r4, r5, pc}

08005706 <_SetDevFunc>:
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	4606      	mov	r6, r0
 800570a:	3008      	adds	r0, #8
 800570c:	460d      	mov	r5, r1
 800570e:	4614      	mov	r4, r2
 8005710:	f7ff ffe8 	bl	80056e4 <_InitOnce.isra.3>
 8005714:	68b3      	ldr	r3, [r6, #8]
 8005716:	b1db      	cbz	r3, 8005750 <_SetDevFunc+0x4a>
 8005718:	2d21      	cmp	r5, #33	; 0x21
 800571a:	d012      	beq.n	8005742 <_SetDevFunc+0x3c>
 800571c:	dc07      	bgt.n	800572e <_SetDevFunc+0x28>
 800571e:	2d19      	cmp	r5, #25
 8005720:	d00d      	beq.n	800573e <_SetDevFunc+0x38>
 8005722:	2d20      	cmp	r5, #32
 8005724:	d00f      	beq.n	8005746 <_SetDevFunc+0x40>
 8005726:	2d03      	cmp	r5, #3
 8005728:	d112      	bne.n	8005750 <_SetDevFunc+0x4a>
 800572a:	649c      	str	r4, [r3, #72]	; 0x48
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	2d24      	cmp	r5, #36	; 0x24
 8005730:	d00d      	beq.n	800574e <_SetDevFunc+0x48>
 8005732:	2d25      	cmp	r5, #37	; 0x25
 8005734:	d009      	beq.n	800574a <_SetDevFunc+0x44>
 8005736:	2d23      	cmp	r5, #35	; 0x23
 8005738:	d10a      	bne.n	8005750 <_SetDevFunc+0x4a>
 800573a:	645c      	str	r4, [r3, #68]	; 0x44
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	635c      	str	r4, [r3, #52]	; 0x34
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	639c      	str	r4, [r3, #56]	; 0x38
 8005744:	bd70      	pop	{r4, r5, r6, pc}
 8005746:	63dc      	str	r4, [r3, #60]	; 0x3c
 8005748:	bd70      	pop	{r4, r5, r6, pc}
 800574a:	641c      	str	r4, [r3, #64]	; 0x40
 800574c:	bd70      	pop	{r4, r5, r6, pc}
 800574e:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005750:	bd70      	pop	{r4, r5, r6, pc}
	...

08005754 <_CopyBuffer>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	4606      	mov	r6, r0
 800575a:	3008      	adds	r0, #8
 800575c:	460f      	mov	r7, r1
 800575e:	4690      	mov	r8, r2
 8005760:	f7ff ffc0 	bl	80056e4 <_InitOnce.isra.3>
 8005764:	68b4      	ldr	r4, [r6, #8]
 8005766:	b31c      	cbz	r4, 80057b0 <_CopyBuffer+0x5c>
 8005768:	4547      	cmp	r7, r8
 800576a:	d021      	beq.n	80057b0 <_CopyBuffer+0x5c>
 800576c:	68f3      	ldr	r3, [r6, #12]
 800576e:	2108      	movs	r1, #8
 8005770:	4630      	mov	r0, r6
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	4798      	blx	r3
 8005776:	69a2      	ldr	r2, [r4, #24]
 8005778:	6963      	ldr	r3, [r4, #20]
 800577a:	4353      	muls	r3, r2
 800577c:	4358      	muls	r0, r3
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	08c2      	lsrs	r2, r0, #3
 8005782:	b123      	cbz	r3, 800578e <_CopyBuffer+0x3a>
 8005784:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8005788:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 800578c:	e004      	b.n	8005798 <_CopyBuffer+0x44>
 800578e:	6865      	ldr	r5, [r4, #4]
 8005790:	fb02 5107 	mla	r1, r2, r7, r5
 8005794:	fb02 5508 	mla	r5, r2, r8, r5
 8005798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800579a:	b123      	cbz	r3, 80057a6 <_CopyBuffer+0x52>
 800579c:	4642      	mov	r2, r8
 800579e:	4639      	mov	r1, r7
 80057a0:	69b0      	ldr	r0, [r6, #24]
 80057a2:	4798      	blx	r3
 80057a4:	e003      	b.n	80057ae <_CopyBuffer+0x5a>
 80057a6:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <_CopyBuffer+0x60>)
 80057a8:	4628      	mov	r0, r5
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4798      	blx	r3
 80057ae:	6025      	str	r5, [r4, #0]
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b4:	2400002c 	.word	0x2400002c

080057b8 <_GetPos>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	3008      	adds	r0, #8
 80057be:	460e      	mov	r6, r1
 80057c0:	4615      	mov	r5, r2
 80057c2:	f7ff ff8f 	bl	80056e4 <_InitOnce.isra.3>
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	b11b      	cbz	r3, 80057d2 <_GetPos+0x1a>
 80057ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057cc:	6032      	str	r2, [r6, #0]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	bd70      	pop	{r4, r5, r6, pc}

080057d4 <_SetVRAM_BufferPTR>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4605      	mov	r5, r0
 80057d8:	3008      	adds	r0, #8
 80057da:	460c      	mov	r4, r1
 80057dc:	f7ff ff82 	bl	80056e4 <_InitOnce.isra.3>
 80057e0:	68ab      	ldr	r3, [r5, #8]
 80057e2:	b113      	cbz	r3, 80057ea <_SetVRAM_BufferPTR+0x16>
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	609c      	str	r4, [r3, #8]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}

080057ec <_ShowBuffer>:
 80057ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ee:	2300      	movs	r3, #0
 80057f0:	4604      	mov	r4, r0
 80057f2:	3008      	adds	r0, #8
 80057f4:	460d      	mov	r5, r1
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	f7ff ff74 	bl	80056e4 <_InitOnce.isra.3>
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	b133      	cbz	r3, 800580e <_ShowBuffer+0x22>
 8005800:	aa02      	add	r2, sp, #8
 8005802:	210e      	movs	r1, #14
 8005804:	69a0      	ldr	r0, [r4, #24]
 8005806:	f842 5d04 	str.w	r5, [r2, #-4]!
 800580a:	f7fd fb71 	bl	8002ef0 <LCD_X_DisplayDriver>
 800580e:	b003      	add	sp, #12
 8005810:	bd30      	pop	{r4, r5, pc}

08005812 <_Init>:
 8005812:	b538      	push	{r3, r4, r5, lr}
 8005814:	4604      	mov	r4, r0
 8005816:	3008      	adds	r0, #8
 8005818:	f7ff ff64 	bl	80056e4 <_InitOnce.isra.3>
 800581c:	4605      	mov	r5, r0
 800581e:	2200      	movs	r2, #0
 8005820:	2101      	movs	r1, #1
 8005822:	69a0      	ldr	r0, [r4, #24]
 8005824:	f7fd fb64 	bl	8002ef0 <LCD_X_DisplayDriver>
 8005828:	4328      	orrs	r0, r5
 800582a:	bd38      	pop	{r3, r4, r5, pc}

0800582c <_SetVis>:
 800582c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800582e:	2300      	movs	r3, #0
 8005830:	4604      	mov	r4, r0
 8005832:	3008      	adds	r0, #8
 8005834:	460d      	mov	r5, r1
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	f7ff ff54 	bl	80056e4 <_InitOnce.isra.3>
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	b13b      	cbz	r3, 8005850 <_SetVis+0x24>
 8005840:	aa02      	add	r2, sp, #8
 8005842:	631d      	str	r5, [r3, #48]	; 0x30
 8005844:	2109      	movs	r1, #9
 8005846:	69a0      	ldr	r0, [r4, #24]
 8005848:	f842 5d04 	str.w	r5, [r2, #-4]!
 800584c:	f7fd fb50 	bl	8002ef0 <LCD_X_DisplayDriver>
 8005850:	b003      	add	sp, #12
 8005852:	bd30      	pop	{r4, r5, pc}

08005854 <_SetAlpha>:
 8005854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005856:	2300      	movs	r3, #0
 8005858:	4604      	mov	r4, r0
 800585a:	3008      	adds	r0, #8
 800585c:	460d      	mov	r5, r1
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	f7ff ff40 	bl	80056e4 <_InitOnce.isra.3>
 8005864:	68a3      	ldr	r3, [r4, #8]
 8005866:	b13b      	cbz	r3, 8005878 <_SetAlpha+0x24>
 8005868:	aa02      	add	r2, sp, #8
 800586a:	62dd      	str	r5, [r3, #44]	; 0x2c
 800586c:	210a      	movs	r1, #10
 800586e:	69a0      	ldr	r0, [r4, #24]
 8005870:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005874:	f7fd fb3c 	bl	8002ef0 <LCD_X_DisplayDriver>
 8005878:	b003      	add	sp, #12
 800587a:	bd30      	pop	{r4, r5, pc}

0800587c <_SetVRAMAddr>:
 800587c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800587e:	2300      	movs	r3, #0
 8005880:	4604      	mov	r4, r0
 8005882:	3008      	adds	r0, #8
 8005884:	460d      	mov	r5, r1
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	f7ff ff2c 	bl	80056e4 <_InitOnce.isra.3>
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	b143      	cbz	r3, 80058a2 <_SetVRAMAddr+0x26>
 8005890:	aa02      	add	r2, sp, #8
 8005892:	601d      	str	r5, [r3, #0]
 8005894:	605d      	str	r5, [r3, #4]
 8005896:	2102      	movs	r1, #2
 8005898:	f842 5d04 	str.w	r5, [r2, #-4]!
 800589c:	69a0      	ldr	r0, [r4, #24]
 800589e:	f7fd fb27 	bl	8002ef0 <LCD_X_DisplayDriver>
 80058a2:	b003      	add	sp, #12
 80058a4:	bd30      	pop	{r4, r5, pc}

080058a6 <_SetPos>:
 80058a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	4606      	mov	r6, r0
 80058ae:	460d      	mov	r5, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	2100      	movs	r1, #0
 80058b4:	2218      	movs	r2, #24
 80058b6:	a802      	add	r0, sp, #8
 80058b8:	f002 fb72 	bl	8007fa0 <memset>
 80058bc:	f106 0008 	add.w	r0, r6, #8
 80058c0:	f7ff ff10 	bl	80056e4 <_InitOnce.isra.3>
 80058c4:	68b7      	ldr	r7, [r6, #8]
 80058c6:	2f00      	cmp	r7, #0
 80058c8:	d067      	beq.n	800599a <_SetPos+0xf4>
 80058ca:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 80058ce:	f1bb 0f00 	cmp.w	fp, #0
 80058d2:	d004      	beq.n	80058de <_SetPos+0x38>
 80058d4:	4622      	mov	r2, r4
 80058d6:	4629      	mov	r1, r5
 80058d8:	69b0      	ldr	r0, [r6, #24]
 80058da:	47d8      	blx	fp
 80058dc:	e05d      	b.n	800599a <_SetPos+0xf4>
 80058de:	627d      	str	r5, [r7, #36]	; 0x24
 80058e0:	62bc      	str	r4, [r7, #40]	; 0x28
 80058e2:	f7ff f84d 	bl	8004980 <LCD_GetXSizeDisplay>
 80058e6:	4681      	mov	r9, r0
 80058e8:	f7ff f850 	bl	800498c <LCD_GetYSizeDisplay>
 80058ec:	68f2      	ldr	r2, [r6, #12]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2108      	movs	r1, #8
 80058f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80058f4:	4680      	mov	r8, r0
 80058f6:	4630      	mov	r0, r6
 80058f8:	f8d7 a010 	ldr.w	sl, [r7, #16]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	4790      	blx	r2
 8005900:	2208      	movs	r2, #8
 8005902:	3007      	adds	r0, #7
 8005904:	2d00      	cmp	r5, #0
 8005906:	eb05 010a 	add.w	r1, r5, sl
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	fb90 f0f2 	sdiv	r0, r0, r2
 8005910:	9006      	str	r0, [sp, #24]
 8005912:	da07      	bge.n	8005924 <_SetPos+0x7e>
 8005914:	9a07      	ldr	r2, [sp, #28]
 8005916:	f8cd b008 	str.w	fp, [sp, #8]
 800591a:	fb00 2015 	mls	r0, r0, r5, r2
 800591e:	9104      	str	r1, [sp, #16]
 8005920:	9007      	str	r0, [sp, #28]
 8005922:	e007      	b.n	8005934 <_SetPos+0x8e>
 8005924:	4589      	cmp	r9, r1
 8005926:	9502      	str	r5, [sp, #8]
 8005928:	bfb6      	itet	lt
 800592a:	ebc5 0509 	rsblt	r5, r5, r9
 800592e:	f8cd a010 	strge.w	sl, [sp, #16]
 8005932:	9504      	strlt	r5, [sp, #16]
 8005934:	2c00      	cmp	r4, #0
 8005936:	eb04 0203 	add.w	r2, r4, r3
 800593a:	da09      	bge.n	8005950 <_SetPos+0xaa>
 800593c:	9b06      	ldr	r3, [sp, #24]
 800593e:	9205      	str	r2, [sp, #20]
 8005940:	435c      	muls	r4, r3
 8005942:	9b07      	ldr	r3, [sp, #28]
 8005944:	fb0a 3414 	mls	r4, sl, r4, r3
 8005948:	2300      	movs	r3, #0
 800594a:	9407      	str	r4, [sp, #28]
 800594c:	9303      	str	r3, [sp, #12]
 800594e:	e006      	b.n	800595e <_SetPos+0xb8>
 8005950:	4590      	cmp	r8, r2
 8005952:	9403      	str	r4, [sp, #12]
 8005954:	bfb6      	itet	lt
 8005956:	ebc4 0408 	rsblt	r4, r4, r8
 800595a:	9305      	strge	r3, [sp, #20]
 800595c:	9405      	strlt	r4, [sp, #20]
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	dd08      	ble.n	8005978 <_SetPos+0xd2>
 8005966:	9a05      	ldr	r2, [sp, #20]
 8005968:	2a00      	cmp	r2, #0
 800596a:	dd05      	ble.n	8005978 <_SetPos+0xd2>
 800596c:	9a02      	ldr	r2, [sp, #8]
 800596e:	4591      	cmp	r9, r2
 8005970:	dd02      	ble.n	8005978 <_SetPos+0xd2>
 8005972:	9a03      	ldr	r2, [sp, #12]
 8005974:	4590      	cmp	r8, r2
 8005976:	dc06      	bgt.n	8005986 <_SetPos+0xe0>
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10e      	bne.n	800599a <_SetPos+0xf4>
 800597c:	2100      	movs	r1, #0
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ff54 	bl	800582c <_SetVis>
 8005984:	e009      	b.n	800599a <_SetPos+0xf4>
 8005986:	b91b      	cbnz	r3, 8005990 <_SetPos+0xea>
 8005988:	2101      	movs	r1, #1
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ff4e 	bl	800582c <_SetVis>
 8005990:	aa02      	add	r2, sp, #8
 8005992:	2108      	movs	r1, #8
 8005994:	69b0      	ldr	r0, [r6, #24]
 8005996:	f7fd faab 	bl	8002ef0 <LCD_X_DisplayDriver>
 800599a:	b009      	add	sp, #36	; 0x24
 800599c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059a0 <_SetSize>:
 80059a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a2:	2300      	movs	r3, #0
 80059a4:	4605      	mov	r5, r0
 80059a6:	3008      	adds	r0, #8
 80059a8:	460f      	mov	r7, r1
 80059aa:	4616      	mov	r6, r2
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	f7ff fe98 	bl	80056e4 <_InitOnce.isra.3>
 80059b4:	68ac      	ldr	r4, [r5, #8]
 80059b6:	b194      	cbz	r4, 80059de <_SetSize+0x3e>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b93b      	cbnz	r3, 80059cc <_SetSize+0x2c>
 80059bc:	69a8      	ldr	r0, [r5, #24]
 80059be:	f7fe ff89 	bl	80048d4 <LCD_GetSwapXYEx>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	bf0c      	ite	eq
 80059c6:	4638      	moveq	r0, r7
 80059c8:	4630      	movne	r0, r6
 80059ca:	6220      	str	r0, [r4, #32]
 80059cc:	6127      	str	r7, [r4, #16]
 80059ce:	466a      	mov	r2, sp
 80059d0:	6166      	str	r6, [r4, #20]
 80059d2:	2107      	movs	r1, #7
 80059d4:	69a8      	ldr	r0, [r5, #24]
 80059d6:	9700      	str	r7, [sp, #0]
 80059d8:	9601      	str	r6, [sp, #4]
 80059da:	f7fd fa89 	bl	8002ef0 <LCD_X_DisplayDriver>
 80059de:	b003      	add	sp, #12
 80059e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059e2 <_SetVSize>:
 80059e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	3008      	adds	r0, #8
 80059e8:	460d      	mov	r5, r1
 80059ea:	4616      	mov	r6, r2
 80059ec:	f7ff fe7a 	bl	80056e4 <_InitOnce.isra.3>
 80059f0:	68bc      	ldr	r4, [r7, #8]
 80059f2:	b144      	cbz	r4, 8005a06 <_SetVSize+0x24>
 80059f4:	69b8      	ldr	r0, [r7, #24]
 80059f6:	f7fe ff6d 	bl	80048d4 <LCD_GetSwapXYEx>
 80059fa:	61a5      	str	r5, [r4, #24]
 80059fc:	61e6      	str	r6, [r4, #28]
 80059fe:	b108      	cbz	r0, 8005a04 <_SetVSize+0x22>
 8005a00:	6226      	str	r6, [r4, #32]
 8005a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a04:	6225      	str	r5, [r4, #32]
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a08 <_GetDevData>:
 8005a08:	2901      	cmp	r1, #1
 8005a0a:	4802      	ldr	r0, [pc, #8]	; (8005a14 <_GetDevData+0xc>)
 8005a0c:	bf18      	it	ne
 8005a0e:	2000      	movne	r0, #0
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	08008b04 	.word	0x08008b04

08005a18 <_GetDevFunc>:
 8005a18:	2916      	cmp	r1, #22
 8005a1a:	4802      	ldr	r0, [pc, #8]	; (8005a24 <_GetDevFunc+0xc>)
 8005a1c:	bf18      	it	ne
 8005a1e:	2000      	movne	r0, #0
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	0800651d 	.word	0x0800651d

08005a28 <_SetOrg>:
 8005a28:	6800      	ldr	r0, [r0, #0]
 8005a2a:	b110      	cbz	r0, 8005a32 <_SetOrg+0xa>
 8005a2c:	68c3      	ldr	r3, [r0, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	4718      	bx	r3
 8005a32:	4770      	bx	lr

08005a34 <_GetRect>:
 8005a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a36:	6880      	ldr	r0, [r0, #8]
 8005a38:	460d      	mov	r5, r1
 8005a3a:	f7fd fc87 	bl	800334c <GUI_ALLOC_LockH>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	a802      	add	r0, sp, #8
 8005a42:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8005a46:	8914      	ldrh	r4, [r2, #8]
 8005a48:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8005a4c:	802b      	strh	r3, [r5, #0]
 8005a4e:	441c      	add	r4, r3
 8005a50:	8953      	ldrh	r3, [r2, #10]
 8005a52:	3c01      	subs	r4, #1
 8005a54:	f840 2d04 	str.w	r2, [r0, #-4]!
 8005a58:	440b      	add	r3, r1
 8005a5a:	8069      	strh	r1, [r5, #2]
 8005a5c:	80ac      	strh	r4, [r5, #4]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	80eb      	strh	r3, [r5, #6]
 8005a62:	f7fd fc81 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005a66:	b003      	add	sp, #12
 8005a68:	bd30      	pop	{r4, r5, pc}
	...

08005a6c <_XY2PTR>:
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <_XY2PTR+0x3c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a72:	4606      	mov	r6, r0
 8005a74:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005a76:	460d      	mov	r5, r1
 8005a78:	f7fd fc68 	bl	800334c <GUI_ALLOC_LockH>
 8005a7c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8005a80:	ab02      	add	r3, sp, #8
 8005a82:	68c4      	ldr	r4, [r0, #12]
 8005a84:	1a69      	subs	r1, r5, r1
 8005a86:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8005a8a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005a8e:	1b76      	subs	r6, r6, r5
 8005a90:	0076      	lsls	r6, r6, #1
 8005a92:	3618      	adds	r6, #24
 8005a94:	fb04 6501 	mla	r5, r4, r1, r6
 8005a98:	1944      	adds	r4, r0, r5
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd fc64 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
 8005aa6:	bf00      	nop
 8005aa8:	24000028 	.word	0x24000028

08005aac <_GetPixelIndex>:
 8005aac:	b508      	push	{r3, lr}
 8005aae:	4608      	mov	r0, r1
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	f7ff ffdb 	bl	8005a6c <_XY2PTR>
 8005ab6:	8800      	ldrh	r0, [r0, #0]
 8005ab8:	bd08      	pop	{r3, pc}
	...

08005abc <_XorPixel>:
 8005abc:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <_XorPixel+0x54>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac2:	4616      	mov	r6, r2
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	4607      	mov	r7, r0
 8005ac8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005aca:	f7fd fc3f 	bl	800334c <GUI_ALLOC_LockH>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	9000      	str	r0, [sp, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f7ff ffca 	bl	8005a6c <_XY2PTR>
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4604      	mov	r4, r0
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4798      	blx	r3
 8005ae0:	8823      	ldrh	r3, [r4, #0]
 8005ae2:	4058      	eors	r0, r3
 8005ae4:	9b00      	ldr	r3, [sp, #0]
 8005ae6:	8020      	strh	r0, [r4, #0]
 8005ae8:	6958      	ldr	r0, [r3, #20]
 8005aea:	b160      	cbz	r0, 8005b06 <_XorPixel+0x4a>
 8005aec:	f7fd fc2e 	bl	800334c <GUI_ALLOC_LockH>
 8005af0:	ac02      	add	r4, sp, #8
 8005af2:	6883      	ldr	r3, [r0, #8]
 8005af4:	4632      	mov	r2, r6
 8005af6:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005afa:	4629      	mov	r1, r5
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4798      	blx	r3
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7fd fc31 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005b06:	4668      	mov	r0, sp
 8005b08:	f7fd fc2e 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005b0c:	b003      	add	sp, #12
 8005b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b10:	24000028 	.word	0x24000028

08005b14 <_SetPixelIndex>:
 8005b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b16:	461c      	mov	r4, r3
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <_SetPixelIndex+0x48>)
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b22:	f7fd fc13 	bl	800334c <GUI_ALLOC_LockH>
 8005b26:	4631      	mov	r1, r6
 8005b28:	9000      	str	r0, [sp, #0]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7ff ff9e 	bl	8005a6c <_XY2PTR>
 8005b30:	9b00      	ldr	r3, [sp, #0]
 8005b32:	8004      	strh	r4, [r0, #0]
 8005b34:	6958      	ldr	r0, [r3, #20]
 8005b36:	b160      	cbz	r0, 8005b52 <_SetPixelIndex+0x3e>
 8005b38:	f7fd fc08 	bl	800334c <GUI_ALLOC_LockH>
 8005b3c:	ac02      	add	r4, sp, #8
 8005b3e:	6883      	ldr	r3, [r0, #8]
 8005b40:	4632      	mov	r2, r6
 8005b42:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005b46:	4629      	mov	r1, r5
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4798      	blx	r3
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7fd fc0b 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005b52:	4668      	mov	r0, sp
 8005b54:	f7fd fc08 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005b58:	b002      	add	sp, #8
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	24000028 	.word	0x24000028

08005b60 <_DrawVLine>:
 8005b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b64:	4c2c      	ldr	r4, [pc, #176]	; (8005c18 <_DrawVLine+0xb8>)
 8005b66:	461e      	mov	r6, r3
 8005b68:	4680      	mov	r8, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	4615      	mov	r5, r2
 8005b70:	46a1      	mov	r9, r4
 8005b72:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b74:	f7fd fbea 	bl	800334c <GUI_ALLOC_LockH>
 8005b78:	9000      	str	r0, [sp, #0]
 8005b7a:	6940      	ldr	r0, [r0, #20]
 8005b7c:	b108      	cbz	r0, 8005b82 <_DrawVLine+0x22>
 8005b7e:	f7fd fbe5 	bl	800334c <GUI_ALLOC_LockH>
 8005b82:	9001      	str	r0, [sp, #4]
 8005b84:	4629      	mov	r1, r5
 8005b86:	4638      	mov	r0, r7
 8005b88:	f7ff ff70 	bl	8005a6c <_XY2PTR>
 8005b8c:	f8d9 3000 	ldr.w	r3, [r9]
 8005b90:	4604      	mov	r4, r0
 8005b92:	7c1a      	ldrb	r2, [r3, #16]
 8005b94:	07d2      	lsls	r2, r2, #31
 8005b96:	d51f      	bpl.n	8005bd8 <_DrawVLine+0x78>
 8005b98:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4798      	blx	r3
 8005ba0:	fa1f f880 	uxth.w	r8, r0
 8005ba4:	9801      	ldr	r0, [sp, #4]
 8005ba6:	b120      	cbz	r0, 8005bb2 <_DrawVLine+0x52>
 8005ba8:	6883      	ldr	r3, [r0, #8]
 8005baa:	462a      	mov	r2, r5
 8005bac:	4639      	mov	r1, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4798      	blx	r3
 8005bb2:	8823      	ldrh	r3, [r4, #0]
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	ea88 0303 	eor.w	r3, r8, r3
 8005bba:	42b5      	cmp	r5, r6
 8005bbc:	8023      	strh	r3, [r4, #0]
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	441c      	add	r4, r3
 8005bc4:	ddee      	ble.n	8005ba4 <_DrawVLine+0x44>
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	f7fd fbce 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005bcc:	9b01      	ldr	r3, [sp, #4]
 8005bce:	b303      	cbz	r3, 8005c12 <_DrawVLine+0xb2>
 8005bd0:	a801      	add	r0, sp, #4
 8005bd2:	f7fd fbc9 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005bd6:	e01c      	b.n	8005c12 <_DrawVLine+0xb2>
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	9a00      	ldr	r2, [sp, #0]
 8005bdc:	f8d3 9000 	ldr.w	r9, [r3]
 8005be0:	9b01      	ldr	r3, [sp, #4]
 8005be2:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8005be6:	b163      	cbz	r3, 8005c02 <_DrawVLine+0xa2>
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	462a      	mov	r2, r5
 8005bec:	3501      	adds	r5, #1
 8005bee:	4639      	mov	r1, r7
 8005bf0:	6883      	ldr	r3, [r0, #8]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4798      	blx	r3
 8005bf6:	42ae      	cmp	r6, r5
 8005bf8:	f8a4 9000 	strh.w	r9, [r4]
 8005bfc:	4444      	add	r4, r8
 8005bfe:	daf3      	bge.n	8005be8 <_DrawVLine+0x88>
 8005c00:	e7e1      	b.n	8005bc6 <_DrawVLine+0x66>
 8005c02:	1b75      	subs	r5, r6, r5
 8005c04:	3501      	adds	r5, #1
 8005c06:	3d01      	subs	r5, #1
 8005c08:	f8a4 9000 	strh.w	r9, [r4]
 8005c0c:	4444      	add	r4, r8
 8005c0e:	d1fa      	bne.n	8005c06 <_DrawVLine+0xa6>
 8005c10:	e7d9      	b.n	8005bc6 <_DrawVLine+0x66>
 8005c12:	b003      	add	sp, #12
 8005c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c18:	24000028 	.word	0x24000028

08005c1c <_FillRect>:
 8005c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	4f2a      	ldr	r7, [pc, #168]	; (8005ccc <_FillRect+0xb0>)
 8005c22:	461d      	mov	r5, r3
 8005c24:	4614      	mov	r4, r2
 8005c26:	b087      	sub	sp, #28
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4689      	mov	r9, r1
 8005c2c:	4683      	mov	fp, r0
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	ebc9 0505 	rsb	r5, r9, r5
 8005c34:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	f105 0a01 	add.w	sl, r5, #1
 8005c3c:	9202      	str	r2, [sp, #8]
 8005c3e:	f7fd fb85 	bl	800334c <GUI_ALLOC_LockH>
 8005c42:	4621      	mov	r1, r4
 8005c44:	9004      	str	r0, [sp, #16]
 8005c46:	4648      	mov	r0, r9
 8005c48:	f7ff ff10 	bl	8005a6c <_XY2PTR>
 8005c4c:	9a04      	ldr	r2, [sp, #16]
 8005c4e:	4606      	mov	r6, r0
 8005c50:	68d3      	ldr	r3, [r2, #12]
 8005c52:	6950      	ldr	r0, [r2, #20]
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	b188      	cbz	r0, 8005c7c <_FillRect+0x60>
 8005c58:	f7fd fb78 	bl	800334c <GUI_ALLOC_LockH>
 8005c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c5e:	f10d 0818 	add.w	r8, sp, #24
 8005c62:	4622      	mov	r2, r4
 8005c64:	1b1b      	subs	r3, r3, r4
 8005c66:	4649      	mov	r1, r9
 8005c68:	f848 0d04 	str.w	r0, [r8, #-4]!
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4653      	mov	r3, sl
 8005c72:	f000 fbff 	bl	8006474 <GUI_USAGE_AddRect>
 8005c76:	4640      	mov	r0, r8
 8005c78:	f7fd fb76 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005c7c:	006d      	lsls	r5, r5, #1
 8005c7e:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 8005c82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c84:	429c      	cmp	r4, r3
 8005c86:	dc1a      	bgt.n	8005cbe <_FillRect+0xa2>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	7c1b      	ldrb	r3, [r3, #16]
 8005c8c:	07db      	lsls	r3, r3, #31
 8005c8e:	d50d      	bpl.n	8005cac <_FillRect+0x90>
 8005c90:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	4798      	blx	r3
 8005c98:	1eb3      	subs	r3, r6, #2
 8005c9a:	b280      	uxth	r0, r0
 8005c9c:	1971      	adds	r1, r6, r5
 8005c9e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005ca2:	4042      	eors	r2, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	d1f9      	bne.n	8005c9e <_FillRect+0x82>
 8005caa:	e004      	b.n	8005cb6 <_FillRect+0x9a>
 8005cac:	4652      	mov	r2, sl
 8005cae:	4641      	mov	r1, r8
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f7fe f9a8 	bl	8004006 <GUI__memset16>
 8005cb6:	9b03      	ldr	r3, [sp, #12]
 8005cb8:	3401      	adds	r4, #1
 8005cba:	441e      	add	r6, r3
 8005cbc:	e7e1      	b.n	8005c82 <_FillRect+0x66>
 8005cbe:	a804      	add	r0, sp, #16
 8005cc0:	f7fd fb52 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005cc4:	b007      	add	sp, #28
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	bf00      	nop
 8005ccc:	24000028 	.word	0x24000028

08005cd0 <_DrawHLine>:
 8005cd0:	b507      	push	{r0, r1, r2, lr}
 8005cd2:	9200      	str	r2, [sp, #0]
 8005cd4:	f7ff ffa2 	bl	8005c1c <_FillRect>
 8005cd8:	b003      	add	sp, #12
 8005cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005ce0 <_DrawBitmap>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	4d99      	ldr	r5, [pc, #612]	; (8005f4c <_DrawBitmap+0x26c>)
 8005ce6:	b091      	sub	sp, #68	; 0x44
 8005ce8:	460e      	mov	r6, r1
 8005cea:	9302      	str	r3, [sp, #8]
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	900a      	str	r0, [sp, #40]	; 0x28
 8005cf0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005cf2:	9205      	str	r2, [sp, #20]
 8005cf4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005cf6:	f7fd fb29 	bl	800334c <GUI_ALLOC_LockH>
 8005cfa:	900e      	str	r0, [sp, #56]	; 0x38
 8005cfc:	6940      	ldr	r0, [r0, #20]
 8005cfe:	b108      	cbz	r0, 8005d04 <_DrawBitmap+0x24>
 8005d00:	f7fd fb24 	bl	800334c <GUI_ALLOC_LockH>
 8005d04:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d06:	a810      	add	r0, sp, #64	; 0x40
 8005d08:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	9306      	str	r3, [sp, #24]
 8005d10:	f7fd fb2a 	bl	8003368 <GUI_ALLOC_UnlockH>
 8005d14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d18:	eb06 0b03 	add.w	fp, r6, r3
 8005d1c:	b150      	cbz	r0, 8005d34 <_DrawBitmap+0x54>
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	7c1b      	ldrb	r3, [r3, #16]
 8005d22:	0799      	lsls	r1, r3, #30
 8005d24:	d106      	bne.n	8005d34 <_DrawBitmap+0x54>
 8005d26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d28:	4659      	mov	r1, fp
 8005d2a:	9a05      	ldr	r2, [sp, #20]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	9b02      	ldr	r3, [sp, #8]
 8005d30:	f000 fba0 	bl	8006474 <GUI_USAGE_AddRect>
 8005d34:	9905      	ldr	r1, [sp, #20]
 8005d36:	4658      	mov	r0, fp
 8005d38:	f7ff fe98 	bl	8005a6c <_XY2PTR>
 8005d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d3e:	4605      	mov	r5, r0
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d134      	bne.n	8005dae <_DrawBitmap+0xce>
 8005d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d46:	b133      	cbz	r3, 8005d56 <_DrawBitmap+0x76>
 8005d48:	9b02      	ldr	r3, [sp, #8]
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8005f54 <_DrawBitmap+0x274>
 8005d50:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005d54:	e012      	b.n	8005d7c <_DrawBitmap+0x9c>
 8005d56:	4b7e      	ldr	r3, [pc, #504]	; (8005f50 <_DrawBitmap+0x270>)
 8005d58:	681e      	ldr	r6, [r3, #0]
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	d0f4      	beq.n	8005d48 <_DrawBitmap+0x68>
 8005d5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005d60:	4621      	mov	r1, r4
 8005d62:	9a02      	ldr	r2, [sp, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	9b06      	ldr	r3, [sp, #24]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d6c:	47b0      	blx	r6
 8005d6e:	e35b      	b.n	8006428 <_DrawBitmap+0x748>
 8005d70:	b944      	cbnz	r4, 8005d84 <_DrawBitmap+0xa4>
 8005d72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005d74:	3601      	adds	r6, #1
 8005d76:	441c      	add	r4, r3
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	441d      	add	r5, r3
 8005d7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d7e:	429e      	cmp	r6, r3
 8005d80:	dbf6      	blt.n	8005d70 <_DrawBitmap+0x90>
 8005d82:	e34c      	b.n	800641e <_DrawBitmap+0x73e>
 8005d84:	2d00      	cmp	r5, #0
 8005d86:	d0f4      	beq.n	8005d72 <_DrawBitmap+0x92>
 8005d88:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f8d9 3000 	ldr.w	r3, [r9]
 8005d94:	4798      	blx	r3
 8005d96:	2f00      	cmp	r7, #0
 8005d98:	d0eb      	beq.n	8005d72 <_DrawBitmap+0x92>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	9a05      	ldr	r2, [sp, #20]
 8005da0:	4638      	mov	r0, r7
 8005da2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005da6:	4432      	add	r2, r6
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	47d0      	blx	sl
 8005dac:	e7e1      	b.n	8005d72 <_DrawBitmap+0x92>
 8005dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005db0:	2b17      	cmp	r3, #23
 8005db2:	dd44      	ble.n	8005e3e <_DrawBitmap+0x15e>
 8005db4:	f06f 0303 	mvn.w	r3, #3
 8005db8:	f04f 0800 	mov.w	r8, #0
 8005dbc:	fb03 f30b 	mul.w	r3, r3, fp
 8005dc0:	9307      	str	r3, [sp, #28]
 8005dc2:	f06f 0301 	mvn.w	r3, #1
 8005dc6:	fb03 f30b 	mul.w	r3, r3, fp
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	9b02      	ldr	r3, [sp, #8]
 8005dce:	445b      	add	r3, fp
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005dd4:	4598      	cmp	r8, r3
 8005dd6:	f280 8322 	bge.w	800641e <_DrawBitmap+0x73e>
 8005dda:	9b05      	ldr	r3, [sp, #20]
 8005ddc:	eb03 0908 	add.w	r9, r3, r8
 8005de0:	b934      	cbnz	r4, 8005df0 <_DrawBitmap+0x110>
 8005de2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	441c      	add	r4, r3
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	441d      	add	r5, r3
 8005dee:	e7f0      	b.n	8005dd2 <_DrawBitmap+0xf2>
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	d0f6      	beq.n	8005de2 <_DrawBitmap+0x102>
 8005df4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005df6:	b137      	cbz	r7, 8005e06 <_DrawBitmap+0x126>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	464a      	mov	r2, r9
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	4638      	mov	r0, r7
 8005e00:	685e      	ldr	r6, [r3, #4]
 8005e02:	9b02      	ldr	r3, [sp, #8]
 8005e04:	47b0      	blx	r6
 8005e06:	9b07      	ldr	r3, [sp, #28]
 8005e08:	465e      	mov	r6, fp
 8005e0a:	eb04 0a03 	add.w	sl, r4, r3
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	18eb      	adds	r3, r5, r3
 8005e12:	9303      	str	r3, [sp, #12]
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4798      	blx	r3
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8005e26:	b12f      	cbz	r7, 8005e34 <_DrawBitmap+0x154>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	464a      	mov	r2, r9
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4638      	mov	r0, r7
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4798      	blx	r3
 8005e34:	3601      	adds	r6, #1
 8005e36:	9b08      	ldr	r3, [sp, #32]
 8005e38:	429e      	cmp	r6, r3
 8005e3a:	d1eb      	bne.n	8005e14 <_DrawBitmap+0x134>
 8005e3c:	e7d1      	b.n	8005de2 <_DrawBitmap+0x102>
 8005e3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	f040 8089 	bne.w	8005f58 <_DrawBitmap+0x278>
 8005e46:	9b02      	ldr	r3, [sp, #8]
 8005e48:	3c01      	subs	r4, #1
 8005e4a:	9e05      	ldr	r6, [sp, #20]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005f4c <_DrawBitmap+0x26c>
 8005e52:	9307      	str	r3, [sp, #28]
 8005e54:	f06f 0301 	mvn.w	r3, #1
 8005e58:	fb03 f30b 	mul.w	r3, r3, fp
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	9b02      	ldr	r3, [sp, #8]
 8005e60:	445b      	add	r3, fp
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	1c61      	adds	r1, r4, #1
 8005e68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005e6a:	1af3      	subs	r3, r6, r3
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	f340 82d6 	ble.w	800641e <_DrawBitmap+0x73e>
 8005e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d036      	beq.n	8005ee6 <_DrawBitmap+0x206>
 8005e78:	f8d9 3000 	ldr.w	r3, [r9]
 8005e7c:	7c1b      	ldrb	r3, [r3, #16]
 8005e7e:	f013 0303 	ands.w	r3, r3, #3
 8005e82:	d009      	beq.n	8005e98 <_DrawBitmap+0x1b8>
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d15a      	bne.n	8005f3e <_DrawBitmap+0x25e>
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	46a2      	mov	sl, r4
 8005e8c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8005e90:	465f      	mov	r7, fp
 8005e92:	18eb      	adds	r3, r5, r3
 8005e94:	9308      	str	r3, [sp, #32]
 8005e96:	e021      	b.n	8005edc <_DrawBitmap+0x1fc>
 8005e98:	9b07      	ldr	r3, [sp, #28]
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	18e9      	adds	r1, r5, r3
 8005e9e:	462b      	mov	r3, r5
 8005ea0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005ea4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8005ea6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005eaa:	f823 0b02 	strh.w	r0, [r3], #2
 8005eae:	428b      	cmp	r3, r1
 8005eb0:	d1f6      	bne.n	8005ea0 <_DrawBitmap+0x1c0>
 8005eb2:	e044      	b.n	8005f3e <_DrawBitmap+0x25e>
 8005eb4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eba:	9a08      	ldr	r2, [sp, #32]
 8005ebc:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8005ec0:	f1b8 0f00 	cmp.w	r8, #0
 8005ec4:	d006      	beq.n	8005ed4 <_DrawBitmap+0x1f4>
 8005ec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005eca:	4632      	mov	r2, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	4640      	mov	r0, r8
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4798      	blx	r3
 8005ed4:	3701      	adds	r7, #1
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	42bb      	cmp	r3, r7
 8005eda:	d030      	beq.n	8005f3e <_DrawBitmap+0x25e>
 8005edc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f7      	beq.n	8005ed4 <_DrawBitmap+0x1f4>
 8005ee4:	e7e6      	b.n	8005eb4 <_DrawBitmap+0x1d4>
 8005ee6:	f8d9 3000 	ldr.w	r3, [r9]
 8005eea:	7c1b      	ldrb	r3, [r3, #16]
 8005eec:	f013 0303 	ands.w	r3, r3, #3
 8005ef0:	d009      	beq.n	8005f06 <_DrawBitmap+0x226>
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d123      	bne.n	8005f3e <_DrawBitmap+0x25e>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	46a2      	mov	sl, r4
 8005efa:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8005efe:	465f      	mov	r7, fp
 8005f00:	18eb      	adds	r3, r5, r3
 8005f02:	9308      	str	r3, [sp, #32]
 8005f04:	e016      	b.n	8005f34 <_DrawBitmap+0x254>
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <_DrawBitmap+0x274>)
 8005f08:	4628      	mov	r0, r5
 8005f0a:	9a02      	ldr	r2, [sp, #8]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4798      	blx	r3
 8005f10:	e015      	b.n	8005f3e <_DrawBitmap+0x25e>
 8005f12:	9a08      	ldr	r2, [sp, #32]
 8005f14:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8005f18:	f1b8 0f00 	cmp.w	r8, #0
 8005f1c:	d006      	beq.n	8005f2c <_DrawBitmap+0x24c>
 8005f1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f22:	4632      	mov	r2, r6
 8005f24:	4639      	mov	r1, r7
 8005f26:	4640      	mov	r0, r8
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4798      	blx	r3
 8005f2c:	3701      	adds	r7, #1
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	429f      	cmp	r7, r3
 8005f32:	d004      	beq.n	8005f3e <_DrawBitmap+0x25e>
 8005f34:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f7      	beq.n	8005f2c <_DrawBitmap+0x24c>
 8005f3c:	e7e9      	b.n	8005f12 <_DrawBitmap+0x232>
 8005f3e:	9b06      	ldr	r3, [sp, #24]
 8005f40:	3601      	adds	r6, #1
 8005f42:	441d      	add	r5, r3
 8005f44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005f46:	441c      	add	r4, r3
 8005f48:	e78c      	b.n	8005e64 <_DrawBitmap+0x184>
 8005f4a:	bf00      	nop
 8005f4c:	24000028 	.word	0x24000028
 8005f50:	2402d40c 	.word	0x2402d40c
 8005f54:	2400002c 	.word	0x2400002c
 8005f58:	4baf      	ldr	r3, [pc, #700]	; (8006218 <_DrawBitmap+0x538>)
 8005f5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	bf08      	it	eq
 8005f60:	461a      	moveq	r2, r3
 8005f62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f70:	1c63      	adds	r3, r4, #1
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	1c83      	adds	r3, r0, #2
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	9b05      	ldr	r3, [sp, #20]
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	9a05      	ldr	r2, [sp, #20]
 8005f80:	1e9c      	subs	r4, r3, #2
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	f103 3aff 	add.w	sl, r3, #4294967295
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	f340 8245 	ble.w	800641e <_DrawBitmap+0x73e>
 8005f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	f000 80c7 	beq.w	800612a <_DrawBitmap+0x44a>
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	f000 8167 	beq.w	8006270 <_DrawBitmap+0x590>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f040 822f 	bne.w	8006406 <_DrawBitmap+0x726>
 8005fa8:	4b9c      	ldr	r3, [pc, #624]	; (800621c <_DrawBitmap+0x53c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005fae:	f7fd f9cd 	bl	800334c <GUI_ALLOC_LockH>
 8005fb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fb4:	4a9a      	ldr	r2, [pc, #616]	; (8006220 <_DrawBitmap+0x540>)
 8005fb6:	f1c3 0508 	rsb	r5, r3, #8
 8005fba:	9b03      	ldr	r3, [sp, #12]
 8005fbc:	900e      	str	r0, [sp, #56]	; 0x38
 8005fbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005fc2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8005fc6:	5cd6      	ldrb	r6, [r2, r3]
 8005fc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fca:	9f02      	ldr	r7, [sp, #8]
 8005fcc:	411e      	asrs	r6, r3
 8005fce:	4b93      	ldr	r3, [pc, #588]	; (800621c <_DrawBitmap+0x53c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	7c1b      	ldrb	r3, [r3, #16]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d01f      	beq.n	800601c <_DrawBitmap+0x33c>
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d058      	beq.n	8006092 <_DrawBitmap+0x3b2>
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d056      	beq.n	8006092 <_DrawBitmap+0x3b2>
 8005fe4:	42bd      	cmp	r5, r7
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	bf28      	it	cs
 8005fea:	463d      	movcs	r5, r7
 8005fec:	1b7f      	subs	r7, r7, r5
 8005fee:	462b      	mov	r3, r5
 8005ff0:	f006 0101 	and.w	r1, r6, #1
 8005ff4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005ffc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8006000:	f822 1b02 	strh.w	r1, [r2], #2
 8006004:	d1f4      	bne.n	8005ff0 <_DrawBitmap+0x310>
 8006006:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800600a:	2f00      	cmp	r7, #0
 800600c:	f000 8089 	beq.w	8006122 <_DrawBitmap+0x442>
 8006010:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8006014:	2508      	movs	r5, #8
 8006016:	4a82      	ldr	r2, [pc, #520]	; (8006220 <_DrawBitmap+0x540>)
 8006018:	5cd6      	ldrb	r6, [r2, r3]
 800601a:	e7e3      	b.n	8005fe4 <_DrawBitmap+0x304>
 800601c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800601e:	46d8      	mov	r8, fp
 8006020:	889b      	ldrh	r3, [r3, #4]
 8006022:	9308      	str	r3, [sp, #32]
 8006024:	42bd      	cmp	r5, r7
 8006026:	bf28      	it	cs
 8006028:	463d      	movcs	r5, r7
 800602a:	1b7f      	subs	r7, r7, r5
 800602c:	f1b9 0f00 	cmp.w	r9, #0
 8006030:	d023      	beq.n	800607a <_DrawBitmap+0x39a>
 8006032:	b91e      	cbnz	r6, 800603c <_DrawBitmap+0x35c>
 8006034:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006038:	44a8      	add	r8, r5
 800603a:	e022      	b.n	8006082 <_DrawBitmap+0x3a2>
 800603c:	07f2      	lsls	r2, r6, #31
 800603e:	d509      	bpl.n	8006054 <_DrawBitmap+0x374>
 8006040:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006044:	4641      	mov	r1, r8
 8006046:	9a04      	ldr	r2, [sp, #16]
 8006048:	4648      	mov	r0, r9
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4798      	blx	r3
 800604e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006052:	8023      	strh	r3, [r4, #0]
 8006054:	3d01      	subs	r5, #1
 8006056:	f108 0801 	add.w	r8, r8, #1
 800605a:	f104 0402 	add.w	r4, r4, #2
 800605e:	d010      	beq.n	8006082 <_DrawBitmap+0x3a2>
 8006060:	0876      	lsrs	r6, r6, #1
 8006062:	e7e6      	b.n	8006032 <_DrawBitmap+0x352>
 8006064:	07f3      	lsls	r3, r6, #31
 8006066:	f104 0402 	add.w	r4, r4, #2
 800606a:	bf44      	itt	mi
 800606c:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 8006070:	f824 3c02 	strhmi.w	r3, [r4, #-2]
 8006074:	3d01      	subs	r5, #1
 8006076:	d004      	beq.n	8006082 <_DrawBitmap+0x3a2>
 8006078:	0876      	lsrs	r6, r6, #1
 800607a:	2e00      	cmp	r6, #0
 800607c:	d1f2      	bne.n	8006064 <_DrawBitmap+0x384>
 800607e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006082:	2f00      	cmp	r7, #0
 8006084:	d04d      	beq.n	8006122 <_DrawBitmap+0x442>
 8006086:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800608a:	2508      	movs	r5, #8
 800608c:	4a64      	ldr	r2, [pc, #400]	; (8006220 <_DrawBitmap+0x540>)
 800608e:	5cd6      	ldrb	r6, [r2, r3]
 8006090:	e7c8      	b.n	8006024 <_DrawBitmap+0x344>
 8006092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006094:	46d8      	mov	r8, fp
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	4798      	blx	r3
 800609c:	b283      	uxth	r3, r0
 800609e:	9309      	str	r3, [sp, #36]	; 0x24
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	9308      	str	r3, [sp, #32]
 80060a4:	42bd      	cmp	r5, r7
 80060a6:	bf28      	it	cs
 80060a8:	463d      	movcs	r5, r7
 80060aa:	1b7f      	subs	r7, r7, r5
 80060ac:	f1b9 0f00 	cmp.w	r9, #0
 80060b0:	d01b      	beq.n	80060ea <_DrawBitmap+0x40a>
 80060b2:	eb08 0305 	add.w	r3, r8, r5
 80060b6:	46a2      	mov	sl, r4
 80060b8:	930d      	str	r3, [sp, #52]	; 0x34
 80060ba:	07f0      	lsls	r0, r6, #31
 80060bc:	d50c      	bpl.n	80060d8 <_DrawBitmap+0x3f8>
 80060be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80060c2:	4641      	mov	r1, r8
 80060c4:	9a04      	ldr	r2, [sp, #16]
 80060c6:	4648      	mov	r0, r9
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4798      	blx	r3
 80060cc:	f8ba 3000 	ldrh.w	r3, [sl]
 80060d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d2:	4053      	eors	r3, r2
 80060d4:	f8aa 3000 	strh.w	r3, [sl]
 80060d8:	f108 0801 	add.w	r8, r8, #1
 80060dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060de:	f10a 0a02 	add.w	sl, sl, #2
 80060e2:	0876      	lsrs	r6, r6, #1
 80060e4:	4598      	cmp	r8, r3
 80060e6:	d1e8      	bne.n	80060ba <_DrawBitmap+0x3da>
 80060e8:	e00f      	b.n	800610a <_DrawBitmap+0x42a>
 80060ea:	462a      	mov	r2, r5
 80060ec:	4623      	mov	r3, r4
 80060ee:	07f1      	lsls	r1, r6, #31
 80060f0:	f103 0302 	add.w	r3, r3, #2
 80060f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060f8:	bf41      	itttt	mi
 80060fa:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
 80060fe:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 8006100:	4041      	eormi	r1, r0
 8006102:	f823 1c02 	strhmi.w	r1, [r3, #-2]
 8006106:	3a01      	subs	r2, #1
 8006108:	d1f1      	bne.n	80060ee <_DrawBitmap+0x40e>
 800610a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800610e:	b147      	cbz	r7, 8006122 <_DrawBitmap+0x442>
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	2508      	movs	r5, #8
 8006114:	4a42      	ldr	r2, [pc, #264]	; (8006220 <_DrawBitmap+0x540>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	5cd6      	ldrb	r6, [r2, r3]
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	3301      	adds	r3, #1
 800611e:	9308      	str	r3, [sp, #32]
 8006120:	e7c0      	b.n	80060a4 <_DrawBitmap+0x3c4>
 8006122:	a80e      	add	r0, sp, #56	; 0x38
 8006124:	f7fd f920 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006128:	e16d      	b.n	8006406 <_DrawBitmap+0x726>
 800612a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800612c:	f1c3 0504 	rsb	r5, r3, #4
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8006136:	b2ed      	uxtb	r5, r5
 8006138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613a:	409e      	lsls	r6, r3
 800613c:	4b37      	ldr	r3, [pc, #220]	; (800621c <_DrawBitmap+0x53c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	b2f6      	uxtb	r6, r6
 8006142:	7c1b      	ldrb	r3, [r3, #16]
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d009      	beq.n	8006160 <_DrawBitmap+0x480>
 800614c:	d30a      	bcc.n	8006164 <_DrawBitmap+0x484>
 800614e:	2b02      	cmp	r3, #2
 8006150:	f040 8159 	bne.w	8006406 <_DrawBitmap+0x726>
 8006154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006156:	465f      	mov	r7, fp
 8006158:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800615c:	9308      	str	r3, [sp, #32]
 800615e:	e036      	b.n	80061ce <_DrawBitmap+0x4ee>
 8006160:	9b02      	ldr	r3, [sp, #8]
 8006162:	e07e      	b.n	8006262 <_DrawBitmap+0x582>
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	429d      	cmp	r5, r3
 8006168:	4621      	mov	r1, r4
 800616a:	bfc8      	it	gt
 800616c:	b2dd      	uxtbgt	r5, r3
 800616e:	1b5b      	subs	r3, r3, r5
 8006170:	462a      	mov	r2, r5
 8006172:	09b0      	lsrs	r0, r6, #6
 8006174:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8006176:	3a01      	subs	r2, #1
 8006178:	00b6      	lsls	r6, r6, #2
 800617a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800617e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8006182:	b2f6      	uxtb	r6, r6
 8006184:	f821 0b02 	strh.w	r0, [r1], #2
 8006188:	d1f3      	bne.n	8006172 <_DrawBitmap+0x492>
 800618a:	3d01      	subs	r5, #1
 800618c:	b2ed      	uxtb	r5, r5
 800618e:	3501      	adds	r5, #1
 8006190:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8136 	beq.w	8006406 <_DrawBitmap+0x726>
 800619a:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800619e:	2504      	movs	r5, #4
 80061a0:	e7e1      	b.n	8006166 <_DrawBitmap+0x486>
 80061a2:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80061a6:	d125      	bne.n	80061f4 <_DrawBitmap+0x514>
 80061a8:	f109 0901 	add.w	r9, r9, #1
 80061ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ae:	00b6      	lsls	r6, r6, #2
 80061b0:	4599      	cmp	r9, r3
 80061b2:	b2f6      	uxtb	r6, r6
 80061b4:	d1f5      	bne.n	80061a2 <_DrawBitmap+0x4c2>
 80061b6:	1c6b      	adds	r3, r5, #1
 80061b8:	3701      	adds	r7, #1
 80061ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80061be:	442f      	add	r7, r5
 80061c0:	f1b8 0f00 	cmp.w	r8, #0
 80061c4:	f000 811f 	beq.w	8006406 <_DrawBitmap+0x726>
 80061c8:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 80061cc:	2504      	movs	r5, #4
 80061ce:	4545      	cmp	r5, r8
 80061d0:	f107 0301 	add.w	r3, r7, #1
 80061d4:	46b9      	mov	r9, r7
 80061d6:	bfc8      	it	gt
 80061d8:	fa5f f588 	uxtbgt.w	r5, r8
 80061dc:	ebc5 0808 	rsb	r8, r5, r8
 80061e0:	3d01      	subs	r5, #1
 80061e2:	b2ed      	uxtb	r5, r5
 80061e4:	442b      	add	r3, r5
 80061e6:	930d      	str	r3, [sp, #52]	; 0x34
 80061e8:	f06f 0301 	mvn.w	r3, #1
 80061ec:	fb03 4307 	mla	r3, r3, r7, r4
 80061f0:	9309      	str	r3, [sp, #36]	; 0x24
 80061f2:	e7d6      	b.n	80061a2 <_DrawBitmap+0x4c2>
 80061f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80061f6:	09b3      	lsrs	r3, r6, #6
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061fe:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 8006202:	9b08      	ldr	r3, [sp, #32]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0cf      	beq.n	80061a8 <_DrawBitmap+0x4c8>
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4649      	mov	r1, r9
 800620c:	9a04      	ldr	r2, [sp, #16]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	9808      	ldr	r0, [sp, #32]
 8006212:	4798      	blx	r3
 8006214:	e7c8      	b.n	80061a8 <_DrawBitmap+0x4c8>
 8006216:	bf00      	nop
 8006218:	08008b38 	.word	0x08008b38
 800621c:	24000028 	.word	0x24000028
 8006220:	08008b90 	.word	0x08008b90
 8006224:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8006228:	f102 32ff 	add.w	r2, r2, #4294967295
 800622c:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8006230:	f101 0102 	add.w	r1, r1, #2
 8006234:	bf18      	it	ne
 8006236:	f831 0c02 	ldrhne.w	r0, [r1, #-2]
 800623a:	b2f6      	uxtb	r6, r6
 800623c:	bf1c      	itt	ne
 800623e:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8006242:	f821 0c02 	strhne.w	r0, [r1, #-2]
 8006246:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800624a:	d1eb      	bne.n	8006224 <_DrawBitmap+0x544>
 800624c:	3d01      	subs	r5, #1
 800624e:	b2ed      	uxtb	r5, r5
 8006250:	3501      	adds	r5, #1
 8006252:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80d5 	beq.w	8006406 <_DrawBitmap+0x726>
 800625c:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8006260:	2504      	movs	r5, #4
 8006262:	429d      	cmp	r5, r3
 8006264:	4621      	mov	r1, r4
 8006266:	bfc8      	it	gt
 8006268:	b2dd      	uxtbgt	r5, r3
 800626a:	1b5b      	subs	r3, r3, r5
 800626c:	462a      	mov	r2, r5
 800626e:	e7d9      	b.n	8006224 <_DrawBitmap+0x544>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006274:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006278:	4093      	lsls	r3, r2
 800627a:	4a6d      	ldr	r2, [pc, #436]	; (8006430 <_DrawBitmap+0x750>)
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	b2dd      	uxtb	r5, r3
 8006280:	7c12      	ldrb	r2, [r2, #16]
 8006282:	f002 0203 	and.w	r2, r2, #3
 8006286:	2a01      	cmp	r2, #1
 8006288:	d003      	beq.n	8006292 <_DrawBitmap+0x5b2>
 800628a:	d308      	bcc.n	800629e <_DrawBitmap+0x5be>
 800628c:	2a02      	cmp	r2, #2
 800628e:	d03a      	beq.n	8006306 <_DrawBitmap+0x626>
 8006290:	e0b9      	b.n	8006406 <_DrawBitmap+0x726>
 8006292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006294:	9a02      	ldr	r2, [sp, #8]
 8006296:	f1c3 0302 	rsb	r3, r3, #2
 800629a:	b2db      	uxtb	r3, r3
 800629c:	e0ac      	b.n	80063f8 <_DrawBitmap+0x718>
 800629e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062a0:	b15b      	cbz	r3, 80062ba <_DrawBitmap+0x5da>
 80062a2:	092d      	lsrs	r5, r5, #4
 80062a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062a6:	9a03      	ldr	r2, [sp, #12]
 80062a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80062ac:	4692      	mov	sl, r2
 80062ae:	8023      	strh	r3, [r4, #0]
 80062b0:	9b02      	ldr	r3, [sp, #8]
 80062b2:	9c07      	ldr	r4, [sp, #28]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	7815      	ldrb	r5, [r2, #0]
 80062b8:	e000      	b.n	80062bc <_DrawBitmap+0x5dc>
 80062ba:	9b02      	ldr	r3, [sp, #8]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	dd19      	ble.n	80062f4 <_DrawBitmap+0x614>
 80062c0:	1059      	asrs	r1, r3, #1
 80062c2:	1d22      	adds	r2, r4, #4
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	eb0a 0001 	add.w	r0, sl, r1
 80062cc:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80062ce:	092e      	lsrs	r6, r5, #4
 80062d0:	f005 050f 	and.w	r5, r5, #15
 80062d4:	3204      	adds	r2, #4
 80062d6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80062da:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80062de:	f822 6c08 	strh.w	r6, [r2, #-8]
 80062e2:	463e      	mov	r6, r7
 80062e4:	f822 5c06 	strh.w	r5, [r2, #-6]
 80062e8:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80062ec:	4582      	cmp	sl, r0
 80062ee:	d1ed      	bne.n	80062cc <_DrawBitmap+0x5ec>
 80062f0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8086 	beq.w	8006406 <_DrawBitmap+0x726>
 80062fa:	092d      	lsrs	r5, r5, #4
 80062fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062fe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006302:	8023      	strh	r3, [r4, #0]
 8006304:	e07f      	b.n	8006406 <_DrawBitmap+0x726>
 8006306:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006308:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800630a:	b1c2      	cbz	r2, 800633e <_DrawBitmap+0x65e>
 800630c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006310:	d00b      	beq.n	800632a <_DrawBitmap+0x64a>
 8006312:	092d      	lsrs	r5, r5, #4
 8006314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006316:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800631a:	8023      	strh	r3, [r4, #0]
 800631c:	b12e      	cbz	r6, 800632a <_DrawBitmap+0x64a>
 800631e:	68b3      	ldr	r3, [r6, #8]
 8006320:	4659      	mov	r1, fp
 8006322:	9a04      	ldr	r2, [sp, #16]
 8006324:	4630      	mov	r0, r6
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4798      	blx	r3
 800632a:	9b02      	ldr	r3, [sp, #8]
 800632c:	f10b 0701 	add.w	r7, fp, #1
 8006330:	9c07      	ldr	r4, [sp, #28]
 8006332:	f103 38ff 	add.w	r8, r3, #4294967295
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	781d      	ldrb	r5, [r3, #0]
 800633a:	469a      	mov	sl, r3
 800633c:	e00f      	b.n	800635e <_DrawBitmap+0x67e>
 800633e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006342:	465f      	mov	r7, fp
 8006344:	e00b      	b.n	800635e <_DrawBitmap+0x67e>
 8006346:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800634a:	d10c      	bne.n	8006366 <_DrawBitmap+0x686>
 800634c:	f015 050f 	ands.w	r5, r5, #15
 8006350:	d117      	bne.n	8006382 <_DrawBitmap+0x6a2>
 8006352:	3404      	adds	r4, #4
 8006354:	3702      	adds	r7, #2
 8006356:	f1a8 0802 	sub.w	r8, r8, #2
 800635a:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800635e:	f1b8 0f01 	cmp.w	r8, #1
 8006362:	dcf0      	bgt.n	8006346 <_DrawBitmap+0x666>
 8006364:	e01a      	b.n	800639c <_DrawBitmap+0x6bc>
 8006366:	092b      	lsrs	r3, r5, #4
 8006368:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800636a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636e:	8023      	strh	r3, [r4, #0]
 8006370:	2e00      	cmp	r6, #0
 8006372:	d0eb      	beq.n	800634c <_DrawBitmap+0x66c>
 8006374:	68b3      	ldr	r3, [r6, #8]
 8006376:	4639      	mov	r1, r7
 8006378:	9a04      	ldr	r2, [sp, #16]
 800637a:	4630      	mov	r0, r6
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4798      	blx	r3
 8006380:	e7e4      	b.n	800634c <_DrawBitmap+0x66c>
 8006382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006384:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006388:	8063      	strh	r3, [r4, #2]
 800638a:	2e00      	cmp	r6, #0
 800638c:	d0e1      	beq.n	8006352 <_DrawBitmap+0x672>
 800638e:	68b3      	ldr	r3, [r6, #8]
 8006390:	1c79      	adds	r1, r7, #1
 8006392:	9a04      	ldr	r2, [sp, #16]
 8006394:	4630      	mov	r0, r6
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4798      	blx	r3
 800639a:	e7da      	b.n	8006352 <_DrawBitmap+0x672>
 800639c:	f1b8 0f00 	cmp.w	r8, #0
 80063a0:	d031      	beq.n	8006406 <_DrawBitmap+0x726>
 80063a2:	092d      	lsrs	r5, r5, #4
 80063a4:	d02f      	beq.n	8006406 <_DrawBitmap+0x726>
 80063a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063ac:	8023      	strh	r3, [r4, #0]
 80063ae:	b356      	cbz	r6, 8006406 <_DrawBitmap+0x726>
 80063b0:	68b3      	ldr	r3, [r6, #8]
 80063b2:	4639      	mov	r1, r7
 80063b4:	9a04      	ldr	r2, [sp, #16]
 80063b6:	4630      	mov	r0, r6
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4798      	blx	r3
 80063bc:	e023      	b.n	8006406 <_DrawBitmap+0x726>
 80063be:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80063c2:	f101 31ff 	add.w	r1, r1, #4294967295
 80063c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80063ca:	f100 0002 	add.w	r0, r0, #2
 80063ce:	bf18      	it	ne
 80063d0:	f830 6c02 	ldrhne.w	r6, [r0, #-2]
 80063d4:	b2ed      	uxtb	r5, r5
 80063d6:	bf1c      	itt	ne
 80063d8:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 80063dc:	f820 6c02 	strhne.w	r6, [r0, #-2]
 80063e0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80063e4:	d1eb      	bne.n	80063be <_DrawBitmap+0x6de>
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	3301      	adds	r3, #1
 80063ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80063f0:	b14a      	cbz	r2, 8006406 <_DrawBitmap+0x726>
 80063f2:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80063f6:	2302      	movs	r3, #2
 80063f8:	4293      	cmp	r3, r2
 80063fa:	4620      	mov	r0, r4
 80063fc:	bfc8      	it	gt
 80063fe:	b2d3      	uxtbgt	r3, r2
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	4619      	mov	r1, r3
 8006404:	e7db      	b.n	80063be <_DrawBitmap+0x6de>
 8006406:	9b04      	ldr	r3, [sp, #16]
 8006408:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800640a:	3301      	adds	r3, #1
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	4413      	add	r3, r2
 8006412:	9a06      	ldr	r2, [sp, #24]
 8006414:	9303      	str	r3, [sp, #12]
 8006416:	9b07      	ldr	r3, [sp, #28]
 8006418:	4413      	add	r3, r2
 800641a:	9307      	str	r3, [sp, #28]
 800641c:	e5ae      	b.n	8005f7c <_DrawBitmap+0x29c>
 800641e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006420:	b113      	cbz	r3, 8006428 <_DrawBitmap+0x748>
 8006422:	a80f      	add	r0, sp, #60	; 0x3c
 8006424:	f7fc ffa0 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006428:	b011      	add	sp, #68	; 0x44
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	24000028 	.word	0x24000028

08006434 <_GetDevProp>:
 8006434:	2908      	cmp	r1, #8
 8006436:	d004      	beq.n	8006442 <_GetDevProp+0xe>
 8006438:	6800      	ldr	r0, [r0, #0]
 800643a:	b120      	cbz	r0, 8006446 <_GetDevProp+0x12>
 800643c:	68c3      	ldr	r3, [r0, #12]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	4718      	bx	r3
 8006442:	2010      	movs	r0, #16
 8006444:	4770      	bx	lr
 8006446:	f04f 30ff 	mov.w	r0, #4294967295
 800644a:	4770      	bx	lr

0800644c <GUI_USAGE_DecUseCnt>:
 800644c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	f7fc ff7c 	bl	800334c <GUI_ALLOC_LockH>
 8006454:	8984      	ldrh	r4, [r0, #12]
 8006456:	ab02      	add	r3, sp, #8
 8006458:	3c01      	subs	r4, #1
 800645a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800645e:	b224      	sxth	r4, r4
 8006460:	8184      	strh	r4, [r0, #12]
 8006462:	4618      	mov	r0, r3
 8006464:	f7fc ff80 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006468:	b914      	cbnz	r4, 8006470 <GUI_USAGE_DecUseCnt+0x24>
 800646a:	4628      	mov	r0, r5
 800646c:	f7fc ff9c 	bl	80033a8 <GUI_ALLOC_Free>
 8006470:	b003      	add	sp, #12
 8006472:	bd30      	pop	{r4, r5, pc}

08006474 <GUI_USAGE_AddRect>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	9c08      	ldr	r4, [sp, #32]
 800647a:	4605      	mov	r5, r0
 800647c:	4688      	mov	r8, r1
 800647e:	4699      	mov	r9, r3
 8006480:	4414      	add	r4, r2
 8006482:	68ab      	ldr	r3, [r5, #8]
 8006484:	1c56      	adds	r6, r2, #1
 8006486:	4641      	mov	r1, r8
 8006488:	4628      	mov	r0, r5
 800648a:	685f      	ldr	r7, [r3, #4]
 800648c:	464b      	mov	r3, r9
 800648e:	47b8      	blx	r7
 8006490:	42b4      	cmp	r4, r6
 8006492:	4632      	mov	r2, r6
 8006494:	d1f5      	bne.n	8006482 <GUI_USAGE_AddRect+0xe>
 8006496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800649a <_Convert16>:
 800649a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80064a2:	4681      	mov	r9, r0
 80064a4:	460d      	mov	r5, r1
 80064a6:	4616      	mov	r6, r2
 80064a8:	461f      	mov	r7, r3
 80064aa:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80064ae:	4614      	mov	r4, r2
 80064b0:	4688      	mov	r8, r1
 80064b2:	f839 0b02 	ldrh.w	r0, [r9], #2
 80064b6:	47d8      	blx	fp
 80064b8:	47d0      	blx	sl
 80064ba:	3c01      	subs	r4, #1
 80064bc:	f848 0b04 	str.w	r0, [r8], #4
 80064c0:	d1f7      	bne.n	80064b2 <_Convert16+0x18>
 80064c2:	2f1f      	cmp	r7, #31
 80064c4:	d806      	bhi.n	80064d4 <_Convert16+0x3a>
 80064c6:	463a      	mov	r2, r7
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	f001 bc06 	b.w	8007ce0 <GUI__CompactPixelIndices>
 80064d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064d8 <_Convert8>:
 80064d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80064e0:	4680      	mov	r8, r0
 80064e2:	460d      	mov	r5, r1
 80064e4:	4616      	mov	r6, r2
 80064e6:	461f      	mov	r7, r3
 80064e8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80064ec:	4689      	mov	r9, r1
 80064ee:	4604      	mov	r4, r0
 80064f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80064f4:	47d8      	blx	fp
 80064f6:	47d0      	blx	sl
 80064f8:	1b33      	subs	r3, r6, r4
 80064fa:	f849 0b04 	str.w	r0, [r9], #4
 80064fe:	eb18 0f03 	cmn.w	r8, r3
 8006502:	d1f5      	bne.n	80064f0 <_Convert8+0x18>
 8006504:	2f1f      	cmp	r7, #31
 8006506:	d806      	bhi.n	8006516 <_Convert8+0x3e>
 8006508:	463a      	mov	r2, r7
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006512:	f001 bbe5 	b.w	8007ce0 <GUI__CompactPixelIndices>
 8006516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800651c <GUI_MEMDEV__WriteToActiveOpaque>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	b09b      	sub	sp, #108	; 0x6c
 8006522:	4605      	mov	r5, r0
 8006524:	9108      	str	r1, [sp, #32]
 8006526:	9209      	str	r2, [sp, #36]	; 0x24
 8006528:	2800      	cmp	r0, #0
 800652a:	f000 8399 	beq.w	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800652e:	f7fc ff0d 	bl	800334c <GUI_ALLOC_LockH>
 8006532:	ab1a      	add	r3, sp, #104	; 0x68
 8006534:	6944      	ldr	r4, [r0, #20]
 8006536:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800653a:	4618      	mov	r0, r3
 800653c:	f7fc ff14 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006540:	4628      	mov	r0, r5
 8006542:	f001 fc9d 	bl	8007e80 <GUI_MEMDEV_GetBitsPerPixel>
 8006546:	2808      	cmp	r0, #8
 8006548:	4607      	mov	r7, r0
 800654a:	4ea5      	ldr	r6, [pc, #660]	; (80067e0 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 800654c:	dd02      	ble.n	8006554 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800654e:	2c00      	cmp	r4, #0
 8006550:	f000 81c9 	beq.w	80068e6 <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 8006554:	2301      	movs	r3, #1
 8006556:	2700      	movs	r7, #0
 8006558:	4628      	mov	r0, r5
 800655a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800655e:	9319      	str	r3, [sp, #100]	; 0x64
 8006560:	930d      	str	r3, [sp, #52]	; 0x34
 8006562:	9718      	str	r7, [sp, #96]	; 0x60
 8006564:	f7fc fef2 	bl	800334c <GUI_ALLOC_LockH>
 8006568:	6802      	ldr	r2, [r0, #0]
 800656a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800656e:	6912      	ldr	r2, [r2, #16]
 8006570:	930e      	str	r3, [sp, #56]	; 0x38
 8006572:	6853      	ldr	r3, [r2, #4]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	f849 0d14 	str.w	r0, [r9, #-20]!
 800657a:	6904      	ldr	r4, [r0, #16]
 800657c:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8006580:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8006584:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8006588:	7c50      	ldrb	r0, [r2, #17]
 800658a:	930c      	str	r3, [sp, #48]	; 0x30
 800658c:	f7fe f9be 	bl	800490c <GUI_GetBitsPerPixelEx>
 8006590:	6832      	ldr	r2, [r6, #0]
 8006592:	900b      	str	r0, [sp, #44]	; 0x2c
 8006594:	7c50      	ldrb	r0, [r2, #17]
 8006596:	f7fe f9d7 	bl	8004948 <GUI_GetpfIndex2ColorEx>
 800659a:	900a      	str	r0, [sp, #40]	; 0x28
 800659c:	4648      	mov	r0, r9
 800659e:	f7fc fee3 	bl	8003368 <GUI_ALLOC_UnlockH>
 80065a2:	2c08      	cmp	r4, #8
 80065a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a8:	d904      	bls.n	80065b4 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 80065aa:	2c10      	cmp	r4, #16
 80065ac:	bf8c      	ite	hi
 80065ae:	2304      	movhi	r3, #4
 80065b0:	2302      	movls	r3, #2
 80065b2:	e005      	b.n	80065c0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 80065b4:	2c01      	cmp	r4, #1
 80065b6:	d103      	bne.n	80065c0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 80065b8:	ab18      	add	r3, sp, #96	; 0x60
 80065ba:	940d      	str	r4, [sp, #52]	; 0x34
 80065bc:	930a      	str	r3, [sp, #40]	; 0x28
 80065be:	e001      	b.n	80065c4 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 80065c0:	930d      	str	r3, [sp, #52]	; 0x34
 80065c2:	970a      	str	r7, [sp, #40]	; 0x28
 80065c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065c6:	4293      	cmp	r3, r2
 80065c8:	f000 80df 	beq.w	800678a <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 80065cc:	6833      	ldr	r3, [r6, #0]
 80065ce:	7c58      	ldrb	r0, [r3, #17]
 80065d0:	f7fe f9c2 	bl	8004958 <GUI_GetpfColor2IndexEx>
 80065d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80065d6:	ea4f 008b 	mov.w	r0, fp, lsl #2
 80065da:	f7fd f845 	bl	8003668 <GUI_ALLOC_AllocNoInit>
 80065de:	9010      	str	r0, [sp, #64]	; 0x40
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f000 833d 	beq.w	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80065e6:	4628      	mov	r0, r5
 80065e8:	f001 fc82 	bl	8007ef0 <GUI_MEMDEV_GetDataPtr>
 80065ec:	4605      	mov	r5, r0
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	f000 80b9 	beq.w	8006768 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7fc fea8 	bl	800334c <GUI_ALLOC_LockH>
 80065fc:	eb05 030a 	add.w	r3, r5, sl
 8006600:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006604:	9311      	str	r3, [sp, #68]	; 0x44
 8006606:	2300      	movs	r3, #0
 8006608:	9016      	str	r0, [sp, #88]	; 0x58
 800660a:	9309      	str	r3, [sp, #36]	; 0x24
 800660c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800660e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006610:	ebca 0703 	rsb	r7, sl, r3
 8006614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006616:	4293      	cmp	r3, r2
 8006618:	f340 80a2 	ble.w	8006760 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 800661c:	2300      	movs	r3, #0
 800661e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006620:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8006624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006626:	9317      	str	r3, [sp, #92]	; 0x5c
 8006628:	6883      	ldr	r3, [r0, #8]
 800662a:	4641      	mov	r1, r8
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4798      	blx	r3
 8006630:	4583      	cmp	fp, r0
 8006632:	4605      	mov	r5, r0
 8006634:	d128      	bne.n	8006688 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8006636:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006638:	f7fc fe88 	bl	800334c <GUI_ALLOC_LockH>
 800663c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800663e:	2c08      	cmp	r4, #8
 8006640:	4601      	mov	r1, r0
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	465a      	mov	r2, fp
 8006646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006648:	9014      	str	r0, [sp, #80]	; 0x50
 800664a:	4638      	mov	r0, r7
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006650:	d902      	bls.n	8006658 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 8006652:	f7ff ff22 	bl	800649a <_Convert16>
 8006656:	e001      	b.n	800665c <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 8006658:	f7ff ff3e 	bl	80064d8 <_Convert8>
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	ad1a      	add	r5, sp, #104	; 0x68
 8006660:	9808      	ldr	r0, [sp, #32]
 8006662:	465a      	mov	r2, fp
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	4649      	mov	r1, r9
 8006668:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	2300      	movs	r3, #0
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006674:	9302      	str	r3, [sp, #8]
 8006676:	2301      	movs	r3, #1
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	f7fd fe7e 	bl	800437c <LCD_DrawBitmap>
 8006680:	4628      	mov	r0, r5
 8006682:	f7fc fe71 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006686:	e062      	b.n	800674e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8006688:	2c01      	cmp	r4, #1
 800668a:	d002      	beq.n	8006692 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800668c:	f04f 0801 	mov.w	r8, #1
 8006690:	e057      	b.n	8006742 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 8006692:	2d00      	cmp	r5, #0
 8006694:	d05b      	beq.n	800674e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8006696:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006698:	462a      	mov	r2, r5
 800669a:	9e08      	ldr	r6, [sp, #32]
 800669c:	4649      	mov	r1, r9
 800669e:	f000 0307 	and.w	r3, r0, #7
 80066a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80066a6:	9306      	str	r3, [sp, #24]
 80066a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	2308      	movs	r3, #8
 80066ae:	fb90 f3f3 	sdiv	r3, r0, r3
 80066b2:	443b      	add	r3, r7
 80066b4:	4430      	add	r0, r6
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	2301      	movs	r3, #1
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	f7fd fd70 	bl	80041a4 <LCD__DrawBitmap_1bpp>
 80066c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066c6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80066c8:	4641      	mov	r1, r8
 80066ca:	441d      	add	r5, r3
 80066cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ce:	6883      	ldr	r3, [r0, #8]
 80066d0:	9517      	str	r5, [sp, #92]	; 0x5c
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	4798      	blx	r3
 80066d6:	4605      	mov	r5, r0
 80066d8:	e7db      	b.n	8006692 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 80066da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80066dc:	f7fc fe36 	bl	800334c <GUI_ALLOC_LockH>
 80066e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066e2:	4601      	mov	r1, r0
 80066e4:	9014      	str	r0, [sp, #80]	; 0x50
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	2c08      	cmp	r4, #8
 80066ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ec:	462a      	mov	r2, r5
 80066ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066f0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	fb00 7006 	mla	r0, r0, r6, r7
 80066f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066fa:	d925      	bls.n	8006748 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 80066fc:	f7ff fecd 	bl	800649a <_Convert16>
 8006700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006702:	462a      	mov	r2, r5
 8006704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006706:	4649      	mov	r1, r9
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800670c:	9e08      	ldr	r6, [sp, #32]
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	2300      	movs	r3, #0
 8006712:	4430      	add	r0, r6
 8006714:	f8cd 8004 	str.w	r8, [sp, #4]
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	f8cd 8000 	str.w	r8, [sp]
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	2301      	movs	r3, #1
 8006724:	f7fd fe2a 	bl	800437c <LCD_DrawBitmap>
 8006728:	a814      	add	r0, sp, #80	; 0x50
 800672a:	f7fc fe1d 	bl	8003368 <GUI_ALLOC_UnlockH>
 800672e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006730:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006732:	a917      	add	r1, sp, #92	; 0x5c
 8006734:	441d      	add	r5, r3
 8006736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006738:	6883      	ldr	r3, [r0, #8]
 800673a:	9517      	str	r5, [sp, #92]	; 0x5c
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	4798      	blx	r3
 8006740:	4605      	mov	r5, r0
 8006742:	2d00      	cmp	r5, #0
 8006744:	d1c9      	bne.n	80066da <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 8006746:	e002      	b.n	800674e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8006748:	f7ff fec6 	bl	80064d8 <_Convert8>
 800674c:	e7d8      	b.n	8006700 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	f109 0901 	add.w	r9, r9, #1
 8006754:	3301      	adds	r3, #1
 8006756:	9309      	str	r3, [sp, #36]	; 0x24
 8006758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800675a:	4453      	add	r3, sl
 800675c:	9311      	str	r3, [sp, #68]	; 0x44
 800675e:	e755      	b.n	800660c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8006760:	a816      	add	r0, sp, #88	; 0x58
 8006762:	f7fc fe01 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006766:	e00e      	b.n	8006786 <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 8006768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676a:	465a      	mov	r2, fp
 800676c:	9004      	str	r0, [sp, #16]
 800676e:	9305      	str	r3, [sp, #20]
 8006770:	2301      	movs	r3, #1
 8006772:	f8cd a00c 	str.w	sl, [sp, #12]
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	9402      	str	r4, [sp, #8]
 800677c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800677e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006780:	9808      	ldr	r0, [sp, #32]
 8006782:	f7fd fdfb 	bl	800437c <LCD_DrawBitmap>
 8006786:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006788:	e268      	b.n	8006c5c <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 800678a:	4628      	mov	r0, r5
 800678c:	f001 fbb0 	bl	8007ef0 <GUI_MEMDEV_GetDataPtr>
 8006790:	4607      	mov	r7, r0
 8006792:	f1b8 0f00 	cmp.w	r8, #0
 8006796:	f000 809a 	beq.w	80068ce <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 800679a:	2500      	movs	r5, #0
 800679c:	4640      	mov	r0, r8
 800679e:	f7fc fdd5 	bl	800334c <GUI_ALLOC_LockH>
 80067a2:	9016      	str	r0, [sp, #88]	; 0x58
 80067a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a6:	42ab      	cmp	r3, r5
 80067a8:	f340 808d 	ble.w	80068c6 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 80067ac:	2300      	movs	r3, #0
 80067ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 80067b0:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 80067b4:	462a      	mov	r2, r5
 80067b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80067b8:	6883      	ldr	r3, [r0, #8]
 80067ba:	4641      	mov	r1, r8
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4798      	blx	r3
 80067c0:	4583      	cmp	fp, r0
 80067c2:	4606      	mov	r6, r0
 80067c4:	d126      	bne.n	8006814 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 80067c6:	462e      	mov	r6, r5
 80067c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80067ca:	f106 0901 	add.w	r9, r6, #1
 80067ce:	4641      	mov	r1, r8
 80067d0:	6883      	ldr	r3, [r0, #8]
 80067d2:	464a      	mov	r2, r9
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	4798      	blx	r3
 80067d8:	4583      	cmp	fp, r0
 80067da:	d103      	bne.n	80067e4 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 80067dc:	464e      	mov	r6, r9
 80067de:	e7f3      	b.n	80067c8 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 80067e0:	24000028 	.word	0x24000028
 80067e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e6:	ebc5 0806 	rsb	r8, r5, r6
 80067ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ec:	465a      	mov	r2, fp
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	2301      	movs	r3, #1
 80067f6:	9704      	str	r7, [sp, #16]
 80067f8:	4429      	add	r1, r5
 80067fa:	f8cd a00c 	str.w	sl, [sp, #12]
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	4635      	mov	r5, r6
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4643      	mov	r3, r8
 8006806:	9402      	str	r4, [sp, #8]
 8006808:	9808      	ldr	r0, [sp, #32]
 800680a:	fb0a 7708 	mla	r7, sl, r8, r7
 800680e:	f7fd fdb5 	bl	800437c <LCD_DrawBitmap>
 8006812:	e056      	b.n	80068c2 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8006814:	2c01      	cmp	r4, #1
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	d004      	beq.n	8006824 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 800681a:	442b      	add	r3, r5
 800681c:	f04f 0901 	mov.w	r9, #1
 8006820:	930b      	str	r3, [sp, #44]	; 0x2c
 8006822:	e02b      	b.n	800687c <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8006824:	eb03 0905 	add.w	r9, r3, r5
 8006828:	46a0      	mov	r8, r4
 800682a:	b32e      	cbz	r6, 8006878 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800682c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8006830:	4632      	mov	r2, r6
 8006832:	9808      	ldr	r0, [sp, #32]
 8006834:	4649      	mov	r1, r9
 8006836:	f00e 0307 	and.w	r3, lr, #7
 800683a:	f8cd a00c 	str.w	sl, [sp, #12]
 800683e:	4470      	add	r0, lr
 8006840:	f8cd 8008 	str.w	r8, [sp, #8]
 8006844:	9306      	str	r3, [sp, #24]
 8006846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006848:	f8cd 8004 	str.w	r8, [sp, #4]
 800684c:	9305      	str	r3, [sp, #20]
 800684e:	2308      	movs	r3, #8
 8006850:	f8cd 8000 	str.w	r8, [sp]
 8006854:	fb9e f3f3 	sdiv	r3, lr, r3
 8006858:	443b      	add	r3, r7
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	2301      	movs	r3, #1
 800685e:	f7fd fca1 	bl	80041a4 <LCD__DrawBitmap_1bpp>
 8006862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006864:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006866:	462a      	mov	r2, r5
 8006868:	441e      	add	r6, r3
 800686a:	a917      	add	r1, sp, #92	; 0x5c
 800686c:	6883      	ldr	r3, [r0, #8]
 800686e:	9617      	str	r6, [sp, #92]	; 0x5c
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4798      	blx	r3
 8006874:	4606      	mov	r6, r0
 8006876:	e7d8      	b.n	800682a <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 8006878:	4457      	add	r7, sl
 800687a:	e022      	b.n	80068c2 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800687c:	2e00      	cmp	r6, #0
 800687e:	d0fb      	beq.n	8006878 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 8006880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006882:	4632      	mov	r2, r6
 8006884:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8006888:	9305      	str	r3, [sp, #20]
 800688a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800688c:	9808      	ldr	r0, [sp, #32]
 800688e:	fb03 730e 	mla	r3, r3, lr, r7
 8006892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006894:	4470      	add	r0, lr
 8006896:	f8cd a00c 	str.w	sl, [sp, #12]
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	2301      	movs	r3, #1
 800689e:	9402      	str	r4, [sp, #8]
 80068a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80068a4:	f8cd 9000 	str.w	r9, [sp]
 80068a8:	f7fd fd68 	bl	800437c <LCD_DrawBitmap>
 80068ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 80068b0:	462a      	mov	r2, r5
 80068b2:	441e      	add	r6, r3
 80068b4:	4641      	mov	r1, r8
 80068b6:	6883      	ldr	r3, [r0, #8]
 80068b8:	9617      	str	r6, [sp, #92]	; 0x5c
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	4798      	blx	r3
 80068be:	4606      	mov	r6, r0
 80068c0:	e7dc      	b.n	800687c <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 80068c2:	3501      	adds	r5, #1
 80068c4:	e76e      	b.n	80067a4 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 80068c6:	a816      	add	r0, sp, #88	; 0x58
 80068c8:	f7fc fd4e 	bl	8003368 <GUI_ALLOC_UnlockH>
 80068cc:	e1c8      	b.n	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	465a      	mov	r2, fp
 80068d2:	9004      	str	r0, [sp, #16]
 80068d4:	9305      	str	r3, [sp, #20]
 80068d6:	2301      	movs	r3, #1
 80068d8:	f8cd a00c 	str.w	sl, [sp, #12]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	9402      	str	r4, [sp, #8]
 80068e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068e4:	e03a      	b.n	800695c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7fc fd30 	bl	800334c <GUI_ALLOC_LockH>
 80068ec:	4683      	mov	fp, r0
 80068ee:	a81a      	add	r0, sp, #104	; 0x68
 80068f0:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80068f4:	f840 bd10 	str.w	fp, [r0, #-16]!
 80068f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80068fa:	f8db 2000 	ldr.w	r2, [fp]
 80068fe:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006902:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8006906:	930c      	str	r3, [sp, #48]	; 0x30
 8006908:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 800690c:	f7fc fd2c 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006910:	6832      	ldr	r2, [r6, #0]
 8006912:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8006916:	7c50      	ldrb	r0, [r2, #17]
 8006918:	4aa1      	ldr	r2, [pc, #644]	; (8006ba0 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 800691a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800691e:	6916      	ldr	r6, [r2, #16]
 8006920:	6833      	ldr	r3, [r6, #0]
 8006922:	930a      	str	r3, [sp, #40]	; 0x28
 8006924:	f7fd fff2 	bl	800490c <GUI_GetBitsPerPixelEx>
 8006928:	2808      	cmp	r0, #8
 800692a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800692c:	d906      	bls.n	800693c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800692e:	2810      	cmp	r0, #16
 8006930:	bf8c      	ite	hi
 8006932:	f04f 0a04 	movhi.w	sl, #4
 8006936:	f04f 0a02 	movls.w	sl, #2
 800693a:	e001      	b.n	8006940 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 800693c:	f04f 0a01 	mov.w	sl, #1
 8006940:	45b0      	cmp	r8, r6
 8006942:	d110      	bne.n	8006966 <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 8006944:	2200      	movs	r2, #0
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	2301      	movs	r3, #1
 800694a:	f10b 0018 	add.w	r0, fp, #24
 800694e:	9205      	str	r2, [sp, #20]
 8006950:	4622      	mov	r2, r4
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006958:	9004      	str	r0, [sp, #16]
 800695a:	9702      	str	r7, [sp, #8]
 800695c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800695e:	9808      	ldr	r0, [sp, #32]
 8006960:	f7fd fd0c 	bl	800437c <LCD_DrawBitmap>
 8006964:	e17c      	b.n	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006966:	2f20      	cmp	r7, #32
 8006968:	f040 80a2 	bne.w	8006ab0 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 800696c:	fb0a f004 	mul.w	r0, sl, r4
 8006970:	f7fc fe7a 	bl	8003668 <GUI_ALLOC_AllocNoInit>
 8006974:	900d      	str	r0, [sp, #52]	; 0x34
 8006976:	2800      	cmp	r0, #0
 8006978:	f000 8172 	beq.w	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800697c:	f7fc fce6 	bl	800334c <GUI_ALLOC_LockH>
 8006980:	9018      	str	r0, [sp, #96]	; 0x60
 8006982:	4628      	mov	r0, r5
 8006984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006988:	f7fc fce0 	bl	800334c <GUI_ALLOC_LockH>
 800698c:	9016      	str	r0, [sp, #88]	; 0x58
 800698e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006992:	6933      	ldr	r3, [r6, #16]
 8006994:	f100 0518 	add.w	r5, r0, #24
 8006998:	920c      	str	r2, [sp, #48]	; 0x30
 800699a:	b373      	cbz	r3, 80069fa <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800699c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80069a0:	f04f 0901 	mov.w	r9, #1
 80069a4:	f1ba 0f02 	cmp.w	sl, #2
 80069a8:	d005      	beq.n	80069b6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80069aa:	f1ba 0f04 	cmp.w	sl, #4
 80069ae:	d002      	beq.n	80069b6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80069b0:	f1ba 0f01 	cmp.w	sl, #1
 80069b4:	d106      	bne.n	80069c4 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 80069b6:	4628      	mov	r0, r5
 80069b8:	445d      	add	r5, fp
 80069ba:	6937      	ldr	r7, [r6, #16]
 80069bc:	4653      	mov	r3, sl
 80069be:	4622      	mov	r2, r4
 80069c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069c2:	47b8      	blx	r7
 80069c4:	2300      	movs	r3, #0
 80069c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80069cc:	4641      	mov	r1, r8
 80069ce:	9305      	str	r3, [sp, #20]
 80069d0:	f108 0701 	add.w	r7, r8, #1
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069d8:	9204      	str	r2, [sp, #16]
 80069da:	4622      	mov	r2, r4
 80069dc:	9302      	str	r3, [sp, #8]
 80069de:	2301      	movs	r3, #1
 80069e0:	f8cd 9000 	str.w	r9, [sp]
 80069e4:	9808      	ldr	r0, [sp, #32]
 80069e6:	f7fd fcc9 	bl	800437c <LCD_DrawBitmap>
 80069ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ee:	4413      	add	r3, r2
 80069f0:	429f      	cmp	r7, r3
 80069f2:	f000 812c 	beq.w	8006c4e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 80069f6:	46b8      	mov	r8, r7
 80069f8:	e7d4      	b.n	80069a4 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 80069fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069fc:	461e      	mov	r6, r3
 80069fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a00:	f04f 0901 	mov.w	r9, #1
 8006a04:	443b      	add	r3, r7
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	f1ba 0f02 	cmp.w	sl, #2
 8006a0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a10:	d016      	beq.n	8006a40 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 8006a12:	f1ba 0f04 	cmp.w	sl, #4
 8006a16:	d024      	beq.n	8006a62 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 8006a18:	f1ba 0f01 	cmp.w	sl, #1
 8006a1c:	d130      	bne.n	8006a80 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 8006a1e:	4643      	mov	r3, r8
 8006a20:	462a      	mov	r2, r5
 8006a22:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a26:	930e      	str	r3, [sp, #56]	; 0x38
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a2c:	4798      	blx	r3
 8006a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a32:	f803 0b01 	strb.w	r0, [r3], #1
 8006a36:	1ae1      	subs	r1, r4, r3
 8006a38:	eb18 0f01 	cmn.w	r8, r1
 8006a3c:	d1f1      	bne.n	8006a22 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 8006a3e:	e01e      	b.n	8006a7e <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8006a40:	4643      	mov	r3, r8
 8006a42:	462a      	mov	r2, r5
 8006a44:	46a0      	mov	r8, r4
 8006a46:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a50:	4798      	blx	r3
 8006a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a54:	f1b8 0801 	subs.w	r8, r8, #1
 8006a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a5a:	f823 0b02 	strh.w	r0, [r3], #2
 8006a5e:	d1f2      	bne.n	8006a46 <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 8006a60:	e00d      	b.n	8006a7e <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8006a62:	462a      	mov	r2, r5
 8006a64:	4623      	mov	r3, r4
 8006a66:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a6a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a70:	4798      	blx	r3
 8006a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a74:	f848 0b04 	str.w	r0, [r8], #4
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a7c:	d1f3      	bne.n	8006a66 <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8006a7e:	445d      	add	r5, fp
 8006a80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006a82:	4622      	mov	r2, r4
 8006a84:	9605      	str	r6, [sp, #20]
 8006a86:	4639      	mov	r1, r7
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	f107 0801 	add.w	r8, r7, #1
 8006a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a90:	9603      	str	r6, [sp, #12]
 8006a92:	9302      	str	r3, [sp, #8]
 8006a94:	2301      	movs	r3, #1
 8006a96:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a9a:	f8cd 9000 	str.w	r9, [sp]
 8006a9e:	9808      	ldr	r0, [sp, #32]
 8006aa0:	f7fd fc6c 	bl	800437c <LCD_DrawBitmap>
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa6:	4543      	cmp	r3, r8
 8006aa8:	f000 80d1 	beq.w	8006c4e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006aac:	4647      	mov	r7, r8
 8006aae:	e7ab      	b.n	8006a08 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8006ab0:	2f10      	cmp	r7, #16
 8006ab2:	f040 80d5 	bne.w	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006ab6:	fb04 f00a 	mul.w	r0, r4, sl
 8006aba:	f7fc fdd5 	bl	8003668 <GUI_ALLOC_AllocNoInit>
 8006abe:	900d      	str	r0, [sp, #52]	; 0x34
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f000 80cd 	beq.w	8006c60 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006ac6:	f7fc fc41 	bl	800334c <GUI_ALLOC_LockH>
 8006aca:	9018      	str	r0, [sp, #96]	; 0x60
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7fc fc3d 	bl	800334c <GUI_ALLOC_LockH>
 8006ad2:	9016      	str	r0, [sp, #88]	; 0x58
 8006ad4:	6933      	ldr	r3, [r6, #16]
 8006ad6:	f100 0718 	add.w	r7, r0, #24
 8006ada:	b113      	cbz	r3, 8006ae2 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8006adc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006ae0:	b953      	cbnz	r3, 8006af8 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 8006ae2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006ae6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ae8:	0066      	lsls	r6, r4, #1
 8006aea:	f04f 0b00 	mov.w	fp, #0
 8006aee:	930c      	str	r3, [sp, #48]	; 0x30
 8006af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af2:	442b      	add	r3, r5
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	e083      	b.n	8006c00 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8006af8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006afc:	0080      	lsls	r0, r0, #2
 8006afe:	f7fc fdb3 	bl	8003668 <GUI_ALLOC_AllocNoInit>
 8006b02:	900c      	str	r0, [sp, #48]	; 0x30
 8006b04:	b118      	cbz	r0, 8006b0e <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8006b06:	f7fc fc21 	bl	800334c <GUI_ALLOC_LockH>
 8006b0a:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b0c:	e001      	b.n	8006b12 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8006b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b10:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 809a 	beq.w	8006c4e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006b1a:	0063      	lsls	r3, r4, #1
 8006b1c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006b20:	930a      	str	r3, [sp, #40]	; 0x28
 8006b22:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006b26:	930e      	str	r3, [sp, #56]	; 0x38
 8006b28:	f1ba 0f02 	cmp.w	sl, #2
 8006b2c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8006b30:	d006      	beq.n	8006b40 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 8006b32:	f1ba 0f04 	cmp.w	sl, #4
 8006b36:	d005      	beq.n	8006b44 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8006b38:	f1ba 0f01 	cmp.w	sl, #1
 8006b3c:	d111      	bne.n	8006b62 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 8006b3e:	e001      	b.n	8006b44 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8006b40:	4653      	mov	r3, sl
 8006b42:	e000      	b.n	8006b46 <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 8006b44:	2302      	movs	r3, #2
 8006b46:	4638      	mov	r0, r7
 8006b48:	4622      	mov	r2, r4
 8006b4a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006b4c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8006b50:	47a8      	blx	r5
 8006b52:	4653      	mov	r3, sl
 8006b54:	4622      	mov	r2, r4
 8006b56:	4649      	mov	r1, r9
 8006b58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006b5a:	6935      	ldr	r5, [r6, #16]
 8006b5c:	47a8      	blx	r5
 8006b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b60:	441f      	add	r7, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b66:	4659      	mov	r1, fp
 8006b68:	9808      	ldr	r0, [sp, #32]
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	f10b 0901 	add.w	r9, fp, #1
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b74:	9204      	str	r2, [sp, #16]
 8006b76:	4622      	mov	r2, r4
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	f7fd fbfc 	bl	800437c <LCD_DrawBitmap>
 8006b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b88:	4413      	add	r3, r2
 8006b8a:	4599      	cmp	r9, r3
 8006b8c:	d001      	beq.n	8006b92 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 8006b8e:	46cb      	mov	fp, r9
 8006b90:	e7ca      	b.n	8006b28 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 8006b92:	a817      	add	r0, sp, #92	; 0x5c
 8006b94:	f7fc fbe8 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006b98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b9a:	f7fc fc05 	bl	80033a8 <GUI_ALLOC_Free>
 8006b9e:	e056      	b.n	8006c4e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006ba0:	2402d67c 	.word	0x2402d67c
 8006ba4:	f1ba 0f04 	cmp.w	sl, #4
 8006ba8:	d041      	beq.n	8006c2e <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8006baa:	f1ba 0f01 	cmp.w	sl, #1
 8006bae:	d111      	bne.n	8006bd4 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	463a      	mov	r2, r7
 8006bb4:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8006bba:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bbc:	47c8      	blx	r9
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc0:	4798      	blx	r3
 8006bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bc6:	f803 0b01 	strb.w	r0, [r3], #1
 8006bca:	1ae1      	subs	r1, r4, r3
 8006bcc:	eb18 0f01 	cmn.w	r8, r1
 8006bd0:	d1f0      	bne.n	8006bb4 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 8006bd2:	4437      	add	r7, r6
 8006bd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	f8cd b014 	str.w	fp, [sp, #20]
 8006bdc:	4629      	mov	r1, r5
 8006bde:	9304      	str	r3, [sp, #16]
 8006be0:	f105 0801 	add.w	r8, r5, #1
 8006be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be6:	f8cd b00c 	str.w	fp, [sp, #12]
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	2301      	movs	r3, #1
 8006bee:	9808      	ldr	r0, [sp, #32]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	f7fd fbc2 	bl	800437c <LCD_DrawBitmap>
 8006bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfa:	4543      	cmp	r3, r8
 8006bfc:	d027      	beq.n	8006c4e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006bfe:	4645      	mov	r5, r8
 8006c00:	f1ba 0f02 	cmp.w	sl, #2
 8006c04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c08:	d1cc      	bne.n	8006ba4 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8006c0a:	4643      	mov	r3, r8
 8006c0c:	463a      	mov	r2, r7
 8006c0e:	46a0      	mov	r8, r4
 8006c10:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c14:	930e      	str	r3, [sp, #56]	; 0x38
 8006c16:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c18:	47c8      	blx	r9
 8006c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1c:	4798      	blx	r3
 8006c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c20:	f1b8 0801 	subs.w	r8, r8, #1
 8006c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c26:	f823 0b02 	strh.w	r0, [r3], #2
 8006c2a:	d1f1      	bne.n	8006c10 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 8006c2c:	e7d1      	b.n	8006bd2 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8006c2e:	463a      	mov	r2, r7
 8006c30:	4623      	mov	r3, r4
 8006c32:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c36:	930e      	str	r3, [sp, #56]	; 0x38
 8006c38:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c3a:	47c8      	blx	r9
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3e:	4798      	blx	r3
 8006c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c42:	f848 0b04 	str.w	r0, [r8], #4
 8006c46:	3b01      	subs	r3, #1
 8006c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c4a:	d1f2      	bne.n	8006c32 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8006c4c:	e7c1      	b.n	8006bd2 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8006c4e:	a816      	add	r0, sp, #88	; 0x58
 8006c50:	f7fc fb8a 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006c54:	a818      	add	r0, sp, #96	; 0x60
 8006c56:	f7fc fb87 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006c5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c5c:	f7fc fba4 	bl	80033a8 <GUI_ALLOC_Free>
 8006c60:	b01b      	add	sp, #108	; 0x6c
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	bf00      	nop

08006c68 <_OnExit>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <_OnExit+0x6c>)
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	4d1a      	ldr	r5, [pc, #104]	; (8006cd8 <_OnExit+0x70>)
 8006c70:	601c      	str	r4, [r3, #0]
 8006c72:	4621      	mov	r1, r4
 8006c74:	4b19      	ldr	r3, [pc, #100]	; (8006cdc <_OnExit+0x74>)
 8006c76:	481a      	ldr	r0, [pc, #104]	; (8006ce0 <_OnExit+0x78>)
 8006c78:	601c      	str	r4, [r3, #0]
 8006c7a:	605c      	str	r4, [r3, #4]
 8006c7c:	300c      	adds	r0, #12
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <_OnExit+0x7c>)
 8006c80:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <_OnExit+0x80>)
 8006c82:	601c      	str	r4, [r3, #0]
 8006c84:	4b19      	ldr	r3, [pc, #100]	; (8006cec <_OnExit+0x84>)
 8006c86:	f800 4c0c 	strb.w	r4, [r0, #-12]
 8006c8a:	601c      	str	r4, [r3, #0]
 8006c8c:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <_OnExit+0x88>)
 8006c8e:	f840 4c08 	str.w	r4, [r0, #-8]
 8006c92:	601c      	str	r4, [r3, #0]
 8006c94:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <_OnExit+0x8c>)
 8006c96:	6014      	str	r4, [r2, #0]
 8006c98:	6054      	str	r4, [r2, #4]
 8006c9a:	2218      	movs	r2, #24
 8006c9c:	601c      	str	r4, [r3, #0]
 8006c9e:	f840 4c04 	str.w	r4, [r0, #-4]
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	4798      	blx	r3
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <_OnExit+0x90>)
 8006ca8:	4621      	mov	r1, r4
 8006caa:	2210      	movs	r2, #16
 8006cac:	601c      	str	r4, [r3, #0]
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <_OnExit+0x94>)
 8006cb0:	4813      	ldr	r0, [pc, #76]	; (8006d00 <_OnExit+0x98>)
 8006cb2:	601c      	str	r4, [r3, #0]
 8006cb4:	605c      	str	r4, [r3, #4]
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	4798      	blx	r3
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	4810      	ldr	r0, [pc, #64]	; (8006d04 <_OnExit+0x9c>)
 8006cc2:	4798      	blx	r3
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	2210      	movs	r2, #16
 8006cca:	480f      	ldr	r0, [pc, #60]	; (8006d08 <_OnExit+0xa0>)
 8006ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cd0:	4718      	bx	r3
 8006cd2:	bf00      	nop
 8006cd4:	2402d6d4 	.word	0x2402d6d4
 8006cd8:	24000030 	.word	0x24000030
 8006cdc:	2402d6dc 	.word	0x2402d6dc
 8006ce0:	2402d410 	.word	0x2402d410
 8006ce4:	2402d6e8 	.word	0x2402d6e8
 8006ce8:	2402d6a8 	.word	0x2402d6a8
 8006cec:	2402d694 	.word	0x2402d694
 8006cf0:	2402d6c8 	.word	0x2402d6c8
 8006cf4:	2402d6d8 	.word	0x2402d6d8
 8006cf8:	2402d6a4 	.word	0x2402d6a4
 8006cfc:	2402d698 	.word	0x2402d698
 8006d00:	2402d70c 	.word	0x2402d70c
 8006d04:	2402d6fc 	.word	0x2402d6fc
 8006d08:	2402d6ec 	.word	0x2402d6ec

08006d0c <_Findy1>:
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	4607      	mov	r7, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	ad02      	add	r5, sp, #8
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	d048      	beq.n	8006dae <_Findy1+0xa2>
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f7fc fb15 	bl	800334c <GUI_ALLOC_LockH>
 8006d22:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8006d24:	4601      	mov	r1, r0
 8006d26:	9001      	str	r0, [sp, #4]
 8006d28:	07bb      	lsls	r3, r7, #30
 8006d2a:	d53a      	bpl.n	8006da2 <_Findy1+0x96>
 8006d2c:	b126      	cbz	r6, 8006d38 <_Findy1+0x2c>
 8006d2e:	4632      	mov	r2, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7fd f90e 	bl	8003f52 <GUI__IntersectRects>
 8006d36:	e002      	b.n	8006d3e <_Findy1+0x32>
 8006d38:	c803      	ldmia	r0, {r0, r1}
 8006d3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7fc fda9 	bl	8003898 <GUI_RectsIntersect>
 8006d46:	b360      	cbz	r0, 8006da2 <_Findy1+0x96>
 8006d48:	f017 0f01 	tst.w	r7, #1
 8006d4c:	9b01      	ldr	r3, [sp, #4]
 8006d4e:	d11c      	bne.n	8006d8a <_Findy1+0x7e>
 8006d50:	b13e      	cbz	r6, 8006d62 <_Findy1+0x56>
 8006d52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006d56:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	bfb8      	it	lt
 8006d5e:	4613      	movlt	r3, r2
 8006d60:	e001      	b.n	8006d66 <_Findy1+0x5a>
 8006d62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8006d70:	dd05      	ble.n	8006d7e <_Findy1+0x72>
 8006d72:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	db13      	blt.n	8006da2 <_Findy1+0x96>
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	e003      	b.n	8006d86 <_Findy1+0x7a>
 8006d7e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	dd0d      	ble.n	8006da2 <_Findy1+0x96>
 8006d86:	80e3      	strh	r3, [r4, #6]
 8006d88:	e00b      	b.n	8006da2 <_Findy1+0x96>
 8006d8a:	69df      	ldr	r7, [r3, #28]
 8006d8c:	b14f      	cbz	r7, 8006da2 <_Findy1+0x96>
 8006d8e:	4638      	mov	r0, r7
 8006d90:	462a      	mov	r2, r5
 8006d92:	4621      	mov	r1, r4
 8006d94:	f7ff ffba 	bl	8006d0c <_Findy1>
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7fc facd 	bl	8003338 <GUI_ALLOC_h2p>
 8006d9e:	6a07      	ldr	r7, [r0, #32]
 8006da0:	e7f4      	b.n	8006d8c <_Findy1+0x80>
 8006da2:	9b01      	ldr	r3, [sp, #4]
 8006da4:	a801      	add	r0, sp, #4
 8006da6:	6a1f      	ldr	r7, [r3, #32]
 8006da8:	f7fc fade 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006dac:	e7b4      	b.n	8006d18 <_Findy1+0xc>
 8006dae:	b005      	add	sp, #20
 8006db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006db2 <_Findx0>:
 8006db2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006db6:	4606      	mov	r6, r0
 8006db8:	460f      	mov	r7, r1
 8006dba:	4690      	mov	r8, r2
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	ac02      	add	r4, sp, #8
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	d035      	beq.n	8006e30 <_Findx0+0x7e>
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7fc fac1 	bl	800334c <GUI_ALLOC_LockH>
 8006dca:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006dcc:	4601      	mov	r1, r0
 8006dce:	9001      	str	r0, [sp, #4]
 8006dd0:	07b2      	lsls	r2, r6, #30
 8006dd2:	d527      	bpl.n	8006e24 <_Findx0+0x72>
 8006dd4:	f1b8 0f00 	cmp.w	r8, #0
 8006dd8:	d004      	beq.n	8006de4 <_Findx0+0x32>
 8006dda:	4642      	mov	r2, r8
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7fd f8b8 	bl	8003f52 <GUI__IntersectRects>
 8006de2:	e002      	b.n	8006dea <_Findx0+0x38>
 8006de4:	c803      	ldmia	r0, {r0, r1}
 8006de6:	e884 0003 	stmia.w	r4, {r0, r1}
 8006dea:	4621      	mov	r1, r4
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7fc fd53 	bl	8003898 <GUI_RectsIntersect>
 8006df2:	b1b8      	cbz	r0, 8006e24 <_Findx0+0x72>
 8006df4:	07f3      	lsls	r3, r6, #31
 8006df6:	d405      	bmi.n	8006e04 <_Findx0+0x52>
 8006df8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006dfc:	2501      	movs	r5, #1
 8006dfe:	3301      	adds	r3, #1
 8006e00:	803b      	strh	r3, [r7, #0]
 8006e02:	e00f      	b.n	8006e24 <_Findx0+0x72>
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	69de      	ldr	r6, [r3, #28]
 8006e08:	b166      	cbz	r6, 8006e24 <_Findx0+0x72>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7ff ffcf 	bl	8006db2 <_Findx0>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	4630      	mov	r0, r6
 8006e18:	bf18      	it	ne
 8006e1a:	2501      	movne	r5, #1
 8006e1c:	f7fc fa8c 	bl	8003338 <GUI_ALLOC_h2p>
 8006e20:	6a06      	ldr	r6, [r0, #32]
 8006e22:	e7f1      	b.n	8006e08 <_Findx0+0x56>
 8006e24:	9b01      	ldr	r3, [sp, #4]
 8006e26:	a801      	add	r0, sp, #4
 8006e28:	6a1e      	ldr	r6, [r3, #32]
 8006e2a:	f7fc fa9d 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006e2e:	e7c7      	b.n	8006dc0 <_Findx0+0xe>
 8006e30:	4628      	mov	r0, r5
 8006e32:	b004      	add	sp, #16
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e38 <_Findx1>:
 8006e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460e      	mov	r6, r1
 8006e40:	4617      	mov	r7, r2
 8006e42:	ac02      	add	r4, sp, #8
 8006e44:	b37d      	cbz	r5, 8006ea6 <_Findx1+0x6e>
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7fc fa80 	bl	800334c <GUI_ALLOC_LockH>
 8006e4c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8006e4e:	4601      	mov	r1, r0
 8006e50:	9001      	str	r0, [sp, #4]
 8006e52:	07aa      	lsls	r2, r5, #30
 8006e54:	d521      	bpl.n	8006e9a <_Findx1+0x62>
 8006e56:	b127      	cbz	r7, 8006e62 <_Findx1+0x2a>
 8006e58:	463a      	mov	r2, r7
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7fd f879 	bl	8003f52 <GUI__IntersectRects>
 8006e60:	e002      	b.n	8006e68 <_Findx1+0x30>
 8006e62:	c803      	ldmia	r0, {r0, r1}
 8006e64:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f7fc fd14 	bl	8003898 <GUI_RectsIntersect>
 8006e70:	b198      	cbz	r0, 8006e9a <_Findx1+0x62>
 8006e72:	07eb      	lsls	r3, r5, #31
 8006e74:	d404      	bmi.n	8006e80 <_Findx1+0x48>
 8006e76:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	80b3      	strh	r3, [r6, #4]
 8006e7e:	e00c      	b.n	8006e9a <_Findx1+0x62>
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	69dd      	ldr	r5, [r3, #28]
 8006e84:	b14d      	cbz	r5, 8006e9a <_Findx1+0x62>
 8006e86:	4628      	mov	r0, r5
 8006e88:	4622      	mov	r2, r4
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	f7ff ffd4 	bl	8006e38 <_Findx1>
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7fc fa51 	bl	8003338 <GUI_ALLOC_h2p>
 8006e96:	6a05      	ldr	r5, [r0, #32]
 8006e98:	e7f4      	b.n	8006e84 <_Findx1+0x4c>
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	a801      	add	r0, sp, #4
 8006e9e:	6a1d      	ldr	r5, [r3, #32]
 8006ea0:	f7fc fa62 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006ea4:	e7ce      	b.n	8006e44 <_Findx1+0xc>
 8006ea6:	b005      	add	sp, #20
 8006ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006eac <WM__ClipAtParentBorders>:
 8006eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f7fc fa4a 	bl	800334c <GUI_ALLOC_LockH>
 8006eb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006eba:	4601      	mov	r1, r0
 8006ebc:	9001      	str	r0, [sp, #4]
 8006ebe:	f013 0402 	ands.w	r4, r3, #2
 8006ec2:	d104      	bne.n	8006ece <WM__ClipAtParentBorders+0x22>
 8006ec4:	a801      	add	r0, sp, #4
 8006ec6:	f7fc fa4f 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	e016      	b.n	8006efc <WM__ClipAtParentBorders+0x50>
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7fd f822 	bl	8003f18 <GUI__IntersectRect>
 8006ed4:	9b01      	ldr	r3, [sp, #4]
 8006ed6:	a801      	add	r0, sp, #4
 8006ed8:	699c      	ldr	r4, [r3, #24]
 8006eda:	b954      	cbnz	r4, 8006ef2 <WM__ClipAtParentBorders+0x46>
 8006edc:	f7fc fa44 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <WM__ClipAtParentBorders+0x54>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4295      	cmp	r5, r2
 8006ee6:	d008      	beq.n	8006efa <WM__ClipAtParentBorders+0x4e>
 8006ee8:	6858      	ldr	r0, [r3, #4]
 8006eea:	1b43      	subs	r3, r0, r5
 8006eec:	4258      	negs	r0, r3
 8006eee:	4158      	adcs	r0, r3
 8006ef0:	e004      	b.n	8006efc <WM__ClipAtParentBorders+0x50>
 8006ef2:	f7fc fa39 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006ef6:	4625      	mov	r5, r4
 8006ef8:	e7db      	b.n	8006eb2 <WM__ClipAtParentBorders+0x6>
 8006efa:	2001      	movs	r0, #1
 8006efc:	b002      	add	sp, #8
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	2402d698 	.word	0x2402d698

08006f04 <WM__InsertWindowIntoList>:
 8006f04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	d04c      	beq.n	8006faa <WM__InsertWindowIntoList+0xa6>
 8006f10:	f7fc fa1c 	bl	800334c <GUI_ALLOC_LockH>
 8006f14:	2300      	movs	r3, #0
 8006f16:	6184      	str	r4, [r0, #24]
 8006f18:	9001      	str	r0, [sp, #4]
 8006f1a:	6203      	str	r3, [r0, #32]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7fc fa15 	bl	800334c <GUI_ALLOC_LockH>
 8006f22:	ac04      	add	r4, sp, #16
 8006f24:	69c7      	ldr	r7, [r0, #28]
 8006f26:	f844 0d08 	str.w	r0, [r4, #-8]!
 8006f2a:	b92f      	cbnz	r7, 8006f38 <WM__InsertWindowIntoList+0x34>
 8006f2c:	61c6      	str	r6, [r0, #28]
 8006f2e:	a801      	add	r0, sp, #4
 8006f30:	f7fc fa1a 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006f34:	4620      	mov	r0, r4
 8006f36:	e036      	b.n	8006fa6 <WM__InsertWindowIntoList+0xa2>
 8006f38:	9b01      	ldr	r3, [sp, #4]
 8006f3a:	f10d 0810 	add.w	r8, sp, #16
 8006f3e:	4638      	mov	r0, r7
 8006f40:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006f42:	f7fc fa03 	bl	800334c <GUI_ALLOC_LockH>
 8006f46:	f848 0d04 	str.w	r0, [r8, #-4]!
 8006f4a:	f005 0508 	and.w	r5, r5, #8
 8006f4e:	b975      	cbnz	r5, 8006f6e <WM__InsertWindowIntoList+0x6a>
 8006f50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f52:	071a      	lsls	r2, r3, #28
 8006f54:	d50b      	bpl.n	8006f6e <WM__InsertWindowIntoList+0x6a>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	a801      	add	r0, sp, #4
 8006f5a:	621f      	str	r7, [r3, #32]
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	61de      	str	r6, [r3, #28]
 8006f60:	f7fc fa02 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7fc f9ff 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	e01b      	b.n	8006fa6 <WM__InsertWindowIntoList+0xa2>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f7fc f9fa 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006f74:	4640      	mov	r0, r8
 8006f76:	f7fc f9f7 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f7fc f9dc 	bl	8003338 <GUI_ALLOC_h2p>
 8006f80:	9003      	str	r0, [sp, #12]
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	6a1c      	ldr	r4, [r3, #32]
 8006f86:	b90c      	cbnz	r4, 8006f8c <WM__InsertWindowIntoList+0x88>
 8006f88:	621e      	str	r6, [r3, #32]
 8006f8a:	e00b      	b.n	8006fa4 <WM__InsertWindowIntoList+0xa0>
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f7fc f9d3 	bl	8003338 <GUI_ALLOC_h2p>
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	d1f4      	bne.n	8006f80 <WM__InsertWindowIntoList+0x7c>
 8006f96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f98:	071b      	lsls	r3, r3, #28
 8006f9a:	d5f1      	bpl.n	8006f80 <WM__InsertWindowIntoList+0x7c>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	621e      	str	r6, [r3, #32]
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	621c      	str	r4, [r3, #32]
 8006fa4:	a801      	add	r0, sp, #4
 8006fa6:	f7fc f9df 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006faa:	b004      	add	sp, #16
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fb0 <WM__Client2Screen>:
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006fb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006fbc:	f7fc bc53 	b.w	8003866 <GUI_MoveRect>

08006fc0 <_SetClipRectUserIntersect>:
 8006fc0:	4b11      	ldr	r3, [pc, #68]	; (8007008 <_SetClipRectUserIntersect+0x48>)
 8006fc2:	b530      	push	{r4, r5, lr}
 8006fc4:	681c      	ldr	r4, [r3, #0]
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	4605      	mov	r5, r0
 8006fca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006fcc:	b1ba      	cbz	r2, 8006ffe <_SetClipRectUserIntersect+0x3e>
 8006fce:	6810      	ldr	r0, [r2, #0]
 8006fd0:	ab02      	add	r3, sp, #8
 8006fd2:	6851      	ldr	r1, [r2, #4]
 8006fd4:	c303      	stmia	r3!, {r0, r1}
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	; (800700c <_SetClipRectUserIntersect+0x4c>)
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	b900      	cbnz	r0, 8006fde <_SetClipRectUserIntersect+0x1e>
 8006fdc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006fde:	ac04      	add	r4, sp, #16
 8006fe0:	f7fc f9b4 	bl	800334c <GUI_ALLOC_LockH>
 8006fe4:	a902      	add	r1, sp, #8
 8006fe6:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8006fea:	f7ff ffe1 	bl	8006fb0 <WM__Client2Screen>
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7fc f9ba 	bl	8003368 <GUI_ALLOC_UnlockH>
 8006ff4:	a802      	add	r0, sp, #8
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7fc ff8e 	bl	8003f18 <GUI__IntersectRect>
 8006ffc:	a802      	add	r0, sp, #8
 8006ffe:	f000 ff27 	bl	8007e50 <LCD_SetClipRectEx>
 8007002:	b005      	add	sp, #20
 8007004:	bd30      	pop	{r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	24000028 	.word	0x24000028
 800700c:	2402d694 	.word	0x2402d694

08007010 <WM__ActivateClipRect>:
 8007010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <WM__ActivateClipRect+0x3c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800701a:	b10a      	cbz	r2, 8007020 <WM__ActivateClipRect+0x10>
 800701c:	480c      	ldr	r0, [pc, #48]	; (8007050 <WM__ActivateClipRect+0x40>)
 800701e:	e011      	b.n	8007044 <WM__ActivateClipRect+0x34>
 8007020:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007022:	ac02      	add	r4, sp, #8
 8007024:	f7fc f992 	bl	800334c <GUI_ALLOC_LockH>
 8007028:	9001      	str	r0, [sp, #4]
 800702a:	c803      	ldmia	r0, {r0, r1}
 800702c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007030:	a801      	add	r0, sp, #4
 8007032:	f7fc f999 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007036:	4b07      	ldr	r3, [pc, #28]	; (8007054 <WM__ActivateClipRect+0x44>)
 8007038:	6819      	ldr	r1, [r3, #0]
 800703a:	b111      	cbz	r1, 8007042 <WM__ActivateClipRect+0x32>
 800703c:	4620      	mov	r0, r4
 800703e:	f7ff ff35 	bl	8006eac <WM__ClipAtParentBorders>
 8007042:	4620      	mov	r0, r4
 8007044:	f7ff ffbc 	bl	8006fc0 <_SetClipRectUserIntersect>
 8007048:	b004      	add	sp, #16
 800704a:	bd10      	pop	{r4, pc}
 800704c:	24000028 	.word	0x24000028
 8007050:	2402d424 	.word	0x2402d424
 8007054:	2402d694 	.word	0x2402d694

08007058 <WM__InvalidateDrawAndDescs>:
 8007058:	b513      	push	{r0, r1, r4, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	b300      	cbz	r0, 80070a0 <WM__InvalidateDrawAndDescs+0x48>
 800705e:	f7fc f975 	bl	800334c <GUI_ALLOC_LockH>
 8007062:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007064:	9001      	str	r0, [sp, #4]
 8007066:	079b      	lsls	r3, r3, #30
 8007068:	d517      	bpl.n	800709a <WM__InvalidateDrawAndDescs+0x42>
 800706a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800706c:	b140      	cbz	r0, 8007080 <WM__InvalidateDrawAndDescs+0x28>
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <WM__InvalidateDrawAndDescs+0x4c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429c      	cmp	r4, r3
 8007074:	d004      	beq.n	8007080 <WM__InvalidateDrawAndDescs+0x28>
 8007076:	f000 ff19 	bl	8007eac <GUI_MEMDEV_Delete>
 800707a:	2200      	movs	r2, #0
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fc4f 	bl	8007924 <WM_GetFirstChild>
 8007086:	4604      	mov	r4, r0
 8007088:	b13c      	cbz	r4, 800709a <WM__InvalidateDrawAndDescs+0x42>
 800708a:	4620      	mov	r0, r4
 800708c:	f7ff ffe4 	bl	8007058 <WM__InvalidateDrawAndDescs>
 8007090:	4620      	mov	r0, r4
 8007092:	f7fc f951 	bl	8003338 <GUI_ALLOC_h2p>
 8007096:	6a04      	ldr	r4, [r0, #32]
 8007098:	e7f6      	b.n	8007088 <WM__InvalidateDrawAndDescs+0x30>
 800709a:	a801      	add	r0, sp, #4
 800709c:	f7fc f964 	bl	8003368 <GUI_ALLOC_UnlockH>
 80070a0:	b002      	add	sp, #8
 80070a2:	bd10      	pop	{r4, pc}
 80070a4:	2402d6e4 	.word	0x2402d6e4

080070a8 <WM__RectIsNZ>:
 80070a8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80070ac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	dc08      	bgt.n	80070c6 <WM__RectIsNZ+0x1e>
 80070b4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80070b8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80070bc:	4283      	cmp	r3, r0
 80070be:	bfcc      	ite	gt
 80070c0:	2000      	movgt	r0, #0
 80070c2:	2001      	movle	r0, #1
 80070c4:	4770      	bx	lr
 80070c6:	2000      	movs	r0, #0
 80070c8:	4770      	bx	lr

080070ca <WM__SendMsgNoData>:
 80070ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070cc:	ab04      	add	r3, sp, #16
 80070ce:	9001      	str	r0, [sp, #4]
 80070d0:	f843 1d10 	str.w	r1, [r3, #-16]!
 80070d4:	4619      	mov	r1, r3
 80070d6:	f000 fca3 	bl	8007a20 <WM__SendMessage>
 80070da:	b005      	add	sp, #20
 80070dc:	f85d fb04 	ldr.w	pc, [sp], #4

080070e0 <WM__GetClientRectWin>:
 80070e0:	2300      	movs	r3, #0
 80070e2:	804b      	strh	r3, [r1, #2]
 80070e4:	800b      	strh	r3, [r1, #0]
 80070e6:	8883      	ldrh	r3, [r0, #4]
 80070e8:	8802      	ldrh	r2, [r0, #0]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	8842      	ldrh	r2, [r0, #2]
 80070ee:	808b      	strh	r3, [r1, #4]
 80070f0:	88c3      	ldrh	r3, [r0, #6]
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	80cb      	strh	r3, [r1, #6]
 80070f6:	4770      	bx	lr

080070f8 <WM__GetTopLevelLayer>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	f7fc f91c 	bl	8003338 <GUI_ALLOC_h2p>
 8007100:	6980      	ldr	r0, [r0, #24]
 8007102:	2800      	cmp	r0, #0
 8007104:	d1f9      	bne.n	80070fa <WM__GetTopLevelLayer+0x2>
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <WM__GetTopLevelLayer+0x24>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4294      	cmp	r4, r2
 800710c:	d005      	beq.n	800711a <WM__GetTopLevelLayer+0x22>
 800710e:	6858      	ldr	r0, [r3, #4]
 8007110:	4284      	cmp	r4, r0
 8007112:	bf0c      	ite	eq
 8007114:	2001      	moveq	r0, #1
 8007116:	f04f 30ff 	movne.w	r0, #4294967295
 800711a:	bd10      	pop	{r4, pc}
 800711c:	2402d698 	.word	0x2402d698

08007120 <_Invalidate1Abs>:
 8007120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007122:	b085      	sub	sp, #20
 8007124:	460d      	mov	r5, r1
 8007126:	4606      	mov	r6, r0
 8007128:	4617      	mov	r7, r2
 800712a:	f7fc f905 	bl	8003338 <GUI_ALLOC_h2p>
 800712e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007130:	9001      	str	r0, [sp, #4]
 8007132:	078b      	lsls	r3, r1, #30
 8007134:	d53e      	bpl.n	80071b4 <_Invalidate1Abs+0x94>
 8007136:	4628      	mov	r0, r5
 8007138:	f7ff ffb6 	bl	80070a8 <WM__RectIsNZ>
 800713c:	2800      	cmp	r0, #0
 800713e:	d039      	beq.n	80071b4 <_Invalidate1Abs+0x94>
 8007140:	f640 0301 	movw	r3, #2049	; 0x801
 8007144:	400b      	ands	r3, r1
 8007146:	2b01      	cmp	r3, #1
 8007148:	d034      	beq.n	80071b4 <_Invalidate1Abs+0x94>
 800714a:	ac02      	add	r4, sp, #8
 800714c:	4630      	mov	r0, r6
 800714e:	f7fc f8fd 	bl	800334c <GUI_ALLOC_LockH>
 8007152:	4629      	mov	r1, r5
 8007154:	4602      	mov	r2, r0
 8007156:	9001      	str	r0, [sp, #4]
 8007158:	4620      	mov	r0, r4
 800715a:	f7fc fefa 	bl	8003f52 <GUI__IntersectRects>
 800715e:	4620      	mov	r0, r4
 8007160:	f7ff ffa2 	bl	80070a8 <WM__RectIsNZ>
 8007164:	b318      	cbz	r0, 80071ae <_Invalidate1Abs+0x8e>
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	f244 0120 	movw	r1, #16416	; 0x4020
 800716c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800716e:	f103 0508 	add.w	r5, r3, #8
 8007172:	4011      	ands	r1, r2
 8007174:	b129      	cbz	r1, 8007182 <_Invalidate1Abs+0x62>
 8007176:	4622      	mov	r2, r4
 8007178:	4629      	mov	r1, r5
 800717a:	4628      	mov	r0, r5
 800717c:	f7fc fb48 	bl	8003810 <GUI_MergeRect>
 8007180:	e015      	b.n	80071ae <_Invalidate1Abs+0x8e>
 8007182:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007186:	433a      	orrs	r2, r7
 8007188:	e885 0003 	stmia.w	r5, {r0, r1}
 800718c:	629a      	str	r2, [r3, #40]	; 0x28
 800718e:	4630      	mov	r0, r6
 8007190:	4a09      	ldr	r2, [pc, #36]	; (80071b8 <_Invalidate1Abs+0x98>)
 8007192:	8813      	ldrh	r3, [r2, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	8013      	strh	r3, [r2, #0]
 8007198:	f7ff ffae 	bl	80070f8 <WM__GetTopLevelLayer>
 800719c:	4a07      	ldr	r2, [pc, #28]	; (80071bc <_Invalidate1Abs+0x9c>)
 800719e:	2301      	movs	r3, #1
 80071a0:	fa03 f000 	lsl.w	r0, r3, r0
 80071a4:	6813      	ldr	r3, [r2, #0]
 80071a6:	4303      	orrs	r3, r0
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	f7fc fead 	bl	8003f08 <GUI_SignalEvent>
 80071ae:	a801      	add	r0, sp, #4
 80071b0:	f7fc f8da 	bl	8003368 <GUI_ALLOC_UnlockH>
 80071b4:	b005      	add	sp, #20
 80071b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b8:	2402d6b0 	.word	0x2402d6b0
 80071bc:	2402d6c0 	.word	0x2402d6c0

080071c0 <WM__Invalidate1Abs>:
 80071c0:	2220      	movs	r2, #32
 80071c2:	f7ff bfad 	b.w	8007120 <_Invalidate1Abs>

080071c6 <WM_InvalidateWindowAndDescsEx>:
 80071c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c8:	460f      	mov	r7, r1
 80071ca:	b085      	sub	sp, #20
 80071cc:	4615      	mov	r5, r2
 80071ce:	4606      	mov	r6, r0
 80071d0:	b348      	cbz	r0, 8007226 <WM_InvalidateWindowAndDescsEx+0x60>
 80071d2:	f7fc f8bb 	bl	800334c <GUI_ALLOC_LockH>
 80071d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071d8:	ac04      	add	r4, sp, #16
 80071da:	4602      	mov	r2, r0
 80071dc:	079b      	lsls	r3, r3, #30
 80071de:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80071e2:	d403      	bmi.n	80071ec <WM_InvalidateWindowAndDescsEx+0x26>
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7fc f8bf 	bl	8003368 <GUI_ALLOC_UnlockH>
 80071ea:	e01c      	b.n	8007226 <WM_InvalidateWindowAndDescsEx+0x60>
 80071ec:	4639      	mov	r1, r7
 80071ee:	a802      	add	r0, sp, #8
 80071f0:	f7fc feaf 	bl	8003f52 <GUI__IntersectRects>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0f5      	beq.n	80071e4 <WM_InvalidateWindowAndDescsEx+0x1e>
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7fc f8b5 	bl	8003368 <GUI_ALLOC_UnlockH>
 80071fe:	462a      	mov	r2, r5
 8007200:	a902      	add	r1, sp, #8
 8007202:	4630      	mov	r0, r6
 8007204:	f7ff ff8c 	bl	8007120 <_Invalidate1Abs>
 8007208:	4630      	mov	r0, r6
 800720a:	f000 fb8b 	bl	8007924 <WM_GetFirstChild>
 800720e:	4604      	mov	r4, r0
 8007210:	b14c      	cbz	r4, 8007226 <WM_InvalidateWindowAndDescsEx+0x60>
 8007212:	4620      	mov	r0, r4
 8007214:	462a      	mov	r2, r5
 8007216:	a902      	add	r1, sp, #8
 8007218:	f7ff ffd5 	bl	80071c6 <WM_InvalidateWindowAndDescsEx>
 800721c:	4620      	mov	r0, r4
 800721e:	f7fc f88b 	bl	8003338 <GUI_ALLOC_h2p>
 8007222:	6a04      	ldr	r4, [r0, #32]
 8007224:	e7f4      	b.n	8007210 <WM_InvalidateWindowAndDescsEx+0x4a>
 8007226:	b005      	add	sp, #20
 8007228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800722a <WM__InvalidateRect>:
 800722a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800722e:	4680      	mov	r8, r0
 8007230:	4617      	mov	r7, r2
 8007232:	461d      	mov	r5, r3
 8007234:	460c      	mov	r4, r1
 8007236:	b381      	cbz	r1, 800729a <WM__InvalidateRect+0x70>
 8007238:	4608      	mov	r0, r1
 800723a:	f7fc f887 	bl	800334c <GUI_ALLOC_LockH>
 800723e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007240:	4602      	mov	r2, r0
 8007242:	9001      	str	r0, [sp, #4]
 8007244:	07b3      	lsls	r3, r6, #30
 8007246:	d525      	bpl.n	8007294 <WM__InvalidateRect+0x6a>
 8007248:	4641      	mov	r1, r8
 800724a:	a802      	add	r0, sp, #8
 800724c:	f7fc fe81 	bl	8003f52 <GUI__IntersectRects>
 8007250:	b300      	cbz	r0, 8007294 <WM__InvalidateRect+0x6a>
 8007252:	f640 0301 	movw	r3, #2049	; 0x801
 8007256:	4033      	ands	r3, r6
 8007258:	2b01      	cmp	r3, #1
 800725a:	d107      	bne.n	800726c <WM__InvalidateRect+0x42>
 800725c:	9901      	ldr	r1, [sp, #4]
 800725e:	462b      	mov	r3, r5
 8007260:	a802      	add	r0, sp, #8
 8007262:	6a0a      	ldr	r2, [r1, #32]
 8007264:	6989      	ldr	r1, [r1, #24]
 8007266:	f7ff ffe0 	bl	800722a <WM__InvalidateRect>
 800726a:	e004      	b.n	8007276 <WM__InvalidateRect+0x4c>
 800726c:	462a      	mov	r2, r5
 800726e:	a902      	add	r1, sp, #8
 8007270:	4620      	mov	r0, r4
 8007272:	f7ff ff55 	bl	8007120 <_Invalidate1Abs>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	69dc      	ldr	r4, [r3, #28]
 800727a:	b15c      	cbz	r4, 8007294 <WM__InvalidateRect+0x6a>
 800727c:	42bc      	cmp	r4, r7
 800727e:	d009      	beq.n	8007294 <WM__InvalidateRect+0x6a>
 8007280:	4620      	mov	r0, r4
 8007282:	462a      	mov	r2, r5
 8007284:	a902      	add	r1, sp, #8
 8007286:	f7ff ff9e 	bl	80071c6 <WM_InvalidateWindowAndDescsEx>
 800728a:	4620      	mov	r0, r4
 800728c:	f7fc f854 	bl	8003338 <GUI_ALLOC_h2p>
 8007290:	6a04      	ldr	r4, [r0, #32]
 8007292:	e7f2      	b.n	800727a <WM__InvalidateRect+0x50>
 8007294:	a801      	add	r0, sp, #4
 8007296:	f7fc f867 	bl	8003368 <GUI_ALLOC_UnlockH>
 800729a:	b004      	add	sp, #16
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072a0 <WM__InvalidateRectEx>:
 80072a0:	2320      	movs	r3, #32
 80072a2:	f7ff bfc2 	b.w	800722a <WM__InvalidateRect>

080072a6 <WM_InvalidateRect>:
 80072a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a8:	460f      	mov	r7, r1
 80072aa:	b087      	sub	sp, #28
 80072ac:	4605      	mov	r5, r0
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d033      	beq.n	800731a <WM_InvalidateRect+0x74>
 80072b2:	f7fc f84b 	bl	800334c <GUI_ALLOC_LockH>
 80072b6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80072b8:	9001      	str	r0, [sp, #4]
 80072ba:	07b2      	lsls	r2, r6, #30
 80072bc:	d52a      	bpl.n	8007314 <WM_InvalidateRect+0x6e>
 80072be:	ac04      	add	r4, sp, #16
 80072c0:	03f3      	lsls	r3, r6, #15
 80072c2:	c803      	ldmia	r0, {r0, r1}
 80072c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80072c8:	d502      	bpl.n	80072d0 <WM_InvalidateRect+0x2a>
 80072ca:	4628      	mov	r0, r5
 80072cc:	f7ff fec4 	bl	8007058 <WM__InvalidateDrawAndDescs>
 80072d0:	b15f      	cbz	r7, 80072ea <WM_InvalidateRect+0x44>
 80072d2:	6838      	ldr	r0, [r7, #0]
 80072d4:	ab02      	add	r3, sp, #8
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	c303      	stmia	r3!, {r0, r1}
 80072da:	a902      	add	r1, sp, #8
 80072dc:	9801      	ldr	r0, [sp, #4]
 80072de:	f7ff fe67 	bl	8006fb0 <WM__Client2Screen>
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7fc fe17 	bl	8003f18 <GUI__IntersectRect>
 80072ea:	4629      	mov	r1, r5
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff fddd 	bl	8006eac <WM__ClipAtParentBorders>
 80072f2:	b178      	cbz	r0, 8007314 <WM_InvalidateRect+0x6e>
 80072f4:	f640 0301 	movw	r3, #2049	; 0x801
 80072f8:	4033      	ands	r3, r6
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d106      	bne.n	800730c <WM_InvalidateRect+0x66>
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	4620      	mov	r0, r4
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	6999      	ldr	r1, [r3, #24]
 8007306:	f7ff ffcb 	bl	80072a0 <WM__InvalidateRectEx>
 800730a:	e003      	b.n	8007314 <WM_InvalidateRect+0x6e>
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	f7ff ff56 	bl	80071c0 <WM__Invalidate1Abs>
 8007314:	a801      	add	r0, sp, #4
 8007316:	f7fc f827 	bl	8003368 <GUI_ALLOC_UnlockH>
 800731a:	b007      	add	sp, #28
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800731e <WM_InvalidateWindow>:
 800731e:	2100      	movs	r1, #0
 8007320:	f7ff bfc1 	b.w	80072a6 <WM_InvalidateRect>

08007324 <WM__SelectTopLevelLayer>:
 8007324:	b508      	push	{r3, lr}
 8007326:	f7ff fee7 	bl	80070f8 <WM__GetTopLevelLayer>
 800732a:	2800      	cmp	r0, #0
 800732c:	db03      	blt.n	8007336 <WM__SelectTopLevelLayer+0x12>
 800732e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007332:	f7fc bdc7 	b.w	8003ec4 <GUI_SelectLayer>
 8007336:	bd08      	pop	{r3, pc}

08007338 <WM_SelectWindow>:
 8007338:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <WM_SelectWindow+0x38>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8007340:	4604      	mov	r4, r0
 8007342:	461d      	mov	r5, r3
 8007344:	b908      	cbnz	r0, 800734a <WM_SelectWindow+0x12>
 8007346:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <WM_SelectWindow+0x3c>)
 8007348:	681c      	ldr	r4, [r3, #0]
 800734a:	6494      	str	r4, [r2, #72]	; 0x48
 800734c:	4620      	mov	r0, r4
 800734e:	f7ff ffe9 	bl	8007324 <WM__SelectTopLevelLayer>
 8007352:	f7fd f925 	bl	80045a0 <LCD_SetClipRectMax>
 8007356:	4620      	mov	r0, r4
 8007358:	f7fb ffee 	bl	8003338 <GUI_ALLOC_h2p>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007362:	64da      	str	r2, [r3, #76]	; 0x4c
 8007364:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007368:	4630      	mov	r0, r6
 800736a:	651a      	str	r2, [r3, #80]	; 0x50
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	bf00      	nop
 8007370:	24000028 	.word	0x24000028
 8007374:	2402d6b4 	.word	0x2402d6b4

08007378 <WM_CreateWindowAsChild>:
 8007378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007380:	4698      	mov	r8, r3
 8007382:	4b4e      	ldr	r3, [pc, #312]	; (80074bc <WM_CreateWindowAsChild+0x144>)
 8007384:	4605      	mov	r5, r0
 8007386:	460e      	mov	r6, r1
 8007388:	4617      	mov	r7, r2
 800738a:	f8d3 9000 	ldr.w	r9, [r3]
 800738e:	f1ba 0f00 	cmp.w	sl, #0
 8007392:	d128      	bne.n	80073e6 <WM_CreateWindowAsChild+0x6e>
 8007394:	4b4a      	ldr	r3, [pc, #296]	; (80074c0 <WM_CreateWindowAsChild+0x148>)
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b353      	cbz	r3, 80073f0 <WM_CreateWindowAsChild+0x78>
 800739a:	4b4a      	ldr	r3, [pc, #296]	; (80074c4 <WM_CreateWindowAsChild+0x14c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	7c5a      	ldrb	r2, [r3, #17]
 80073a0:	4b49      	ldr	r3, [pc, #292]	; (80074c8 <WM_CreateWindowAsChild+0x150>)
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	2a01      	cmp	r2, #1
 80073aa:	d921      	bls.n	80073f0 <WM_CreateWindowAsChild+0x78>
 80073ac:	469a      	mov	sl, r3
 80073ae:	4650      	mov	r0, sl
 80073b0:	f7fb ffcc 	bl	800334c <GUI_ALLOC_LockH>
 80073b4:	f9b0 1000 	ldrsh.w	r1, [r0]
 80073b8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80073bc:	9001      	str	r0, [sp, #4]
 80073be:	440d      	add	r5, r1
 80073c0:	4416      	add	r6, r2
 80073c2:	b91f      	cbnz	r7, 80073cc <WM_CreateWindowAsChild+0x54>
 80073c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80073c8:	1a5f      	subs	r7, r3, r1
 80073ca:	3701      	adds	r7, #1
 80073cc:	f1b8 0f00 	cmp.w	r8, #0
 80073d0:	d105      	bne.n	80073de <WM_CreateWindowAsChild+0x66>
 80073d2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80073d6:	ebc2 0803 	rsb	r8, r2, r3
 80073da:	f108 0801 	add.w	r8, r8, #1
 80073de:	a801      	add	r0, sp, #4
 80073e0:	f7fb ffc2 	bl	8003368 <GUI_ALLOC_UnlockH>
 80073e4:	e004      	b.n	80073f0 <WM_CreateWindowAsChild+0x78>
 80073e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80073ea:	d1e0      	bne.n	80073ae <WM_CreateWindowAsChild+0x36>
 80073ec:	f04f 0a00 	mov.w	sl, #0
 80073f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80073f2:	302c      	adds	r0, #44	; 0x2c
 80073f4:	f7fc f93c 	bl	8003670 <GUI_ALLOC_AllocZero>
 80073f8:	4604      	mov	r4, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d059      	beq.n	80074b2 <WM_CreateWindowAsChild+0x13a>
 80073fe:	4a30      	ldr	r2, [pc, #192]	; (80074c0 <WM_CreateWindowAsChild+0x148>)
 8007400:	f10d 0b08 	add.w	fp, sp, #8
 8007404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007406:	ea49 0903 	orr.w	r9, r9, r3
 800740a:	8813      	ldrh	r3, [r2, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	8013      	strh	r3, [r2, #0]
 8007410:	f7fb ff9c 	bl	800334c <GUI_ALLOC_LockH>
 8007414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007416:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800741a:	6103      	str	r3, [r0, #16]
 800741c:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <WM_CreateWindowAsChild+0x154>)
 800741e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007420:	8005      	strh	r5, [r0, #0]
 8007422:	ea09 0303 	and.w	r3, r9, r3
 8007426:	8046      	strh	r6, [r0, #2]
 8007428:	443d      	add	r5, r7
 800742a:	4446      	add	r6, r8
 800742c:	4313      	orrs	r3, r2
 800742e:	3d01      	subs	r5, #1
 8007430:	3e01      	subs	r6, #1
 8007432:	6283      	str	r3, [r0, #40]	; 0x28
 8007434:	8085      	strh	r5, [r0, #4]
 8007436:	80c6      	strh	r6, [r0, #6]
 8007438:	4658      	mov	r0, fp
 800743a:	f7fb ff95 	bl	8003368 <GUI_ALLOC_UnlockH>
 800743e:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <WM_CreateWindowAsChild+0x158>)
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	b148      	cbz	r0, 8007458 <WM_CreateWindowAsChild+0xe0>
 8007444:	f7fb ff78 	bl	8003338 <GUI_ALLOC_h2p>
 8007448:	4605      	mov	r5, r0
 800744a:	4620      	mov	r0, r4
 800744c:	f7fb ff74 	bl	8003338 <GUI_ALLOC_h2p>
 8007450:	696b      	ldr	r3, [r5, #20]
 8007452:	6143      	str	r3, [r0, #20]
 8007454:	616c      	str	r4, [r5, #20]
 8007456:	e000      	b.n	800745a <WM_CreateWindowAsChild+0xe2>
 8007458:	601c      	str	r4, [r3, #0]
 800745a:	4651      	mov	r1, sl
 800745c:	4620      	mov	r0, r4
 800745e:	f7ff fd51 	bl	8006f04 <WM__InsertWindowIntoList>
 8007462:	f019 0f20 	tst.w	r9, #32
 8007466:	d002      	beq.n	800746e <WM_CreateWindowAsChild+0xf6>
 8007468:	4620      	mov	r0, r4
 800746a:	f7ff ff65 	bl	8007338 <WM_SelectWindow>
 800746e:	f019 0f01 	tst.w	r9, #1
 8007472:	bf1f      	itttt	ne
 8007474:	4a17      	ldrne	r2, [pc, #92]	; (80074d4 <WM_CreateWindowAsChild+0x15c>)
 8007476:	6813      	ldrne	r3, [r2, #0]
 8007478:	3301      	addne	r3, #1
 800747a:	6013      	strne	r3, [r2, #0]
 800747c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8007480:	d002      	beq.n	8007488 <WM_CreateWindowAsChild+0x110>
 8007482:	4620      	mov	r0, r4
 8007484:	f000 fa5e 	bl	8007944 <WM_BringToBottom>
 8007488:	f019 0f02 	tst.w	r9, #2
 800748c:	d00d      	beq.n	80074aa <WM_CreateWindowAsChild+0x132>
 800748e:	4620      	mov	r0, r4
 8007490:	f7fb ff5c 	bl	800334c <GUI_ALLOC_LockH>
 8007494:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007496:	9000      	str	r0, [sp, #0]
 8007498:	f043 0302 	orr.w	r3, r3, #2
 800749c:	6283      	str	r3, [r0, #40]	; 0x28
 800749e:	4658      	mov	r0, fp
 80074a0:	f7fb ff62 	bl	8003368 <GUI_ALLOC_UnlockH>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7ff ff3a 	bl	800731e <WM_InvalidateWindow>
 80074aa:	2101      	movs	r1, #1
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7ff fe0c 	bl	80070ca <WM__SendMsgNoData>
 80074b2:	4620      	mov	r0, r4
 80074b4:	b003      	add	sp, #12
 80074b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ba:	bf00      	nop
 80074bc:	2402d6c8 	.word	0x2402d6c8
 80074c0:	2402d690 	.word	0x2402d690
 80074c4:	24000028 	.word	0x24000028
 80074c8:	2402d698 	.word	0x2402d698
 80074cc:	003f3f9f 	.word	0x003f3f9f
 80074d0:	2402d6b4 	.word	0x2402d6b4
 80074d4:	2402d6e8 	.word	0x2402d6e8

080074d8 <WM__GetNextIVR>:
 80074d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80074dc:	4f5d      	ldr	r7, [pc, #372]	; (8007654 <WM__GetNextIVR+0x17c>)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f000 80b1 	beq.w	800764c <WM__GetNextIVR+0x174>
 80074ea:	4a5b      	ldr	r2, [pc, #364]	; (8007658 <WM__GetNextIVR+0x180>)
 80074ec:	6a13      	ldr	r3, [r2, #32]
 80074ee:	4614      	mov	r4, r2
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	dd03      	ble.n	80074fc <WM__GetNextIVR+0x24>
 80074f4:	3b01      	subs	r3, #1
 80074f6:	2000      	movs	r0, #0
 80074f8:	6213      	str	r3, [r2, #32]
 80074fa:	e0a7      	b.n	800764c <WM__GetNextIVR+0x174>
 80074fc:	69d3      	ldr	r3, [r2, #28]
 80074fe:	f102 0614 	add.w	r6, r2, #20
 8007502:	ad02      	add	r5, sp, #8
 8007504:	3301      	adds	r3, #1
 8007506:	e896 0003 	ldmia.w	r6, {r0, r1}
 800750a:	61d3      	str	r3, [r2, #28]
 800750c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007510:	b923      	cbnz	r3, 800751c <WM__GetNextIVR+0x44>
 8007512:	8993      	ldrh	r3, [r2, #12]
 8007514:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007518:	89d3      	ldrh	r3, [r2, #14]
 800751a:	e010      	b.n	800753e <WM__GetNextIVR+0x66>
 800751c:	8b13      	ldrh	r3, [r2, #24]
 800751e:	8ad2      	ldrh	r2, [r2, #22]
 8007520:	3301      	adds	r3, #1
 8007522:	f8ad 200a 	strh.w	r2, [sp, #10]
 8007526:	b21b      	sxth	r3, r3
 8007528:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800752c:	429a      	cmp	r2, r3
 800752e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007532:	da06      	bge.n	8007542 <WM__GetNextIVR+0x6a>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f8ad 3008 	strh.w	r3, [sp, #8]
 800753a:	8b63      	ldrh	r3, [r4, #26]
 800753c:	3301      	adds	r3, #1
 800753e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8007542:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8007546:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800754a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007658 <WM__GetNextIVR+0x180>
 800754e:	429a      	cmp	r2, r3
 8007550:	dd04      	ble.n	800755c <WM__GetNextIVR+0x84>
 8007552:	6a23      	ldr	r3, [r4, #32]
 8007554:	2000      	movs	r0, #0
 8007556:	3b01      	subs	r3, #1
 8007558:	6223      	str	r3, [r4, #32]
 800755a:	e077      	b.n	800764c <WM__GetNextIVR+0x174>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007560:	f7fb fef4 	bl	800334c <GUI_ALLOC_LockH>
 8007564:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8007568:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800756c:	9001      	str	r0, [sp, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d11c      	bne.n	80075ac <WM__GetNextIVR+0xd4>
 8007572:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8007576:	f8ad 300e 	strh.w	r3, [sp, #14]
 800757a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800757e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007582:	4b34      	ldr	r3, [pc, #208]	; (8007654 <WM__GetNextIVR+0x17c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007588:	b15a      	cbz	r2, 80075a2 <WM__GetNextIVR+0xca>
 800758a:	4610      	mov	r0, r2
 800758c:	f7fb fed4 	bl	8003338 <GUI_ALLOC_h2p>
 8007590:	4680      	mov	r8, r0
 8007592:	2200      	movs	r2, #0
 8007594:	4629      	mov	r1, r5
 8007596:	6a00      	ldr	r0, [r0, #32]
 8007598:	f7ff fbb8 	bl	8006d0c <_Findy1>
 800759c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80075a0:	e7f2      	b.n	8007588 <WM__GetNextIVR+0xb0>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	4629      	mov	r1, r5
 80075a6:	69d8      	ldr	r0, [r3, #28]
 80075a8:	f7ff fbb0 	bl	8006d0c <_Findy1>
 80075ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80075b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b8:	b16a      	cbz	r2, 80075d6 <WM__GetNextIVR+0xfe>
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fb febc 	bl	8003338 <GUI_ALLOC_h2p>
 80075c0:	2200      	movs	r2, #0
 80075c2:	4680      	mov	r8, r0
 80075c4:	4629      	mov	r1, r5
 80075c6:	6a00      	ldr	r0, [r0, #32]
 80075c8:	f7ff fbf3 	bl	8006db2 <_Findx0>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1ed      	bne.n	80075ac <WM__GetNextIVR+0xd4>
 80075d0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80075d4:	e7f0      	b.n	80075b8 <WM__GetNextIVR+0xe0>
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	4629      	mov	r1, r5
 80075da:	69d8      	ldr	r0, [r3, #28]
 80075dc:	f7ff fbe9 	bl	8006db2 <_Findx0>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d1e3      	bne.n	80075ac <WM__GetNextIVR+0xd4>
 80075e4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80075e8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80075ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dd07      	ble.n	8007604 <WM__GetNextIVR+0x12c>
 80075f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80075f8:	e886 0003 	stmia.w	r6, {r0, r1}
 80075fc:	a801      	add	r0, sp, #4
 80075fe:	f7fb feb3 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007602:	e797      	b.n	8007534 <WM__GetNextIVR+0x5c>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007608:	b152      	cbz	r2, 8007620 <WM__GetNextIVR+0x148>
 800760a:	4610      	mov	r0, r2
 800760c:	f7fb fe94 	bl	8003338 <GUI_ALLOC_h2p>
 8007610:	4607      	mov	r7, r0
 8007612:	2200      	movs	r2, #0
 8007614:	4629      	mov	r1, r5
 8007616:	6a00      	ldr	r0, [r0, #32]
 8007618:	f7ff fc0e 	bl	8006e38 <_Findx1>
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	e7f3      	b.n	8007608 <WM__GetNextIVR+0x130>
 8007620:	af04      	add	r7, sp, #16
 8007622:	4629      	mov	r1, r5
 8007624:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8007628:	69d8      	ldr	r0, [r3, #28]
 800762a:	f7ff fc05 	bl	8006e38 <_Findx1>
 800762e:	4638      	mov	r0, r7
 8007630:	f7fb fe9a 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007634:	69e2      	ldr	r2, [r4, #28]
 8007636:	f644 6320 	movw	r3, #20000	; 0x4e20
 800763a:	429a      	cmp	r2, r3
 800763c:	dc89      	bgt.n	8007552 <WM__GetNextIVR+0x7a>
 800763e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007642:	e886 0003 	stmia.w	r6, {r0, r1}
 8007646:	f7ff fce3 	bl	8007010 <WM__ActivateClipRect>
 800764a:	2001      	movs	r0, #1
 800764c:	b004      	add	sp, #16
 800764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007652:	bf00      	nop
 8007654:	24000028 	.word	0x24000028
 8007658:	2402d410 	.word	0x2402d410

0800765c <WM__InitIVRSearch>:
 800765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007660:	4e39      	ldr	r6, [pc, #228]	; (8007748 <WM__InitIVRSearch+0xec>)
 8007662:	b086      	sub	sp, #24
 8007664:	4680      	mov	r8, r0
 8007666:	6832      	ldr	r2, [r6, #0]
 8007668:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800766c:	b913      	cbnz	r3, 8007674 <WM__InitIVRSearch+0x18>
 800766e:	f7ff fccf 	bl	8007010 <WM__ActivateClipRect>
 8007672:	e064      	b.n	800773e <WM__InitIVRSearch+0xe2>
 8007674:	4f35      	ldr	r7, [pc, #212]	; (800774c <WM__InitIVRSearch+0xf0>)
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	463d      	mov	r5, r7
 800767a:	3301      	adds	r3, #1
 800767c:	2b01      	cmp	r3, #1
 800767e:	623b      	str	r3, [r7, #32]
 8007680:	dc5d      	bgt.n	800773e <WM__InitIVRSearch+0xe2>
 8007682:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8007684:	f7fb fe62 	bl	800334c <GUI_ALLOC_LockH>
 8007688:	f04f 33ff 	mov.w	r3, #4294967295
 800768c:	9000      	str	r0, [sp, #0]
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	4b2f      	ldr	r3, [pc, #188]	; (8007750 <WM__InitIVRSearch+0xf4>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b113      	cbz	r3, 800769c <WM__InitIVRSearch+0x40>
 8007696:	ab02      	add	r3, sp, #8
 8007698:	3008      	adds	r0, #8
 800769a:	e004      	b.n	80076a6 <WM__InitIVRSearch+0x4a>
 800769c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800769e:	f013 0402 	ands.w	r4, r3, #2
 80076a2:	d00c      	beq.n	80076be <WM__InitIVRSearch+0x62>
 80076a4:	ab02      	add	r3, sp, #8
 80076a6:	ac02      	add	r4, sp, #8
 80076a8:	c803      	ldmia	r0, {r0, r1}
 80076aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	d00c      	beq.n	80076ce <WM__InitIVRSearch+0x72>
 80076b4:	4641      	mov	r1, r8
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7fc fc2e 	bl	8003f18 <GUI__IntersectRect>
 80076bc:	e007      	b.n	80076ce <WM__InitIVRSearch+0x72>
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	4668      	mov	r0, sp
 80076c2:	3b01      	subs	r3, #1
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	f7fb fe4f 	bl	8003368 <GUI_ALLOC_UnlockH>
 80076ca:	4620      	mov	r0, r4
 80076cc:	e038      	b.n	8007740 <WM__InitIVRSearch+0xe4>
 80076ce:	6833      	ldr	r3, [r6, #0]
 80076d0:	4f20      	ldr	r7, [pc, #128]	; (8007754 <WM__InitIVRSearch+0xf8>)
 80076d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d4:	b1c2      	cbz	r2, 8007708 <WM__InitIVRSearch+0xac>
 80076d6:	9b00      	ldr	r3, [sp, #0]
 80076d8:	6810      	ldr	r0, [r2, #0]
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	ab04      	add	r3, sp, #16
 80076de:	6851      	ldr	r1, [r2, #4]
 80076e0:	c303      	stmia	r3!, {r0, r1}
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	b133      	cbz	r3, 80076f4 <WM__InitIVRSearch+0x98>
 80076e6:	a801      	add	r0, sp, #4
 80076e8:	f7fb fe3e 	bl	8003368 <GUI_ALLOC_UnlockH>
 80076ec:	6838      	ldr	r0, [r7, #0]
 80076ee:	f7fb fe2d 	bl	800334c <GUI_ALLOC_LockH>
 80076f2:	9001      	str	r0, [sp, #4]
 80076f4:	a904      	add	r1, sp, #16
 80076f6:	9801      	ldr	r0, [sp, #4]
 80076f8:	f7ff fc5a 	bl	8006fb0 <WM__Client2Screen>
 80076fc:	4620      	mov	r0, r4
 80076fe:	a904      	add	r1, sp, #16
 8007700:	f7fc fc0a 	bl	8003f18 <GUI__IntersectRect>
 8007704:	a801      	add	r0, sp, #4
 8007706:	e000      	b.n	800770a <WM__InitIVRSearch+0xae>
 8007708:	4668      	mov	r0, sp
 800770a:	f7fb fe2d 	bl	8003368 <GUI_ALLOC_UnlockH>
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	b119      	cbz	r1, 800771a <WM__InitIVRSearch+0xbe>
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff fbca 	bl	8006eac <WM__ClipAtParentBorders>
 8007718:	b128      	cbz	r0, 8007726 <WM__InitIVRSearch+0xca>
 800771a:	6833      	ldr	r3, [r6, #0]
 800771c:	4620      	mov	r0, r4
 800771e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007720:	f7ff fbc4 	bl	8006eac <WM__ClipAtParentBorders>
 8007724:	b918      	cbnz	r0, 800772e <WM__InitIVRSearch+0xd2>
 8007726:	6a2b      	ldr	r3, [r5, #32]
 8007728:	3b01      	subs	r3, #1
 800772a:	622b      	str	r3, [r5, #32]
 800772c:	e008      	b.n	8007740 <WM__InitIVRSearch+0xe4>
 800772e:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <WM__InitIVRSearch+0xfc>)
 8007730:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007734:	e883 0003 	stmia.w	r3, {r0, r1}
 8007738:	f7ff fece 	bl	80074d8 <WM__GetNextIVR>
 800773c:	e000      	b.n	8007740 <WM__InitIVRSearch+0xe4>
 800773e:	2001      	movs	r0, #1
 8007740:	b006      	add	sp, #24
 8007742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007746:	bf00      	nop
 8007748:	24000028 	.word	0x24000028
 800774c:	2402d410 	.word	0x2402d410
 8007750:	2402d6c4 	.word	0x2402d6c4
 8007754:	2402d694 	.word	0x2402d694
 8007758:	2402d41c 	.word	0x2402d41c

0800775c <WM_Activate>:
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <WM_Activate+0xc>)
 800775e:	2201      	movs	r2, #1
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007766:	4770      	bx	lr
 8007768:	24000028 	.word	0x24000028

0800776c <WM_DefaultProc>:
 800776c:	b510      	push	{r4, lr}
 800776e:	4604      	mov	r4, r0
 8007770:	6840      	ldr	r0, [r0, #4]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	2b17      	cmp	r3, #23
 8007776:	d010      	beq.n	800779a <WM_DefaultProc+0x2e>
 8007778:	dc07      	bgt.n	800778a <WM_DefaultProc+0x1e>
 800777a:	2b0e      	cmp	r3, #14
 800777c:	d00f      	beq.n	800779e <WM_DefaultProc+0x32>
 800777e:	2b14      	cmp	r3, #20
 8007780:	d115      	bne.n	80077ae <WM_DefaultProc+0x42>
 8007782:	68e1      	ldr	r1, [r4, #12]
 8007784:	f000 f972 	bl	8007a6c <WM__GetClientRectEx>
 8007788:	e011      	b.n	80077ae <WM_DefaultProc+0x42>
 800778a:	2b22      	cmp	r3, #34	; 0x22
 800778c:	d00c      	beq.n	80077a8 <WM_DefaultProc+0x3c>
 800778e:	2b28      	cmp	r3, #40	; 0x28
 8007790:	d10d      	bne.n	80077ae <WM_DefaultProc+0x42>
 8007792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007796:	f7ff bdc2 	b.w	800731e <WM_InvalidateWindow>
 800779a:	60e0      	str	r0, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}
 800779e:	4621      	mov	r1, r4
 80077a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a4:	f000 b911 	b.w	80079ca <WM_SendToParent>
 80077a8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80077ac:	e000      	b.n	80077b0 <WM_DefaultProc+0x44>
 80077ae:	2300      	movs	r3, #0
 80077b0:	60e3      	str	r3, [r4, #12]
 80077b2:	bd10      	pop	{r4, pc}

080077b4 <_cbBackWin>:
 80077b4:	6803      	ldr	r3, [r0, #0]
 80077b6:	2b0e      	cmp	r3, #14
 80077b8:	b510      	push	{r4, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	d002      	beq.n	80077c4 <_cbBackWin+0x10>
 80077be:	2b0f      	cmp	r3, #15
 80077c0:	d009      	beq.n	80077d6 <_cbBackWin+0x22>
 80077c2:	e020      	b.n	8007806 <_cbBackWin+0x52>
 80077c4:	68c3      	ldr	r3, [r0, #12]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	2a01      	cmp	r2, #1
 80077ca:	d121      	bne.n	8007810 <_cbBackWin+0x5c>
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d2:	f7fc bb65 	b.w	8003ea0 <GUI_StoreKey>
 80077d6:	4a0f      	ldr	r2, [pc, #60]	; (8007814 <_cbBackWin+0x60>)
 80077d8:	6843      	ldr	r3, [r0, #4]
 80077da:	6811      	ldr	r1, [r2, #0]
 80077dc:	428b      	cmp	r3, r1
 80077de:	d006      	beq.n	80077ee <_cbBackWin+0x3a>
 80077e0:	6852      	ldr	r2, [r2, #4]
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bf0c      	ite	eq
 80077e6:	2301      	moveq	r3, #1
 80077e8:	f04f 33ff 	movne.w	r3, #4294967295
 80077ec:	e000      	b.n	80077f0 <_cbBackWin+0x3c>
 80077ee:	2300      	movs	r3, #0
 80077f0:	4a09      	ldr	r2, [pc, #36]	; (8007818 <_cbBackWin+0x64>)
 80077f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077f6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80077fa:	4298      	cmp	r0, r3
 80077fc:	d003      	beq.n	8007806 <_cbBackWin+0x52>
 80077fe:	f7fc f871 	bl	80038e4 <GUI_SetBkColor>
 8007802:	f7fc f921 	bl	8003a48 <GUI_Clear>
 8007806:	4620      	mov	r0, r4
 8007808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780c:	f7ff bfae 	b.w	800776c <WM_DefaultProc>
 8007810:	bd10      	pop	{r4, pc}
 8007812:	bf00      	nop
 8007814:	2402d698 	.word	0x2402d698
 8007818:	2402d6cc 	.word	0x2402d6cc

0800781c <WM_Init>:
 800781c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007820:	4d2a      	ldr	r5, [pc, #168]	; (80078cc <WM_Init+0xb0>)
 8007822:	7828      	ldrb	r0, [r5, #0]
 8007824:	2800      	cmp	r0, #0
 8007826:	d14d      	bne.n	80078c4 <WM_Init+0xa8>
 8007828:	4b29      	ldr	r3, [pc, #164]	; (80078d0 <WM_Init+0xb4>)
 800782a:	4604      	mov	r4, r0
 800782c:	4e29      	ldr	r6, [pc, #164]	; (80078d4 <WM_Init+0xb8>)
 800782e:	6018      	str	r0, [r3, #0]
 8007830:	4b29      	ldr	r3, [pc, #164]	; (80078d8 <WM_Init+0xbc>)
 8007832:	4f2a      	ldr	r7, [pc, #168]	; (80078dc <WM_Init+0xc0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007908 <WM_Init+0xec>
 800783a:	6458      	str	r0, [r3, #68]	; 0x44
 800783c:	4b28      	ldr	r3, [pc, #160]	; (80078e0 <WM_Init+0xc4>)
 800783e:	60a8      	str	r0, [r5, #8]
 8007840:	8018      	strh	r0, [r3, #0]
 8007842:	4b28      	ldr	r3, [pc, #160]	; (80078e4 <WM_Init+0xc8>)
 8007844:	8018      	strh	r0, [r3, #0]
 8007846:	4620      	mov	r0, r4
 8007848:	f7fc fa30 	bl	8003cac <GUI_DEVICE__GetpDriver>
 800784c:	b1a8      	cbz	r0, 800787a <WM_Init+0x5e>
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	2302      	movs	r3, #2
 8007854:	2100      	movs	r1, #0
 8007856:	9602      	str	r6, [sp, #8]
 8007858:	e88d 000c 	stmia.w	sp, {r2, r3}
 800785c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8007860:	9103      	str	r1, [sp, #12]
 8007862:	4608      	mov	r0, r1
 8007864:	461a      	mov	r2, r3
 8007866:	f7ff fd87 	bl	8007378 <WM_CreateWindowAsChild>
 800786a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800786e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8007872:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8007876:	f7ff fd52 	bl	800731e <WM_InvalidateWindow>
 800787a:	3401      	adds	r4, #1
 800787c:	2c02      	cmp	r4, #2
 800787e:	d1e2      	bne.n	8007846 <WM_Init+0x2a>
 8007880:	4819      	ldr	r0, [pc, #100]	; (80078e8 <WM_Init+0xcc>)
 8007882:	f000 f8eb 	bl	8007a5c <WM__AddCriticalHandle>
 8007886:	4819      	ldr	r0, [pc, #100]	; (80078ec <WM_Init+0xd0>)
 8007888:	f000 f8e8 	bl	8007a5c <WM__AddCriticalHandle>
 800788c:	4818      	ldr	r0, [pc, #96]	; (80078f0 <WM_Init+0xd4>)
 800788e:	f000 f8e5 	bl	8007a5c <WM__AddCriticalHandle>
 8007892:	4818      	ldr	r0, [pc, #96]	; (80078f4 <WM_Init+0xd8>)
 8007894:	f000 f8e2 	bl	8007a5c <WM__AddCriticalHandle>
 8007898:	4817      	ldr	r0, [pc, #92]	; (80078f8 <WM_Init+0xdc>)
 800789a:	f000 f8df 	bl	8007a5c <WM__AddCriticalHandle>
 800789e:	4817      	ldr	r0, [pc, #92]	; (80078fc <WM_Init+0xe0>)
 80078a0:	f000 f8dc 	bl	8007a5c <WM__AddCriticalHandle>
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <WM_Init+0xc0>)
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	f7ff fd46 	bl	8007338 <WM_SelectWindow>
 80078ac:	f7ff ff56 	bl	800775c <WM_Activate>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4813      	ldr	r0, [pc, #76]	; (8007900 <WM_Init+0xe4>)
 80078b4:	702b      	strb	r3, [r5, #0]
 80078b6:	4b13      	ldr	r3, [pc, #76]	; (8007904 <WM_Init+0xe8>)
 80078b8:	626b      	str	r3, [r5, #36]	; 0x24
 80078ba:	b004      	add	sp, #16
 80078bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c0:	f7fc b9e0 	b.w	8003c84 <GUI__RegisterExit>
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ca:	bf00      	nop
 80078cc:	2402d410 	.word	0x2402d410
 80078d0:	2402d6b4 	.word	0x2402d6b4
 80078d4:	080077b5 	.word	0x080077b5
 80078d8:	24000028 	.word	0x24000028
 80078dc:	2402d698 	.word	0x2402d698
 80078e0:	2402d6b0 	.word	0x2402d6b0
 80078e4:	2402d690 	.word	0x2402d690
 80078e8:	2402d70c 	.word	0x2402d70c
 80078ec:	2402d6fc 	.word	0x2402d6fc
 80078f0:	2402d6ec 	.word	0x2402d6ec
 80078f4:	2402d714 	.word	0x2402d714
 80078f8:	2402d704 	.word	0x2402d704
 80078fc:	2402d6f4 	.word	0x2402d6f4
 8007900:	2402d434 	.word	0x2402d434
 8007904:	08006c69 	.word	0x08006c69
 8007908:	2402d6cc 	.word	0x2402d6cc

0800790c <WM_GetDesktopWindow>:
 800790c:	4b03      	ldr	r3, [pc, #12]	; (800791c <WM_GetDesktopWindow+0x10>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	7c5a      	ldrb	r2, [r3, #17]
 8007912:	4b03      	ldr	r3, [pc, #12]	; (8007920 <WM_GetDesktopWindow+0x14>)
 8007914:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	24000028 	.word	0x24000028
 8007920:	2402d698 	.word	0x2402d698

08007924 <WM_GetFirstChild>:
 8007924:	b508      	push	{r3, lr}
 8007926:	4603      	mov	r3, r0
 8007928:	b110      	cbz	r0, 8007930 <WM_GetFirstChild+0xc>
 800792a:	f7fb fd05 	bl	8003338 <GUI_ALLOC_h2p>
 800792e:	69c3      	ldr	r3, [r0, #28]
 8007930:	4618      	mov	r0, r3
 8007932:	bd08      	pop	{r3, pc}

08007934 <WM_GetParent>:
 8007934:	b508      	push	{r3, lr}
 8007936:	4603      	mov	r3, r0
 8007938:	b110      	cbz	r0, 8007940 <WM_GetParent+0xc>
 800793a:	f7fb fcfd 	bl	8003338 <GUI_ALLOC_h2p>
 800793e:	6983      	ldr	r3, [r0, #24]
 8007940:	4618      	mov	r0, r3
 8007942:	bd08      	pop	{r3, pc}

08007944 <WM_BringToBottom>:
 8007944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007948:	4604      	mov	r4, r0
 800794a:	b087      	sub	sp, #28
 800794c:	2800      	cmp	r0, #0
 800794e:	d039      	beq.n	80079c4 <WM_BringToBottom+0x80>
 8007950:	f7fb fcfc 	bl	800334c <GUI_ALLOC_LockH>
 8007954:	ad04      	add	r5, sp, #16
 8007956:	4603      	mov	r3, r0
 8007958:	9001      	str	r0, [sp, #4]
 800795a:	c803      	ldmia	r0, {r0, r1}
 800795c:	6a1e      	ldr	r6, [r3, #32]
 800795e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8007962:	e885 0003 	stmia.w	r5, {r0, r1}
 8007966:	a801      	add	r0, sp, #4
 8007968:	f7fb fcfe 	bl	8003368 <GUI_ALLOC_UnlockH>
 800796c:	4620      	mov	r0, r4
 800796e:	f000 f843 	bl	80079f8 <WM__GetPrevSibling>
 8007972:	4607      	mov	r7, r0
 8007974:	b330      	cbz	r0, 80079c4 <WM_BringToBottom+0x80>
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff ffdc 	bl	8007934 <WM_GetParent>
 800797c:	f019 0f02 	tst.w	r9, #2
 8007980:	4680      	mov	r8, r0
 8007982:	d004      	beq.n	800798e <WM_BringToBottom+0x4a>
 8007984:	4601      	mov	r1, r0
 8007986:	4632      	mov	r2, r6
 8007988:	4628      	mov	r0, r5
 800798a:	f7ff fc89 	bl	80072a0 <WM__InvalidateRectEx>
 800798e:	4620      	mov	r0, r4
 8007990:	f7fb fcdc 	bl	800334c <GUI_ALLOC_LockH>
 8007994:	9001      	str	r0, [sp, #4]
 8007996:	4640      	mov	r0, r8
 8007998:	f7fb fcd8 	bl	800334c <GUI_ALLOC_LockH>
 800799c:	9003      	str	r0, [sp, #12]
 800799e:	4638      	mov	r0, r7
 80079a0:	f7fb fcd4 	bl	800334c <GUI_ALLOC_LockH>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	9a01      	ldr	r2, [sp, #4]
 80079a8:	69d9      	ldr	r1, [r3, #28]
 80079aa:	6206      	str	r6, [r0, #32]
 80079ac:	9002      	str	r0, [sp, #8]
 80079ae:	a801      	add	r0, sp, #4
 80079b0:	6211      	str	r1, [r2, #32]
 80079b2:	61dc      	str	r4, [r3, #28]
 80079b4:	f7fb fcd8 	bl	8003368 <GUI_ALLOC_UnlockH>
 80079b8:	a803      	add	r0, sp, #12
 80079ba:	f7fb fcd5 	bl	8003368 <GUI_ALLOC_UnlockH>
 80079be:	a802      	add	r0, sp, #8
 80079c0:	f7fb fcd2 	bl	8003368 <GUI_ALLOC_UnlockH>
 80079c4:	b007      	add	sp, #28
 80079c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080079ca <WM_SendToParent>:
 80079ca:	b538      	push	{r3, r4, r5, lr}
 80079cc:	4605      	mov	r5, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	b141      	cbz	r1, 80079e4 <WM_SendToParent+0x1a>
 80079d2:	f7ff ffaf 	bl	8007934 <WM_GetParent>
 80079d6:	b128      	cbz	r0, 80079e4 <WM_SendToParent+0x1a>
 80079d8:	60a5      	str	r5, [r4, #8]
 80079da:	4621      	mov	r1, r4
 80079dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079e0:	f000 b81e 	b.w	8007a20 <WM__SendMessage>
 80079e4:	bd38      	pop	{r3, r4, r5, pc}

080079e6 <WM__GetFirstSibling>:
 80079e6:	b508      	push	{r3, lr}
 80079e8:	f7ff ffa4 	bl	8007934 <WM_GetParent>
 80079ec:	b118      	cbz	r0, 80079f6 <WM__GetFirstSibling+0x10>
 80079ee:	f7fb fca3 	bl	8003338 <GUI_ALLOC_h2p>
 80079f2:	69c0      	ldr	r0, [r0, #28]
 80079f4:	bd08      	pop	{r3, pc}
 80079f6:	bd08      	pop	{r3, pc}

080079f8 <WM__GetPrevSibling>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	f7ff fff3 	bl	80079e6 <WM__GetFirstSibling>
 8007a00:	4604      	mov	r4, r0
 8007a02:	b154      	cbz	r4, 8007a1a <WM__GetPrevSibling+0x22>
 8007a04:	42ac      	cmp	r4, r5
 8007a06:	d007      	beq.n	8007a18 <WM__GetPrevSibling+0x20>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7fb fc95 	bl	8003338 <GUI_ALLOC_h2p>
 8007a0e:	6a03      	ldr	r3, [r0, #32]
 8007a10:	429d      	cmp	r5, r3
 8007a12:	d002      	beq.n	8007a1a <WM__GetPrevSibling+0x22>
 8007a14:	461c      	mov	r4, r3
 8007a16:	e7f4      	b.n	8007a02 <WM__GetPrevSibling+0xa>
 8007a18:	2400      	movs	r4, #0
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a20 <WM__SendMessage>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	4c0d      	ldr	r4, [pc, #52]	; (8007a58 <WM__SendMessage+0x38>)
 8007a24:	4606      	mov	r6, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	2b13      	cmp	r3, #19
 8007a2c:	dc12      	bgt.n	8007a54 <WM__SendMessage+0x34>
 8007a2e:	f7fb fc83 	bl	8003338 <GUI_ALLOC_h2p>
 8007a32:	6902      	ldr	r2, [r0, #16]
 8007a34:	606e      	str	r6, [r5, #4]
 8007a36:	b142      	cbz	r2, 8007a4a <WM__SendMessage+0x2a>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	4790      	blx	r2
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a50:	f7ff be8c 	b.w	800776c <WM_DefaultProc>
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	bf00      	nop
 8007a58:	2402d440 	.word	0x2402d440

08007a5c <WM__AddCriticalHandle>:
 8007a5c:	4b02      	ldr	r3, [pc, #8]	; (8007a68 <WM__AddCriticalHandle+0xc>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	6002      	str	r2, [r0, #0]
 8007a62:	6018      	str	r0, [r3, #0]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	2402d6d4 	.word	0x2402d6d4

08007a6c <WM__GetClientRectEx>:
 8007a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a6e:	460d      	mov	r5, r1
 8007a70:	b158      	cbz	r0, 8007a8a <WM__GetClientRectEx+0x1e>
 8007a72:	b151      	cbz	r1, 8007a8a <WM__GetClientRectEx+0x1e>
 8007a74:	ac02      	add	r4, sp, #8
 8007a76:	f7fb fc69 	bl	800334c <GUI_ALLOC_LockH>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007a80:	f7ff fb2e 	bl	80070e0 <WM__GetClientRectWin>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f7fb fc6f 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007a8a:	b003      	add	sp, #12
 8007a8c:	bd30      	pop	{r4, r5, pc}

08007a8e <_GetIndexMask_0>:
 8007a8e:	b508      	push	{r3, lr}
 8007a90:	f7fc ff34 	bl	80048fc <LCD_GetNumColors>
 8007a94:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007a98:	d010      	beq.n	8007abc <_GetIndexMask_0+0x2e>
 8007a9a:	287f      	cmp	r0, #127	; 0x7f
 8007a9c:	d810      	bhi.n	8007ac0 <_GetIndexMask_0+0x32>
 8007a9e:	283f      	cmp	r0, #63	; 0x3f
 8007aa0:	d810      	bhi.n	8007ac4 <_GetIndexMask_0+0x36>
 8007aa2:	281f      	cmp	r0, #31
 8007aa4:	d810      	bhi.n	8007ac8 <_GetIndexMask_0+0x3a>
 8007aa6:	280f      	cmp	r0, #15
 8007aa8:	d810      	bhi.n	8007acc <_GetIndexMask_0+0x3e>
 8007aaa:	2807      	cmp	r0, #7
 8007aac:	d810      	bhi.n	8007ad0 <_GetIndexMask_0+0x42>
 8007aae:	2803      	cmp	r0, #3
 8007ab0:	d810      	bhi.n	8007ad4 <_GetIndexMask_0+0x46>
 8007ab2:	2801      	cmp	r0, #1
 8007ab4:	bf94      	ite	ls
 8007ab6:	2000      	movls	r0, #0
 8007ab8:	2001      	movhi	r0, #1
 8007aba:	e00c      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007abc:	2008      	movs	r0, #8
 8007abe:	e00a      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007ac0:	2007      	movs	r0, #7
 8007ac2:	e008      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007ac4:	2006      	movs	r0, #6
 8007ac6:	e006      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007ac8:	2005      	movs	r0, #5
 8007aca:	e004      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007acc:	2004      	movs	r0, #4
 8007ace:	e002      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007ad0:	2003      	movs	r0, #3
 8007ad2:	e000      	b.n	8007ad6 <_GetIndexMask_0+0x48>
 8007ad4:	2002      	movs	r0, #2
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8007adc:	3801      	subs	r0, #1
 8007ade:	bd08      	pop	{r3, pc}

08007ae0 <_Index2Color_0>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	f7fc ff0a 	bl	80048fc <LCD_GetNumColors>
 8007ae8:	4605      	mov	r5, r0
 8007aea:	f7fc ff25 	bl	8004938 <LCD_GetPalette>
 8007aee:	42a5      	cmp	r5, r4
 8007af0:	d903      	bls.n	8007afa <_Index2Color_0+0x1a>
 8007af2:	b118      	cbz	r0, 8007afc <_Index2Color_0+0x1c>
 8007af4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	2000      	movs	r0, #0
 8007afc:	bd38      	pop	{r3, r4, r5, pc}

08007afe <_Color2Index_0>:
 8007afe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b02:	4681      	mov	r9, r0
 8007b04:	f7fc fefa 	bl	80048fc <LCD_GetNumColors>
 8007b08:	4607      	mov	r7, r0
 8007b0a:	f7fc ff15 	bl	8004938 <LCD_GetPalette>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	b1e0      	cbz	r0, 8007b4c <_Color2Index_0+0x4e>
 8007b12:	2000      	movs	r0, #0
 8007b14:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8007b18:	454b      	cmp	r3, r9
 8007b1a:	d017      	beq.n	8007b4c <_Color2Index_0+0x4e>
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	4287      	cmp	r7, r0
 8007b20:	dcf8      	bgt.n	8007b14 <_Color2Index_0+0x16>
 8007b22:	2400      	movs	r4, #0
 8007b24:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8007b28:	4625      	mov	r5, r4
 8007b2a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8007b2e:	4648      	mov	r0, r9
 8007b30:	f7fb fe34 	bl	800379c <GUI_CalcColorDist>
 8007b34:	4580      	cmp	r8, r0
 8007b36:	bf88      	it	hi
 8007b38:	462c      	movhi	r4, r5
 8007b3a:	f105 0501 	add.w	r5, r5, #1
 8007b3e:	bf88      	it	hi
 8007b40:	4680      	movhi	r8, r0
 8007b42:	42af      	cmp	r7, r5
 8007b44:	dcf1      	bgt.n	8007b2a <_Color2Index_0+0x2c>
 8007b46:	4620      	mov	r0, r4
 8007b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007b50 <GUIMONO_DispChar>:
 8007b50:	4b4d      	ldr	r3, [pc, #308]	; (8007c88 <GUIMONO_DispChar+0x138>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	69d1      	ldr	r1, [r2, #28]
 8007b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	69cc      	ldr	r4, [r1, #28]
 8007b5c:	b08b      	sub	sp, #44	; 0x2c
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	4283      	cmp	r3, r0
 8007b62:	d808      	bhi.n	8007b76 <GUIMONO_DispChar+0x26>
 8007b64:	89e5      	ldrh	r5, [r4, #14]
 8007b66:	4285      	cmp	r5, r0
 8007b68:	d305      	bcc.n	8007b76 <GUIMONO_DispChar+0x26>
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	1ac3      	subs	r3, r0, r3
 8007b6e:	f04f 36ff 	mov.w	r6, #4294967295
 8007b72:	9506      	str	r5, [sp, #24]
 8007b74:	e013      	b.n	8007b9e <GUIMONO_DispChar+0x4e>
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d07c      	beq.n	8007c76 <GUIMONO_DispChar+0x126>
 8007b7c:	881d      	ldrh	r5, [r3, #0]
 8007b7e:	42a8      	cmp	r0, r5
 8007b80:	d379      	bcc.n	8007c76 <GUIMONO_DispChar+0x126>
 8007b82:	885e      	ldrh	r6, [r3, #2]
 8007b84:	4286      	cmp	r6, r0
 8007b86:	d376      	bcc.n	8007c76 <GUIMONO_DispChar+0x126>
 8007b88:	1b40      	subs	r0, r0, r5
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	6866      	ldr	r6, [r4, #4]
 8007b8e:	b280      	uxth	r0, r0
 8007b90:	9606      	str	r6, [sp, #24]
 8007b92:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8007b96:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8007b9a:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8007b9e:	1c58      	adds	r0, r3, #1
 8007ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba2:	d068      	beq.n	8007c76 <GUIMONO_DispChar+0x126>
 8007ba4:	f891 b018 	ldrb.w	fp, [r1, #24]
 8007ba8:	7ca1      	ldrb	r1, [r4, #18]
 8007baa:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8007bae:	fb1b f301 	smulbb	r3, fp, r1
 8007bb2:	4d35      	ldr	r5, [pc, #212]	; (8007c88 <GUIMONO_DispChar+0x138>)
 8007bb4:	4648      	mov	r0, r9
 8007bb6:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8007bba:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8007bbe:	9307      	str	r3, [sp, #28]
 8007bc0:	f894 a010 	ldrb.w	sl, [r4, #16]
 8007bc4:	f7fc fa64 	bl	8004090 <LCD_SetDrawMode>
 8007bc8:	6829      	ldr	r1, [r5, #0]
 8007bca:	9b07      	ldr	r3, [sp, #28]
 8007bcc:	69ca      	ldr	r2, [r1, #28]
 8007bce:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8007bd0:	9008      	str	r0, [sp, #32]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	9105      	str	r1, [sp, #20]
 8007bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd8:	9906      	ldr	r1, [sp, #24]
 8007bda:	fb00 1003 	mla	r0, r0, r3, r1
 8007bde:	4641      	mov	r1, r8
 8007be0:	9004      	str	r0, [sp, #16]
 8007be2:	4638      	mov	r0, r7
 8007be4:	7ca3      	ldrb	r3, [r4, #18]
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	2301      	movs	r3, #1
 8007bea:	9302      	str	r3, [sp, #8]
 8007bec:	7ed3      	ldrb	r3, [r2, #27]
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	7e93      	ldrb	r3, [r2, #26]
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	465b      	mov	r3, fp
 8007bf8:	f7fc fbc0 	bl	800437c <LCD_DrawBitmap>
 8007bfc:	1c73      	adds	r3, r6, #1
 8007bfe:	d01a      	beq.n	8007c36 <GUIMONO_DispChar+0xe6>
 8007c00:	f049 0002 	orr.w	r0, r9, #2
 8007c04:	f7fc fa44 	bl	8004090 <LCD_SetDrawMode>
 8007c08:	682a      	ldr	r2, [r5, #0]
 8007c0a:	9906      	ldr	r1, [sp, #24]
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	69d3      	ldr	r3, [r2, #28]
 8007c10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c12:	9205      	str	r2, [sp, #20]
 8007c14:	9a07      	ldr	r2, [sp, #28]
 8007c16:	fb02 1606 	mla	r6, r2, r6, r1
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	9604      	str	r6, [sp, #16]
 8007c1e:	7ca2      	ldrb	r2, [r4, #18]
 8007c20:	9203      	str	r2, [sp, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	9202      	str	r2, [sp, #8]
 8007c26:	7eda      	ldrb	r2, [r3, #27]
 8007c28:	9201      	str	r2, [sp, #4]
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	7e9b      	ldrb	r3, [r3, #26]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	465b      	mov	r3, fp
 8007c32:	f7fc fba3 	bl	800437c <LCD_DrawBitmap>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	7e5a      	ldrb	r2, [r3, #25]
 8007c3c:	7e1b      	ldrb	r3, [r3, #24]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d915      	bls.n	8007c6e <GUIMONO_DispChar+0x11e>
 8007c42:	f1b9 0f02 	cmp.w	r9, #2
 8007c46:	d012      	beq.n	8007c6e <GUIMONO_DispChar+0x11e>
 8007c48:	f089 0004 	eor.w	r0, r9, #4
 8007c4c:	f7fc fa20 	bl	8004090 <LCD_SetDrawMode>
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <GUIMONO_DispChar+0x138>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	7e18      	ldrb	r0, [r3, #24]
 8007c58:	7ed9      	ldrb	r1, [r3, #27]
 8007c5a:	7e9a      	ldrb	r2, [r3, #26]
 8007c5c:	7e5b      	ldrb	r3, [r3, #25]
 8007c5e:	fb00 8101 	mla	r1, r0, r1, r8
 8007c62:	fb0a 7202 	mla	r2, sl, r2, r7
 8007c66:	4638      	mov	r0, r7
 8007c68:	4443      	add	r3, r8
 8007c6a:	f7fc fa6f 	bl	800414c <LCD_FillRect>
 8007c6e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8007c72:	f7fc fa0d 	bl	8004090 <LCD_SetDrawMode>
 8007c76:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <GUIMONO_DispChar+0x138>)
 8007c78:	7c61      	ldrb	r1, [r4, #17]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8007c7e:	440b      	add	r3, r1
 8007c80:	8453      	strh	r3, [r2, #34]	; 0x22
 8007c82:	b00b      	add	sp, #44	; 0x2c
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	24000028 	.word	0x24000028

08007c8c <GUIMONO_GetCharDistX>:
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <GUIMONO_GetCharDistX+0x14>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	b109      	cbz	r1, 8007c9a <GUIMONO_GetCharDistX+0xe>
 8007c96:	7c1a      	ldrb	r2, [r3, #16]
 8007c98:	600a      	str	r2, [r1, #0]
 8007c9a:	7c58      	ldrb	r0, [r3, #17]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	24000028 	.word	0x24000028

08007ca4 <GUIMONO_GetFontInfo>:
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	800b      	strh	r3, [r1, #0]
 8007ca8:	4770      	bx	lr

08007caa <GUIMONO_IsInFont>:
 8007caa:	69c3      	ldr	r3, [r0, #28]
 8007cac:	899a      	ldrh	r2, [r3, #12]
 8007cae:	428a      	cmp	r2, r1
 8007cb0:	d802      	bhi.n	8007cb8 <GUIMONO_IsInFont+0xe>
 8007cb2:	89da      	ldrh	r2, [r3, #14]
 8007cb4:	428a      	cmp	r2, r1
 8007cb6:	d20f      	bcs.n	8007cd8 <GUIMONO_IsInFont+0x2e>
 8007cb8:	6898      	ldr	r0, [r3, #8]
 8007cba:	b180      	cbz	r0, 8007cde <GUIMONO_IsInFont+0x34>
 8007cbc:	8803      	ldrh	r3, [r0, #0]
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	d30c      	bcc.n	8007cdc <GUIMONO_IsInFont+0x32>
 8007cc2:	8842      	ldrh	r2, [r0, #2]
 8007cc4:	428a      	cmp	r2, r1
 8007cc6:	d309      	bcc.n	8007cdc <GUIMONO_IsInFont+0x32>
 8007cc8:	1ac9      	subs	r1, r1, r3
 8007cca:	6843      	ldr	r3, [r0, #4]
 8007ccc:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8007cd0:	43c0      	mvns	r0, r0
 8007cd2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8007cd6:	4770      	bx	lr
 8007cd8:	2001      	movs	r0, #1
 8007cda:	4770      	bx	lr
 8007cdc:	2000      	movs	r0, #0
 8007cde:	4770      	bx	lr

08007ce0 <GUI__CompactPixelIndices>:
 8007ce0:	2a08      	cmp	r2, #8
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	dd0e      	ble.n	8007d04 <GUI__CompactPixelIndices+0x24>
 8007ce6:	2a10      	cmp	r2, #16
 8007ce8:	dc0a      	bgt.n	8007d00 <GUI__CompactPixelIndices+0x20>
 8007cea:	4603      	mov	r3, r0
 8007cec:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007cf0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cf4:	f823 2b02 	strh.w	r2, [r3], #2
 8007cf8:	428b      	cmp	r3, r1
 8007cfa:	d1f9      	bne.n	8007cf0 <GUI__CompactPixelIndices+0x10>
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	bd10      	pop	{r4, pc}
 8007d00:	2000      	movs	r0, #0
 8007d02:	bd10      	pop	{r4, pc}
 8007d04:	2a02      	cmp	r2, #2
 8007d06:	d12a      	bne.n	8007d5e <GUI__CompactPixelIndices+0x7e>
 8007d08:	4604      	mov	r4, r0
 8007d0a:	6803      	ldr	r3, [r0, #0]
 8007d0c:	2901      	cmp	r1, #1
 8007d0e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	d020      	beq.n	8007d58 <GUI__CompactPixelIndices+0x78>
 8007d16:	6842      	ldr	r2, [r0, #4]
 8007d18:	2902      	cmp	r1, #2
 8007d1a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8007d1e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007d22:	ea43 0302 	orr.w	r3, r3, r2
 8007d26:	d101      	bne.n	8007d2c <GUI__CompactPixelIndices+0x4c>
 8007d28:	3008      	adds	r0, #8
 8007d2a:	e016      	b.n	8007d5a <GUI__CompactPixelIndices+0x7a>
 8007d2c:	6882      	ldr	r2, [r0, #8]
 8007d2e:	2903      	cmp	r1, #3
 8007d30:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007d34:	f002 020c 	and.w	r2, r2, #12
 8007d38:	ea43 0302 	orr.w	r3, r3, r2
 8007d3c:	d101      	bne.n	8007d42 <GUI__CompactPixelIndices+0x62>
 8007d3e:	300c      	adds	r0, #12
 8007d40:	e00b      	b.n	8007d5a <GUI__CompactPixelIndices+0x7a>
 8007d42:	68c2      	ldr	r2, [r0, #12]
 8007d44:	3904      	subs	r1, #4
 8007d46:	3010      	adds	r0, #16
 8007d48:	f002 0203 	and.w	r2, r2, #3
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f804 3b01 	strb.w	r3, [r4], #1
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d1d9      	bne.n	8007d0a <GUI__CompactPixelIndices+0x2a>
 8007d56:	e7d1      	b.n	8007cfc <GUI__CompactPixelIndices+0x1c>
 8007d58:	3004      	adds	r0, #4
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	e7f7      	b.n	8007d4e <GUI__CompactPixelIndices+0x6e>
 8007d5e:	2a04      	cmp	r2, #4
 8007d60:	d115      	bne.n	8007d8e <GUI__CompactPixelIndices+0xae>
 8007d62:	4604      	mov	r4, r0
 8007d64:	2901      	cmp	r1, #1
 8007d66:	6803      	ldr	r3, [r0, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	6842      	ldrne	r2, [r0, #4]
 8007d6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007d70:	bf0c      	ite	eq
 8007d72:	2100      	moveq	r1, #0
 8007d74:	3902      	subne	r1, #2
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	bf17      	itett	ne
 8007d7a:	f002 020f 	andne.w	r2, r2, #15
 8007d7e:	3004      	addeq	r0, #4
 8007d80:	3008      	addne	r0, #8
 8007d82:	4313      	orrne	r3, r2
 8007d84:	f804 3b01 	strb.w	r3, [r4], #1
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d1eb      	bne.n	8007d64 <GUI__CompactPixelIndices+0x84>
 8007d8c:	e7b6      	b.n	8007cfc <GUI__CompactPixelIndices+0x1c>
 8007d8e:	2a01      	cmp	r2, #1
 8007d90:	4603      	mov	r3, r0
 8007d92:	d154      	bne.n	8007e3e <GUI__CompactPixelIndices+0x15e>
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	2901      	cmp	r1, #1
 8007d98:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	d04b      	beq.n	8007e38 <GUI__CompactPixelIndices+0x158>
 8007da0:	685c      	ldr	r4, [r3, #4]
 8007da2:	2902      	cmp	r1, #2
 8007da4:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8007da8:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8007dac:	ea42 0204 	orr.w	r2, r2, r4
 8007db0:	d101      	bne.n	8007db6 <GUI__CompactPixelIndices+0xd6>
 8007db2:	3308      	adds	r3, #8
 8007db4:	e041      	b.n	8007e3a <GUI__CompactPixelIndices+0x15a>
 8007db6:	689c      	ldr	r4, [r3, #8]
 8007db8:	2903      	cmp	r1, #3
 8007dba:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8007dbe:	f004 0420 	and.w	r4, r4, #32
 8007dc2:	ea42 0204 	orr.w	r2, r2, r4
 8007dc6:	d101      	bne.n	8007dcc <GUI__CompactPixelIndices+0xec>
 8007dc8:	330c      	adds	r3, #12
 8007dca:	e036      	b.n	8007e3a <GUI__CompactPixelIndices+0x15a>
 8007dcc:	68dc      	ldr	r4, [r3, #12]
 8007dce:	2904      	cmp	r1, #4
 8007dd0:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8007dd4:	f004 0410 	and.w	r4, r4, #16
 8007dd8:	ea42 0204 	orr.w	r2, r2, r4
 8007ddc:	d101      	bne.n	8007de2 <GUI__CompactPixelIndices+0x102>
 8007dde:	3310      	adds	r3, #16
 8007de0:	e02b      	b.n	8007e3a <GUI__CompactPixelIndices+0x15a>
 8007de2:	691c      	ldr	r4, [r3, #16]
 8007de4:	2905      	cmp	r1, #5
 8007de6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8007dea:	f004 0408 	and.w	r4, r4, #8
 8007dee:	ea42 0204 	orr.w	r2, r2, r4
 8007df2:	d101      	bne.n	8007df8 <GUI__CompactPixelIndices+0x118>
 8007df4:	3314      	adds	r3, #20
 8007df6:	e020      	b.n	8007e3a <GUI__CompactPixelIndices+0x15a>
 8007df8:	695c      	ldr	r4, [r3, #20]
 8007dfa:	2906      	cmp	r1, #6
 8007dfc:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8007e00:	f004 0404 	and.w	r4, r4, #4
 8007e04:	ea42 0204 	orr.w	r2, r2, r4
 8007e08:	d101      	bne.n	8007e0e <GUI__CompactPixelIndices+0x12e>
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	e015      	b.n	8007e3a <GUI__CompactPixelIndices+0x15a>
 8007e0e:	699c      	ldr	r4, [r3, #24]
 8007e10:	3907      	subs	r1, #7
 8007e12:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007e16:	bf08      	it	eq
 8007e18:	331c      	addeq	r3, #28
 8007e1a:	f004 0402 	and.w	r4, r4, #2
 8007e1e:	ea42 0204 	orr.w	r2, r2, r4
 8007e22:	bf1f      	itttt	ne
 8007e24:	69dc      	ldrne	r4, [r3, #28]
 8007e26:	3320      	addne	r3, #32
 8007e28:	f004 0401 	andne.w	r4, r4, #1
 8007e2c:	4322      	orrne	r2, r4
 8007e2e:	f800 2b01 	strb.w	r2, [r0], #1
 8007e32:	2900      	cmp	r1, #0
 8007e34:	d1ae      	bne.n	8007d94 <GUI__CompactPixelIndices+0xb4>
 8007e36:	e761      	b.n	8007cfc <GUI__CompactPixelIndices+0x1c>
 8007e38:	3304      	adds	r3, #4
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	e7f7      	b.n	8007e2e <GUI__CompactPixelIndices+0x14e>
 8007e3e:	4401      	add	r1, r0
 8007e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e44:	f803 2b01 	strb.w	r2, [r3], #1
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d1f9      	bne.n	8007e40 <GUI__CompactPixelIndices+0x160>
 8007e4c:	e756      	b.n	8007cfc <GUI__CompactPixelIndices+0x1c>
	...

08007e50 <LCD_SetClipRectEx>:
 8007e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e52:	4c09      	ldr	r4, [pc, #36]	; (8007e78 <LCD_SetClipRectEx+0x28>)
 8007e54:	4605      	mov	r5, r0
 8007e56:	4669      	mov	r1, sp
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	7c5a      	ldrb	r2, [r3, #17]
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <LCD_SetClipRectEx+0x2c>)
 8007e5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007e62:	68c3      	ldr	r3, [r0, #12]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	4798      	blx	r3
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	466a      	mov	r2, sp
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	3008      	adds	r0, #8
 8007e70:	f7fc f86f 	bl	8003f52 <GUI__IntersectRects>
 8007e74:	b003      	add	sp, #12
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	24000028 	.word	0x24000028
 8007e7c:	2402d67c 	.word	0x2402d67c

08007e80 <GUI_MEMDEV_GetBitsPerPixel>:
 8007e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e82:	4604      	mov	r4, r0
 8007e84:	b170      	cbz	r0, 8007ea4 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8007e86:	f7fb fa61 	bl	800334c <GUI_ALLOC_LockH>
 8007e8a:	6803      	ldr	r3, [r0, #0]
 8007e8c:	ad02      	add	r5, sp, #8
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f845 0d04 	str.w	r0, [r5, #-4]!
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	4798      	blx	r3
 8007e98:	f7fc fdbd 	bl	8004a16 <LCD__GetBPPDevice>
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7fb fa62 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	b003      	add	sp, #12
 8007ea8:	bd30      	pop	{r4, r5, pc}
	...

08007eac <GUI_MEMDEV_Delete>:
 8007eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eae:	4604      	mov	r4, r0
 8007eb0:	b1d0      	cbz	r0, 8007ee8 <GUI_MEMDEV_Delete+0x3c>
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <GUI_MEMDEV_Delete+0x40>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb8:	4298      	cmp	r0, r3
 8007eba:	d101      	bne.n	8007ec0 <GUI_MEMDEV_Delete+0x14>
 8007ebc:	f7fb fd09 	bl	80038d2 <GUI_SelectLCD>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7fb fa43 	bl	800334c <GUI_ALLOC_LockH>
 8007ec6:	9001      	str	r0, [sp, #4]
 8007ec8:	6940      	ldr	r0, [r0, #20]
 8007eca:	b108      	cbz	r0, 8007ed0 <GUI_MEMDEV_Delete+0x24>
 8007ecc:	f7fe fabe 	bl	800644c <GUI_USAGE_DecUseCnt>
 8007ed0:	ad02      	add	r5, sp, #8
 8007ed2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	f7fb fef8 	bl	8003ccc <GUI_DEVICE_Delete>
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7fb fa43 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7fb fa60 	bl	80033a8 <GUI_ALLOC_Free>
 8007ee8:	b003      	add	sp, #12
 8007eea:	bd30      	pop	{r4, r5, pc}
 8007eec:	24000028 	.word	0x24000028

08007ef0 <GUI_MEMDEV_GetDataPtr>:
 8007ef0:	b513      	push	{r0, r1, r4, lr}
 8007ef2:	b158      	cbz	r0, 8007f0c <GUI_MEMDEV_GetDataPtr+0x1c>
 8007ef4:	f7fb fa2a 	bl	800334c <GUI_ALLOC_LockH>
 8007ef8:	ab02      	add	r3, sp, #8
 8007efa:	f100 0418 	add.w	r4, r0, #24
 8007efe:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fb fa30 	bl	8003368 <GUI_ALLOC_UnlockH>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	e7ff      	b.n	8007f0c <GUI_MEMDEV_GetDataPtr+0x1c>
 8007f0c:	b002      	add	sp, #8
 8007f0e:	bd10      	pop	{r4, pc}

08007f10 <__libc_init_array>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	4e0d      	ldr	r6, [pc, #52]	; (8007f48 <__libc_init_array+0x38>)
 8007f14:	4c0d      	ldr	r4, [pc, #52]	; (8007f4c <__libc_init_array+0x3c>)
 8007f16:	1ba4      	subs	r4, r4, r6
 8007f18:	10a4      	asrs	r4, r4, #2
 8007f1a:	2500      	movs	r5, #0
 8007f1c:	42a5      	cmp	r5, r4
 8007f1e:	d109      	bne.n	8007f34 <__libc_init_array+0x24>
 8007f20:	4e0b      	ldr	r6, [pc, #44]	; (8007f50 <__libc_init_array+0x40>)
 8007f22:	4c0c      	ldr	r4, [pc, #48]	; (8007f54 <__libc_init_array+0x44>)
 8007f24:	f000 f844 	bl	8007fb0 <_init>
 8007f28:	1ba4      	subs	r4, r4, r6
 8007f2a:	10a4      	asrs	r4, r4, #2
 8007f2c:	2500      	movs	r5, #0
 8007f2e:	42a5      	cmp	r5, r4
 8007f30:	d105      	bne.n	8007f3e <__libc_init_array+0x2e>
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f38:	4798      	blx	r3
 8007f3a:	3501      	adds	r5, #1
 8007f3c:	e7ee      	b.n	8007f1c <__libc_init_array+0xc>
 8007f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f42:	4798      	blx	r3
 8007f44:	3501      	adds	r5, #1
 8007f46:	e7f2      	b.n	8007f2e <__libc_init_array+0x1e>
 8007f48:	08008c90 	.word	0x08008c90
 8007f4c:	08008c90 	.word	0x08008c90
 8007f50:	08008c90 	.word	0x08008c90
 8007f54:	08008c94 	.word	0x08008c94

08007f58 <memcpy>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	1e43      	subs	r3, r0, #1
 8007f5c:	440a      	add	r2, r1
 8007f5e:	4291      	cmp	r1, r2
 8007f60:	d100      	bne.n	8007f64 <memcpy+0xc>
 8007f62:	bd10      	pop	{r4, pc}
 8007f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f6c:	e7f7      	b.n	8007f5e <memcpy+0x6>

08007f6e <memmove>:
 8007f6e:	4288      	cmp	r0, r1
 8007f70:	b510      	push	{r4, lr}
 8007f72:	eb01 0302 	add.w	r3, r1, r2
 8007f76:	d807      	bhi.n	8007f88 <memmove+0x1a>
 8007f78:	1e42      	subs	r2, r0, #1
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	d00a      	beq.n	8007f94 <memmove+0x26>
 8007f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f86:	e7f8      	b.n	8007f7a <memmove+0xc>
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d9f5      	bls.n	8007f78 <memmove+0xa>
 8007f8c:	1881      	adds	r1, r0, r2
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	42d3      	cmn	r3, r2
 8007f92:	d100      	bne.n	8007f96 <memmove+0x28>
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f9e:	e7f7      	b.n	8007f90 <memmove+0x22>

08007fa0 <memset>:
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d100      	bne.n	8007faa <memset+0xa>
 8007fa8:	4770      	bx	lr
 8007faa:	f803 1b01 	strb.w	r1, [r3], #1
 8007fae:	e7f9      	b.n	8007fa4 <memset+0x4>

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
