
STemWin_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004740  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c898  0800c898  0001c898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c89c  0800c89c  0001c89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  24000000  0800c8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .GUI_NUMBYTES_section 0002d000  2400003c  0800c8dc  0002003c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000694  2402d03c  080398dc  0004d03c  2**2
                  ALLOC
  8 ._user_heap_stack 00006200  2402d6d0  080398dc  0004d6d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004d03c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000e392  00000000  00000000  0004d06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00027866  00000000  00000000  0005b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003bdd  00000000  00000000  00082c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c30  00000000  00000000  00086840  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00182aa4  00000000  00000000  00087470  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  00209f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00007890  00000000  00000000  0020ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003ba15  00000000  00000000  002125f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  0024e005  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002024  00000000  00000000  0024e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2402d03c 	.word	0x2402d03c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008140 	.word	0x08008140

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2402d040 	.word	0x2402d040
 80002d4:	08008140 	.word	0x08008140

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002de:	e003      	b.n	80002e8 <LoopCopyDataInit>

080002e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002e6:	3104      	adds	r1, #4

080002e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f0:	d3f6      	bcc.n	80002e0 <CopyDataInit>
  ldr  r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002f4:	e002      	b.n	80002fc <LoopFillZerobss>

080002f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002f8:	f842 3b04 	str.w	r3, [r2], #4

080002fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000300:	d3f9      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000302:	f000 faed 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000306:	f007 fecb 	bl	80080a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 f80f 	bl	800032c <main>
  bx  lr    
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000314:	0800c8a0 	.word	0x0800c8a0
  ldr  r0, =_sdata
 8000318:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800031c:	2400003c 	.word	0x2400003c
  ldr  r2, =_sbss
 8000320:	2402d03c 	.word	0x2402d03c
  ldr  r3, = _ebss
 8000324:	2402d6d0 	.word	0x2402d6d0

08000328 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>
	...

0800032c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09e      	sub	sp, #120	; 0x78
static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 8000330:	f000 fbf4 	bl	8000b1c <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000334:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.BaseAddress      = SDRAM_DEVICE_ADDR;
 8000338:	f04f 4c50 	mov.w	ip, #3489660928	; 0xd0000000
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800033c:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800033e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.BaseAddress      = SDRAM_DEVICE_ADDR;
 8000342:	4b5e      	ldr	r3, [pc, #376]	; (80004bc <main+0x190>)
 8000344:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000348:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800034c:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800034e:	f000 fc07 	bl	8000b60 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000352:	2004      	movs	r0, #4
 8000354:	f000 fbf2 	bl	8000b3c <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800035c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000360:	4b57      	ldr	r3, [pc, #348]	; (80004c0 <main+0x194>)
 8000362:	2100      	movs	r1, #0
 8000364:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800036c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000376:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800037c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000380:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000384:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000388:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800038c:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000390:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000394:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000398:	07a5      	lsls	r5, r4, #30
 800039a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800039c:	ea02 0c06 	and.w	ip, r2, r6
 80003a0:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003a2:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003a4:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003a8:	3901      	subs	r1, #1
 80003aa:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003ae:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80003b2:	1c4f      	adds	r7, r1, #1
 80003b4:	d1f6      	bne.n	80003a4 <main+0x78>
 80003b6:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80003b8:	f112 0f20 	cmn.w	r2, #32
 80003bc:	d1ee      	bne.n	800039c <main+0x70>
 80003be:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003c2:	695a      	ldr	r2, [r3, #20]
 80003c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003c8:	615a      	str	r2, [r3, #20]
 80003ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003ce:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80003d2:	f000 faed 	bl	80009b0 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d6:	2002      	movs	r0, #2
 80003d8:	f001 f86a 	bl	80014b0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003dc:	2300      	movs	r3, #0
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <main+0x198>)
 80003e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003e4:	f022 0201 	bic.w	r2, r2, #1
 80003e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	9301      	str	r3, [sp, #4]
 80003f2:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <main+0x19c>)
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003fa:	619a      	str	r2, [r3, #24]
 80003fc:	699a      	ldr	r2, [r3, #24]
 80003fe:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000402:	9201      	str	r2, [sp, #4]
 8000404:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000406:	699a      	ldr	r2, [r3, #24]
 8000408:	0494      	lsls	r4, r2, #18
 800040a:	d5fc      	bpl.n	8000406 <main+0xda>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040c:	2101      	movs	r1, #1
 800040e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000412:	2005      	movs	r0, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000416:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000418:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
 800041a:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 800041c:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800041e:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000420:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000422:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000426:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000428:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 160;
 800042a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800042e:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000430:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000432:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000434:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000436:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000438:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800043c:	f001 f85c 	bl	80014f8 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000440:	b100      	cbz	r0, 8000444 <main+0x118>
 8000442:	e7fe      	b.n	8000442 <main+0x116>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000444:	223f      	movs	r2, #63	; 0x3f
 8000446:	2303      	movs	r3, #3
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000448:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800044e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000450:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000454:	e9cd 0505 	strd	r0, r5, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000458:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800045a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800045e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000462:	f001 fb7d 	bl	8001b60 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000466:	4605      	mov	r5, r0
 8000468:	b100      	cbz	r0, 800046c <main+0x140>
 800046a:	e7fe      	b.n	800046a <main+0x13e>
  __HAL_RCC_CSI_ENABLE() ;
 800046c:	4c17      	ldr	r4, [pc, #92]	; (80004cc <main+0x1a0>)
 800046e:	6823      	ldr	r3, [r4, #0]
 8000470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000474:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000476:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800047a:	f043 0302 	orr.w	r3, r3, #2
 800047e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8000482:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();  
 800048e:	f000 fad5 	bl	8000a3c <HAL_EnableCompensationCell>
  BSP_SDRAM_Init(0);  
 8000492:	4628      	mov	r0, r5
 8000494:	f000 f91a 	bl	80006cc <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8000498:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800049c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004a0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80004a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80004a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80004ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GUI_Init();  
 80004b0:	f003 fb34 	bl	8003b1c <GUI_Init>
	  disegnaCerchio();
 80004b4:	f000 f822 	bl	80004fc <disegnaCerchio>
 80004b8:	e7fc      	b.n	80004b4 <main+0x188>
 80004ba:	bf00      	nop
 80004bc:	03000018 	.word	0x03000018
 80004c0:	e000ed00 	.word	0xe000ed00
 80004c4:	58000400 	.word	0x58000400
 80004c8:	58024800 	.word	0x58024800
 80004cc:	58024400 	.word	0x58024400

080004d0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80004d0:	4770      	bx	lr

080004d2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004d2:	e7fe      	b.n	80004d2 <HardFault_Handler>

080004d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler>

080004d6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler>

080004d8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004d8:	e7fe      	b.n	80004d8 <UsageFault_Handler>

080004da <DebugMon_Handler>:
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004dc:	b508      	push	{r3, lr}
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 80004de:	f000 fa95 	bl	8000a0c <HAL_IncTick>
  
  OS_TimeMS++;
 80004e2:	4a02      	ldr	r2, [pc, #8]	; (80004ec <SysTick_Handler+0x10>)
 80004e4:	6813      	ldr	r3, [r2, #0]
 80004e6:	3301      	adds	r3, #1
 80004e8:	6013      	str	r3, [r2, #0]
}
 80004ea:	bd08      	pop	{r3, pc}
 80004ec:	2402d474 	.word	0x2402d474

080004f0 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <LTDC_IRQHandler+0x8>)
 80004f2:	f000 bd85 	b.w	8001000 <HAL_LTDC_IRQHandler>
 80004f6:	bf00      	nop
 80004f8:	2402d478 	.word	0x2402d478

080004fc <disegnaCerchio>:
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
  while(1) {};
}

int var=0;
void disegnaCerchio(void) {
 80004fc:	b538      	push	{r3, r4, r5, lr}
  GUI_SetLayerVisEx (1, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2001      	movs	r0, #1
 8000502:	f003 fd05 	bl	8003f10 <GUI_SetLayerVisEx>
  GUI_SetBkColor(GUI_BLACK);
 8000506:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800050a:	f003 f9ef 	bl	80038ec <GUI_SetBkColor>
  GUI_Clear();
  GUI_SetColor(GUI_WHITE);
  GUI_SetFont(&GUI_Font32_1);
  var++;
 800050e:	4d0e      	ldr	r5, [pc, #56]	; (8000548 <disegnaCerchio+0x4c>)
  GUI_Clear();
 8000510:	f003 faaa 	bl	8003a68 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8000514:	f04f 30ff 	mov.w	r0, #4294967295
 8000518:	f003 f9ea 	bl	80038f0 <GUI_SetColor>
  GUI_SetFont(&GUI_Font32_1);
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <disegnaCerchio+0x50>)
 800051e:	f003 f9e9 	bl	80038f4 <GUI_SetFont>
  var++;
 8000522:	682b      	ldr	r3, [r5, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	602b      	str	r3, [r5, #0]
  GUI_DrawCircle((LCD_GetXSize()-100)/2, (LCD_GetYSize()-20), var);
 8000528:	f004 f9f8 	bl	800491c <LCD_GetXSize>
 800052c:	4604      	mov	r4, r0
 800052e:	f004 f9fd 	bl	800492c <LCD_GetYSize>
 8000532:	f1a0 0114 	sub.w	r1, r0, #20
 8000536:	2002      	movs	r0, #2
 8000538:	3c64      	subs	r4, #100	; 0x64
 800053a:	682a      	ldr	r2, [r5, #0]
 800053c:	fb94 f0f0 	sdiv	r0, r4, r0

}
 8000540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  GUI_DrawCircle((LCD_GetXSize()-100)/2, (LCD_GetYSize()-20), var);
 8000544:	f003 b8f8 	b.w	8003738 <GUI_DrawCircle>
 8000548:	2402d058 	.word	0x2402d058
 800054c:	08008558 	.word	0x08008558

08000550 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000550:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8000552:	2201      	movs	r2, #1
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <IS42S32800G_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8000556:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800055a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800055c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800055e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8000560:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000566:	f002 f999 	bl	800289c <HAL_SDRAM_SendCommand>
 800056a:	3000      	adds	r0, #0
 800056c:	bf18      	it	ne
 800056e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000570:	4240      	negs	r0, r0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	2402d05c 	.word	0x2402d05c

08000578 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000578:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 800057a:	2202      	movs	r2, #2
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <IS42S32800G_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800057e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8000582:	2101      	movs	r1, #1
 8000584:	2200      	movs	r2, #0
 8000586:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800058a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058e:	4619      	mov	r1, r3
 8000590:	f002 f984 	bl	800289c <HAL_SDRAM_SendCommand>
 8000594:	3000      	adds	r0, #0
 8000596:	bf18      	it	ne
 8000598:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 800059a:	4240      	negs	r0, r0
 800059c:	bd08      	pop	{r3, pc}
 800059e:	bf00      	nop
 80005a0:	2402d05c 	.word	0x2402d05c

080005a4 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80005a4:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005a6:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80005aa:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005ac:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80005ae:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80005b0:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80005b2:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80005b4:	6991      	ldr	r1, [r2, #24]
 80005b6:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005b8:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80005ba:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80005bc:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80005be:	4907      	ldr	r1, [pc, #28]	; (80005dc <IS42S32800G_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80005c0:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80005c2:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80005c4:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80005c6:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ce:	f002 f965 	bl	800289c <HAL_SDRAM_SendCommand>
 80005d2:	3000      	adds	r0, #0
 80005d4:	bf18      	it	ne
 80005d6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80005d8:	4240      	negs	r0, r0
 80005da:	bd10      	pop	{r4, pc}
 80005dc:	2402d05c 	.word	0x2402d05c

080005e0 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 80005e0:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <IS42S32800G_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80005e4:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80005e8:	2108      	movs	r1, #8
 80005ea:	2200      	movs	r2, #0
 80005ec:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80005f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f4:	4619      	mov	r1, r3
 80005f6:	f002 f951 	bl	800289c <HAL_SDRAM_SendCommand>
 80005fa:	3000      	adds	r0, #0
 80005fc:	bf18      	it	ne
 80005fe:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000600:	4240      	negs	r0, r0
 8000602:	bd08      	pop	{r3, pc}
 8000604:	2402d05c 	.word	0x2402d05c

08000608 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8000608:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800060a:	f002 f966 	bl	80028da <HAL_SDRAM_ProgramRefreshRate>
 800060e:	3000      	adds	r0, #0
 8000610:	bf18      	it	ne
 8000612:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000614:	4240      	negs	r0, r0
 8000616:	bd08      	pop	{r3, pc}

08000618 <IS42S32800G_Init>:
{
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	460c      	mov	r4, r1
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 800061c:	6809      	ldr	r1, [r1, #0]
{
 800061e:	4605      	mov	r5, r0
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000620:	f7ff ff96 	bl	8000550 <IS42S32800G_ClockEnable>
 8000624:	b110      	cbz	r0, 800062c <IS42S32800G_Init+0x14>
  int32_t ret = IS42S32800G_ERROR;
 8000626:	f04f 30ff 	mov.w	r0, #4294967295
}
 800062a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800062c:	f000 f9fa 	bl	8000a24 <HAL_GetTick>
 8000630:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000632:	f000 f9f7 	bl	8000a24 <HAL_GetTick>
 8000636:	4286      	cmp	r6, r0
 8000638:	d0fb      	beq.n	8000632 <IS42S32800G_Init+0x1a>
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 800063a:	6821      	ldr	r1, [r4, #0]
 800063c:	4628      	mov	r0, r5
 800063e:	f7ff ff9b 	bl	8000578 <IS42S32800G_Precharge>
 8000642:	2800      	cmp	r0, #0
 8000644:	d1ef      	bne.n	8000626 <IS42S32800G_Init+0xe>
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8000646:	4628      	mov	r0, r5
 8000648:	e9d4 1200 	ldrd	r1, r2, [r4]
 800064c:	f7ff ffc8 	bl	80005e0 <IS42S32800G_RefreshMode>
 8000650:	2800      	cmp	r0, #0
 8000652:	d1e8      	bne.n	8000626 <IS42S32800G_Init+0xe>
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8000654:	4621      	mov	r1, r4
 8000656:	4628      	mov	r0, r5
 8000658:	f7ff ffa4 	bl	80005a4 <IS42S32800G_ModeRegConfig>
 800065c:	2800      	cmp	r0, #0
 800065e:	d1e2      	bne.n	8000626 <IS42S32800G_Init+0xe>
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8000660:	68a1      	ldr	r1, [r4, #8]
 8000662:	4628      	mov	r0, r5
 8000664:	f7ff ffd0 	bl	8000608 <IS42S32800G_RefreshRate>
 8000668:	3000      	adds	r0, #0
 800066a:	bf18      	it	ne
 800066c:	2001      	movne	r0, #1
 800066e:	4240      	negs	r0, r0
  return ret;
 8000670:	e7db      	b.n	800062a <IS42S32800G_Init+0x12>
	...

08000674 <MX_SDRAM_BANK2_Init>:

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8000674:	2201      	movs	r2, #1
 8000676:	4914      	ldr	r1, [pc, #80]	; (80006c8 <MX_SDRAM_BANK2_Init+0x54>)
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 8000678:	2302      	movs	r3, #2
{
 800067a:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800067c:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000680:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000682:	2104      	movs	r1, #4
 8000684:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000686:	2440      	movs	r4, #64	; 0x40
{
 8000688:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800068a:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800068e:	f44f 72c0 	mov.w	r2, #384	; 0x180
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8000692:	9307      	str	r3, [sp, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000694:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800069e:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80006a2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80006a6:	e9c0 4209 	strd	r4, r2, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80006aa:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 80006ac:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80006b0:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 80006b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80006b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80006ba:	f002 f8c7 	bl	800284c <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
}
 80006be:	3000      	adds	r0, #0
 80006c0:	bf18      	it	ne
 80006c2:	2001      	movne	r0, #1
 80006c4:	b008      	add	sp, #32
 80006c6:	bd10      	pop	{r4, pc}
 80006c8:	52004140 	.word	0x52004140

080006cc <BSP_SDRAM_Init>:
{
 80006cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(Instance >= SDRAM_INSTANCES_NBR)
 80006d0:	4605      	mov	r5, r0
{
 80006d2:	b08e      	sub	sp, #56	; 0x38
  if(Instance >= SDRAM_INSTANCES_NBR)
 80006d4:	2800      	cmp	r0, #0
 80006d6:	f040 80e9 	bne.w	80008ac <BSP_SDRAM_Init+0x1e0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006da:	4b77      	ldr	r3, [pc, #476]	; (80008b8 <BSP_SDRAM_Init+0x1ec>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80006dc:	f04f 0803 	mov.w	r8, #3

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80006e0:	ac0e      	add	r4, sp, #56	; 0x38
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80006e2:	4876      	ldr	r0, [pc, #472]	; (80008bc <BSP_SDRAM_Init+0x1f0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80006e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 80006e8:	4f75      	ldr	r7, [pc, #468]	; (80008c0 <BSP_SDRAM_Init+0x1f4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80006ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80006f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80006f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80006fa:	9201      	str	r2, [sp, #4]
 80006fc:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80006fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000702:	f042 0201 	orr.w	r2, r2, #1
 8000706:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800070a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800070e:	f002 0201 	and.w	r2, r2, #1
 8000712:	9202      	str	r2, [sp, #8]
 8000714:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800071a:	f042 0208 	orr.w	r2, r2, #8
 800071e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000722:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000726:	f002 0208 	and.w	r2, r2, #8
 800072a:	9203      	str	r2, [sp, #12]
 800072c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000732:	f042 0210 	orr.w	r2, r2, #16
 8000736:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800073a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800073e:	f002 0210 	and.w	r2, r2, #16
 8000742:	9204      	str	r2, [sp, #16]
 8000744:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800074a:	f042 0220 	orr.w	r2, r2, #32
 800074e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000752:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000756:	f002 0220 	and.w	r2, r2, #32
 800075a:	9205      	str	r2, [sp, #20]
 800075c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000766:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800076a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800076e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000772:	9206      	str	r2, [sp, #24]
 8000774:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800077a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800077e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000782:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000786:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800078a:	9207      	str	r2, [sp, #28]
 800078c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800078e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000796:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800079a:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a4:	9308      	str	r3, [sp, #32]
 80007a6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80007ae:	230c      	movs	r3, #12
 80007b0:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80007b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007b8:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80007bc:	4621      	mov	r1, r4
 80007be:	f000 fa35 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80007c2:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80007c6:	4621      	mov	r1, r4
 80007c8:	483e      	ldr	r0, [pc, #248]	; (80008c4 <BSP_SDRAM_Init+0x1f8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80007ca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80007cc:	f000 fa2e 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80007d0:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80007d4:	4621      	mov	r1, r4
 80007d6:	483c      	ldr	r0, [pc, #240]	; (80008c8 <BSP_SDRAM_Init+0x1fc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80007d8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80007da:	f000 fa27 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 80007de:	f248 133f 	movw	r3, #33087	; 0x813f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80007e2:	4621      	mov	r1, r4
 80007e4:	4839      	ldr	r0, [pc, #228]	; (80008cc <BSP_SDRAM_Init+0x200>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 80007e6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80007e8:	f000 fa20 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80007ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80007f0:	4621      	mov	r1, r4
 80007f2:	4837      	ldr	r0, [pc, #220]	; (80008d0 <BSP_SDRAM_Init+0x204>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80007f4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80007f6:	f000 fa19 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80007fa:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80007fe:	4621      	mov	r1, r4
 8000800:	4834      	ldr	r0, [pc, #208]	; (80008d4 <BSP_SDRAM_Init+0x208>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000802:	4c35      	ldr	r4, [pc, #212]	; (80008d8 <BSP_SDRAM_Init+0x20c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000804:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000806:	f000 fa11 	bl	8000c2c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800080a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800080e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000812:	f240 2002 	movw	r0, #514	; 0x202
 8000816:	f640 0208 	movw	r2, #2056	; 0x808
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800081a:	4626      	mov	r6, r4
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 800081c:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000820:	e9c4 131c 	strd	r1, r3, [r4, #112]	; 0x70
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000824:	e9c4 0220 	strd	r0, r2, [r4, #128]	; 0x80
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000828:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800082a:	2220      	movs	r2, #32
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800082c:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000830:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
  mdma_handle.Init.BufferTransferLength     = 128;
 8000834:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <BSP_SDRAM_Init+0x210>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800083e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000842:	f846 3f6c 	str.w	r3, [r6, #108]!

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8000846:	4630      	mov	r0, r6
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8000848:	633e      	str	r6, [r7, #48]	; 0x30
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800084a:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800084e:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
  HAL_MDMA_DeInit(&mdma_handle);
 8000852:	f000 fe0e 	bl	8001472 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8000856:	4630      	mov	r0, r6
 8000858:	f000 fd9c 	bl	8001394 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800085c:	462a      	mov	r2, r5
 800085e:	210f      	movs	r1, #15
 8000860:	207a      	movs	r0, #122	; 0x7a
 8000862:	f000 f905 	bl	8000a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000866:	207a      	movs	r0, #122	; 0x7a
 8000868:	f000 f934 	bl	8000ad4 <HAL_NVIC_EnableIRQ>
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 800086c:	4638      	mov	r0, r7
 800086e:	f7ff ff01 	bl	8000674 <MX_SDRAM_BANK2_Init>
 8000872:	b9f0      	cbnz	r0, 80008b2 <BSP_SDRAM_Init+0x1e6>
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8000874:	2308      	movs	r3, #8
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 8000876:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 800087a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 800087e:	e9c4 3836 	strd	r3, r8, [r4, #216]	; 0xd8
        pRegMode.RefreshRate     = REFRESH_COUNT;
 8000882:	f240 6303 	movw	r3, #1539	; 0x603
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 8000886:	e9c4 3038 	strd	r3, r0, [r4, #224]	; 0xe0
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 800088a:	2330      	movs	r3, #48	; 0x30
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 800088c:	e9c4 303b 	strd	r3, r0, [r4, #236]	; 0xec
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 8000890:	f44f 7300 	mov.w	r3, #512	; 0x200
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 8000894:	4638      	mov	r0, r7
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 8000896:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 800089a:	f7ff febd 	bl	8000618 <IS42S32800G_Init>
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf18      	it	ne
 80008a2:	f06f 0004 	mvnne.w	r0, #4
}
 80008a6:	b00e      	add	sp, #56	; 0x38
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80008ac:	f06f 0001 	mvn.w	r0, #1
 80008b0:	e7f9      	b.n	80008a6 <BSP_SDRAM_Init+0x1da>
        ret = BSP_ERROR_NO_INIT;
 80008b2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80008b6:	e7f6      	b.n	80008a6 <BSP_SDRAM_Init+0x1da>
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020c00 	.word	0x58020c00
 80008c0:	2402d43c 	.word	0x2402d43c
 80008c4:	58021000 	.word	0x58021000
 80008c8:	58021400 	.word	0x58021400
 80008cc:	58021800 	.word	0x58021800
 80008d0:	58021c00 	.word	0x58021c00
 80008d4:	58022000 	.word	0x58022000
 80008d8:	2402d06c 	.word	0x2402d06c
 80008dc:	52000040 	.word	0x52000040

080008e0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e0:	491a      	ldr	r1, [pc, #104]	; (800094c <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80008ec:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <SystemInit+0x74>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	f042 0201 	orr.w	r2, r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000900:	681c      	ldr	r4, [r3, #0]
 8000902:	4020      	ands	r0, r4
 8000904:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000908:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800090a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800090c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000914:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800091a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000922:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000924:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <SystemInit+0x78>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	0c1b      	lsrs	r3, r3, #16
 800092c:	041b      	lsls	r3, r3, #16
 800092e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000932:	d202      	bcs.n	800093a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <SystemInit+0x7c>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <SystemInit+0x80>)
 800093c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000940:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000946:	608b      	str	r3, [r1, #8]
#endif  


}
 8000948:	bd10      	pop	{r4, pc}
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00
 8000950:	eaf6ed7f 	.word	0xeaf6ed7f
 8000954:	58024400 	.word	0x58024400
 8000958:	5c001000 	.word	0x5c001000
 800095c:	51008108 	.word	0x51008108
 8000960:	52004000 	.word	0x52004000

08000964 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000964:	4770      	bx	lr
	...

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800096a:	4e0f      	ldr	r6, [pc, #60]	; (80009a8 <HAL_InitTick+0x40>)
{
 800096c:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 800096e:	7830      	ldrb	r0, [r6, #0]
 8000970:	b908      	cbnz	r0, 8000976 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000972:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000974:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <HAL_InitTick+0x44>)
 800097c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000980:	6810      	ldr	r0, [r2, #0]
 8000982:	fbb0 f0f3 	udiv	r0, r0, r3
 8000986:	f000 f8b3 	bl	8000af0 <HAL_SYSTICK_Config>
 800098a:	4604      	mov	r4, r0
 800098c:	2800      	cmp	r0, #0
 800098e:	d1f0      	bne.n	8000972 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	2d0f      	cmp	r5, #15
 8000992:	d8ee      	bhi.n	8000972 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	4602      	mov	r2, r0
 8000996:	4629      	mov	r1, r5
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f868 	bl	8000a70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	6075      	str	r5, [r6, #4]
 80009a2:	4620      	mov	r0, r4
 80009a4:	e7e6      	b.n	8000974 <HAL_InitTick+0xc>
 80009a6:	bf00      	nop
 80009a8:	24000008 	.word	0x24000008
 80009ac:	24000000 	.word	0x24000000

080009b0 <HAL_Init>:
{
 80009b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b2:	2003      	movs	r0, #3
 80009b4:	f000 f84a 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009b8:	f001 f836 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80009bc:	490f      	ldr	r1, [pc, #60]	; (80009fc <HAL_Init+0x4c>)
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_Init+0x50>)
 80009c0:	698b      	ldr	r3, [r1, #24]
 80009c2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	f003 031f 	and.w	r3, r3, #31
 80009cc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ce:	698b      	ldr	r3, [r1, #24]
 80009d0:	f003 030f 	and.w	r3, r3, #15
 80009d4:	5cd3      	ldrb	r3, [r2, r3]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x54>)
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	fa20 f303 	lsr.w	r3, r0, r3
 80009e0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_Init+0x58>)
 80009e4:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e6:	200f      	movs	r0, #15
 80009e8:	f7ff ffbe 	bl	8000968 <HAL_InitTick>
 80009ec:	4604      	mov	r4, r0
 80009ee:	b918      	cbnz	r0, 80009f8 <HAL_Init+0x48>
  HAL_MspInit();
 80009f0:	f7ff ffb8 	bl	8000964 <HAL_MspInit>
}
 80009f4:	4620      	mov	r0, r4
 80009f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80009f8:	2401      	movs	r4, #1
 80009fa:	e7fb      	b.n	80009f4 <HAL_Init+0x44>
 80009fc:	58024400 	.word	0x58024400
 8000a00:	08008158 	.word	0x08008158
 8000a04:	24000004 	.word	0x24000004
 8000a08:	24000000 	.word	0x24000000

08000a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x10>)
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_IncTick+0x14>)
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	440b      	add	r3, r1
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2402d470 	.word	0x2402d470
 8000a20:	24000008 	.word	0x24000008

08000a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <HAL_GetTick+0x8>)
 8000a26:	6818      	ldr	r0, [r3, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2402d470 	.word	0x2402d470

08000a30 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000a30:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <HAL_GetREVID+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
}
 8000a34:	0c00      	lsrs	r0, r0, #16
 8000a36:	4770      	bx	lr
 8000a38:	5c001000 	.word	0x5c001000

08000a3c <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000a3c:	4a02      	ldr	r2, [pc, #8]	; (8000a48 <HAL_EnableCompensationCell+0xc>)
 8000a3e:	6a13      	ldr	r3, [r2, #32]
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6213      	str	r3, [r2, #32]
}
 8000a46:	4770      	bx	lr
 8000a48:	58000400 	.word	0x58000400

08000a4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a5a:	041b      	lsls	r3, r3, #16
 8000a5c:	0c1b      	lsrs	r3, r3, #16
 8000a5e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a72:	b570      	push	{r4, r5, r6, lr}
 8000a74:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a76:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	2d04      	cmp	r5, #4
 8000a86:	bf28      	it	cs
 8000a88:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a90:	bf8c      	ite	hi
 8000a92:	3c03      	subhi	r4, #3
 8000a94:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000a96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	ea21 0303 	bic.w	r3, r1, r3
 8000a9c:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	fa06 f404 	lsl.w	r4, r6, r4
 8000aa4:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	ea43 0304 	orr.w	r3, r3, r4
 8000aac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ab0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	db06      	blt.n	8000ac2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ab8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000abc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	f000 000f 	and.w	r0, r0, #15
 8000ac6:	4a02      	ldr	r2, [pc, #8]	; (8000ad0 <HAL_NVIC_SetPriority+0x60>)
 8000ac8:	5413      	strb	r3, [r2, r0]
 8000aca:	e7f9      	b.n	8000ac0 <HAL_NVIC_SetPriority+0x50>
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	e000ed14 	.word	0xe000ed14

08000ad4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	db08      	blt.n	8000aea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad8:	0942      	lsrs	r2, r0, #5
 8000ada:	2301      	movs	r3, #1
 8000adc:	f000 001f 	and.w	r0, r0, #31
 8000ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ae4:	4b01      	ldr	r3, [pc, #4]	; (8000aec <HAL_NVIC_EnableIRQ+0x18>)
 8000ae6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	3801      	subs	r0, #1
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d20a      	bcs.n	8000b0e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	21f0      	movs	r1, #240	; 0xf0
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b1c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_MPU_Disable+0x18>)
 8000b22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b28:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_MPU_Disable+0x1c>)
 8000b2e:	605a      	str	r2, [r3, #4]
}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	e000ed90 	.word	0xe000ed90

08000b3c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b3e:	f040 0001 	orr.w	r0, r0, #1
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MPU_Enable+0x20>)
 8000b44:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b46:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b52:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	e000ed90 	.word	0xe000ed90

08000b60 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b60:	7843      	ldrb	r3, [r0, #1]
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <HAL_MPU_ConfigRegion+0x4c>)
{
 8000b64:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8000b66:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000b68:	7801      	ldrb	r1, [r0, #0]
 8000b6a:	b1d9      	cbz	r1, 8000ba4 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000b6c:	6843      	ldr	r3, [r0, #4]
 8000b6e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b70:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b72:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b74:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b76:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b7a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b7c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b7e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b82:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b84:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b88:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b8a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b8e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b94:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000b9a:	7a01      	ldrb	r1, [r0, #8]
 8000b9c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ba0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000ba2:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8000ba4:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8000ba6:	6111      	str	r1, [r2, #16]
}
 8000ba8:	e7fb      	b.n	8000ba2 <HAL_MPU_ConfigRegion+0x42>
 8000baa:	bf00      	nop
 8000bac:	e000ed90 	.word	0xe000ed90

08000bb0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000bb0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d036      	beq.n	8000c26 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000bb8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8000bbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bc0:	b91b      	cbnz	r3, 8000bca <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000bc2:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000bc6:	f001 fff5 	bl	8002bb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000bca:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000bcc:	69e0      	ldr	r0, [r4, #28]
 8000bce:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000bd0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000bd8:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000bda:	6819      	ldr	r1, [r3, #0]
 8000bdc:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8000be0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000be4:	430a      	orrs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000be8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bea:	68a2      	ldr	r2, [r4, #8]
 8000bec:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8000bf0:	4302      	orrs	r2, r0
 8000bf2:	f021 0101 	bic.w	r1, r1, #1
 8000bf6:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000bf8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	0c12      	lsrs	r2, r2, #16
 8000c00:	0412      	lsls	r2, r2, #16
 8000c02:	430a      	orrs	r2, r1
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c08:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8000c0c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000c10:	0552      	lsls	r2, r2, #21
 8000c12:	ea42 5200 	orr.w	r2, r2, r0, lsl #20


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c16:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c1c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c1e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c20:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8000c24:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000c26:	2001      	movs	r0, #1
 8000c28:	e7fc      	b.n	8000c24 <HAL_DMA2D_Init+0x74>
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c30:	680b      	ldr	r3, [r1, #0]
{
 8000c32:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000df8 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c38:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c3c:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000c3e:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8000c40:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000dfc <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c44:	9a01      	ldr	r2, [sp, #4]
 8000c46:	40da      	lsrs	r2, r3
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8000c4a:	b005      	add	sp, #20
 8000c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c50:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8000c52:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c54:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8000c56:	ea17 0502 	ands.w	r5, r7, r2
 8000c5a:	f000 80b6 	beq.w	8000dca <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5e:	684a      	ldr	r2, [r1, #4]
 8000c60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c64:	2403      	movs	r4, #3
 8000c66:	f022 0a10 	bic.w	sl, r2, #16
 8000c6a:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c6e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000c72:	43e4      	mvns	r4, r4
 8000c74:	2e01      	cmp	r6, #1
 8000c76:	d810      	bhi.n	8000c9a <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000c78:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c7a:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	68ce      	ldr	r6, [r1, #12]
 8000c80:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c84:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000c88:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c8a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c8c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c90:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000c94:	409e      	lsls	r6, r3
 8000c96:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000c98:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c9a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9c:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca0:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca2:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000caa:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8000cae:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb0:	d114      	bne.n	8000cdc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8000cb2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cb6:	f003 0b07 	and.w	fp, r3, #7
 8000cba:	270f      	movs	r7, #15
 8000cbc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000cc0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cc8:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ccc:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cd0:	690e      	ldr	r6, [r1, #16]
 8000cd2:	fa06 f60b 	lsl.w	r6, r6, fp
 8000cd6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000cd8:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8000cdc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cde:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce0:	f002 0603 	and.w	r6, r2, #3
 8000ce4:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000ce8:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8000cec:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cee:	00d4      	lsls	r4, r2, #3
 8000cf0:	d56b      	bpl.n	8000dca <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000cf6:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cfa:	f003 0703 	and.w	r7, r3, #3
 8000cfe:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	f044 0402 	orr.w	r4, r4, #2
 8000d06:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d0a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000d10:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d14:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000d18:	f004 0402 	and.w	r4, r4, #2
 8000d1c:	9403      	str	r4, [sp, #12]
 8000d1e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d20:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d24:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d28:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d2c:	4c31      	ldr	r4, [pc, #196]	; (8000df4 <HAL_GPIO_Init+0x1c8>)
 8000d2e:	42a0      	cmp	r0, r4
 8000d30:	d04d      	beq.n	8000dce <HAL_GPIO_Init+0x1a2>
 8000d32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d36:	42a0      	cmp	r0, r4
 8000d38:	d04b      	beq.n	8000dd2 <HAL_GPIO_Init+0x1a6>
 8000d3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d3e:	42a0      	cmp	r0, r4
 8000d40:	d049      	beq.n	8000dd6 <HAL_GPIO_Init+0x1aa>
 8000d42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d46:	42a0      	cmp	r0, r4
 8000d48:	d047      	beq.n	8000dda <HAL_GPIO_Init+0x1ae>
 8000d4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d4e:	42a0      	cmp	r0, r4
 8000d50:	d045      	beq.n	8000dde <HAL_GPIO_Init+0x1b2>
 8000d52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d56:	42a0      	cmp	r0, r4
 8000d58:	d043      	beq.n	8000de2 <HAL_GPIO_Init+0x1b6>
 8000d5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d5e:	42a0      	cmp	r0, r4
 8000d60:	d041      	beq.n	8000de6 <HAL_GPIO_Init+0x1ba>
 8000d62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d66:	42a0      	cmp	r0, r4
 8000d68:	d03f      	beq.n	8000dea <HAL_GPIO_Init+0x1be>
 8000d6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d6e:	42a0      	cmp	r0, r4
 8000d70:	d03d      	beq.n	8000dee <HAL_GPIO_Init+0x1c2>
 8000d72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d76:	42a0      	cmp	r0, r4
 8000d78:	bf14      	ite	ne
 8000d7a:	240a      	movne	r4, #10
 8000d7c:	2409      	moveq	r4, #9
 8000d7e:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d80:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d82:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d86:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000d88:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8000d8c:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8000d90:	bf54      	ite	pl
 8000d92:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000d94:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d96:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000d98:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000d9c:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000da0:	bf54      	ite	pl
 8000da2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000da4:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da6:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000da8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000dac:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000db0:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000db4:	bf54      	ite	pl
 8000db6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000db8:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dba:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000dbc:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000dbe:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000dc0:	bf54      	ite	pl
 8000dc2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000dc4:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000dc6:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000dca:	3301      	adds	r3, #1
 8000dcc:	e73a      	b.n	8000c44 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dce:	2400      	movs	r4, #0
 8000dd0:	e7d5      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000dd2:	2401      	movs	r4, #1
 8000dd4:	e7d3      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000dd6:	2402      	movs	r4, #2
 8000dd8:	e7d1      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000dda:	2403      	movs	r4, #3
 8000ddc:	e7cf      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000dde:	2404      	movs	r4, #4
 8000de0:	e7cd      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000de2:	2405      	movs	r4, #5
 8000de4:	e7cb      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000de6:	2406      	movs	r4, #6
 8000de8:	e7c9      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000dea:	2407      	movs	r4, #7
 8000dec:	e7c7      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000dee:	2408      	movs	r4, #8
 8000df0:	e7c5      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000df2:	bf00      	nop
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58000080 	.word	0x58000080

08000e00 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e00:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e02:	f8d1 c000 	ldr.w	ip, [r1]
{
 8000e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e0a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e0c:	6804      	ldr	r4, [r0, #0]
 8000e0e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e10:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e14:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e16:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000e18:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8000e1c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e20:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e22:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e26:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000e2a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000e2c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e2e:	68e0      	ldr	r0, [r4, #12]
 8000e30:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8000e34:	4430      	add	r0, r6
 8000e36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000e3a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000e3c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000e3e:	68e0      	ldr	r0, [r4, #12]
 8000e40:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000e44:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000e46:	6898      	ldr	r0, [r3, #8]
 8000e48:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8000e4c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000e4e:	6888      	ldr	r0, [r1, #8]
 8000e50:	68e6      	ldr	r6, [r4, #12]
 8000e52:	3001      	adds	r0, #1
 8000e54:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8000e58:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000e5a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000e5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e60:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000e62:	6918      	ldr	r0, [r3, #16]
 8000e64:	f020 0007 	bic.w	r0, r0, #7
 8000e68:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000e6a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000e6c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8000e6e:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000e72:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000e76:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000e7a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000e7e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000e82:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000e86:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e8a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000e8c:	6958      	ldr	r0, [r3, #20]
 8000e8e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000e92:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000e94:	6948      	ldr	r0, [r1, #20]
 8000e96:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000e98:	69d8      	ldr	r0, [r3, #28]
 8000e9a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000e9e:	f020 0007 	bic.w	r0, r0, #7
 8000ea2:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000ea4:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8000ea8:	4305      	orrs	r5, r0
 8000eaa:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000eac:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000eae:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000eb0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000eb4:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000eb6:	b31e      	cbz	r6, 8000f00 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000eb8:	2e01      	cmp	r6, #1
 8000eba:	d023      	beq.n	8000f04 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000ebc:	1eb0      	subs	r0, r6, #2
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d922      	bls.n	8000f08 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000ec2:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000ec4:	bf0c      	ite	eq
 8000ec6:	2002      	moveq	r0, #2
 8000ec8:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000eca:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000ecc:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000ed0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8000ed4:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000ed6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000ed8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8000eda:	4345      	muls	r5, r0
 8000edc:	4378      	muls	r0, r7
 8000ede:	3007      	adds	r0, #7
 8000ee0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ee4:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000ee6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ee8:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000eec:	f020 0007 	bic.w	r0, r0, #7
 8000ef0:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000ef2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000ef4:	58a3      	ldr	r3, [r4, r2]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	50a3      	str	r3, [r4, r2]
}
 8000efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000f00:	2004      	movs	r0, #4
 8000f02:	e7e2      	b.n	8000eca <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000f04:	2003      	movs	r0, #3
 8000f06:	e7e0      	b.n	8000eca <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000f08:	2002      	movs	r0, #2
 8000f0a:	e7de      	b.n	8000eca <LTDC_SetConfig+0xca>

08000f0c <HAL_LTDC_Init>:
{
 8000f0c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8000f0e:	4604      	mov	r4, r0
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d063      	beq.n	8000fdc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000f14:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000f18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f1c:	b91b      	cbnz	r3, 8000f26 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000f1e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000f22:	f001 fe59 	bl	8002bd8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000f34:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f36:	6999      	ldr	r1, [r3, #24]
 8000f38:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000f3c:	4302      	orrs	r2, r0
 8000f3e:	68e0      	ldr	r0, [r4, #12]
 8000f40:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000f42:	6920      	ldr	r0, [r4, #16]
 8000f44:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000f46:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f48:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000f4a:	4925      	ldr	r1, [pc, #148]	; (8000fe0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f4c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	400a      	ands	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f5a:	69a0      	ldr	r0, [r4, #24]
 8000f5c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000f5e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000f60:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	400a      	ands	r2, r1
 8000f66:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f6e:	6a20      	ldr	r0, [r4, #32]
 8000f70:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000f74:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	400a      	ands	r2, r1
 8000f7a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f84:	4302      	orrs	r2, r0
 8000f86:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	4011      	ands	r1, r2
 8000f8c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000f8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000f9e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000fa2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000fa6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000faa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000fb8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000fbc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc2:	f042 0206 	orr.w	r2, r2, #6
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000fc8:	699a      	ldr	r2, [r3, #24]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8000fd0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000fd2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000fd6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e7fc      	b.n	8000fda <HAL_LTDC_Init+0xce>
 8000fe0:	f000f800 	.word	0xf000f800

08000fe4 <HAL_LTDC_DeInit>:
{
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 8000fe8:	f001 fe6a 	bl	8002cc0 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000fec:	2000      	movs	r0, #0
 8000fee:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 8000ff2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 8000ff6:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 8000ffa:	bd10      	pop	{r4, pc}

08000ffc <HAL_LTDC_ErrorCallback>:
 8000ffc:	4770      	bx	lr

08000ffe <HAL_LTDC_ReloadEventCallback>:
 8000ffe:	4770      	bx	lr

08001000 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001000:	6803      	ldr	r3, [r0, #0]
{
 8001002:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001004:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8001006:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001008:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800100a:	0772      	lsls	r2, r6, #29
 800100c:	d514      	bpl.n	8001038 <HAL_LTDC_IRQHandler+0x38>
 800100e:	0769      	lsls	r1, r5, #29
 8001010:	d512      	bpl.n	8001038 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001014:	f022 0204 	bic.w	r2, r2, #4
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800101a:	2204      	movs	r2, #4
 800101c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800101e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800102a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800102c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001030:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001034:	f7ff ffe2 	bl	8000ffc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001038:	07b2      	lsls	r2, r6, #30
 800103a:	d516      	bpl.n	800106a <HAL_LTDC_IRQHandler+0x6a>
 800103c:	07ab      	lsls	r3, r5, #30
 800103e:	d514      	bpl.n	800106a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001040:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8001042:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001046:	f022 0202 	bic.w	r2, r2, #2
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800104c:	2202      	movs	r2, #2
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001050:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001054:	4313      	orrs	r3, r2
 8001056:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800105a:	2304      	movs	r3, #4
 800105c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001060:	2300      	movs	r3, #0
 8001062:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001066:	f7ff ffc9 	bl	8000ffc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800106a:	07f0      	lsls	r0, r6, #31
 800106c:	d510      	bpl.n	8001090 <HAL_LTDC_IRQHandler+0x90>
 800106e:	07e9      	lsls	r1, r5, #31
 8001070:	d50e      	bpl.n	8001090 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001072:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8001074:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800107e:	2201      	movs	r2, #1
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8001082:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8001084:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001088:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800108c:	f001 fe28 	bl	8002ce0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001090:	0732      	lsls	r2, r6, #28
 8001092:	d511      	bpl.n	80010b8 <HAL_LTDC_IRQHandler+0xb8>
 8001094:	072b      	lsls	r3, r5, #28
 8001096:	d50f      	bpl.n	80010b8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001098:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800109a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800109c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109e:	f022 0208 	bic.w	r2, r2, #8
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80010a4:	2208      	movs	r2, #8
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80010ae:	2300      	movs	r3, #0
 80010b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80010b4:	f7ff ffa3 	bl	8000ffe <HAL_LTDC_ReloadEventCallback>
}
 80010b8:	bd70      	pop	{r4, r5, r6, pc}

080010ba <HAL_LTDC_ConfigLayer>:
{
 80010ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80010bc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80010c0:	4606      	mov	r6, r0
 80010c2:	468c      	mov	ip, r1
 80010c4:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	f04f 0002 	mov.w	r0, #2
 80010cc:	d01d      	beq.n	800110a <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80010ce:	2434      	movs	r4, #52	; 0x34
 80010d0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80010d2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 80010d6:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80010d8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80010dc:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80010e0:	3438      	adds	r4, #56	; 0x38
 80010e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ee:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80010f0:	4630      	mov	r0, r6
 80010f2:	4672      	mov	r2, lr
 80010f4:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80010f6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80010f8:	f7ff fe82 	bl	8000e00 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80010fc:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80010fe:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001100:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001102:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001106:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800110c <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 800110c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001110:	2b01      	cmp	r3, #1
 8001112:	f04f 0302 	mov.w	r3, #2
{
 8001116:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8001118:	d013      	beq.n	8001142 <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800111a:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800111c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8001120:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8001124:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001128:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001130:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8001132:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001136:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001138:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800113c:	2300      	movs	r3, #0
 800113e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001142:	4618      	mov	r0, r3
}
 8001144:	bd10      	pop	{r4, pc}

08001146 <HAL_LTDC_ConfigCLUT>:
{
 8001146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800114a:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
{
 800114e:	4690      	mov	r8, r2
  __HAL_LOCK(hltdc);
 8001150:	2c01      	cmp	r4, #1
 8001152:	f04f 0402 	mov.w	r4, #2
 8001156:	d033      	beq.n	80011c0 <HAL_LTDC_ConfigCLUT+0x7a>
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001158:	01df      	lsls	r7, r3, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800115a:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800115e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8001160:	2501      	movs	r5, #1
 8001162:	3784      	adds	r7, #132	; 0x84
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001164:	2600      	movs	r6, #0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001166:	fb04 0303 	mla	r3, r4, r3, r0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800116a:	f04f 5c88 	mov.w	ip, #285212672	; 0x11000000
  __HAL_LOCK(hltdc);
 800116e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001172:	4546      	cmp	r6, r8
 8001174:	d108      	bne.n	8001188 <HAL_LTDC_ConfigCLUT+0x42>
  hltdc->State = HAL_LTDC_STATE_READY;
 8001176:	2301      	movs	r3, #1
 8001178:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800117c:	2300      	movs	r3, #0
 800117e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8001182:	4618      	mov	r0, r3
}
 8001184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800118a:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 800118e:	2a06      	cmp	r2, #6
 8001190:	f404 057f 	and.w	r5, r4, #16711680	; 0xff0000
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8001194:	bf0e      	itee	eq
 8001196:	fb0c fe06 	muleq.w	lr, ip, r6
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800119a:	b2a4      	uxthne	r4, r4
 800119c:	ea45 6506 	orrne.w	r5, r5, r6, lsl #24
  for (counter = 0U; (counter < CLUTSize); counter++)
 80011a0:	f106 0601 	add.w	r6, r6, #1
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011a4:	bf01      	itttt	eq
 80011a6:	ea4e 0505 	orreq.w	r5, lr, r5
 80011aa:	fa5f fe84 	uxtbeq.w	lr, r4
 80011ae:	f404 447f 	andeq.w	r4, r4, #65280	; 0xff00
 80011b2:	ea45 050e 	orreq.w	r5, r5, lr
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80011b6:	432c      	orrs	r4, r5
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80011b8:	6805      	ldr	r5, [r0, #0]
 80011ba:	443d      	add	r5, r7
 80011bc:	642c      	str	r4, [r5, #64]	; 0x40
 80011be:	e7d8      	b.n	8001172 <HAL_LTDC_ConfigCLUT+0x2c>
  __HAL_LOCK(hltdc);
 80011c0:	4620      	mov	r0, r4
 80011c2:	e7df      	b.n	8001184 <HAL_LTDC_ConfigCLUT+0x3e>

080011c4 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 80011c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	f04f 0302 	mov.w	r3, #2
 80011ce:	d00f      	beq.n	80011f0 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80011d0:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80011d2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	3184      	adds	r1, #132	; 0x84
 80011da:	585a      	ldr	r2, [r3, r1]
 80011dc:	f042 0202 	orr.w	r2, r2, #2
 80011e0:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80011e2:	2201      	movs	r2, #1
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 80011e6:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80011e8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80011ec:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80011f0:	4618      	mov	r0, r3
}
 80011f2:	4770      	bx	lr

080011f4 <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 80011f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	f04f 0302 	mov.w	r3, #2
 80011fe:	d00f      	beq.n	8001220 <HAL_LTDC_DisableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001200:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001202:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001206:	6803      	ldr	r3, [r0, #0]
 8001208:	3184      	adds	r1, #132	; 0x84
 800120a:	585a      	ldr	r2, [r3, r1]
 800120c:	f022 0202 	bic.w	r2, r2, #2
 8001210:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001212:	2201      	movs	r2, #1
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8001216:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001218:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800121c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001220:	4618      	mov	r0, r3
}
 8001222:	4770      	bx	lr

08001224 <HAL_LTDC_EnableCLUT>:
  __HAL_LOCK(hltdc);
 8001224:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001228:	2b01      	cmp	r3, #1
 800122a:	f04f 0302 	mov.w	r3, #2
 800122e:	d00f      	beq.n	8001250 <HAL_LTDC_EnableCLUT+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8001230:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001232:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8001236:	6803      	ldr	r3, [r0, #0]
 8001238:	3184      	adds	r1, #132	; 0x84
 800123a:	585a      	ldr	r2, [r3, r1]
 800123c:	f042 0210 	orr.w	r2, r2, #16
 8001240:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001242:	2201      	movs	r2, #1
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8001246:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001248:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800124c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001250:	4618      	mov	r0, r3
}
 8001252:	4770      	bx	lr

08001254 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8001254:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001258:	2b01      	cmp	r3, #1
 800125a:	f04f 0302 	mov.w	r3, #2
 800125e:	d00c      	beq.n	800127a <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001262:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001266:	6993      	ldr	r3, [r2, #24]
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800126e:	2301      	movs	r3, #1
 8001270:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001274:	2300      	movs	r3, #0
 8001276:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800127a:	4618      	mov	r0, r3
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	50001000 	.word	0x50001000

08001284 <HAL_LTDC_SetWindowPosition>:
{
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001286:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
{
 800128a:	4605      	mov	r5, r0
 800128c:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
 800128e:	2c01      	cmp	r4, #1
 8001290:	f04f 0402 	mov.w	r4, #2
 8001294:	d01d      	beq.n	80012d2 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001296:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 800129a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800129c:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
 800129e:	435c      	muls	r4, r3
  __HAL_LOCK(hltdc);
 80012a0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 80012a4:	1906      	adds	r6, r0, r4
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80012a6:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 80012a8:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80012aa:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 80012ac:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80012b0:	6e71      	ldr	r1, [r6, #100]	; 0x64
 80012b2:	4411      	add	r1, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80012b4:	4662      	mov	r2, ip
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80012b6:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80012b8:	f104 0138 	add.w	r1, r4, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80012bc:	4401      	add	r1, r0
 80012be:	f7ff fd9f 	bl	8000e00 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80012c2:	682b      	ldr	r3, [r5, #0]
  __HAL_UNLOCK(hltdc);
 80012c4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80012c6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80012c8:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80012cc:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
}
 80012d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80012d2:	4620      	mov	r0, r4
 80012d4:	e7fc      	b.n	80012d0 <HAL_LTDC_SetWindowPosition+0x4c>

080012d6 <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 80012d6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f04f 0302 	mov.w	r3, #2
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80012e4:	d015      	beq.n	8001312 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80012e6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 80012ea:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 80012ec:	2501      	movs	r5, #1
  pLayerCfg->Alpha = Alpha;
 80012ee:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 80012f0:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 80012f4:	18c6      	adds	r6, r0, r3
 80012f6:	64f1      	str	r1, [r6, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80012f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80012fc:	4401      	add	r1, r0
 80012fe:	f7ff fd7f 	bl	8000e00 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001302:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8001304:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001306:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001308:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800130c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8001310:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8001312:	4618      	mov	r0, r3
 8001314:	e7fc      	b.n	8001310 <HAL_LTDC_SetAlpha+0x3a>

08001316 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8001316:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800131a:	2b01      	cmp	r3, #1
 800131c:	f04f 0302 	mov.w	r3, #2
{
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001324:	d015      	beq.n	8001352 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001326:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 800132a:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 800132c:	2501      	movs	r5, #1
  pLayerCfg->FBStartAdress = Address;
 800132e:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8001330:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8001334:	18c6      	adds	r6, r0, r3
 8001336:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001338:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800133c:	4401      	add	r1, r0
 800133e:	f7ff fd5f 	bl	8000e00 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001342:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8001344:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001346:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001348:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800134c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8001350:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8001352:	4618      	mov	r0, r3
 8001354:	e7fc      	b.n	8001350 <HAL_LTDC_SetAddress+0x3a>
	...

08001358 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8001358:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800135c:	2b01      	cmp	r3, #1
 800135e:	f04f 0302 	mov.w	r3, #2
 8001362:	d012      	beq.n	800138a <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001364:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001368:	6803      	ldr	r3, [r0, #0]
 800136a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_LTDC_ProgramLineEvent+0x38>)
 8001374:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8001376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800137e:	2301      	movs	r3, #1
 8001380:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001384:	2300      	movs	r3, #0
 8001386:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800138a:	4618      	mov	r0, r3
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	50001000 	.word	0x50001000

08001394 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff fb44 	bl	8000a24 <HAL_GetTick>
 800139c:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d061      	beq.n	8001466 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80013a2:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80013a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80013a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80013b0:	68d3      	ldr	r3, [r2, #12]
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	07d2      	lsls	r2, r2, #31
 80013be:	d448      	bmi.n	8001452 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80013c0:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80013c8:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	69e1      	ldr	r1, [r4, #28]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	6a21      	ldr	r1, [r4, #32]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013d8:	430a      	orrs	r2, r1
 80013da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013dc:	430a      	orrs	r2, r1
 80013de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013e0:	430a      	orrs	r2, r1
 80013e2:	68a1      	ldr	r1, [r4, #8]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80013e8:	3901      	subs	r1, #1
 80013ea:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80013ee:	6861      	ldr	r1, [r4, #4]
 80013f0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80013f4:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80013f6:	d103      	bne.n	8001400 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80013fe:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8001404:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001406:	2a00      	cmp	r2, #0
 8001408:	da04      	bge.n	8001414 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800140a:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800140c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800140e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8001412:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8001414:	b292      	uxth	r2, r2
 8001416:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8001418:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800141a:	2a00      	cmp	r2, #0
 800141c:	da25      	bge.n	800146a <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800141e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8001420:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8001422:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8001426:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001428:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800142a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800142e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001432:	621a      	str	r2, [r3, #32]
 8001434:	f04f 0200 	mov.w	r2, #0
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8001438:	d019      	beq.n	800146e <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800143a:	b2c9      	uxtb	r1, r1
 800143c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8001440:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8001442:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001444:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8001446:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8001448:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800144c:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8001450:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8001452:	f7ff fae7 	bl	8000a24 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	2805      	cmp	r0, #5
 800145a:	d9ad      	bls.n	80013b8 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800145c:	2340      	movs	r3, #64	; 0x40
 800145e:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8001460:	2303      	movs	r3, #3
 8001462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	e7f2      	b.n	8001450 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800146a:	6a18      	ldr	r0, [r3, #32]
 800146c:	e7dd      	b.n	800142a <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
 8001470:	e7e5      	b.n	800143e <HAL_MDMA_Init+0xaa>

08001472 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8001472:	b1d8      	cbz	r0, 80014ac <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8001474:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8001476:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8001478:	68d3      	ldr	r3, [r2, #12]
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8001484:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8001486:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8001488:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800148a:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800148c:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800148e:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8001490:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8001494:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8001496:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001498:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800149a:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800149c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80014a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80014a4:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 80014a8:	4618      	mov	r0, r3
 80014aa:	4770      	bx	lr
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	4770      	bx	lr

080014b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014b0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80014b2:	4c10      	ldr	r4, [pc, #64]	; (80014f4 <HAL_PWREx_ConfigSupply+0x44>)
 80014b4:	68e3      	ldr	r3, [r4, #12]
 80014b6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014ba:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80014bc:	d105      	bne.n	80014ca <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014be:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014c2:	1a18      	subs	r0, r3, r0
 80014c4:	bf18      	it	ne
 80014c6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014ca:	f023 0307 	bic.w	r3, r3, #7
 80014ce:	4318      	orrs	r0, r3
 80014d0:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80014d2:	f7ff faa7 	bl	8000a24 <HAL_GetTick>
 80014d6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014d8:	6863      	ldr	r3, [r4, #4]
 80014da:	049b      	lsls	r3, r3, #18
 80014dc:	d501      	bpl.n	80014e2 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80014de:	2000      	movs	r0, #0
 80014e0:	e7f2      	b.n	80014c8 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014e2:	f7ff fa9f 	bl	8000a24 <HAL_GetTick>
 80014e6:	1b40      	subs	r0, r0, r5
 80014e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014ec:	d9f4      	bls.n	80014d8 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e7ea      	b.n	80014c8 <HAL_PWREx_ConfigSupply+0x18>
 80014f2:	bf00      	nop
 80014f4:	58024800 	.word	0x58024800

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fa:	4604      	mov	r4, r0
 80014fc:	b908      	cbnz	r0, 8001502 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	e08e      	b.n	8001620 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	6803      	ldr	r3, [r0, #0]
 8001504:	07dd      	lsls	r5, r3, #31
 8001506:	d45e      	bmi.n	80015c6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	0798      	lsls	r0, r3, #30
 800150c:	f100 80b0 	bmi.w	8001670 <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	06da      	lsls	r2, r3, #27
 8001514:	d527      	bpl.n	8001566 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	4baa      	ldr	r3, [pc, #680]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 8001518:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800151a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001520:	2a08      	cmp	r2, #8
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x3c>
 8001524:	2a18      	cmp	r2, #24
 8001526:	f040 810e 	bne.w	8001746 <HAL_RCC_OscConfig+0x24e>
 800152a:	f001 0203 	and.w	r2, r1, #3
 800152e:	2a01      	cmp	r2, #1
 8001530:	f040 8109 	bne.w	8001746 <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	05db      	lsls	r3, r3, #23
 8001538:	d502      	bpl.n	8001540 <HAL_RCC_OscConfig+0x48>
 800153a:	69e3      	ldr	r3, [r4, #28]
 800153c:	2b80      	cmp	r3, #128	; 0x80
 800153e:	d1de      	bne.n	80014fe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001540:	f7ff fa76 	bl	8000a30 <HAL_GetREVID>
 8001544:	f241 0303 	movw	r3, #4099	; 0x1003
 8001548:	6a21      	ldr	r1, [r4, #32]
 800154a:	4298      	cmp	r0, r3
 800154c:	4b9c      	ldr	r3, [pc, #624]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 800154e:	f200 80f3 	bhi.w	8001738 <HAL_RCC_OscConfig+0x240>
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2920      	cmp	r1, #32
 8001556:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800155a:	bf0c      	ite	eq
 800155c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8001560:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8001564:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	0719      	lsls	r1, r3, #28
 800156a:	f100 812d 	bmi.w	80017c8 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	069a      	lsls	r2, r3, #26
 8001572:	f100 814e 	bmi.w	8001812 <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	075d      	lsls	r5, r3, #29
 800157a:	d51e      	bpl.n	80015ba <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800157c:	4d91      	ldr	r5, [pc, #580]	; (80017c4 <HAL_RCC_OscConfig+0x2cc>)
 800157e:	682b      	ldr	r3, [r5, #0]
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001586:	f7ff fa4d 	bl	8000a24 <HAL_GetTick>
 800158a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	05da      	lsls	r2, r3, #23
 8001590:	f140 8164 	bpl.w	800185c <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	68a3      	ldr	r3, [r4, #8]
 8001596:	4d8a      	ldr	r5, [pc, #552]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 8001598:	2b01      	cmp	r3, #1
 800159a:	f040 8166 	bne.w	800186a <HAL_RCC_OscConfig+0x372>
 800159e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa3b 	bl	8000a24 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015ae:	4e84      	ldr	r6, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80015b0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80015b4:	079b      	lsls	r3, r3, #30
 80015b6:	f140 817e 	bpl.w	80018b6 <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80015bc:	2800      	cmp	r0, #0
 80015be:	f040 8181 	bne.w	80018c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 80015c2:	2000      	movs	r0, #0
 80015c4:	e02c      	b.n	8001620 <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 80015c8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015cc:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015d0:	2a10      	cmp	r2, #16
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015d4:	2a18      	cmp	r2, #24
 80015d6:	d10a      	bne.n	80015ee <HAL_RCC_OscConfig+0xf6>
 80015d8:	f001 0203 	and.w	r2, r1, #3
 80015dc:	2a02      	cmp	r2, #2
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0399      	lsls	r1, r3, #14
 80015e4:	d590      	bpl.n	8001508 <HAL_RCC_OscConfig+0x10>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d18d      	bne.n	8001508 <HAL_RCC_OscConfig+0x10>
 80015ec:	e787      	b.n	80014fe <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	4d73      	ldr	r5, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d114      	bne.n	8001622 <HAL_RCC_OscConfig+0x12a>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fe:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001604:	f7ff fa0e 	bl	8000a24 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001608:	4e6d      	ldr	r6, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800160a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800160c:	6833      	ldr	r3, [r6, #0]
 800160e:	039a      	lsls	r2, r3, #14
 8001610:	f53f af7a 	bmi.w	8001508 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fa06 	bl	8000a24 <HAL_GetTick>
 8001618:	1bc0      	subs	r0, r0, r7
 800161a:	42a8      	cmp	r0, r5
 800161c:	d9f6      	bls.n	800160c <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
}
 8001620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001622:	b9b3      	cbnz	r3, 8001652 <HAL_RCC_OscConfig+0x15a>
 8001624:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001626:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	602b      	str	r3, [r5, #0]
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001638:	f7ff f9f4 	bl	8000a24 <HAL_GetTick>
 800163c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	039b      	lsls	r3, r3, #14
 8001642:	f57f af61 	bpl.w	8001508 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001646:	f7ff f9ed 	bl	8000a24 <HAL_GetTick>
 800164a:	1b80      	subs	r0, r0, r6
 800164c:	42b8      	cmp	r0, r7
 800164e:	d9f6      	bls.n	800163e <HAL_RCC_OscConfig+0x146>
 8001650:	e7e5      	b.n	800161e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	d103      	bne.n	8001662 <HAL_RCC_OscConfig+0x16a>
 800165a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165e:	602b      	str	r3, [r5, #0]
 8001660:	e7ca      	b.n	80015f8 <HAL_RCC_OscConfig+0x100>
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	602b      	str	r3, [r5, #0]
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	e7c6      	b.n	80015fe <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 8001672:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001674:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001676:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800167a:	d003      	beq.n	8001684 <HAL_RCC_OscConfig+0x18c>
 800167c:	2a18      	cmp	r2, #24
 800167e:	d120      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1ca>
 8001680:	078e      	lsls	r6, r1, #30
 8001682:	d11e      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	075d      	lsls	r5, r3, #29
 8001688:	d503      	bpl.n	8001692 <HAL_RCC_OscConfig+0x19a>
 800168a:	68e3      	ldr	r3, [r4, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f43f af36 	beq.w	80014fe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	f7ff f9cd 	bl	8000a30 <HAL_GetREVID>
 8001696:	f241 0303 	movw	r3, #4099	; 0x1003
 800169a:	6921      	ldr	r1, [r4, #16]
 800169c:	4298      	cmp	r0, r3
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	d809      	bhi.n	80016b8 <HAL_RCC_OscConfig+0x1c0>
 80016a4:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80016a8:	2940      	cmp	r1, #64	; 0x40
 80016aa:	bf0c      	ite	eq
 80016ac:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80016b0:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e72b      	b.n	8001510 <HAL_RCC_OscConfig+0x18>
 80016b8:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80016bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016c0:	e7f8      	b.n	80016b4 <HAL_RCC_OscConfig+0x1bc>
 80016c2:	4d3f      	ldr	r5, [pc, #252]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016c6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c8:	b332      	cbz	r2, 8001718 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ca:	f023 0319 	bic.w	r3, r3, #25
 80016ce:	4313      	orrs	r3, r2
 80016d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016d2:	f7ff f9a7 	bl	8000a24 <HAL_GetTick>
 80016d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	0758      	lsls	r0, r3, #29
 80016dc:	d511      	bpl.n	8001702 <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	f7ff f9a7 	bl	8000a30 <HAL_GetREVID>
 80016e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80016e6:	6922      	ldr	r2, [r4, #16]
 80016e8:	4298      	cmp	r0, r3
 80016ea:	686b      	ldr	r3, [r5, #4]
 80016ec:	d80f      	bhi.n	800170e <HAL_RCC_OscConfig+0x216>
 80016ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016f2:	2a40      	cmp	r2, #64	; 0x40
 80016f4:	bf0c      	ite	eq
 80016f6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80016fa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80016fe:	606b      	str	r3, [r5, #4]
 8001700:	e706      	b.n	8001510 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff f98f 	bl	8000a24 <HAL_GetTick>
 8001706:	1b80      	subs	r0, r0, r6
 8001708:	2802      	cmp	r0, #2
 800170a:	d9e5      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1e0>
 800170c:	e787      	b.n	800161e <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001712:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001716:	e7f2      	b.n	80016fe <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800171e:	f7ff f981 	bl	8000a24 <HAL_GetTick>
 8001722:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	0759      	lsls	r1, r3, #29
 8001728:	f57f aef2 	bpl.w	8001510 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172c:	f7ff f97a 	bl	8000a24 <HAL_GetTick>
 8001730:	1b80      	subs	r0, r0, r6
 8001732:	2802      	cmp	r0, #2
 8001734:	d9f6      	bls.n	8001724 <HAL_RCC_OscConfig+0x22c>
 8001736:	e772      	b.n	800161e <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800173e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	e70f      	b.n	8001566 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001746:	69e3      	ldr	r3, [r4, #28]
 8001748:	4d1d      	ldr	r5, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x2c8>)
 800174a:	b343      	cbz	r3, 800179e <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001752:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001754:	f7ff f966 	bl	8000a24 <HAL_GetTick>
 8001758:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	05df      	lsls	r7, r3, #23
 800175e:	d511      	bpl.n	8001784 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001760:	f7ff f966 	bl	8000a30 <HAL_GetREVID>
 8001764:	f241 0303 	movw	r3, #4099	; 0x1003
 8001768:	6a22      	ldr	r2, [r4, #32]
 800176a:	4298      	cmp	r0, r3
 800176c:	d810      	bhi.n	8001790 <HAL_RCC_OscConfig+0x298>
 800176e:	686b      	ldr	r3, [r5, #4]
 8001770:	2a20      	cmp	r2, #32
 8001772:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001776:	bf0c      	ite	eq
 8001778:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800177c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001780:	606b      	str	r3, [r5, #4]
 8001782:	e6f0      	b.n	8001566 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001784:	f7ff f94e 	bl	8000a24 <HAL_GetTick>
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	2802      	cmp	r0, #2
 800178c:	d9e5      	bls.n	800175a <HAL_RCC_OscConfig+0x262>
 800178e:	e746      	b.n	800161e <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001790:	68eb      	ldr	r3, [r5, #12]
 8001792:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001796:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800179a:	60eb      	str	r3, [r5, #12]
 800179c:	e6e3      	b.n	8001566 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017a6:	f7ff f93d 	bl	8000a24 <HAL_GetTick>
 80017aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	05d8      	lsls	r0, r3, #23
 80017b0:	f57f aed9 	bpl.w	8001566 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017b4:	f7ff f936 	bl	8000a24 <HAL_GetTick>
 80017b8:	1b80      	subs	r0, r0, r6
 80017ba:	2802      	cmp	r0, #2
 80017bc:	d9f6      	bls.n	80017ac <HAL_RCC_OscConfig+0x2b4>
 80017be:	e72e      	b.n	800161e <HAL_RCC_OscConfig+0x126>
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c8:	6963      	ldr	r3, [r4, #20]
 80017ca:	4d96      	ldr	r5, [pc, #600]	; (8001a24 <HAL_RCC_OscConfig+0x52c>)
 80017cc:	b183      	cbz	r3, 80017f0 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 80017ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80017d6:	f7ff f925 	bl	8000a24 <HAL_GetTick>
 80017da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017de:	079b      	lsls	r3, r3, #30
 80017e0:	f53f aec5 	bmi.w	800156e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff f91e 	bl	8000a24 <HAL_GetTick>
 80017e8:	1b80      	subs	r0, r0, r6
 80017ea:	2802      	cmp	r0, #2
 80017ec:	d9f6      	bls.n	80017dc <HAL_RCC_OscConfig+0x2e4>
 80017ee:	e716      	b.n	800161e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 80017f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80017f8:	f7ff f914 	bl	8000a24 <HAL_GetTick>
 80017fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001800:	079f      	lsls	r7, r3, #30
 8001802:	f57f aeb4 	bpl.w	800156e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff f90d 	bl	8000a24 <HAL_GetTick>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	2802      	cmp	r0, #2
 800180e:	d9f6      	bls.n	80017fe <HAL_RCC_OscConfig+0x306>
 8001810:	e705      	b.n	800161e <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001812:	69a3      	ldr	r3, [r4, #24]
 8001814:	4d83      	ldr	r5, [pc, #524]	; (8001a24 <HAL_RCC_OscConfig+0x52c>)
 8001816:	b183      	cbz	r3, 800183a <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800181e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001820:	f7ff f900 	bl	8000a24 <HAL_GetTick>
 8001824:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	0498      	lsls	r0, r3, #18
 800182a:	f53f aea4 	bmi.w	8001576 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800182e:	f7ff f8f9 	bl	8000a24 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	2802      	cmp	r0, #2
 8001836:	d9f6      	bls.n	8001826 <HAL_RCC_OscConfig+0x32e>
 8001838:	e6f1      	b.n	800161e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001840:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001842:	f7ff f8ef 	bl	8000a24 <HAL_GetTick>
 8001846:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	0499      	lsls	r1, r3, #18
 800184c:	f57f ae93 	bpl.w	8001576 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001850:	f7ff f8e8 	bl	8000a24 <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	2802      	cmp	r0, #2
 8001858:	d9f6      	bls.n	8001848 <HAL_RCC_OscConfig+0x350>
 800185a:	e6e0      	b.n	800161e <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800185c:	f7ff f8e2 	bl	8000a24 <HAL_GetTick>
 8001860:	1b80      	subs	r0, r0, r6
 8001862:	2864      	cmp	r0, #100	; 0x64
 8001864:	f67f ae92 	bls.w	800158c <HAL_RCC_OscConfig+0x94>
 8001868:	e6d9      	b.n	800161e <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	b9b3      	cbnz	r3, 800189a <HAL_RCC_OscConfig+0x3a2>
 800186c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	672b      	str	r3, [r5, #112]	; 0x70
 8001878:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800187a:	f023 0304 	bic.w	r3, r3, #4
 800187e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001880:	f7ff f8d0 	bl	8000a24 <HAL_GetTick>
 8001884:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001886:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001888:	0798      	lsls	r0, r3, #30
 800188a:	f57f ae96 	bpl.w	80015ba <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff f8c9 	bl	8000a24 <HAL_GetTick>
 8001892:	1b80      	subs	r0, r0, r6
 8001894:	42b8      	cmp	r0, r7
 8001896:	d9f6      	bls.n	8001886 <HAL_RCC_OscConfig+0x38e>
 8001898:	e6c1      	b.n	800161e <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	2b05      	cmp	r3, #5
 800189c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800189e:	d103      	bne.n	80018a8 <HAL_RCC_OscConfig+0x3b0>
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	672b      	str	r3, [r5, #112]	; 0x70
 80018a6:	e67a      	b.n	800159e <HAL_RCC_OscConfig+0xa6>
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	672b      	str	r3, [r5, #112]	; 0x70
 80018ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	e676      	b.n	80015a4 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f8b5 	bl	8000a24 <HAL_GetTick>
 80018ba:	1bc0      	subs	r0, r0, r7
 80018bc:	42a8      	cmp	r0, r5
 80018be:	f67f ae78 	bls.w	80015b2 <HAL_RCC_OscConfig+0xba>
 80018c2:	e6ac      	b.n	800161e <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018c4:	4d57      	ldr	r5, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x52c>)
 80018c6:	692b      	ldr	r3, [r5, #16]
 80018c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018cc:	2b18      	cmp	r3, #24
 80018ce:	d07a      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 80018d0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018da:	d167      	bne.n	80019ac <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 80018dc:	f7ff f8a2 	bl	8000a24 <HAL_GetTick>
 80018e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e2:	682b      	ldr	r3, [r5, #0]
 80018e4:	0199      	lsls	r1, r3, #6
 80018e6:	d45b      	bmi.n	80019a0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80018ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018ec:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80018f0:	f023 0303 	bic.w	r3, r3, #3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80018fc:	62ab      	str	r3, [r5, #40]	; 0x28
 80018fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001900:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001902:	3b01      	subs	r3, #1
 8001904:	3a01      	subs	r2, #1
 8001906:	025b      	lsls	r3, r3, #9
 8001908:	0412      	lsls	r2, r2, #16
 800190a:	b29b      	uxth	r3, r3
 800190c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001910:	4313      	orrs	r3, r2
 8001912:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001914:	3a01      	subs	r2, #1
 8001916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800191a:	4313      	orrs	r3, r2
 800191c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800191e:	3a01      	subs	r2, #1
 8001920:	0612      	lsls	r2, r2, #24
 8001922:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001926:	4313      	orrs	r3, r2
 8001928:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800192a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001932:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001934:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800193a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800193e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001942:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001944:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001946:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001948:	f023 030c 	bic.w	r3, r3, #12
 800194c:	4313      	orrs	r3, r2
 800194e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001950:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001952:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001954:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001958:	4c32      	ldr	r4, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800195a:	4313      	orrs	r3, r2
 800195c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800195e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001966:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800196e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001976:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800197e:	682b      	ldr	r3, [r5, #0]
 8001980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001984:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001986:	f7ff f84d 	bl	8000a24 <HAL_GetTick>
 800198a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	019a      	lsls	r2, r3, #6
 8001990:	f53f ae17 	bmi.w	80015c2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f846 	bl	8000a24 <HAL_GetTick>
 8001998:	1b40      	subs	r0, r0, r5
 800199a:	2802      	cmp	r0, #2
 800199c:	d9f6      	bls.n	800198c <HAL_RCC_OscConfig+0x494>
 800199e:	e63e      	b.n	800161e <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f840 	bl	8000a24 <HAL_GetTick>
 80019a4:	1b80      	subs	r0, r0, r6
 80019a6:	2802      	cmp	r0, #2
 80019a8:	d99b      	bls.n	80018e2 <HAL_RCC_OscConfig+0x3ea>
 80019aa:	e638      	b.n	800161e <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 80019ac:	f7ff f83a 	bl	8000a24 <HAL_GetTick>
 80019b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	f57f ae04 	bpl.w	80015c2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f833 	bl	8000a24 <HAL_GetTick>
 80019be:	1b00      	subs	r0, r0, r4
 80019c0:	2802      	cmp	r0, #2
 80019c2:	d9f6      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4ba>
 80019c4:	e62b      	b.n	800161e <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	f43f ae28 	beq.w	8001620 <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80019d6:	4281      	cmp	r1, r0
 80019d8:	f47f ad91 	bne.w	80014fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019dc:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80019e2:	428a      	cmp	r2, r1
 80019e4:	f47f ad8b 	bne.w	80014fe <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019ea:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80019ee:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f0:	4291      	cmp	r1, r2
 80019f2:	f47f ad84 	bne.w	80014fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80019f8:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80019fc:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019fe:	4291      	cmp	r1, r2
 8001a00:	f47f ad7d 	bne.w	80014fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a06:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001a0a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a0c:	4291      	cmp	r1, r2
 8001a0e:	f47f ad76 	bne.w	80014fe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a14:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001a18:	3801      	subs	r0, #1
    return HAL_ERROR;
 8001a1a:	1a18      	subs	r0, r3, r0
 8001a1c:	bf18      	it	ne
 8001a1e:	2001      	movne	r0, #1
 8001a20:	e5fe      	b.n	8001620 <HAL_RCC_OscConfig+0x128>
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400

08001a28 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a28:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001a30:	2a10      	cmp	r2, #16
{
 8001a32:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a34:	f000 8084 	beq.w	8001b40 <HAL_RCC_GetSysClockFreq+0x118>
 8001a38:	2a18      	cmp	r2, #24
 8001a3a:	d00c      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x2e>
 8001a3c:	b10a      	cbz	r2, 8001a42 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a3e:	4842      	ldr	r0, [pc, #264]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001a40:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4841      	ldr	r0, [pc, #260]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x124>)
 8001a46:	f012 0f20 	tst.w	r2, #32
 8001a4a:	d0f9      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001a52:	40d8      	lsrs	r0, r3
 8001a54:	e7f4      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001a56:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001a58:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001a5c:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001a60:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d0ec      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x18>
 8001a66:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a6a:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001a6e:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 8001a72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a7a:	4342      	muls	r2, r0
 8001a7c:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001a80:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8001a84:	2a01      	cmp	r2, #1
 8001a86:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8001a8a:	d002      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x6a>
 8001a8c:	d30f      	bcc.n	8001aae <HAL_RCC_GetSysClockFreq+0x86>
 8001a8e:	2a02      	cmp	r2, #2
 8001a90:	d048      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a98:	ee07 3a10 	vmov	s14, r3
 8001a9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001aa8:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8001b50 <HAL_RCC_GetSysClockFreq+0x128>
 8001aac:	e037      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	0692      	lsls	r2, r2, #26
 8001ab2:	d527      	bpl.n	8001b04 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x124>)
 8001ab8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001abe:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac4:	ee07 2a10 	vmov	s14, r2
 8001ac8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001acc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001ad0:	ee06 3a90 	vmov	s13, r3
 8001ad4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001adc:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001aec:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001aee:	ee07 3a10 	vmov	s14, r3
 8001af2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001af6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001afa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001afe:	ee17 0a90 	vmov	r0, s15
 8001b02:	e79d      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0a:	ee07 3a10 	vmov	s14, r3
 8001b0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b16:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b1a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001b54 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b1e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001b22:	e7dd      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2a:	ee07 3a10 	vmov	s14, r3
 8001b2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001b3a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8001b58 <HAL_RCC_GetSysClockFreq+0x130>
 8001b3e:	e7ee      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 8001b40:	4806      	ldr	r0, [pc, #24]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x134>)
 8001b42:	e77d      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x18>
 8001b44:	58024400 	.word	0x58024400
 8001b48:	003d0900 	.word	0x003d0900
 8001b4c:	03d09000 	.word	0x03d09000
 8001b50:	4a742400 	.word	0x4a742400
 8001b54:	4c742400 	.word	0x4c742400
 8001b58:	4bbebc20 	.word	0x4bbebc20
 8001b5c:	017d7840 	.word	0x017d7840

08001b60 <HAL_RCC_ClockConfig>:
{
 8001b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b64:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b66:	4604      	mov	r4, r0
 8001b68:	b910      	cbnz	r0, 8001b70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
}
 8001b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4a88      	ldr	r2, [pc, #544]	; (8001d94 <HAL_RCC_ClockConfig+0x234>)
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	428b      	cmp	r3, r1
 8001b7a:	f0c0 8093 	bcc.w	8001ca4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	075f      	lsls	r7, r3, #29
 8001b82:	f100 809b 	bmi.w	8001cbc <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	071e      	lsls	r6, r3, #28
 8001b88:	d50b      	bpl.n	8001ba2 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b8a:	4983      	ldr	r1, [pc, #524]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001b8c:	6966      	ldr	r6, [r4, #20]
 8001b8e:	69c8      	ldr	r0, [r1, #28]
 8001b90:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001b94:	4286      	cmp	r6, r0
 8001b96:	d904      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b98:	69ca      	ldr	r2, [r1, #28]
 8001b9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b9e:	4332      	orrs	r2, r6
 8001ba0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	06d8      	lsls	r0, r3, #27
 8001ba4:	d50b      	bpl.n	8001bbe <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ba6:	497c      	ldr	r1, [pc, #496]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001ba8:	69a6      	ldr	r6, [r4, #24]
 8001baa:	69c8      	ldr	r0, [r1, #28]
 8001bac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001bb0:	4286      	cmp	r6, r0
 8001bb2:	d904      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bb4:	69ca      	ldr	r2, [r1, #28]
 8001bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bba:	4332      	orrs	r2, r6
 8001bbc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bbe:	0699      	lsls	r1, r3, #26
 8001bc0:	d50b      	bpl.n	8001bda <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bc2:	4975      	ldr	r1, [pc, #468]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001bc4:	69e6      	ldr	r6, [r4, #28]
 8001bc6:	6a08      	ldr	r0, [r1, #32]
 8001bc8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001bcc:	4286      	cmp	r6, r0
 8001bce:	d904      	bls.n	8001bda <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001bd0:	6a0a      	ldr	r2, [r1, #32]
 8001bd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bd6:	4332      	orrs	r2, r6
 8001bd8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bda:	079a      	lsls	r2, r3, #30
 8001bdc:	d50b      	bpl.n	8001bf6 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bde:	496e      	ldr	r1, [pc, #440]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001be0:	68e6      	ldr	r6, [r4, #12]
 8001be2:	6988      	ldr	r0, [r1, #24]
 8001be4:	f000 000f 	and.w	r0, r0, #15
 8001be8:	4286      	cmp	r6, r0
 8001bea:	d904      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	698a      	ldr	r2, [r1, #24]
 8001bee:	f022 020f 	bic.w	r2, r2, #15
 8001bf2:	4332      	orrs	r2, r6
 8001bf4:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	07df      	lsls	r7, r3, #31
 8001bf8:	d46e      	bmi.n	8001cd8 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	079e      	lsls	r6, r3, #30
 8001bfe:	f100 80a1 	bmi.w	8001d44 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c02:	4964      	ldr	r1, [pc, #400]	; (8001d94 <HAL_RCC_ClockConfig+0x234>)
 8001c04:	680a      	ldr	r2, [r1, #0]
 8001c06:	f002 020f 	and.w	r2, r2, #15
 8001c0a:	42aa      	cmp	r2, r5
 8001c0c:	f200 80a8 	bhi.w	8001d60 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c10:	0758      	lsls	r0, r3, #29
 8001c12:	f100 80b1 	bmi.w	8001d78 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	0719      	lsls	r1, r3, #28
 8001c18:	d50b      	bpl.n	8001c32 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c1a:	495f      	ldr	r1, [pc, #380]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001c1c:	6965      	ldr	r5, [r4, #20]
 8001c1e:	69c8      	ldr	r0, [r1, #28]
 8001c20:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001c24:	4285      	cmp	r5, r0
 8001c26:	d204      	bcs.n	8001c32 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c28:	69ca      	ldr	r2, [r1, #28]
 8001c2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c2e:	432a      	orrs	r2, r5
 8001c30:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	06da      	lsls	r2, r3, #27
 8001c34:	d50b      	bpl.n	8001c4e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c36:	4958      	ldr	r1, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001c38:	69a5      	ldr	r5, [r4, #24]
 8001c3a:	69c8      	ldr	r0, [r1, #28]
 8001c3c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001c40:	4285      	cmp	r5, r0
 8001c42:	d204      	bcs.n	8001c4e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c44:	69ca      	ldr	r2, [r1, #28]
 8001c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c4a:	432a      	orrs	r2, r5
 8001c4c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c4e:	069b      	lsls	r3, r3, #26
 8001c50:	d50b      	bpl.n	8001c6a <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c52:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001c54:	69e0      	ldr	r0, [r4, #28]
 8001c56:	6a11      	ldr	r1, [r2, #32]
 8001c58:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001c5c:	4288      	cmp	r0, r1
 8001c5e:	d204      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c60:	6a13      	ldr	r3, [r2, #32]
 8001c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c66:	4303      	orrs	r3, r0
 8001c68:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c6a:	f7ff fedd 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 8001c6e:	494a      	ldr	r1, [pc, #296]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001c70:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <HAL_RCC_ClockConfig+0x23c>)
 8001c72:	698b      	ldr	r3, [r1, #24]
 8001c74:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c80:	698b      	ldr	r3, [r1, #24]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <HAL_RCC_ClockConfig+0x240>)
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	fa20 f303 	lsr.w	r3, r0, r3
 8001c92:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_ClockConfig+0x248>)
}
 8001c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f7fe be62 	b.w	8000968 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f023 030f 	bic.w	r3, r3, #15
 8001caa:	430b      	orrs	r3, r1
 8001cac:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	f47f af58 	bne.w	8001b6a <HAL_RCC_ClockConfig+0xa>
 8001cba:	e760      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cbc:	4936      	ldr	r1, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001cbe:	6926      	ldr	r6, [r4, #16]
 8001cc0:	6988      	ldr	r0, [r1, #24]
 8001cc2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001cc6:	4286      	cmp	r6, r0
 8001cc8:	f67f af5d 	bls.w	8001b86 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ccc:	698a      	ldr	r2, [r1, #24]
 8001cce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cd2:	4332      	orrs	r2, r6
 8001cd4:	618a      	str	r2, [r1, #24]
 8001cd6:	e756      	b.n	8001b86 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001cda:	68a1      	ldr	r1, [r4, #8]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce8:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	2902      	cmp	r1, #2
 8001cec:	d11d      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf2:	f43f af3a 	beq.w	8001b6a <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfc:	4e26      	ldr	r6, [pc, #152]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	f022 0207 	bic.w	r2, r2, #7
 8001d02:	430a      	orrs	r2, r1
 8001d04:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001d06:	f7fe fe8d 	bl	8000a24 <HAL_GetTick>
 8001d0a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0c:	6933      	ldr	r3, [r6, #16]
 8001d0e:	6862      	ldr	r2, [r4, #4]
 8001d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d14:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001d18:	f43f af6f 	beq.w	8001bfa <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7fe fe82 	bl	8000a24 <HAL_GetTick>
 8001d20:	1bc0      	subs	r0, r0, r7
 8001d22:	4540      	cmp	r0, r8
 8001d24:	d9f2      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001d26:	2003      	movs	r0, #3
 8001d28:	e720      	b.n	8001b6c <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	2903      	cmp	r1, #3
 8001d2c:	d102      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d2e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d32:	e7de      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d34:	2901      	cmp	r1, #1
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d38:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d3c:	e7d9      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d3e:	f012 0f04 	tst.w	r2, #4
 8001d42:	e7d6      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d44:	4914      	ldr	r1, [pc, #80]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001d46:	68e6      	ldr	r6, [r4, #12]
 8001d48:	6988      	ldr	r0, [r1, #24]
 8001d4a:	f000 000f 	and.w	r0, r0, #15
 8001d4e:	4286      	cmp	r6, r0
 8001d50:	f4bf af57 	bcs.w	8001c02 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	698a      	ldr	r2, [r1, #24]
 8001d56:	f022 020f 	bic.w	r2, r2, #15
 8001d5a:	4332      	orrs	r2, r6
 8001d5c:	618a      	str	r2, [r1, #24]
 8001d5e:	e750      	b.n	8001c02 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d60:	680a      	ldr	r2, [r1, #0]
 8001d62:	f022 020f 	bic.w	r2, r2, #15
 8001d66:	432a      	orrs	r2, r5
 8001d68:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	680a      	ldr	r2, [r1, #0]
 8001d6c:	f002 020f 	and.w	r2, r2, #15
 8001d70:	42aa      	cmp	r2, r5
 8001d72:	f47f aefa 	bne.w	8001b6a <HAL_RCC_ClockConfig+0xa>
 8001d76:	e74b      	b.n	8001c10 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <HAL_RCC_ClockConfig+0x238>)
 8001d7a:	6925      	ldr	r5, [r4, #16]
 8001d7c:	6988      	ldr	r0, [r1, #24]
 8001d7e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001d82:	4285      	cmp	r5, r0
 8001d84:	f4bf af47 	bcs.w	8001c16 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d88:	698a      	ldr	r2, [r1, #24]
 8001d8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	618a      	str	r2, [r1, #24]
 8001d92:	e740      	b.n	8001c16 <HAL_RCC_ClockConfig+0xb6>
 8001d94:	52002000 	.word	0x52002000
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	08008158 	.word	0x08008158
 8001da0:	24000004 	.word	0x24000004
 8001da4:	24000000 	.word	0x24000000
 8001da8:	2400000c 	.word	0x2400000c

08001dac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001dae:	4c3a      	ldr	r4, [pc, #232]	; (8001e98 <RCCEx_PLL2_Config+0xec>)
{
 8001db0:	4606      	mov	r6, r0
 8001db2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d069      	beq.n	8001e92 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001dc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc6:	f7fe fe2d 	bl	8000a24 <HAL_GetTick>
 8001dca:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	011a      	lsls	r2, r3, #4
 8001dd0:	d44b      	bmi.n	8001e6a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dd4:	6832      	ldr	r2, [r6, #0]
 8001dd6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dda:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001dde:	62a3      	str	r3, [r4, #40]	; 0x28
 8001de0:	68b3      	ldr	r3, [r6, #8]
 8001de2:	68f2      	ldr	r2, [r6, #12]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	025b      	lsls	r3, r3, #9
 8001dea:	0412      	lsls	r2, r2, #16
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001df2:	4313      	orrs	r3, r2
 8001df4:	6872      	ldr	r2, [r6, #4]
 8001df6:	3a01      	subs	r2, #1
 8001df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6932      	ldr	r2, [r6, #16]
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0612      	lsls	r2, r2, #24
 8001e04:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e0e:	6972      	ldr	r2, [r6, #20]
 8001e10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e14:	4313      	orrs	r3, r2
 8001e16:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e1a:	69b2      	ldr	r2, [r6, #24]
 8001e1c:	f023 0320 	bic.w	r3, r3, #32
 8001e20:	4313      	orrs	r3, r2
 8001e22:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e26:	f023 0310 	bic.w	r3, r3, #16
 8001e2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001e2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e2e:	69f2      	ldr	r2, [r6, #28]
 8001e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e3c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001e3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001e48:	b9b5      	cbnz	r5, 8001e78 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001e50:	4c11      	ldr	r4, [pc, #68]	; (8001e98 <RCCEx_PLL2_Config+0xec>)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5a:	f7fe fde3 	bl	8000a24 <HAL_GetTick>
 8001e5e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	d50f      	bpl.n	8001e86 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001e66:	2000      	movs	r0, #0
 8001e68:	e005      	b.n	8001e76 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e6a:	f7fe fddb 	bl	8000a24 <HAL_GetTick>
 8001e6e:	1bc0      	subs	r0, r0, r7
 8001e70:	2802      	cmp	r0, #2
 8001e72:	d9ab      	bls.n	8001dcc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001e74:	2003      	movs	r0, #3
}
 8001e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001e78:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001e7a:	bf0c      	ite	eq
 8001e7c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001e80:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001e84:	e7e3      	b.n	8001e4e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e86:	f7fe fdcd 	bl	8000a24 <HAL_GetTick>
 8001e8a:	1b40      	subs	r0, r0, r5
 8001e8c:	2802      	cmp	r0, #2
 8001e8e:	d9e7      	bls.n	8001e60 <RCCEx_PLL2_Config+0xb4>
 8001e90:	e7f0      	b.n	8001e74 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
 8001e94:	e7ef      	b.n	8001e76 <RCCEx_PLL2_Config+0xca>
 8001e96:	bf00      	nop
 8001e98:	58024400 	.word	0x58024400

08001e9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e9e:	4c3a      	ldr	r4, [pc, #232]	; (8001f88 <RCCEx_PLL3_Config+0xec>)
{
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d069      	beq.n	8001f82 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fdb5 	bl	8000a24 <HAL_GetTick>
 8001eba:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	009a      	lsls	r2, r3, #2
 8001ec0:	d44b      	bmi.n	8001f5a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ec4:	6832      	ldr	r2, [r6, #0]
 8001ec6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001eca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001ece:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ed0:	68b3      	ldr	r3, [r6, #8]
 8001ed2:	68f2      	ldr	r2, [r6, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	025b      	lsls	r3, r3, #9
 8001eda:	0412      	lsls	r2, r2, #16
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	6872      	ldr	r2, [r6, #4]
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eec:	4313      	orrs	r3, r2
 8001eee:	6932      	ldr	r2, [r6, #16]
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0612      	lsls	r2, r2, #24
 8001ef4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001efe:	6972      	ldr	r2, [r6, #20]
 8001f00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f04:	4313      	orrs	r3, r2
 8001f06:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f0a:	69b2      	ldr	r2, [r6, #24]
 8001f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f10:	4313      	orrs	r3, r2
 8001f12:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001f1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f1e:	69f2      	ldr	r2, [r6, #28]
 8001f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f2c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001f38:	b9b5      	cbnz	r5, 8001f68 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001f40:	4c11      	ldr	r4, [pc, #68]	; (8001f88 <RCCEx_PLL3_Config+0xec>)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4a:	f7fe fd6b 	bl	8000a24 <HAL_GetTick>
 8001f4e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	d50f      	bpl.n	8001f76 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001f56:	2000      	movs	r0, #0
 8001f58:	e005      	b.n	8001f66 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f5a:	f7fe fd63 	bl	8000a24 <HAL_GetTick>
 8001f5e:	1bc0      	subs	r0, r0, r7
 8001f60:	2802      	cmp	r0, #2
 8001f62:	d9ab      	bls.n	8001ebc <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001f64:	2003      	movs	r0, #3
}
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001f68:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001f6a:	bf0c      	ite	eq
 8001f6c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001f70:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001f74:	e7e3      	b.n	8001f3e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f76:	f7fe fd55 	bl	8000a24 <HAL_GetTick>
 8001f7a:	1b40      	subs	r0, r0, r5
 8001f7c:	2802      	cmp	r0, #2
 8001f7e:	d9e7      	bls.n	8001f50 <RCCEx_PLL3_Config+0xb4>
 8001f80:	e7f0      	b.n	8001f64 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
 8001f84:	e7ef      	b.n	8001f66 <RCCEx_PLL3_Config+0xca>
 8001f86:	bf00      	nop
 8001f88:	58024400 	.word	0x58024400

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
{
 8001f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f90:	6806      	ldr	r6, [r0, #0]
{
 8001f92:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f94:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001f98:	d023      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001f9a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fa0:	d018      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001fa2:	d802      	bhi.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fa4:	b183      	cbz	r3, 8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001fa6:	2601      	movs	r6, #1
 8001fa8:	e01b      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fae:	d023      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fb4:	d1f7      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001fb6:	4a9f      	ldr	r2, [pc, #636]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fb8:	2600      	movs	r6, #0
 8001fba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001fbc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001fbe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6513      	str	r3, [r2, #80]	; 0x50
 8001fc6:	e00c      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fc8:	4a9a      	ldr	r2, [pc, #616]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001fd2:	e7f0      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	3004      	adds	r0, #4
 8001fd8:	f7ff fee8 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001fdc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d0e9      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	05dd      	lsls	r5, r3, #23
 8001fe6:	d534      	bpl.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d830      	bhi.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001fee:	e8df f003 	tbb	[pc, r3]
 8001ff2:	0f08      	.short	0x0f08
 8001ff4:	0d29      	.short	0x0d29
 8001ff6:	0d          	.byte	0x0d
 8001ff7:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	3024      	adds	r0, #36	; 0x24
 8001ffc:	f7ff ff4e 	bl	8001e9c <RCCEx_PLL3_Config>
 8002000:	e7ec      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002002:	4a8c      	ldr	r2, [pc, #560]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002004:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200a:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800200c:	4635      	mov	r5, r6
 800200e:	e004      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002010:	2100      	movs	r1, #0
 8002012:	1d20      	adds	r0, r4, #4
 8002014:	f7ff feca 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002018:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800201a:	b9e5      	cbnz	r5, 8002056 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800201c:	4a85      	ldr	r2, [pc, #532]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800201e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002020:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	430b      	orrs	r3, r1
 8002028:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	0598      	lsls	r0, r3, #22
 800202e:	d521      	bpl.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002032:	2b80      	cmp	r3, #128	; 0x80
 8002034:	d03b      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002036:	d810      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002038:	b36b      	cbz	r3, 8002096 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d031      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 800203e:	2601      	movs	r6, #1
 8002040:	4635      	mov	r5, r6
 8002042:	e017      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002044:	2100      	movs	r1, #0
 8002046:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800204a:	f7ff ff27 	bl	8001e9c <RCCEx_PLL3_Config>
 800204e:	e7e3      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8002050:	2601      	movs	r6, #1
 8002052:	4635      	mov	r5, r6
 8002054:	e7e9      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002056:	462e      	mov	r6, r5
 8002058:	e7e7      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 800205a:	2bc0      	cmp	r3, #192	; 0xc0
 800205c:	d002      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800205e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002062:	d1ec      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8002064:	bb4d      	cbnz	r5, 80020ba <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002066:	4a73      	ldr	r2, [pc, #460]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002068:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800206a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800206c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8002070:	430b      	orrs	r3, r1
 8002072:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	0559      	lsls	r1, r3, #21
 8002078:	d530      	bpl.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 800207a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800207e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002082:	d047      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002084:	d81b      	bhi.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d038      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x170>
 800208a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800208e:	d03b      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8002090:	2601      	movs	r6, #1
 8002092:	4635      	mov	r5, r6
 8002094:	e022      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002096:	4a67      	ldr	r2, [pc, #412]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002098:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800209a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80020a0:	e7e0      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020a2:	2100      	movs	r1, #0
 80020a4:	1d20      	adds	r0, r4, #4
 80020a6:	f7ff fe81 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020aa:	4605      	mov	r5, r0
      break;
 80020ac:	e7da      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020ae:	2100      	movs	r1, #0
 80020b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020b4:	f7ff fef2 	bl	8001e9c <RCCEx_PLL3_Config>
 80020b8:	e7f7      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80020ba:	462e      	mov	r6, r5
 80020bc:	e7da      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 80020be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80020c2:	d002      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80020c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020c8:	d1e2      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 80020ca:	bb4d      	cbnz	r5, 8002120 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80020cc:	4a59      	ldr	r2, [pc, #356]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80020ce:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80020d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020d4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80020d8:	430b      	orrs	r3, r1
 80020da:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	051a      	lsls	r2, r3, #20
 80020e0:	d52f      	bpl.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 80020e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80020e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ea:	d041      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80020ec:	d81a      	bhi.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80020ee:	b39b      	cbz	r3, 8002158 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d036      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 80020f6:	2601      	movs	r6, #1
 80020f8:	4635      	mov	r5, r6
 80020fa:	e022      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020fc:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80020fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002106:	e7e0      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002108:	2100      	movs	r1, #0
 800210a:	1d20      	adds	r0, r4, #4
 800210c:	f7ff fe4e 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002110:	4605      	mov	r5, r0
      break;
 8002112:	e7da      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002114:	2100      	movs	r1, #0
 8002116:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800211a:	f7ff febf 	bl	8001e9c <RCCEx_PLL3_Config>
 800211e:	e7f7      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002120:	462e      	mov	r6, r5
 8002122:	e7db      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002128:	d002      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800212a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800212e:	d1e2      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8002130:	bb25      	cbnz	r5, 800217c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002134:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002138:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800213a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800213e:	430b      	orrs	r3, r1
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	d527      	bpl.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8002148:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800214a:	2b10      	cmp	r3, #16
 800214c:	d033      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800214e:	d817      	bhi.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8002150:	b1d3      	cbz	r3, 8002188 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8002152:	2601      	movs	r6, #1
 8002154:	4635      	mov	r5, r6
 8002156:	e01f      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800215a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002162:	e7e5      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002164:	2100      	movs	r1, #0
 8002166:	1d20      	adds	r0, r4, #4
 8002168:	f7ff fe20 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800216c:	4605      	mov	r5, r0
      break;
 800216e:	e7df      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002170:	2100      	movs	r1, #0
 8002172:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002176:	f7ff fe91 	bl	8001e9c <RCCEx_PLL3_Config>
 800217a:	e7f7      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800217c:	462e      	mov	r6, r5
 800217e:	e7e0      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8002180:	2b20      	cmp	r3, #32
 8002182:	d01e      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002184:	2b30      	cmp	r3, #48	; 0x30
 8002186:	d1e4      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8002188:	bb0d      	cbnz	r5, 80021ce <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800218a:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800218c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800218e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002190:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002194:	430b      	orrs	r3, r1
 8002196:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	04df      	lsls	r7, r3, #19
 800219c:	d527      	bpl.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 800219e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a4:	d03e      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80021a6:	d814      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80021a8:	b383      	cbz	r3, 800220c <HAL_RCCEx_PeriphCLKConfig+0x280>
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ae:	d033      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 80021b0:	2601      	movs	r6, #1
 80021b2:	4635      	mov	r5, r6
 80021b4:	e01b      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021b6:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021be:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80021c0:	e7e2      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021c2:	2102      	movs	r1, #2
 80021c4:	1d20      	adds	r0, r4, #4
 80021c6:	f7ff fdf1 	bl	8001dac <RCCEx_PLL2_Config>
 80021ca:	4605      	mov	r5, r0
      break;
 80021cc:	e7dc      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80021ce:	462e      	mov	r6, r5
 80021d0:	e7e2      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80021d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021d6:	d002      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x252>
 80021d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021dc:	d1e8      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80021de:	bb3d      	cbnz	r5, 8002230 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80021e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80021e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	0498      	lsls	r0, r3, #18
 80021f2:	d532      	bpl.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 80021f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021fa:	d044      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80021fc:	d81c      	bhi.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80021fe:	b323      	cbz	r3, 800224a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d039      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8002206:	2601      	movs	r6, #1
 8002208:	4635      	mov	r5, r6
 800220a:	e026      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800220c:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800220e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002216:	e7e2      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002218:	2100      	movs	r1, #0
 800221a:	1d20      	adds	r0, r4, #4
 800221c:	f7ff fdc6 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002220:	4605      	mov	r5, r0
      break;
 8002222:	e7dc      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002224:	2100      	movs	r1, #0
 8002226:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800222a:	f7ff fe37 	bl	8001e9c <RCCEx_PLL3_Config>
 800222e:	e7f7      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8002230:	462e      	mov	r6, r5
 8002232:	e7dc      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002234:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8002238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800223c:	d005      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800223e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002242:	d002      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002244:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002248:	d1dd      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 800224a:	bb15      	cbnz	r5, 8002292 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800224c:	4aa0      	ldr	r2, [pc, #640]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800224e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002250:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002252:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002256:	430b      	orrs	r3, r1
 8002258:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	0459      	lsls	r1, r3, #17
 800225e:	d52d      	bpl.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002260:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8002264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002268:	d04b      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800226a:	d814      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800226c:	b1e3      	cbz	r3, 80022a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800226e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002272:	d040      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8002274:	2601      	movs	r6, #1
 8002276:	4635      	mov	r5, r6
 8002278:	e020      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800227a:	2101      	movs	r1, #1
 800227c:	1d20      	adds	r0, r4, #4
 800227e:	f7ff fd95 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002282:	4605      	mov	r5, r0
      break;
 8002284:	e7e1      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002286:	2101      	movs	r1, #1
 8002288:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800228c:	f7ff fe06 	bl	8001e9c <RCCEx_PLL3_Config>
 8002290:	e7f7      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8002292:	462e      	mov	r6, r5
 8002294:	e7e1      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d005      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800229c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a0:	d002      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80022a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80022a6:	d1e5      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	d130      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80022ac:	4a88      	ldr	r2, [pc, #544]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80022ae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80022b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022b4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	041a      	lsls	r2, r3, #16
 80022c0:	d50f      	bpl.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 80022c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022c8:	d023      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80022ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ce:	d026      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x392>
 80022d0:	bb5b      	cbnz	r3, 800232a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 80022d2:	bb6d      	cbnz	r5, 8002330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022d4:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80022d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80022d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80022da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80022de:	430b      	orrs	r3, r1
 80022e0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	d533      	bpl.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 80022e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d874      	bhi.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80022ee:	e8df f003 	tbb	[pc, r3]
 80022f2:	2126      	.short	0x2126
 80022f4:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022f6:	2101      	movs	r1, #1
 80022f8:	1d20      	adds	r0, r4, #4
 80022fa:	f7ff fd57 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022fe:	4605      	mov	r5, r0
      break;
 8002300:	e7d2      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002302:	2101      	movs	r1, #1
 8002304:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002308:	f7ff fdc8 	bl	8001e9c <RCCEx_PLL3_Config>
 800230c:	e7f7      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x372>
 800230e:	462e      	mov	r6, r5
 8002310:	e7d4      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002312:	4a6f      	ldr	r2, [pc, #444]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002314:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800231c:	e7d9      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800231e:	2101      	movs	r1, #1
 8002320:	1d20      	adds	r0, r4, #4
 8002322:	f7ff fd43 	bl	8001dac <RCCEx_PLL2_Config>
 8002326:	4605      	mov	r5, r0
      break;
 8002328:	e7d3      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 800232a:	2601      	movs	r6, #1
 800232c:	4635      	mov	r5, r6
 800232e:	e7d8      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002330:	462e      	mov	r6, r5
 8002332:	e7d6      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002334:	4a66      	ldr	r2, [pc, #408]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002336:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800233e:	2d00      	cmp	r5, #0
 8002340:	d14d      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002342:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002344:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002346:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002348:	f023 0303 	bic.w	r3, r3, #3
 800234c:	430b      	orrs	r3, r1
 800234e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	025f      	lsls	r7, r3, #9
 8002354:	d54d      	bpl.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002356:	4f5f      	ldr	r7, [pc, #380]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002360:	f7fe fb60 	bl	8000a24 <HAL_GetTick>
 8002364:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	05d8      	lsls	r0, r3, #23
 800236a:	d53a      	bpl.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 800236c:	2d00      	cmp	r5, #0
 800236e:	d161      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002370:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002372:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8002376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002378:	4042      	eors	r2, r0
 800237a:	f412 7f40 	tst.w	r2, #768	; 0x300
 800237e:	d00b      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002382:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002384:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002388:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800238c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800238e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002390:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002394:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002396:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002398:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800239c:	d036      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80023a2:	494b      	ldr	r1, [pc, #300]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80023a4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80023a8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80023ac:	d13e      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80023ae:	6908      	ldr	r0, [r1, #16]
 80023b0:	4a49      	ldr	r2, [pc, #292]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80023b2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80023b6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80023ba:	4302      	orrs	r2, r0
 80023bc:	610a      	str	r2, [r1, #16]
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80023c4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	e012      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023cc:	2102      	movs	r1, #2
 80023ce:	1d20      	adds	r0, r4, #4
 80023d0:	f7ff fcec 	bl	8001dac <RCCEx_PLL2_Config>
 80023d4:	4605      	mov	r5, r0
      break;
 80023d6:	e7b2      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 80023d8:	2601      	movs	r6, #1
 80023da:	4635      	mov	r5, r6
 80023dc:	e7b8      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80023de:	462e      	mov	r6, r5
 80023e0:	e7b6      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fb1f 	bl	8000a24 <HAL_GetTick>
 80023e6:	eba0 0008 	sub.w	r0, r0, r8
 80023ea:	2864      	cmp	r0, #100	; 0x64
 80023ec:	d9bb      	bls.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 80023ee:	2603      	movs	r6, #3
 80023f0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	07da      	lsls	r2, r3, #31
 80023f6:	d52d      	bpl.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 80023f8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d03b      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80023fe:	d81b      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002400:	b303      	cbz	r3, 8002444 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002402:	2b08      	cmp	r3, #8
 8002404:	d031      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8002406:	2601      	movs	r6, #1
 8002408:	4635      	mov	r5, r6
 800240a:	e023      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 800240c:	f7fe fb0a 	bl	8000a24 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002410:	4f2f      	ldr	r7, [pc, #188]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8002412:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241a:	0799      	lsls	r1, r3, #30
 800241c:	d4bf      	bmi.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fb01 	bl	8000a24 <HAL_GetTick>
 8002422:	eba0 0008 	sub.w	r0, r0, r8
 8002426:	4548      	cmp	r0, r9
 8002428:	d9f6      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800242a:	e7e0      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242c:	690a      	ldr	r2, [r1, #16]
 800242e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002432:	e7c3      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002434:	462e      	mov	r6, r5
 8002436:	e7dc      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002438:	2b20      	cmp	r3, #32
 800243a:	d003      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800243c:	2b28      	cmp	r3, #40	; 0x28
 800243e:	d001      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8002440:	2b18      	cmp	r3, #24
 8002442:	d1e0      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8002444:	b9ed      	cbnz	r5, 8002482 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002448:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800244a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800244c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002450:	430b      	orrs	r3, r1
 8002452:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	079b      	lsls	r3, r3, #30
 8002458:	d522      	bpl.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800245a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800245c:	2b05      	cmp	r3, #5
 800245e:	d831      	bhi.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002460:	e8df f003 	tbb	[pc, r3]
 8002464:	162a1116 	.word	0x162a1116
 8002468:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800246a:	2101      	movs	r1, #1
 800246c:	1d20      	adds	r0, r4, #4
 800246e:	f7ff fc9d 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002472:	4605      	mov	r5, r0
      break;
 8002474:	e7e6      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002476:	2101      	movs	r1, #1
 8002478:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800247c:	f7ff fd0e 	bl	8001e9c <RCCEx_PLL3_Config>
 8002480:	e7f7      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002482:	462e      	mov	r6, r5
 8002484:	e7e6      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002486:	2101      	movs	r1, #1
 8002488:	1d20      	adds	r0, r4, #4
 800248a:	f7ff fc8f 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800248e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002490:	b9dd      	cbnz	r5, 80024ca <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8002494:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002496:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002498:	f023 0307 	bic.w	r3, r3, #7
 800249c:	430b      	orrs	r3, r1
 800249e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	075f      	lsls	r7, r3, #29
 80024a4:	d528      	bpl.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80024a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d83a      	bhi.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80024ae:	e8df f003 	tbb	[pc, r3]
 80024b2:	151a      	.short	0x151a
 80024b4:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024b8:	2101      	movs	r1, #1
 80024ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024be:	f7ff fced 	bl	8001e9c <RCCEx_PLL3_Config>
 80024c2:	e7e4      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 80024c4:	2601      	movs	r6, #1
 80024c6:	4635      	mov	r5, r6
 80024c8:	e7ea      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ca:	462e      	mov	r6, r5
 80024cc:	e7e8      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ce:	bf00      	nop
 80024d0:	58024400 	.word	0x58024400
 80024d4:	58024800 	.word	0x58024800
 80024d8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024dc:	2101      	movs	r1, #1
 80024de:	1d20      	adds	r0, r4, #4
 80024e0:	f7ff fc64 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024e6:	bb05      	cbnz	r5, 800252a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e8:	4a98      	ldr	r2, [pc, #608]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80024ea:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80024ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80024f0:	f023 0307 	bic.w	r3, r3, #7
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	0698      	lsls	r0, r3, #26
 80024fc:	d529      	bpl.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80024fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002506:	d03a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002508:	d811      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800250a:	b1cb      	cbz	r3, 8002540 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800250c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002510:	d02f      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8002512:	2601      	movs	r6, #1
 8002514:	4635      	mov	r5, r6
 8002516:	e01c      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002518:	2101      	movs	r1, #1
 800251a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800251e:	f7ff fcbd 	bl	8001e9c <RCCEx_PLL3_Config>
 8002522:	e7df      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8002524:	2601      	movs	r6, #1
 8002526:	4635      	mov	r5, r6
 8002528:	e7e6      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800252a:	462e      	mov	r6, r5
 800252c:	e7e4      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002532:	d005      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002538:	d002      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800253a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800253e:	d1e8      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8002540:	bb1d      	cbnz	r5, 800258a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002542:	4a82      	ldr	r2, [pc, #520]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002544:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002548:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800254a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800254e:	430b      	orrs	r3, r1
 8002550:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	0659      	lsls	r1, r3, #25
 8002556:	d52c      	bpl.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002558:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800255c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002560:	d03f      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8002562:	d814      	bhi.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8002564:	b1e3      	cbz	r3, 80025a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256a:	d034      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 800256c:	2601      	movs	r6, #1
 800256e:	4635      	mov	r5, r6
 8002570:	e01f      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002572:	2100      	movs	r1, #0
 8002574:	1d20      	adds	r0, r4, #4
 8002576:	f7ff fc19 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800257a:	4605      	mov	r5, r0
      break;
 800257c:	e7e0      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800257e:	2102      	movs	r1, #2
 8002580:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002584:	f7ff fc8a 	bl	8001e9c <RCCEx_PLL3_Config>
 8002588:	e7f7      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800258a:	462e      	mov	r6, r5
 800258c:	e7e1      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	d005      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002594:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002598:	d002      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800259a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800259e:	d1e5      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 80025a0:	bb2d      	cbnz	r5, 80025ee <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025a2:	4a6a      	ldr	r2, [pc, #424]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80025a4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80025a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	061a      	lsls	r2, r3, #24
 80025b6:	d530      	bpl.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80025b8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80025bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c0:	f000 80a4 	beq.w	800270c <HAL_RCCEx_PeriphCLKConfig+0x780>
 80025c4:	d815      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x666>
 80025c6:	b1eb      	cbz	r3, 8002604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025cc:	f000 8098 	beq.w	8002700 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 80025d0:	2601      	movs	r6, #1
 80025d2:	4635      	mov	r5, r6
 80025d4:	e021      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025d6:	2100      	movs	r1, #0
 80025d8:	1d20      	adds	r0, r4, #4
 80025da:	f7ff fbe7 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025de:	4605      	mov	r5, r0
      break;
 80025e0:	e7de      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e2:	2102      	movs	r1, #2
 80025e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025e8:	f7ff fc58 	bl	8001e9c <RCCEx_PLL3_Config>
 80025ec:	e7f7      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x652>
 80025ee:	462e      	mov	r6, r5
 80025f0:	e7df      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80025f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f6:	d005      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80025fc:	d002      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002602:	d1e5      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8002604:	2d00      	cmp	r5, #0
 8002606:	f040 8087 	bne.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800260a:	4a50      	ldr	r2, [pc, #320]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800260c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002610:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002612:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002616:	430b      	orrs	r3, r1
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	071b      	lsls	r3, r3, #28
 800261e:	d514      	bpl.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002620:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002628:	d107      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800262a:	2102      	movs	r1, #2
 800262c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002630:	f7ff fc34 	bl	8001e9c <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002634:	2800      	cmp	r0, #0
 8002636:	bf18      	it	ne
 8002638:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800263a:	4a44      	ldr	r2, [pc, #272]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800263c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002640:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002642:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002646:	430b      	orrs	r3, r1
 8002648:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	06df      	lsls	r7, r3, #27
 800264e:	d514      	bpl.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002650:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002658:	d107      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800265a:	2102      	movs	r1, #2
 800265c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002660:	f7ff fc1c 	bl	8001e9c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8002664:	2800      	cmp	r0, #0
 8002666:	bf18      	it	ne
 8002668:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800266a:	4a38      	ldr	r2, [pc, #224]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800266c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002670:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002676:	430b      	orrs	r3, r1
 8002678:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	0318      	lsls	r0, r3, #12
 800267e:	d517      	bpl.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 8002680:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002684:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002688:	d048      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x790>
 800268a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800268e:	d005      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x710>
 8002690:	2900      	cmp	r1, #0
 8002692:	d149      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002694:	1d20      	adds	r0, r4, #4
 8002696:	f7ff fb89 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800269a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800269c:	2d00      	cmp	r5, #0
 800269e:	d146      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a0:	4a2a      	ldr	r2, [pc, #168]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026a2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80026a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	0359      	lsls	r1, r3, #13
 80026b4:	d518      	bpl.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 80026b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80026ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026be:	d038      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80026c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026c4:	d007      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ca:	d139      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80026d6:	bbb5      	cbnz	r5, 8002746 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80026da:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80026de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	03da      	lsls	r2, r3, #15
 80026ec:	d53e      	bpl.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 80026ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80026f0:	b373      	cbz	r3, 8002750 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	f000 808c 	beq.w	8002812 <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 80026fa:	2601      	movs	r6, #1
 80026fc:	4635      	mov	r5, r6
 80026fe:	e035      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002700:	2100      	movs	r1, #0
 8002702:	1d20      	adds	r0, r4, #4
 8002704:	f7ff fb52 	bl	8001dac <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002708:	4605      	mov	r5, r0
      break;
 800270a:	e77b      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800270c:	2102      	movs	r1, #2
 800270e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002712:	f7ff fbc3 	bl	8001e9c <RCCEx_PLL3_Config>
 8002716:	e7f7      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002718:	462e      	mov	r6, r5
 800271a:	e77e      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800271c:	2102      	movs	r1, #2
 800271e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002722:	f7ff fbbb 	bl	8001e9c <RCCEx_PLL3_Config>
 8002726:	e7b8      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8002728:	2601      	movs	r6, #1
 800272a:	4635      	mov	r5, r6
 800272c:	e7c0      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x724>
 800272e:	462e      	mov	r6, r5
 8002730:	e7be      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002732:	2101      	movs	r1, #1
 8002734:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002738:	f7ff fbb0 	bl	8001e9c <RCCEx_PLL3_Config>
 800273c:	4605      	mov	r5, r0
      break;
 800273e:	e7ca      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8002740:	2601      	movs	r6, #1
 8002742:	4635      	mov	r5, r6
 8002744:	e7d0      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002746:	462e      	mov	r6, r5
 8002748:	e7ce      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800274a:	bf00      	nop
 800274c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002750:	4a3c      	ldr	r2, [pc, #240]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002752:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800275a:	2d00      	cmp	r5, #0
 800275c:	d15f      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800275e:	4a39      	ldr	r2, [pc, #228]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002760:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002762:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	430b      	orrs	r3, r1
 800276a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	d507      	bpl.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002772:	2102      	movs	r1, #2
 8002774:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002778:	f7ff fb90 	bl	8001e9c <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800277c:	2800      	cmp	r0, #0
 800277e:	bf18      	it	ne
 8002780:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	039f      	lsls	r7, r3, #14
 8002786:	d50e      	bpl.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8002788:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800278a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800278e:	d050      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002790:	d847      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8002792:	2900      	cmp	r1, #0
 8002794:	d14b      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 8002796:	2d00      	cmp	r5, #0
 8002798:	d151      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800279a:	482a      	ldr	r0, [pc, #168]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800279c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800279e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027a2:	430a      	orrs	r2, r1
 80027a4:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027a6:	02dd      	lsls	r5, r3, #11
 80027a8:	d506      	bpl.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027aa:	4926      	ldr	r1, [pc, #152]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027ac:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80027ae:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80027b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027b4:	4302      	orrs	r2, r0
 80027b6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80027b8:	00d8      	lsls	r0, r3, #3
 80027ba:	d507      	bpl.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80027bc:	4921      	ldr	r1, [pc, #132]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80027c2:	690a      	ldr	r2, [r1, #16]
 80027c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027c8:	4302      	orrs	r2, r0
 80027ca:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027cc:	0299      	lsls	r1, r3, #10
 80027ce:	d506      	bpl.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027d0:	491c      	ldr	r1, [pc, #112]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027d2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80027d4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80027d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80027da:	4302      	orrs	r2, r0
 80027dc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80027de:	005a      	lsls	r2, r3, #1
 80027e0:	d509      	bpl.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027e4:	6911      	ldr	r1, [r2, #16]
 80027e6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80027ea:	6111      	str	r1, [r2, #16]
 80027ec:	6911      	ldr	r1, [r2, #16]
 80027ee:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80027f2:	4301      	orrs	r1, r0
 80027f4:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da06      	bge.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80027fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002800:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002804:	430b      	orrs	r3, r1
 8002806:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002808:	1c30      	adds	r0, r6, #0
 800280a:	bf18      	it	ne
 800280c:	2001      	movne	r0, #1
 800280e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002812:	2102      	movs	r1, #2
 8002814:	1d20      	adds	r0, r4, #4
 8002816:	f7ff fac9 	bl	8001dac <RCCEx_PLL2_Config>
 800281a:	4605      	mov	r5, r0
      break;
 800281c:	e79d      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800281e:	462e      	mov	r6, r5
 8002820:	e7a4      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8002822:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002826:	d0b6      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002828:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800282c:	d0b3      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 800282e:	2601      	movs	r6, #1
 8002830:	e7b9      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002832:	4804      	ldr	r0, [pc, #16]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8002834:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002836:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800283a:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 800283c:	e7ab      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800283e:	462e      	mov	r6, r5
 8002840:	e7b1      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400

08002848 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8002848:	4770      	bx	lr
	...

0800284c <HAL_SDRAM_Init>:
{
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8002850:	4604      	mov	r4, r0
 8002852:	b1f0      	cbz	r0, 8002892 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002854:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002858:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800285c:	b91b      	cbnz	r3, 8002866 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800285e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002862:	f7ff fff1 	bl	8002848 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002866:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002868:	1d21      	adds	r1, r4, #4
 800286a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800286c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002870:	f000 f84b 	bl	800290a <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002874:	6862      	ldr	r2, [r4, #4]
 8002876:	4629      	mov	r1, r5
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	f000 f881 	bl	8002980 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 8002880:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002888:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800288a:	2301      	movs	r3, #1
 800288c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002890:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002892:	2001      	movs	r0, #1
 8002894:	e7fc      	b.n	8002890 <HAL_SDRAM_Init+0x44>
 8002896:	bf00      	nop
 8002898:	52004000 	.word	0x52004000

0800289c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80028a0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80028a4:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80028a6:	b2c0      	uxtb	r0, r0
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80028a8:	2802      	cmp	r0, #2
 80028aa:	d010      	beq.n	80028ce <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80028ac:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80028b0:	2c01      	cmp	r4, #1
 80028b2:	d110      	bne.n	80028d6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028b4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80028b6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028b8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80028bc:	f000 f896 	bl	80029ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80028c0:	6833      	ldr	r3, [r6, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d104      	bne.n	80028d0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80028c6:	2305      	movs	r3, #5
 80028c8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80028cc:	2000      	movs	r0, #0
}
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80028d0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80028d4:	e7fa      	b.n	80028cc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
 80028d8:	e7f9      	b.n	80028ce <HAL_SDRAM_SendCommand+0x32>

080028da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80028da:	b538      	push	{r3, r4, r5, lr}
 80028dc:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80028de:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80028e2:	b2c0      	uxtb	r0, r0
 80028e4:	2802      	cmp	r0, #2
 80028e6:	d00d      	beq.n	8002904 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80028e8:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 80028ec:	b2ed      	uxtb	r5, r5
 80028ee:	2d01      	cmp	r5, #1
 80028f0:	d109      	bne.n	8002906 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028f2:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80028f4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80028fa:	f000 f887 	bl	8002a0c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80028fe:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002900:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8002904:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e7fc      	b.n	8002904 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800290a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800290a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800290e:	680a      	ldr	r2, [r1, #0]
 8002910:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8002914:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8002918:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800291c:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8002920:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8002924:	4323      	orrs	r3, r4
 8002926:	b9a2      	cbnz	r2, 8002952 <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002928:	ea43 0209 	orr.w	r2, r3, r9
 800292c:	6801      	ldr	r1, [r0, #0]
 800292e:	432a      	orrs	r2, r5
 8002930:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002934:	ea42 0308 	orr.w	r3, r2, r8
 8002938:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800293c:	ea43 030e 	orr.w	r3, r3, lr
 8002940:	ea43 030c 	orr.w	r3, r3, ip
 8002944:	433b      	orrs	r3, r7
 8002946:	4333      	orrs	r3, r6
 8002948:	430b      	orrs	r3, r1
 800294a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800294c:	2000      	movs	r0, #0
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8002952:	6802      	ldr	r2, [r0, #0]
 8002954:	ea43 0309 	orr.w	r3, r3, r9
 8002958:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800295c:	4313      	orrs	r3, r2
 800295e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8002960:	ea45 0308 	orr.w	r3, r5, r8
 8002964:	6842      	ldr	r2, [r0, #4]
 8002966:	ea43 030e 	orr.w	r3, r3, lr
 800296a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800296e:	ea43 030c 	orr.w	r3, r3, ip
 8002972:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002976:	433b      	orrs	r3, r7
 8002978:	4333      	orrs	r3, r6
 800297a:	4313      	orrs	r3, r2
 800297c:	6043      	str	r3, [r0, #4]
 800297e:	e7e5      	b.n	800294c <FMC_SDRAM_Init+0x42>

08002980 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002980:	68cb      	ldr	r3, [r1, #12]
 8002982:	f103 3cff 	add.w	ip, r3, #4294967295
 8002986:	694b      	ldr	r3, [r1, #20]
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	3b01      	subs	r3, #1
 800298c:	680f      	ldr	r7, [r1, #0]
 800298e:	684c      	ldr	r4, [r1, #4]
 8002990:	688e      	ldr	r6, [r1, #8]
 8002992:	051b      	lsls	r3, r3, #20
 8002994:	690d      	ldr	r5, [r1, #16]
 8002996:	3c01      	subs	r4, #1
 8002998:	6989      	ldr	r1, [r1, #24]
 800299a:	3e01      	subs	r6, #1
 800299c:	3d01      	subs	r5, #1
 800299e:	3f01      	subs	r7, #1
 80029a0:	3901      	subs	r1, #1
 80029a2:	0124      	lsls	r4, r4, #4
 80029a4:	0236      	lsls	r6, r6, #8
 80029a6:	042d      	lsls	r5, r5, #16
 80029a8:	0609      	lsls	r1, r1, #24
 80029aa:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80029ae:	b95a      	cbnz	r2, 80029c8 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80029b0:	433b      	orrs	r3, r7
 80029b2:	6882      	ldr	r2, [r0, #8]
 80029b4:	4323      	orrs	r3, r4
 80029b6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80029ba:	4333      	orrs	r3, r6
 80029bc:	432b      	orrs	r3, r5
 80029be:	430b      	orrs	r3, r1
 80029c0:	4313      	orrs	r3, r2
 80029c2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80029c8:	6882      	ldr	r2, [r0, #8]
 80029ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ce:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80029d2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80029d4:	ea44 0306 	orr.w	r3, r4, r6
 80029d8:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80029da:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80029dc:	68c2      	ldr	r2, [r0, #12]
 80029de:	432b      	orrs	r3, r5
 80029e0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80029e4:	430b      	orrs	r3, r1
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60c3      	str	r3, [r0, #12]
 80029ea:	e7eb      	b.n	80029c4 <FMC_SDRAM_Timing_Init+0x44>

080029ec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80029ec:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 80029ee:	e9d1 3400 	ldrd	r3, r4, [r1]
 80029f2:	6902      	ldr	r2, [r0, #16]
 80029f4:	4323      	orrs	r3, r4
 80029f6:	4313      	orrs	r3, r2
 80029f8:	68ca      	ldr	r2, [r1, #12]
 80029fa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80029fe:	688a      	ldr	r2, [r1, #8]
 8002a00:	3a01      	subs	r2, #1
 8002a02:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002a06:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8002a08:	2000      	movs	r0, #0
 8002a0a:	bd10      	pop	{r4, pc}

08002a0c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002a0c:	6943      	ldr	r3, [r0, #20]
 8002a0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a12:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8002a16:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002a1a:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4770      	bx	lr

08002a20 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8002a20:	4770      	bx	lr
	...

08002a24 <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) 
{
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8002a24:	f44f 3134 	mov.w	r1, #184320	; 0x2d000
 8002a28:	4801      	ldr	r0, [pc, #4]	; (8002a30 <GUI_X_Config+0xc>)
 8002a2a:	f000 bc81 	b.w	8003330 <GUI_ALLOC_AssignMemory>
 8002a2e:	bf00      	nop
 8002a30:	2400003c 	.word	0x2400003c

08002a34 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8002a34:	b530      	push	{r4, r5, lr}
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002a36:	2800      	cmp	r0, #0
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002a38:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002a3c:	480c      	ldr	r0, [pc, #48]	; (8002a70 <DMA2D_CopyBuffer+0x3c>)
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002a3e:	bf0c      	ite	eq
 8002a40:	2402      	moveq	r4, #2
 8002a42:	2403      	movne	r4, #3
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8002a44:	6005      	str	r5, [r0, #0]
  	
  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8002a46:	60c1      	str	r1, [r0, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8002a48:	63c2      	str	r2, [r0, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8002a4a:	9a04      	ldr	r2, [sp, #16]
 8002a4c:	6102      	str	r2, [r0, #16]
  DMA2D->OOR     = OffLineDst; 
 8002a4e:	9a05      	ldr	r2, [sp, #20]
 8002a50:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 8002a52:	61c4      	str	r4, [r0, #28]
  
  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8002a54:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002a58:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002a5c:	6443      	str	r3, [r0, #68]	; 0x44
  
  DMA2D->CR     |= DMA2D_CR_START;   
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6003      	str	r3, [r0, #0]
 
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 8002a66:	6803      	ldr	r3, [r0, #0]
 8002a68:	07db      	lsls	r3, r3, #31
 8002a6a:	d4fc      	bmi.n	8002a66 <DMA2D_CopyBuffer+0x32>
  {
  }
}
 8002a6c:	bd30      	pop	{r4, r5, pc}
 8002a6e:	bf00      	nop
 8002a70:	52001000 	.word	0x52001000

08002a74 <CUSTOM_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 8002a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002a78:	241c      	movs	r4, #28
 8002a7a:	4e0e      	ldr	r6, [pc, #56]	; (8002ab4 <CUSTOM_CopyRect+0x40>)
 8002a7c:	4344      	muls	r4, r0
 8002a7e:	1935      	adds	r5, r6, r4
 8002a80:	5936      	ldr	r6, [r6, r4]
 8002a82:	696f      	ldr	r7, [r5, #20]
 8002a84:	68ec      	ldr	r4, [r5, #12]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002a86:	9d06      	ldr	r5, [sp, #24]
  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002a88:	fb02 1104 	mla	r1, r2, r4, r1
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8002a8c:	fb05 3504 	mla	r5, r5, r4, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002a90:	fb07 6101 	mla	r1, r7, r1, r6
 8002a94:	fb07 6205 	mla	r2, r7, r5, r6
{
 8002a98:	e9dd ce07 	ldrd	ip, lr, [sp, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002a9c:	eba4 080c 	sub.w	r8, r4, ip
 8002aa0:	f8cd e018 	str.w	lr, [sp, #24]
 8002aa4:	4663      	mov	r3, ip
 8002aa6:	e9cd 8807 	strd	r8, r8, [sp, #28]
}
 8002aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8002aae:	f7ff bfc1 	b.w	8002a34 <DMA2D_CopyBuffer>
 8002ab2:	bf00      	nop
 8002ab4:	2402d164 	.word	0x2402d164

08002ab8 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 8002ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002abc:	4605      	mov	r5, r0
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4617      	mov	r7, r2
 8002ac2:	4699      	mov	r9, r3
 8002ac4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  /* Data Cahce management */
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8002ac8:	f000 fe94 	bl	80037f4 <GUI_GetDrawMode>
 8002acc:	2801      	cmp	r0, #1
 8002ace:	d111      	bne.n	8002af4 <CUSTOM_FillRect+0x3c>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2119      	movs	r1, #25
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f002 f81c 	bl	8004b12 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8002ada:	464a      	mov	r2, r9
 8002adc:	4639      	mov	r1, r7
 8002ade:	4640      	mov	r0, r8
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	f001 fb43 	bl	800416c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <CUSTOM_FillRect+0xac>)
 8002aea:	2119      	movs	r1, #25
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
	}
}
 8002aec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002af0:	f002 b80f 	b.w	8004b12 <LCD_SetDevFunc>
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002af4:	211c      	movs	r1, #28
 8002af6:	481c      	ldr	r0, [pc, #112]	; (8002b68 <CUSTOM_FillRect+0xb0>)
    xSize = x1 - x0 + 1;
 8002af8:	eba9 0c08 	sub.w	ip, r9, r8
    ySize = y1 - y0 + 1;
 8002afc:	1be4      	subs	r4, r4, r7
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002afe:	4369      	muls	r1, r5
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002b00:	2d00      	cmp	r5, #0
    ySize = y1 - y0 + 1;
 8002b02:	f104 0401 	add.w	r4, r4, #1
    xSize = x1 - x0 + 1;
 8002b06:	f10c 0c01 	add.w	ip, ip, #1
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b0a:	eb00 0e01 	add.w	lr, r0, r1
 8002b0e:	5841      	ldr	r1, [r0, r1]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002b10:	b2a4      	uxth	r4, r4
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002b12:	4816      	ldr	r0, [pc, #88]	; (8002b6c <CUSTOM_FillRect+0xb4>)
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b14:	f8de 9014 	ldr.w	r9, [lr, #20]
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002b18:	4d15      	ldr	r5, [pc, #84]	; (8002b70 <CUSTOM_FillRect+0xb8>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002b1a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b1e:	e9de 2303 	ldrd	r2, r3, [lr, #12]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b22:	f8de e008 	ldr.w	lr, [lr, #8]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b26:	fb03 f302 	mul.w	r3, r3, r2
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b2a:	fb07 8802 	mla	r8, r7, r2, r8
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8002b2e:	eba2 020c 	sub.w	r2, r2, ip
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b32:	fb09 f303 	mul.w	r3, r9, r3
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b36:	fb09 f808 	mul.w	r8, r9, r8
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8002b3a:	6005      	str	r5, [r0, #0]
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b3c:	fb0e 8303 	mla	r3, lr, r3, r8
  DMA2D->OCOLR   = ColorIndex;                     
 8002b40:	6386      	str	r6, [r0, #56]	; 0x38
		AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8002b42:	440b      	add	r3, r1
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8002b44:	bf0c      	ite	eq
 8002b46:	2102      	moveq	r1, #2
 8002b48:	2103      	movne	r1, #3
  DMA2D->OMAR    = (U32)pDst;                      
 8002b4a:	63c3      	str	r3, [r0, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 8002b4c:	6402      	str	r2, [r0, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 8002b4e:	6341      	str	r1, [r0, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8002b50:	6444      	str	r4, [r0, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START; 
 8002b52:	6803      	ldr	r3, [r0, #0]
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6003      	str	r3, [r0, #0]
  while (DMA2D->CR & DMA2D_CR_START) 
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	07db      	lsls	r3, r3, #31
 8002b5e:	d4fc      	bmi.n	8002b5a <CUSTOM_FillRect+0xa2>
}
 8002b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b64:	08002ab9 	.word	0x08002ab9
 8002b68:	2402d164 	.word	0x2402d164
 8002b6c:	52001000 	.word	0x52001000
 8002b70:	00030200 	.word	0x00030200

08002b74 <CUSTOM_CopyBuffer>:
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	4616      	mov	r6, r2
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b78:	221c      	movs	r2, #28
 8002b7a:	4f0d      	ldr	r7, [pc, #52]	; (8002bb0 <CUSTOM_CopyBuffer+0x3c>)
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8002b7c:	b085      	sub	sp, #20
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b7e:	4342      	muls	r2, r0
 8002b80:	18bc      	adds	r4, r7, r2
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 8002b82:	58bf      	ldr	r7, [r7, r2]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002b84:	2200      	movs	r2, #0
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b86:	6965      	ldr	r5, [r4, #20]
 8002b88:	e9d4 3c03 	ldrd	r3, ip, [r4, #12]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002b8c:	e9cd 2201 	strd	r2, r2, [sp, #4]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b90:	fb0c fe03 	mul.w	lr, ip, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002b94:	f8cd c000 	str.w	ip, [sp]
  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 8002b98:	fb05 f50e 	mul.w	r5, r5, lr
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8002b9c:	fb05 7206 	mla	r2, r5, r6, r7
 8002ba0:	fb05 7101 	mla	r1, r5, r1, r7
 8002ba4:	f7ff ff46 	bl	8002a34 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8002ba8:	60a6      	str	r6, [r4, #8]
}
 8002baa:	b005      	add	sp, #20
 8002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2402d164 	.word	0x2402d164

08002bb4 <HAL_DMA2D_MspInit>:
  __HAL_RCC_DMA2D_CLK_ENABLE();   
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_DMA2D_MspInit+0x20>)
{  
 8002bb6:	b082      	sub	sp, #8
  __HAL_RCC_DMA2D_CLK_ENABLE();   
 8002bb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002bbc:	f042 0210 	orr.w	r2, r2, #16
 8002bc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002bc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	9b01      	ldr	r3, [sp, #4]
}
 8002bd0:	b002      	add	sp, #8
 8002bd2:	4770      	bx	lr
 8002bd4:	58024400 	.word	0x58024400

08002bd8 <HAL_LTDC_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_LTDC_MspInit+0xd8>)
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002bda:	4836      	ldr	r0, [pc, #216]	; (8002cb4 <HAL_LTDC_MspInit+0xdc>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bdc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002be0:	f042 0208 	orr.w	r2, r2, #8
{  
 8002be4:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002be6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
{  
 8002bea:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bec:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bf0:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002bf2:	2600      	movs	r6, #0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002bf4:	250e      	movs	r5, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bf6:	f002 0208 	and.w	r2, r2, #8
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002bfa:	a905      	add	r1, sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bfc:	9200      	str	r2, [sp, #0]
 8002bfe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c04:	f042 0210 	orr.w	r2, r2, #16
 8002c08:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002c0c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c10:	f002 0210 	and.w	r2, r2, #16
 8002c14:	9201      	str	r2, [sp, #4]
 8002c16:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c28:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002c2c:	9202      	str	r2, [sp, #8]
 8002c2e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c40:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002c44:	9203      	str	r2, [sp, #12]
 8002c46:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c58:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5e:	9304      	str	r3, [sp, #16]
 8002c60:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c66:	e9cd 6407 	strd	r6, r4, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c6a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c6e:	f7fd ffdd 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002c76:	a905      	add	r1, sp, #20
 8002c78:	480f      	ldr	r0, [pc, #60]	; (8002cb8 <HAL_LTDC_MspInit+0xe0>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c7a:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c7c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c80:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002c84:	f7fd ffd2 	bl	8000c2c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002c88:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002c8a:	a905      	add	r1, sp, #20
 8002c8c:	480b      	ldr	r0, [pc, #44]	; (8002cbc <HAL_LTDC_MspInit+0xe4>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c8e:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c90:	e9cd 3405 	strd	r3, r4, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c94:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002c98:	f7fd ffc8 	bl	8000c2c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	2058      	movs	r0, #88	; 0x58
 8002ca2:	f7fd fee5 	bl	8000a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ca6:	2058      	movs	r0, #88	; 0x58
 8002ca8:	f7fd ff14 	bl	8000ad4 <HAL_NVIC_EnableIRQ>
}
 8002cac:	b00a      	add	sp, #40	; 0x28
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	58022000 	.word	0x58022000
 8002cb8:	58022400 	.word	0x58022400
 8002cbc:	58022800 	.word	0x58022800

08002cc0 <HAL_LTDC_MspDeInit>:
  __HAL_RCC_LTDC_FORCE_RESET();
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_LTDC_MspDeInit+0x1c>)
 8002cc2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002cce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cd2:	f022 0208 	bic.w	r2, r2, #8
 8002cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002cda:	4770      	bx	lr
 8002cdc:	58024400 	.word	0x58024400

08002ce0 <HAL_LTDC_LineEventCallback>:
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8002ce0:	b538      	push	{r3, r4, r5, lr}
    if (layer_prop[layer].pending_buffer >= 0) 
 8002ce2:	4c11      	ldr	r4, [pc, #68]	; (8002d28 <HAL_LTDC_LineEventCallback+0x48>)
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8002ce4:	4605      	mov	r5, r0
    if (layer_prop[layer].pending_buffer >= 0) 
 8002ce6:	6863      	ldr	r3, [r4, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db16      	blt.n	8002d1a <HAL_LTDC_LineEventCallback+0x3a>
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8002cf2:	434a      	muls	r2, r1
 8002cf4:	6961      	ldr	r1, [r4, #20]
 8002cf6:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 8002cf8:	6822      	ldr	r2, [r4, #0]
 8002cfa:	fb01 2303 	mla	r3, r1, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8002cfe:	6802      	ldr	r2, [r0, #0]
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8002d00:	2000      	movs	r0, #0
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8002d02:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8002d06:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8002d0e:	6861      	ldr	r1, [r4, #4]
 8002d10:	f001 f8a6 	bl	8003e60 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
 8002d18:	6063      	str	r3, [r4, #4]
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	2100      	movs	r1, #0
}
 8002d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8002d22:	f7fe bb19 	b.w	8001358 <HAL_LTDC_ProgramLineEvent>
 8002d26:	bf00      	nop
 8002d28:	2402d164 	.word	0x2402d164

08002d2c <LCD_X_Config>:
{
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_LTDC_DeInit(&hltdc);
 8002d2e:	4d4d      	ldr	r5, [pc, #308]	; (8002e64 <LCD_X_Config+0x138>)
  hltdc.Init.HorizontalSync = 29;
 8002d30:	2702      	movs	r7, #2
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d32:	4c4d      	ldr	r4, [pc, #308]	; (8002e68 <LCD_X_Config+0x13c>)
  hltdc.Init.TotalHeigh = 524;
 8002d34:	2600      	movs	r6, #0
  HAL_LTDC_DeInit(&hltdc);
 8002d36:	4628      	mov	r0, r5
 8002d38:	f7fe f954 	bl	8000fe4 <HAL_LTDC_DeInit>
  hltdc.Init.HorizontalSync = 29;
 8002d3c:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedHBP = 143;
 8002d3e:	228f      	movs	r2, #143	; 0x8f
  hltdc.Init.AccumulatedActiveW = 783;
 8002d40:	f240 310f 	movw	r1, #783	; 0x30f
  hltdc.Init.TotalWidth = 799;
 8002d44:	f240 301f 	movw	r0, #799	; 0x31f
  periph_clk_init_struct.PLL3.PLL3N = 160;
 8002d48:	f04f 0e05 	mov.w	lr, #5
  hltdc.Init.TotalHeigh = 524;
 8002d4c:	86ae      	strh	r6, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002d4e:	f885 6036 	strb.w	r6, [r5, #54]	; 0x36
  periph_clk_init_struct.PLL3.PLL3FRACN = 0;
 8002d52:	65e6      	str	r6, [r4, #92]	; 0x5c
  periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002d54:	65a6      	str	r6, [r4, #88]	; 0x58
  hltdc.Init.HorizontalSync = 29;
 8002d56:	e9c5 3705 	strd	r3, r7, [r5, #20]
  hltdc.Init.AccumulatedHBP = 143;
 8002d5a:	2322      	movs	r3, #34	; 0x22
 8002d5c:	e9c5 2307 	strd	r2, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 783;
 8002d60:	f240 2302 	movw	r3, #514	; 0x202
 8002d64:	e9c5 1309 	strd	r1, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalWidth = 799;
 8002d68:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8002d6c:	e9c5 030b 	strd	r0, r3, [r5, #44]	; 0x2c
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct); 
 8002d74:	f104 001c 	add.w	r0, r4, #28
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d78:	61e3      	str	r3, [r4, #28]
  periph_clk_init_struct.PLL3.PLL3N = 160;
 8002d7a:	23a0      	movs	r3, #160	; 0xa0
 8002d7c:	e9c4 e310 	strd	lr, r3, [r4, #64]	; 0x40
  periph_clk_init_struct.PLL3.PLL3R = 32;
 8002d80:	2320      	movs	r3, #32
 8002d82:	6523      	str	r3, [r4, #80]	; 0x50
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8002d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
  periph_clk_init_struct.PLL3.PLL3Q = 2;
 8002d88:	e9c4 7712 	strd	r7, r7, [r4, #72]	; 0x48
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8002d8c:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct); 
 8002d8e:	f7ff f8fd 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
  hltdc.Instance = LTDC;
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <LCD_X_Config+0x140>)
  HAL_LTDC_Init(&hltdc);
 8002d94:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8002d96:	602b      	str	r3, [r5, #0]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d98:	e9c5 6601 	strd	r6, r6, [r5, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d9c:	e9c5 6603 	strd	r6, r6, [r5, #12]
  HAL_LTDC_Init(&hltdc);
 8002da0:	f7fe f8b4 	bl	8000f0c <HAL_LTDC_Init>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8002da4:	4631      	mov	r1, r6
 8002da6:	4628      	mov	r0, r5
 8002da8:	f7fe fad6 	bl	8001358 <HAL_LTDC_ProgramLineEvent>
  HAL_LTDC_EnableDither(&hltdc);
 8002dac:	4628      	mov	r0, r5
 8002dae:	f7fe fa51 	bl	8001254 <HAL_LTDC_EnableDither>
  hdma2d.Init.Mode         = DMA2D_R2M;
 8002db2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance          = DMA2D; 
 8002db6:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0x0;     
 8002db8:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
  hdma2d.Init.ColorMode    = DMA2D_INPUT_RGB565;
 8002dbc:	e9c4 3737 	strd	r3, r7, [r4, #220]	; 0xdc
  hdma2d.Instance          = DMA2D; 
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <LCD_X_Config+0x144>)
 8002dc2:	f840 3fd8 	str.w	r3, [r0, #216]!
  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002dc6:	f7fd fef3 	bl	8000bb0 <HAL_DMA2D_Init>
 8002dca:	4605      	mov	r5, r0
 8002dcc:	b100      	cbz	r0, 8002dd0 <LCD_X_Config+0xa4>
 8002dce:	e7fe      	b.n	8002dce <LCD_X_Config+0xa2>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	f001 f859 	bl	8003e88 <GUI_MULTIBUF_ConfigEx>
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	462a      	mov	r2, r5
 8002dda:	4926      	ldr	r1, [pc, #152]	; (8002e74 <LCD_X_Config+0x148>)
 8002ddc:	4826      	ldr	r0, [pc, #152]	; (8002e78 <LCD_X_Config+0x14c>)
 8002dde:	f001 f807 	bl	8003df0 <GUI_DEVICE_CreateAndLink>
  if (LCD_GetSwapXYEx(0)) {
 8002de2:	4628      	mov	r0, r5
 8002de4:	f001 fd96 	bl	8004914 <LCD_GetSwapXYEx>
 8002de8:	4606      	mov	r6, r0
 8002dea:	b370      	cbz	r0, 8002e4a <LCD_X_Config+0x11e>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8002dec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002df0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002df4:	4628      	mov	r0, r5
 8002df6:	f001 febc 	bl	8004b72 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8002dfa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002dfe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002e02:	4628      	mov	r0, r5
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002e04:	f001 fef9 	bl	8004bfa <LCD_SetVSizeEx>
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <LCD_X_Config+0x148>)
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002e0a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002e0e:	2000      	movs	r0, #0
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8002e10:	61a3      	str	r3, [r4, #24]
    layer_prop[i].pending_buffer = -1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8002e16:	6021      	str	r1, [r4, #0]
    layer_prop[i].pending_buffer = -1;
 8002e18:	6063      	str	r3, [r4, #4]
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8002e1a:	f001 fed8 	bl	8004bce <LCD_SetVRAMAddrEx>
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f001 fd6c 	bl	80048fc <LCD_GetBitsPerPixelEx>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <LCD_X_Config+0x150>)
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002e26:	10c0      	asrs	r0, r0, #3
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002e28:	2121      	movs	r1, #33	; 0x21
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8002e2a:	6160      	str	r0, [r4, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f001 fe70 	bl	8004b12 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <LCD_X_Config+0x154>)
 8002e34:	2123      	movs	r1, #35	; 0x23
 8002e36:	2000      	movs	r0, #0
 8002e38:	f001 fe6b 	bl	8004b12 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002e3c:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <LCD_X_Config+0x158>)
 8002e3e:	2119      	movs	r1, #25
 8002e40:	2000      	movs	r0, #0
}
 8002e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8002e46:	f001 be64 	b.w	8004b12 <LCD_SetDevFunc>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8002e4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e4e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002e52:	f001 fe8e 	bl	8004b72 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8002e56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e5a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002e5e:	4630      	mov	r0, r6
 8002e60:	e7d0      	b.n	8002e04 <LCD_X_Config+0xd8>
 8002e62:	bf00      	nop
 8002e64:	2402d478 	.word	0x2402d478
 8002e68:	2402d164 	.word	0x2402d164
 8002e6c:	50001000 	.word	0x50001000
 8002e70:	52001000 	.word	0x52001000
 8002e74:	08008168 	.word	0x08008168
 8002e78:	08008524 	.word	0x08008524
 8002e7c:	08002b75 	.word	0x08002b75
 8002e80:	08002a75 	.word	0x08002a75
 8002e84:	08002ab9 	.word	0x08002ab9

08002e88 <LCD_X_DisplayDriver>:
  switch (Cmd) 
 8002e88:	3901      	subs	r1, #1
{
 8002e8a:	b530      	push	{r4, r5, lr}
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	b08f      	sub	sp, #60	; 0x3c
 8002e90:	4615      	mov	r5, r2
  switch (Cmd) 
 8002e92:	290d      	cmp	r1, #13
 8002e94:	f200 80ab 	bhi.w	8002fee <LCD_X_DisplayDriver+0x166>
 8002e98:	e8df f001 	tbb	[pc, r1]
 8002e9c:	4c35a907 	.word	0x4c35a907
 8002ea0:	737a5a53 	.word	0x737a5a53
 8002ea4:	90a98a60 	.word	0x90a98a60
 8002ea8:	459a      	.short	0x459a
  if (LayerIndex < GUI_NUM_LAYERS) 
 8002eaa:	bb40      	cbnz	r0, 8002efe <LCD_X_DisplayDriver+0x76>
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002eac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002eb0:	2102      	movs	r1, #2
    layer_cfg.WindowX1 = XSIZE_PHYS;
 8002eb2:	f44f 7220 	mov.w	r2, #640	; 0x280
    layer_cfg.WindowX0 = 0;
 8002eb6:	9001      	str	r0, [sp, #4]
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8002eb8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    layer_cfg.Backcolor.Green = 0;
 8002ebc:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8002ec0:	e9cd 3104 	strd	r3, r1, [sp, #16]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8002ec4:	494b      	ldr	r1, [pc, #300]	; (8002ff4 <LCD_X_DisplayDriver+0x16c>)
 8002ec6:	6809      	ldr	r1, [r1, #0]
 8002ec8:	910a      	str	r1, [sp, #40]	; 0x28
    layer_cfg.Alpha = 255;
 8002eca:	21ff      	movs	r1, #255	; 0xff
    layer_cfg.WindowY0 = 0;
 8002ecc:	e9cd 2002 	strd	r2, r0, [sp, #8]
    layer_cfg.Alpha0 = 0;
 8002ed0:	e9cd 1006 	strd	r1, r0, [sp, #24]
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ed4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002ed8:	2107      	movs	r1, #7
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8002eda:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ede:	e9cd 0108 	strd	r0, r1, [sp, #32]
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	a901      	add	r1, sp, #4
 8002ee6:	4844      	ldr	r0, [pc, #272]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002ee8:	f7fe f8e7 	bl	80010ba <HAL_LTDC_ConfigLayer>
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8) 
 8002eec:	4620      	mov	r0, r4
 8002eee:	f001 fd05 	bl	80048fc <LCD_GetBitsPerPixelEx>
 8002ef2:	2808      	cmp	r0, #8
 8002ef4:	dc03      	bgt.n	8002efe <LCD_X_DisplayDriver+0x76>
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	483f      	ldr	r0, [pc, #252]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002efa:	f7fe f993 	bl	8001224 <HAL_LTDC_EnableCLUT>
  int r = 0;
 8002efe:	2500      	movs	r5, #0
}
 8002f00:	4628      	mov	r0, r5
 8002f02:	b00f      	add	sp, #60	; 0x3c
 8002f04:	bd30      	pop	{r4, r5, pc}
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002f06:	231c      	movs	r3, #28
 8002f08:	4a3a      	ldr	r2, [pc, #232]	; (8002ff4 <LCD_X_DisplayDriver+0x16c>)
 8002f0a:	686d      	ldr	r5, [r5, #4]
 8002f0c:	4343      	muls	r3, r0
 8002f0e:	18d0      	adds	r0, r2, r3
 8002f10:	58d3      	ldr	r3, [r2, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002f12:	4622      	mov	r2, r4
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8002f14:	68c1      	ldr	r1, [r0, #12]
 8002f16:	6940      	ldr	r0, [r0, #20]
 8002f18:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8002f1a:	fb00 3101 	mla	r1, r0, r1, r3
 8002f1e:	4836      	ldr	r0, [pc, #216]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002f20:	f7fe f9f9 	bl	8001316 <HAL_LTDC_SetAddress>
 8002f24:	e7eb      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8002f26:	4933      	ldr	r1, [pc, #204]	; (8002ff4 <LCD_X_DisplayDriver+0x16c>)
 8002f28:	231c      	movs	r3, #28
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fb03 1400 	mla	r4, r3, r0, r1
 8002f30:	6062      	str	r2, [r4, #4]
 8002f32:	e7e4      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8002f34:	4603      	mov	r3, r0
 8002f36:	2201      	movs	r2, #1
 8002f38:	4629      	mov	r1, r5
 8002f3a:	482f      	ldr	r0, [pc, #188]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002f3c:	f7fe f903 	bl	8001146 <HAL_LTDC_ConfigCLUT>
 8002f40:	e7dd      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    __HAL_LTDC_ENABLE(&hltdc);
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	6993      	ldr	r3, [r2, #24]
 8002f48:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc);
 8002f4c:	6193      	str	r3, [r2, #24]
 8002f4e:	e7d6      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	6993      	ldr	r3, [r2, #24]
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	e7f7      	b.n	8002f4c <LCD_X_DisplayDriver+0xc4>
 8002f5c:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002f5e:	01c4      	lsls	r4, r0, #7
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8002f60:	6829      	ldr	r1, [r5, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2901      	cmp	r1, #1
 8002f66:	f102 0384 	add.w	r3, r2, #132	; 0x84
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8002f6a:	5919      	ldr	r1, [r3, r4]
 8002f6c:	bf0c      	ite	eq
 8002f6e:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8002f72:	f021 0101 	bicne.w	r1, r1, #1
 8002f76:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8002f78:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6253      	str	r3, [r2, #36]	; 0x24
 8002f80:	e7bd      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8002f82:	4603      	mov	r3, r0
 8002f84:	e9d2 1200 	ldrd	r1, r2, [r2]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8002f88:	481b      	ldr	r0, [pc, #108]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002f8a:	f7fe f97b 	bl	8001284 <HAL_LTDC_SetWindowPosition>
 8002f8e:	e7b6      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8002f90:	aa01      	add	r2, sp, #4
 8002f92:	4669      	mov	r1, sp
 8002f94:	f000 ff9c 	bl	8003ed0 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8002f98:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <LCD_X_DisplayDriver+0x16c>)
 8002f9a:	231c      	movs	r3, #28
 8002f9c:	fb03 2304 	mla	r3, r3, r4, r2
 8002fa0:	682a      	ldr	r2, [r5, #0]
 8002fa2:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8002fa4:	686a      	ldr	r2, [r5, #4]
 8002fa6:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8002fa8:	4623      	mov	r3, r4
 8002faa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8002fae:	e7eb      	b.n	8002f88 <LCD_X_DisplayDriver+0x100>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6829      	ldr	r1, [r5, #0]
 8002fb4:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002fb6:	f7fe f98e 	bl	80012d6 <HAL_LTDC_SetAlpha>
 8002fba:	e7a0      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8002fbc:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8002fbe:	4601      	mov	r1, r0
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8002fc2:	b115      	cbz	r5, 8002fca <LCD_X_DisplayDriver+0x142>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8002fc4:	f7fe f8fe 	bl	80011c4 <HAL_LTDC_EnableColorKeying>
 8002fc8:	e799      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8002fca:	f7fe f913 	bl	80011f4 <HAL_LTDC_DisableColorKeying>
 8002fce:	e797      	b.n	8002f00 <LCD_X_DisplayDriver+0x78>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8002fd0:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8002fd2:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8002fd4:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8002fd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8002fdc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8002fe0:	4311      	orrs	r1, r2
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <LCD_X_DisplayDriver+0x170>)
 8002fe6:	4319      	orrs	r1, r3
 8002fe8:	f7fe f890 	bl	800110c <HAL_LTDC_ConfigColorKeying>
 8002fec:	e787      	b.n	8002efe <LCD_X_DisplayDriver+0x76>
    r = -1;
 8002fee:	f04f 35ff 	mov.w	r5, #4294967295
  return r;
 8002ff2:	e785      	b.n	8002f00 <LCD_X_DisplayDriver+0x78>
 8002ff4:	2402d164 	.word	0x2402d164
 8002ff8:	2402d478 	.word	0x2402d478

08002ffc <LCD_Index2Color_M565>:
 8002ffc:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <LCD_Index2Color_M565+0x24>)
 8003002:	5cd1      	ldrb	r1, [r2, r3]
 8003004:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <LCD_Index2Color_M565+0x28>)
 800300a:	f000 001f 	and.w	r0, r0, #31
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	5c10      	ldrb	r0, [r2, r0]
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003018:	4418      	add	r0, r3
 800301a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800301e:	4770      	bx	lr
 8003020:	080084a8 	.word	0x080084a8
 8003024:	080084e8 	.word	0x080084e8

08003028 <_Color2Index_M565>:
 8003028:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <_Color2Index_M565+0x20>)
 800302e:	5cd1      	ldrb	r1, [r2, r3]
 8003030:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <_Color2Index_M565+0x24>)
 8003036:	b2c0      	uxtb	r0, r0
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	5c10      	ldrb	r0, [r2, r0]
 800303c:	02db      	lsls	r3, r3, #11
 800303e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003042:	4418      	add	r0, r3
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	080081a8 	.word	0x080081a8
 800304c:	080082a8 	.word	0x080082a8

08003050 <_GetIndexMask_M565>:
 8003050:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003054:	4770      	bx	lr
	...

08003058 <_Color2IndexBulk>:
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	f8df e050 	ldr.w	lr, [pc, #80]	; 80030ac <_Color2IndexBulk+0x54>
 800305e:	4606      	mov	r6, r0
 8003060:	460d      	mov	r5, r1
 8003062:	4614      	mov	r4, r2
 8003064:	f8de e000 	ldr.w	lr, [lr]
 8003068:	461f      	mov	r7, r3
 800306a:	f1be 0f00 	cmp.w	lr, #0
 800306e:	d003      	beq.n	8003078 <_Color2IndexBulk+0x20>
 8003070:	46f4      	mov	ip, lr
 8003072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003076:	4760      	bx	ip
 8003078:	f8df e034 	ldr.w	lr, [pc, #52]	; 80030b0 <_Color2IndexBulk+0x58>
 800307c:	490a      	ldr	r1, [pc, #40]	; (80030a8 <_Color2IndexBulk+0x50>)
 800307e:	f856 2b04 	ldr.w	r2, [r6], #4
 8003082:	3c01      	subs	r4, #1
 8003084:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003088:	f81e 0003 	ldrb.w	r0, [lr, r3]
 800308c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	5c8a      	ldrb	r2, [r1, r2]
 8003096:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 800309a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 800309e:	4413      	add	r3, r2
 80030a0:	802b      	strh	r3, [r5, #0]
 80030a2:	443d      	add	r5, r7
 80030a4:	d1eb      	bne.n	800307e <_Color2IndexBulk+0x26>
 80030a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a8:	080082a8 	.word	0x080082a8
 80030ac:	2402d2a4 	.word	0x2402d2a4
 80030b0:	080081a8 	.word	0x080081a8

080030b4 <_Index2ColorBulk>:
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	4e16      	ldr	r6, [pc, #88]	; (8003110 <_Index2ColorBulk+0x5c>)
 80030b8:	4686      	mov	lr, r0
 80030ba:	460f      	mov	r7, r1
 80030bc:	4614      	mov	r4, r2
 80030be:	6876      	ldr	r6, [r6, #4]
 80030c0:	461d      	mov	r5, r3
 80030c2:	b11e      	cbz	r6, 80030cc <_Index2ColorBulk+0x18>
 80030c4:	46b4      	mov	ip, r6
 80030c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80030ca:	4760      	bx	ip
 80030cc:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80030d0:	1e50      	subs	r0, r2, #1
 80030d2:	4e10      	ldr	r6, [pc, #64]	; (8003114 <_Index2ColorBulk+0x60>)
 80030d4:	3901      	subs	r1, #1
 80030d6:	fb03 e000 	mla	r0, r3, r0, lr
 80030da:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80030de:	4f0e      	ldr	r7, [pc, #56]	; (8003118 <_Index2ColorBulk+0x64>)
 80030e0:	8802      	ldrh	r2, [r0, #0]
 80030e2:	3c01      	subs	r4, #1
 80030e4:	eba0 0005 	sub.w	r0, r0, r5
 80030e8:	ea4f 23d2 	mov.w	r3, r2, lsr #11
 80030ec:	f816 e003 	ldrb.w	lr, [r6, r3]
 80030f0:	f002 031f 	and.w	r3, r2, #31
 80030f4:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80030f8:	5cf3      	ldrb	r3, [r6, r3]
 80030fa:	5cba      	ldrb	r2, [r7, r2]
 80030fc:	eb03 430e 	add.w	r3, r3, lr, lsl #16
 8003100:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003108:	f841 3904 	str.w	r3, [r1], #-4
 800310c:	d1e8      	bne.n	80030e0 <_Index2ColorBulk+0x2c>
 800310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003110:	2402d2a4 	.word	0x2402d2a4
 8003114:	080084e8 	.word	0x080084e8
 8003118:	080084a8 	.word	0x080084a8

0800311c <_PushFreeBlock>:
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <_PushFreeBlock+0x20>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	3201      	adds	r2, #1
 8003122:	b510      	push	{r4, lr}
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003128:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800312a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800312e:	604c      	str	r4, [r1, #4]
 8003130:	2100      	movs	r1, #0
 8003132:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8003136:	6258      	str	r0, [r3, #36]	; 0x24
 8003138:	bd10      	pop	{r4, pc}
 800313a:	bf00      	nop
 800313c:	2402d520 	.word	0x2402d520

08003140 <_RemoveFreeBlock>:
 8003140:	b510      	push	{r4, lr}
 8003142:	230f      	movs	r3, #15
 8003144:	6844      	ldr	r4, [r0, #4]
 8003146:	490d      	ldr	r1, [pc, #52]	; (800317c <_RemoveFreeBlock+0x3c>)
 8003148:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800314c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800314e:	4294      	cmp	r4, r2
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <_RemoveFreeBlock+0x3c>)
 8003152:	d203      	bcs.n	800315c <_RemoveFreeBlock+0x1c>
 8003154:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003158:	d2f6      	bcs.n	8003148 <_RemoveFreeBlock+0x8>
 800315a:	bd10      	pop	{r4, pc}
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d80c      	bhi.n	800317a <_RemoveFreeBlock+0x3a>
 8003160:	6811      	ldr	r1, [r2, #0]
 8003162:	1b09      	subs	r1, r1, r4
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	6881      	ldr	r1, [r0, #8]
 8003168:	68c0      	ldr	r0, [r0, #12]
 800316a:	b101      	cbz	r1, 800316e <_RemoveFreeBlock+0x2e>
 800316c:	6048      	str	r0, [r1, #4]
 800316e:	b108      	cbz	r0, 8003174 <_RemoveFreeBlock+0x34>
 8003170:	6001      	str	r1, [r0, #0]
 8003172:	bd10      	pop	{r4, pc}
 8003174:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003178:	6459      	str	r1, [r3, #68]	; 0x44
 800317a:	bd10      	pop	{r4, pc}
 800317c:	2402d520 	.word	0x2402d520

08003180 <_AddFreeMemory>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	4e27      	ldr	r6, [pc, #156]	; (8003220 <_AddFreeMemory+0xa0>)
 8003184:	4605      	mov	r5, r0
 8003186:	1808      	adds	r0, r1, r0
 8003188:	460c      	mov	r4, r1
 800318a:	68f3      	ldr	r3, [r6, #12]
 800318c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800318e:	3b01      	subs	r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	4283      	cmp	r3, r0
 8003194:	d305      	bcc.n	80031a2 <_AddFreeMemory+0x22>
 8003196:	594b      	ldr	r3, [r1, r5]
 8003198:	b91b      	cbnz	r3, 80031a2 <_AddFreeMemory+0x22>
 800319a:	6843      	ldr	r3, [r0, #4]
 800319c:	441d      	add	r5, r3
 800319e:	f7ff ffcf 	bl	8003140 <_RemoveFreeBlock>
 80031a2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80031a4:	429c      	cmp	r4, r3
 80031a6:	d90a      	bls.n	80031be <_AddFreeMemory+0x3e>
 80031a8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80031ac:	1be7      	subs	r7, r4, r7
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b92b      	cbnz	r3, 80031be <_AddFreeMemory+0x3e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	463c      	mov	r4, r7
 80031b6:	4638      	mov	r0, r7
 80031b8:	441d      	add	r5, r3
 80031ba:	f7ff ffc1 	bl	8003140 <_RemoveFreeBlock>
 80031be:	230f      	movs	r3, #15
 80031c0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80031c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031c6:	4295      	cmp	r5, r2
 80031c8:	d203      	bcs.n	80031d2 <_AddFreeMemory+0x52>
 80031ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80031ce:	d2f7      	bcs.n	80031c0 <_AddFreeMemory+0x40>
 80031d0:	e023      	b.n	800321a <_AddFreeMemory+0x9a>
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	d821      	bhi.n	800321a <_AddFreeMemory+0x9a>
 80031d6:	3308      	adds	r3, #8
 80031d8:	1960      	adds	r0, r4, r5
 80031da:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80031de:	6851      	ldr	r1, [r2, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	6124      	str	r4, [r4, #16]
 80031e4:	60a1      	str	r1, [r4, #8]
 80031e6:	e884 0024 	stmia.w	r4, {r2, r5}
 80031ea:	f840 5c04 	str.w	r5, [r0, #-4]
 80031ee:	f104 0008 	add.w	r0, r4, #8
 80031f2:	b101      	cbz	r1, 80031f6 <_AddFreeMemory+0x76>
 80031f4:	6048      	str	r0, [r1, #4]
 80031f6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80031fa:	60a1      	str	r1, [r4, #8]
 80031fc:	60e2      	str	r2, [r4, #12]
 80031fe:	6058      	str	r0, [r3, #4]
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	4907      	ldr	r1, [pc, #28]	; (8003220 <_AddFreeMemory+0xa0>)
 8003204:	18ea      	adds	r2, r5, r3
 8003206:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800320a:	6032      	str	r2, [r6, #0]
 800320c:	b92b      	cbnz	r3, 800321a <_AddFreeMemory+0x9a>
 800320e:	68cb      	ldr	r3, [r1, #12]
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	688a      	ldr	r2, [r1, #8]
 8003214:	4293      	cmp	r3, r2
 8003216:	bf88      	it	hi
 8003218:	608b      	strhi	r3, [r1, #8]
 800321a:	4628      	mov	r0, r5
 800321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800321e:	bf00      	nop
 8003220:	2402d520 	.word	0x2402d520

08003224 <_RemoveHoles>:
 8003224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003228:	4f23      	ldr	r7, [pc, #140]	; (80032b8 <_RemoveHoles+0x94>)
 800322a:	4683      	mov	fp, r0
 800322c:	68fe      	ldr	r6, [r7, #12]
 800322e:	46b8      	mov	r8, r7
 8003230:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003232:	3e01      	subs	r6, #1
 8003234:	4426      	add	r6, r4
 8003236:	e894 0028 	ldmia.w	r4, {r3, r5}
 800323a:	bb9b      	cbnz	r3, 80032a4 <_RemoveHoles+0x80>
 800323c:	1961      	adds	r1, r4, r5
 800323e:	428e      	cmp	r6, r1
 8003240:	d930      	bls.n	80032a4 <_RemoveHoles+0x80>
 8003242:	f854 a005 	ldr.w	sl, [r4, r5]
 8003246:	f1ba 0f00 	cmp.w	sl, #0
 800324a:	d02b      	beq.n	80032a4 <_RemoveHoles+0x80>
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d126      	bne.n	80032a4 <_RemoveHoles+0x80>
 8003256:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800325a:	4620      	mov	r0, r4
 800325c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	9101      	str	r1, [sp, #4]
 8003264:	f7ff ff6c 	bl	8003140 <_RemoveFreeBlock>
 8003268:	9901      	ldr	r1, [sp, #4]
 800326a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800326e:	6808      	ldr	r0, [r1, #0]
 8003270:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003274:	4620      	mov	r0, r4
 8003276:	6054      	str	r4, [r2, #4]
 8003278:	464a      	mov	r2, r9
 800327a:	f004 ff40 	bl	80080fe <memmove>
 800327e:	9b00      	ldr	r3, [sp, #0]
 8003280:	eb04 0109 	add.w	r1, r4, r9
 8003284:	4628      	mov	r0, r5
 8003286:	459a      	cmp	sl, r3
 8003288:	bf02      	ittt	eq
 800328a:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 800328e:	1b5b      	subeq	r3, r3, r5
 8003290:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 8003294:	f7ff ff74 	bl	8003180 <_AddFreeMemory>
 8003298:	f1bb 0f00 	cmp.w	fp, #0
 800329c:	d001      	beq.n	80032a2 <_RemoveHoles+0x7e>
 800329e:	4558      	cmp	r0, fp
 80032a0:	d205      	bcs.n	80032ae <_RemoveHoles+0x8a>
 80032a2:	464d      	mov	r5, r9
 80032a4:	442c      	add	r4, r5
 80032a6:	42a6      	cmp	r6, r4
 80032a8:	d8c5      	bhi.n	8003236 <_RemoveHoles+0x12>
 80032aa:	2001      	movs	r0, #1
 80032ac:	e000      	b.n	80032b0 <_RemoveHoles+0x8c>
 80032ae:	2000      	movs	r0, #0
 80032b0:	b003      	add	sp, #12
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	2402d520 	.word	0x2402d520

080032bc <GUI_ALLOC_FreeFixedBlock>:
 80032bc:	b128      	cbz	r0, 80032ca <GUI_ALLOC_FreeFixedBlock+0xe>
 80032be:	4b03      	ldr	r3, [pc, #12]	; (80032cc <GUI_ALLOC_FreeFixedBlock+0x10>)
 80032c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c2:	6002      	str	r2, [r0, #0]
 80032c4:	b102      	cbz	r2, 80032c8 <GUI_ALLOC_FreeFixedBlock+0xc>
 80032c6:	6050      	str	r0, [r2, #4]
 80032c8:	63d8      	str	r0, [r3, #60]	; 0x3c
 80032ca:	4770      	bx	lr
 80032cc:	2402d520 	.word	0x2402d520

080032d0 <GUI_ALLOC_h2p>:
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <GUI_ALLOC_h2p+0x10>)
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80032d8:	6840      	ldr	r0, [r0, #4]
 80032da:	3008      	adds	r0, #8
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	2402d520 	.word	0x2402d520

080032e4 <GUI_ALLOC_LockH>:
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <GUI_ALLOC_LockH+0x18>)
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	3201      	adds	r2, #1
 80032ea:	61da      	str	r2, [r3, #28]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 80032f2:	3301      	adds	r3, #1
 80032f4:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 80032f8:	f7ff bfea 	b.w	80032d0 <GUI_ALLOC_h2p>
 80032fc:	2402d520 	.word	0x2402d520

08003300 <GUI_ALLOC_UnlockH>:
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	490a      	ldr	r1, [pc, #40]	; (800332c <GUI_ALLOC_UnlockH+0x2c>)
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800330a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800330c:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d903      	bls.n	800331c <GUI_ALLOC_UnlockH+0x1c>
 8003314:	69ca      	ldr	r2, [r1, #28]
 8003316:	b10a      	cbz	r2, 800331c <GUI_ALLOC_UnlockH+0x1c>
 8003318:	3a01      	subs	r2, #1
 800331a:	61ca      	str	r2, [r1, #28]
 800331c:	3b01      	subs	r3, #1
 800331e:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 8003322:	2300      	movs	r3, #0
 8003324:	6003      	str	r3, [r0, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	bd30      	pop	{r4, r5, pc}
 800332a:	bf00      	nop
 800332c:	2402d520 	.word	0x2402d520

08003330 <GUI_ALLOC_AssignMemory>:
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <GUI_ALLOC_AssignMemory+0xc>)
 8003332:	f021 0103 	bic.w	r1, r1, #3
 8003336:	6018      	str	r0, [r3, #0]
 8003338:	6059      	str	r1, [r3, #4]
 800333a:	4770      	bx	lr
 800333c:	2402d2ac 	.word	0x2402d2ac

08003340 <GUI_ALLOC_Free>:
 8003340:	b510      	push	{r4, lr}
 8003342:	4604      	mov	r4, r0
 8003344:	b160      	cbz	r0, 8003360 <GUI_ALLOC_Free+0x20>
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <GUI_ALLOC_Free+0x24>)
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	6848      	ldr	r0, [r1, #4]
 8003352:	f7ff ff15 	bl	8003180 <_AddFreeMemory>
 8003356:	4620      	mov	r0, r4
 8003358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800335c:	f7ff bede 	b.w	800311c <_PushFreeBlock>
 8003360:	bd10      	pop	{r4, pc}
 8003362:	bf00      	nop
 8003364:	2402d520 	.word	0x2402d520

08003368 <_EnlargeBlocks>:
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	4c22      	ldr	r4, [pc, #136]	; (80033f8 <_EnlargeBlocks+0x90>)
 800336e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003370:	b93b      	cbnz	r3, 8003382 <_EnlargeBlocks+0x1a>
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <_EnlargeBlocks+0x94>)
 8003374:	689d      	ldr	r5, [r3, #8]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	3508      	adds	r5, #8
 800337a:	fbb3 f5f5 	udiv	r5, r3, r5
 800337e:	3502      	adds	r5, #2
 8003380:	e003      	b.n	800338a <_EnlargeBlocks+0x22>
 8003382:	6923      	ldr	r3, [r4, #16]
 8003384:	1d1d      	adds	r5, r3, #4
 8003386:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800338a:	00e8      	lsls	r0, r5, #3
 800338c:	f000 f8c0 	bl	8003510 <_Alloc>
 8003390:	4680      	mov	r8, r0
 8003392:	b360      	cbz	r0, 80033ee <_EnlargeBlocks+0x86>
 8003394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003396:	6922      	ldr	r2, [r4, #16]
 8003398:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800339c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800339e:	00d2      	lsls	r2, r2, #3
 80033a0:	685e      	ldr	r6, [r3, #4]
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <_EnlargeBlocks+0x98>)
 80033a4:	3608      	adds	r6, #8
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4630      	mov	r0, r6
 80033aa:	4798      	blx	r3
 80033ac:	6922      	ldr	r2, [r4, #16]
 80033ae:	1e69      	subs	r1, r5, #1
 80033b0:	6366      	str	r6, [r4, #52]	; 0x34
 80033b2:	4613      	mov	r3, r2
 80033b4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d205      	bcs.n	80033c8 <_EnlargeBlocks+0x60>
 80033bc:	3301      	adds	r3, #1
 80033be:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 80033c2:	f840 3c04 	str.w	r3, [r0, #-4]
 80033c6:	e7f7      	b.n	80033b8 <_EnlargeBlocks+0x50>
 80033c8:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80033cc:	f04f 0800 	mov.w	r8, #0
 80033d0:	4638      	mov	r0, r7
 80033d2:	f8c6 8004 	str.w	r8, [r6, #4]
 80033d6:	6863      	ldr	r3, [r4, #4]
 80033d8:	6262      	str	r2, [r4, #36]	; 0x24
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	6125      	str	r5, [r4, #16]
 80033de:	442b      	add	r3, r5
 80033e0:	6063      	str	r3, [r4, #4]
 80033e2:	b13f      	cbz	r7, 80033f4 <_EnlargeBlocks+0x8c>
 80033e4:	f7ff ffac 	bl	8003340 <GUI_ALLOC_Free>
 80033e8:	4640      	mov	r0, r8
 80033ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033ee:	2001      	movs	r0, #1
 80033f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f8:	2402d520 	.word	0x2402d520
 80033fc:	2402d2ac 	.word	0x2402d2ac
 8003400:	2400002c 	.word	0x2400002c

08003404 <_InitOnce>:
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <_InitOnce+0x60>)
 8003406:	b570      	push	{r4, r5, r6, lr}
 8003408:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800340c:	bb43      	cbnz	r3, 8003460 <_InitOnce+0x5c>
 800340e:	2301      	movs	r3, #1
 8003410:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <_InitOnce+0x64>)
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	b911      	cbnz	r1, 8003420 <_InitOnce+0x1c>
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	0889      	lsrs	r1, r1, #2
 800341e:	6099      	str	r1, [r3, #8]
 8003420:	215a      	movs	r1, #90	; 0x5a
 8003422:	2610      	movs	r6, #16
 8003424:	6211      	str	r1, [r2, #32]
 8003426:	2100      	movs	r1, #0
 8003428:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 800342c:	fa06 f501 	lsl.w	r5, r6, r1
 8003430:	3101      	adds	r1, #1
 8003432:	4c0c      	ldr	r4, [pc, #48]	; (8003464 <_InitOnce+0x60>)
 8003434:	6405      	str	r5, [r0, #64]	; 0x40
 8003436:	2910      	cmp	r1, #16
 8003438:	d1f6      	bne.n	8003428 <_InitOnce+0x24>
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	2501      	movs	r5, #1
 800343e:	6858      	ldr	r0, [r3, #4]
 8003440:	2302      	movs	r3, #2
 8003442:	63a1      	str	r1, [r4, #56]	; 0x38
 8003444:	6123      	str	r3, [r4, #16]
 8003446:	f1a0 0314 	sub.w	r3, r0, #20
 800344a:	60e0      	str	r0, [r4, #12]
 800344c:	440b      	add	r3, r1
 800344e:	6363      	str	r3, [r4, #52]	; 0x34
 8003450:	605d      	str	r5, [r3, #4]
 8003452:	6265      	str	r5, [r4, #36]	; 0x24
 8003454:	6065      	str	r5, [r4, #4]
 8003456:	f7ff fe93 	bl	8003180 <_AddFreeMemory>
 800345a:	f7ff ff85 	bl	8003368 <_EnlargeBlocks>
 800345e:	6325      	str	r5, [r4, #48]	; 0x30
 8003460:	bd70      	pop	{r4, r5, r6, pc}
 8003462:	bf00      	nop
 8003464:	2402d520 	.word	0x2402d520
 8003468:	2402d2ac 	.word	0x2402d2ac

0800346c <GUI_ALLOC_GetFixedBlock>:
 800346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003470:	4607      	mov	r7, r0
 8003472:	4e26      	ldr	r6, [pc, #152]	; (800350c <GUI_ALLOC_GetFixedBlock+0xa0>)
 8003474:	f7ff ffc6 	bl	8003404 <_InitOnce>
 8003478:	3703      	adds	r7, #3
 800347a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800347c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800347e:	f027 0703 	bic.w	r7, r7, #3
 8003482:	4614      	mov	r4, r2
 8003484:	3704      	adds	r7, #4
 8003486:	4287      	cmp	r7, r0
 8003488:	bf38      	it	cc
 800348a:	4607      	movcc	r7, r0
 800348c:	b134      	cbz	r4, 800349c <GUI_ALLOC_GetFixedBlock+0x30>
 800348e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003492:	429f      	cmp	r7, r3
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	d02c      	beq.n	80034f2 <GUI_ALLOC_GetFixedBlock+0x86>
 8003498:	461c      	mov	r4, r3
 800349a:	e7f7      	b.n	800348c <GUI_ALLOC_GetFixedBlock+0x20>
 800349c:	68f3      	ldr	r3, [r6, #12]
 800349e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80034a0:	eb02 0803 	add.w	r8, r2, r3
 80034a4:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80034a8:	ebc5 0508 	rsb	r5, r5, r8
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b133      	cbz	r3, 80034be <GUI_ALLOC_GetFixedBlock+0x52>
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff feb7 	bl	8003224 <_RemoveHoles>
 80034b6:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80034ba:	ebc5 0508 	rsb	r5, r5, r8
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	bb0b      	cbnz	r3, 8003506 <GUI_ALLOC_GetFixedBlock+0x9a>
 80034c2:	686b      	ldr	r3, [r5, #4]
 80034c4:	429f      	cmp	r7, r3
 80034c6:	dc1e      	bgt.n	8003506 <GUI_ALLOC_GetFixedBlock+0x9a>
 80034c8:	4628      	mov	r0, r5
 80034ca:	1d1c      	adds	r4, r3, #4
 80034cc:	f7ff fe38 	bl	8003140 <_RemoveFreeBlock>
 80034d0:	68f3      	ldr	r3, [r6, #12]
 80034d2:	6868      	ldr	r0, [r5, #4]
 80034d4:	1be4      	subs	r4, r4, r7
 80034d6:	1bdb      	subs	r3, r3, r7
 80034d8:	1bc0      	subs	r0, r0, r7
 80034da:	442c      	add	r4, r5
 80034dc:	60f3      	str	r3, [r6, #12]
 80034de:	6973      	ldr	r3, [r6, #20]
 80034e0:	443b      	add	r3, r7
 80034e2:	6173      	str	r3, [r6, #20]
 80034e4:	d002      	beq.n	80034ec <GUI_ALLOC_GetFixedBlock+0x80>
 80034e6:	4629      	mov	r1, r5
 80034e8:	f7ff fe4a 	bl	8003180 <_AddFreeMemory>
 80034ec:	f844 7c04 	str.w	r7, [r4, #-4]
 80034f0:	e009      	b.n	8003506 <GUI_ALLOC_GetFixedBlock+0x9a>
 80034f2:	b10b      	cbz	r3, 80034f8 <GUI_ALLOC_GetFixedBlock+0x8c>
 80034f4:	6861      	ldr	r1, [r4, #4]
 80034f6:	6059      	str	r1, [r3, #4]
 80034f8:	6861      	ldr	r1, [r4, #4]
 80034fa:	b101      	cbz	r1, 80034fe <GUI_ALLOC_GetFixedBlock+0x92>
 80034fc:	600b      	str	r3, [r1, #0]
 80034fe:	42a2      	cmp	r2, r4
 8003500:	d101      	bne.n	8003506 <GUI_ALLOC_GetFixedBlock+0x9a>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	63f3      	str	r3, [r6, #60]	; 0x3c
 8003506:	4620      	mov	r0, r4
 8003508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800350c:	2402d520 	.word	0x2402d520

08003510 <_Alloc>:
 8003510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003514:	4e39      	ldr	r6, [pc, #228]	; (80035fc <_Alloc+0xec>)
 8003516:	4604      	mov	r4, r0
 8003518:	f7ff ff74 	bl	8003404 <_InitOnce>
 800351c:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800351e:	6833      	ldr	r3, [r6, #0]
 8003520:	42ac      	cmp	r4, r5
 8003522:	bf24      	itt	cs
 8003524:	3403      	addcs	r4, #3
 8003526:	f024 0503 	biccs.w	r5, r4, #3
 800352a:	4c34      	ldr	r4, [pc, #208]	; (80035fc <_Alloc+0xec>)
 800352c:	350c      	adds	r5, #12
 800352e:	42ab      	cmp	r3, r5
 8003530:	d33e      	bcc.n	80035b0 <_Alloc+0xa0>
 8003532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003534:	6862      	ldr	r2, [r4, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90f      	bls.n	800355a <_Alloc+0x4a>
 800353a:	6873      	ldr	r3, [r6, #4]
 800353c:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800353e:	3b01      	subs	r3, #1
 8003540:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8003544:	6073      	str	r3, [r6, #4]
 8003546:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003548:	eb03 0208 	add.w	r2, r3, r8
 800354c:	6852      	ldr	r2, [r2, #4]
 800354e:	6272      	str	r2, [r6, #36]	; 0x24
 8003550:	2201      	movs	r2, #1
 8003552:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8003556:	b957      	cbnz	r7, 800356e <_Alloc+0x5e>
 8003558:	e02a      	b.n	80035b0 <_Alloc+0xa0>
 800355a:	3b01      	subs	r3, #1
 800355c:	6323      	str	r3, [r4, #48]	; 0x30
 800355e:	f7ff ff03 	bl	8003368 <_EnlargeBlocks>
 8003562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003564:	3301      	adds	r3, #1
 8003566:	6323      	str	r3, [r4, #48]	; 0x30
 8003568:	2800      	cmp	r0, #0
 800356a:	d0e6      	beq.n	800353a <_Alloc+0x2a>
 800356c:	e020      	b.n	80035b0 <_Alloc+0xa0>
 800356e:	230f      	movs	r3, #15
 8003570:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8003574:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003576:	4295      	cmp	r5, r2
 8003578:	d20c      	bcs.n	8003594 <_Alloc+0x84>
 800357a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800357e:	d2f7      	bcs.n	8003570 <_Alloc+0x60>
 8003580:	e008      	b.n	8003594 <_Alloc+0x84>
 8003582:	6894      	ldr	r4, [r2, #8]
 8003584:	b12c      	cbz	r4, 8003592 <_Alloc+0x82>
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	4295      	cmp	r5, r2
 800358a:	d914      	bls.n	80035b6 <_Alloc+0xa6>
 800358c:	68a2      	ldr	r2, [r4, #8]
 800358e:	2a00      	cmp	r2, #0
 8003590:	d1f7      	bne.n	8003582 <_Alloc+0x72>
 8003592:	3301      	adds	r3, #1
 8003594:	2b0f      	cmp	r3, #15
 8003596:	d803      	bhi.n	80035a0 <_Alloc+0x90>
 8003598:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800359c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800359e:	e7f6      	b.n	800358e <_Alloc+0x7e>
 80035a0:	4628      	mov	r0, r5
 80035a2:	f7ff fe3f 	bl	8003224 <_RemoveHoles>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d0e1      	beq.n	800356e <_Alloc+0x5e>
 80035aa:	4638      	mov	r0, r7
 80035ac:	f7ff fdb6 	bl	800311c <_PushFreeBlock>
 80035b0:	2000      	movs	r0, #0
 80035b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80035ba:	4620      	mov	r0, r4
 80035bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80035be:	ebc5 0209 	rsb	r2, r5, r9
 80035c2:	330c      	adds	r3, #12
 80035c4:	429a      	cmp	r2, r3
 80035c6:	bf38      	it	cc
 80035c8:	464d      	movcc	r5, r9
 80035ca:	f7ff fdb9 	bl	8003140 <_RemoveFreeBlock>
 80035ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80035d0:	1961      	adds	r1, r4, r5
 80035d2:	454d      	cmp	r5, r9
 80035d4:	4498      	add	r8, r3
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	f8c8 4004 	str.w	r4, [r8, #4]
 80035de:	6027      	str	r7, [r4, #0]
 80035e0:	6065      	str	r5, [r4, #4]
 80035e2:	60a3      	str	r3, [r4, #8]
 80035e4:	6124      	str	r4, [r4, #16]
 80035e6:	f841 5c04 	str.w	r5, [r1, #-4]
 80035ea:	da03      	bge.n	80035f4 <_Alloc+0xe4>
 80035ec:	ebc5 0009 	rsb	r0, r5, r9
 80035f0:	f7ff fdc6 	bl	8003180 <_AddFreeMemory>
 80035f4:	4638      	mov	r0, r7
 80035f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035fa:	bf00      	nop
 80035fc:	2402d520 	.word	0x2402d520

08003600 <GUI_ALLOC_AllocNoInit>:
 8003600:	b108      	cbz	r0, 8003606 <GUI_ALLOC_AllocNoInit+0x6>
 8003602:	f7ff bf85 	b.w	8003510 <_Alloc>
 8003606:	4770      	bx	lr

08003608 <GUI_ALLOC_AllocZero>:
 8003608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800360a:	4606      	mov	r6, r0
 800360c:	f7ff fff8 	bl	8003600 <GUI_ALLOC_AllocNoInit>
 8003610:	4605      	mov	r5, r0
 8003612:	b160      	cbz	r0, 800362e <GUI_ALLOC_AllocZero+0x26>
 8003614:	f7ff fe66 	bl	80032e4 <GUI_ALLOC_LockH>
 8003618:	ac02      	add	r4, sp, #8
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <GUI_ALLOC_AllocZero+0x2c>)
 800361c:	4632      	mov	r2, r6
 800361e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8003622:	2100      	movs	r1, #0
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4798      	blx	r3
 8003628:	4620      	mov	r0, r4
 800362a:	f7ff fe69 	bl	8003300 <GUI_ALLOC_UnlockH>
 800362e:	4628      	mov	r0, r5
 8003630:	b002      	add	sp, #8
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	24000030 	.word	0x24000030

08003638 <Draw8Point>:
 8003638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	4c25      	ldr	r4, [pc, #148]	; (80036d4 <Draw8Point+0x9c>)
 800363e:	eb01 0903 	add.w	r9, r1, r3
 8003642:	461f      	mov	r7, r3
 8003644:	eb00 0b02 	add.w	fp, r0, r2
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	4605      	mov	r5, r0
 800364c:	460e      	mov	r6, r1
 800364e:	4658      	mov	r0, fp
 8003650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003652:	4649      	mov	r1, r9
 8003654:	4690      	mov	r8, r2
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4798      	blx	r3
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	ebc8 0a05 	rsb	sl, r8, r5
 8003660:	4649      	mov	r1, r9
 8003662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003664:	eb08 0906 	add.w	r9, r8, r6
 8003668:	4650      	mov	r0, sl
 800366a:	ebc8 0806 	rsb	r8, r8, r6
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4798      	blx	r3
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	19eb      	adds	r3, r5, r7
 8003676:	4649      	mov	r1, r9
 8003678:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800367a:	4618      	mov	r0, r3
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	6852      	ldr	r2, [r2, #4]
 8003680:	4790      	blx	r2
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	4641      	mov	r1, r8
 8003688:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800368a:	4618      	mov	r0, r3
 800368c:	6852      	ldr	r2, [r2, #4]
 800368e:	4790      	blx	r2
 8003690:	b1e7      	cbz	r7, 80036cc <Draw8Point+0x94>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	1bf6      	subs	r6, r6, r7
 8003696:	4658      	mov	r0, fp
 8003698:	1bed      	subs	r5, r5, r7
 800369a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369c:	4631      	mov	r1, r6
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4798      	blx	r3
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	4631      	mov	r1, r6
 80036a6:	4650      	mov	r0, sl
 80036a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4798      	blx	r3
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	4649      	mov	r1, r9
 80036b2:	4628      	mov	r0, r5
 80036b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4798      	blx	r3
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4641      	mov	r1, r8
 80036be:	4628      	mov	r0, r5
 80036c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	b003      	add	sp, #12
 80036c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ca:	4718      	bx	r3
 80036cc:	b003      	add	sp, #12
 80036ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d2:	bf00      	nop
 80036d4:	24000028 	.word	0x24000028

080036d8 <GL_DrawCircle>:
 80036d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036dc:	f240 25c3 	movw	r5, #707	; 0x2c3
 80036e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e4:	2702      	movs	r7, #2
 80036e6:	2601      	movs	r6, #1
 80036e8:	4355      	muls	r5, r2
 80036ea:	4680      	mov	r8, r0
 80036ec:	4689      	mov	r9, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80036f4:	fb92 f7f7 	sdiv	r7, r2, r7
 80036f8:	3501      	adds	r5, #1
 80036fa:	2300      	movs	r3, #0
 80036fc:	fb02 7702 	mla	r7, r2, r2, r7
 8003700:	f7ff ff9a 	bl	8003638 <Draw8Point>
 8003704:	42ae      	cmp	r6, r5
 8003706:	dc14      	bgt.n	8003732 <GL_DrawCircle+0x5a>
 8003708:	fb04 f304 	mul.w	r3, r4, r4
 800370c:	fb06 3306 	mla	r3, r6, r6, r3
 8003710:	429f      	cmp	r7, r3
 8003712:	da06      	bge.n	8003722 <GL_DrawCircle+0x4a>
 8003714:	4623      	mov	r3, r4
 8003716:	3c01      	subs	r4, #1
 8003718:	4632      	mov	r2, r6
 800371a:	4649      	mov	r1, r9
 800371c:	4640      	mov	r0, r8
 800371e:	f7ff ff8b 	bl	8003638 <Draw8Point>
 8003722:	4632      	mov	r2, r6
 8003724:	4623      	mov	r3, r4
 8003726:	4649      	mov	r1, r9
 8003728:	4640      	mov	r0, r8
 800372a:	f7ff ff85 	bl	8003638 <Draw8Point>
 800372e:	3601      	adds	r6, #1
 8003730:	e7e8      	b.n	8003704 <GL_DrawCircle+0x2c>
 8003732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003738 <GUI_DrawCircle>:
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <GUI_DrawCircle+0x4c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800373e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003740:	4616      	mov	r6, r2
 8003742:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8003744:	b292      	uxth	r2, r2
 8003746:	4404      	add	r4, r0
 8003748:	4668      	mov	r0, sp
 800374a:	440d      	add	r5, r1
 800374c:	b2a3      	uxth	r3, r4
 800374e:	1a99      	subs	r1, r3, r2
 8003750:	4413      	add	r3, r2
 8003752:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003756:	b2ab      	uxth	r3, r5
 8003758:	f8ad 1000 	strh.w	r1, [sp]
 800375c:	1a99      	subs	r1, r3, r2
 800375e:	4413      	add	r3, r2
 8003760:	f8ad 1002 	strh.w	r1, [sp, #2]
 8003764:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003768:	f003 ff98 	bl	800769c <WM__InitIVRSearch>
 800376c:	b138      	cbz	r0, 800377e <GUI_DrawCircle+0x46>
 800376e:	4632      	mov	r2, r6
 8003770:	4629      	mov	r1, r5
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff ffb0 	bl	80036d8 <GL_DrawCircle>
 8003778:	f003 fece 	bl	8007518 <WM__GetNextIVR>
 800377c:	e7f6      	b.n	800376c <GUI_DrawCircle+0x34>
 800377e:	b002      	add	sp, #8
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	bf00      	nop
 8003784:	24000028 	.word	0x24000028

08003788 <GUI_CalcColorDist>:
 8003788:	b2c3      	uxtb	r3, r0
 800378a:	b2ca      	uxtb	r2, r1
 800378c:	1a9a      	subs	r2, r3, r2
 800378e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003792:	b292      	uxth	r2, r2
 8003794:	b510      	push	{r4, lr}
 8003796:	b214      	sxth	r4, r2
 8003798:	2c00      	cmp	r4, #0
 800379a:	bfbc      	itt	lt
 800379c:	4252      	neglt	r2, r2
 800379e:	b214      	sxthlt	r4, r2
 80037a0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80037a4:	0c09      	lsrs	r1, r1, #16
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	b289      	uxth	r1, r1
 80037b0:	b21a      	sxth	r2, r3
 80037b2:	b208      	sxth	r0, r1
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	bfbc      	itt	lt
 80037b8:	425b      	neglt	r3, r3
 80037ba:	b21a      	sxthlt	r2, r3
 80037bc:	2800      	cmp	r0, #0
 80037be:	bfb8      	it	lt
 80037c0:	4249      	neglt	r1, r1
 80037c2:	fb02 f202 	mul.w	r2, r2, r2
 80037c6:	bfb8      	it	lt
 80037c8:	b208      	sxthlt	r0, r1
 80037ca:	fb04 2204 	mla	r2, r4, r4, r2
 80037ce:	b280      	uxth	r0, r0
 80037d0:	fb00 2000 	mla	r0, r0, r0, r2
 80037d4:	bd10      	pop	{r4, pc}

080037d6 <GUI_GetBkColor>:
 80037d6:	b508      	push	{r3, lr}
 80037d8:	f001 f85a 	bl	8004890 <LCD_GetBkColorIndex>
 80037dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037e0:	f000 bf5c 	b.w	800469c <LCD_Index2Color>

080037e4 <GUI_GetColor>:
 80037e4:	b508      	push	{r3, lr}
 80037e6:	f001 f85b 	bl	80048a0 <LCD_GetColorIndex>
 80037ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037ee:	f000 bf55 	b.w	800469c <LCD_Index2Color>
	...

080037f4 <GUI_GetDrawMode>:
 80037f4:	4b01      	ldr	r3, [pc, #4]	; (80037fc <GUI_GetDrawMode+0x8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	7c18      	ldrb	r0, [r3, #16]
 80037fa:	4770      	bx	lr
 80037fc:	24000028 	.word	0x24000028

08003800 <GUI_GetVersionString>:
 8003800:	4804      	ldr	r0, [pc, #16]	; (8003814 <GUI_GetVersionString+0x14>)
 8003802:	2335      	movs	r3, #53	; 0x35
 8003804:	7003      	strb	r3, [r0, #0]
 8003806:	2334      	movs	r3, #52	; 0x34
 8003808:	7083      	strb	r3, [r0, #2]
 800380a:	70c3      	strb	r3, [r0, #3]
 800380c:	2361      	movs	r3, #97	; 0x61
 800380e:	7103      	strb	r3, [r0, #4]
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	24000010 	.word	0x24000010

08003818 <GUI_MergeRect>:
 8003818:	b510      	push	{r4, lr}
 800381a:	b338      	cbz	r0, 800386c <GUI_MergeRect+0x54>
 800381c:	b309      	cbz	r1, 8003862 <GUI_MergeRect+0x4a>
 800381e:	b30a      	cbz	r2, 8003864 <GUI_MergeRect+0x4c>
 8003820:	f9b2 4000 	ldrsh.w	r4, [r2]
 8003824:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003828:	42a3      	cmp	r3, r4
 800382a:	bfa8      	it	ge
 800382c:	4623      	movge	r3, r4
 800382e:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8003832:	8003      	strh	r3, [r0, #0]
 8003834:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003838:	42a3      	cmp	r3, r4
 800383a:	bfa8      	it	ge
 800383c:	4623      	movge	r3, r4
 800383e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8003842:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003846:	8043      	strh	r3, [r0, #2]
 8003848:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800384c:	42a3      	cmp	r3, r4
 800384e:	bfb8      	it	lt
 8003850:	4623      	movlt	r3, r4
 8003852:	8083      	strh	r3, [r0, #4]
 8003854:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8003858:	4293      	cmp	r3, r2
 800385a:	bfb8      	it	lt
 800385c:	4613      	movlt	r3, r2
 800385e:	80c3      	strh	r3, [r0, #6]
 8003860:	bd10      	pop	{r4, pc}
 8003862:	4611      	mov	r1, r2
 8003864:	680b      	ldr	r3, [r1, #0]
 8003866:	6003      	str	r3, [r0, #0]
 8003868:	684b      	ldr	r3, [r1, #4]
 800386a:	6043      	str	r3, [r0, #4]
 800386c:	bd10      	pop	{r4, pc}

0800386e <GUI_MoveRect>:
 800386e:	b168      	cbz	r0, 800388c <GUI_MoveRect+0x1e>
 8003870:	b289      	uxth	r1, r1
 8003872:	8803      	ldrh	r3, [r0, #0]
 8003874:	b292      	uxth	r2, r2
 8003876:	440b      	add	r3, r1
 8003878:	8003      	strh	r3, [r0, #0]
 800387a:	8883      	ldrh	r3, [r0, #4]
 800387c:	4419      	add	r1, r3
 800387e:	8843      	ldrh	r3, [r0, #2]
 8003880:	4413      	add	r3, r2
 8003882:	8081      	strh	r1, [r0, #4]
 8003884:	8043      	strh	r3, [r0, #2]
 8003886:	88c3      	ldrh	r3, [r0, #6]
 8003888:	441a      	add	r2, r3
 800388a:	80c2      	strh	r2, [r0, #6]
 800388c:	4770      	bx	lr
	...

08003890 <GUI_GotoXY>:
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <GUI_GotoXY+0xc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	8458      	strh	r0, [r3, #34]	; 0x22
 8003896:	2000      	movs	r0, #0
 8003898:	8499      	strh	r1, [r3, #36]	; 0x24
 800389a:	4770      	bx	lr
 800389c:	24000028 	.word	0x24000028

080038a0 <GUI_RectsIntersect>:
 80038a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80038a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	dc14      	bgt.n	80038d6 <GUI_RectsIntersect+0x36>
 80038ac:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80038b0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	dc0e      	bgt.n	80038d6 <GUI_RectsIntersect+0x36>
 80038b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80038bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	dc08      	bgt.n	80038d6 <GUI_RectsIntersect+0x36>
 80038c4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80038c8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80038cc:	4283      	cmp	r3, r0
 80038ce:	bfcc      	ite	gt
 80038d0:	2000      	movgt	r0, #0
 80038d2:	2001      	movle	r0, #1
 80038d4:	4770      	bx	lr
 80038d6:	2000      	movs	r0, #0
 80038d8:	4770      	bx	lr

080038da <GUI_SelectLCD>:
 80038da:	b508      	push	{r3, lr}
 80038dc:	f001 f8e0 	bl	8004aa0 <LCD_SelectLCD>
 80038e0:	f001 f9a4 	bl	8004c2c <LCD_UpdateColorIndices>
 80038e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038e8:	f003 bf58 	b.w	800779c <WM_Activate>

080038ec <GUI_SetBkColor>:
 80038ec:	f000 bf1c 	b.w	8004728 <LCD_SetBkColor>

080038f0 <GUI_SetColor>:
 80038f0:	f000 bf20 	b.w	8004734 <LCD_SetColor>

080038f4 <GUI_SetFont>:
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <GUI_SetFont+0x10>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	b100      	cbz	r0, 80038fe <GUI_SetFont+0xa>
 80038fc:	61d8      	str	r0, [r3, #28]
 80038fe:	4610      	mov	r0, r2
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	24000028 	.word	0x24000028

08003908 <GUI_SetOrg>:
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <GUI_SetOrg+0x28>)
 800390a:	460a      	mov	r2, r1
 800390c:	b410      	push	{r4}
 800390e:	8018      	strh	r0, [r3, #0]
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <GUI_SetOrg+0x2c>)
 8003912:	8019      	strh	r1, [r3, #0]
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <GUI_SetOrg+0x30>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	7c59      	ldrb	r1, [r3, #17]
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <GUI_SetOrg+0x34>)
 800391c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003920:	68d9      	ldr	r1, [r3, #12]
 8003922:	6a0c      	ldr	r4, [r1, #32]
 8003924:	4601      	mov	r1, r0
 8003926:	4618      	mov	r0, r3
 8003928:	4623      	mov	r3, r4
 800392a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800392e:	4718      	bx	r3
 8003930:	2402d608 	.word	0x2402d608
 8003934:	2402d5f8 	.word	0x2402d5f8
 8003938:	24000028 	.word	0x24000028
 800393c:	2402d630 	.word	0x2402d630

08003940 <_InitContext>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d19      	ldr	r5, [pc, #100]	; (80039a8 <_InitContext+0x68>)
 8003944:	4604      	mov	r4, r0
 8003946:	4b19      	ldr	r3, [pc, #100]	; (80039ac <_InitContext+0x6c>)
 8003948:	f104 0108 	add.w	r1, r4, #8
 800394c:	6703      	str	r3, [r0, #112]	; 0x70
 800394e:	692b      	ldr	r3, [r5, #16]
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	639b      	str	r3, [r3, #56]	; 0x38
 8003954:	641b      	str	r3, [r3, #64]	; 0x40
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
 8003958:	f103 0208 	add.w	r2, r3, #8
 800395c:	6142      	str	r2, [r0, #20]
 800395e:	7c5a      	ldrb	r2, [r3, #17]
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <_InitContext+0x70>)
 8003962:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003966:	68c3      	ldr	r3, [r0, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4798      	blx	r3
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <_InitContext+0x74>)
 800396e:	6663      	str	r3, [r4, #100]	; 0x64
 8003970:	686b      	ldr	r3, [r5, #4]
 8003972:	61e3      	str	r3, [r4, #28]
 8003974:	692b      	ldr	r3, [r5, #16]
 8003976:	3308      	adds	r3, #8
 8003978:	6163      	str	r3, [r4, #20]
 800397a:	2301      	movs	r3, #1
 800397c:	7623      	strb	r3, [r4, #24]
 800397e:	76e3      	strb	r3, [r4, #27]
 8003980:	f003 ffe4 	bl	800794c <WM_GetDesktopWindow>
 8003984:	2303      	movs	r3, #3
 8003986:	64a0      	str	r0, [r4, #72]	; 0x48
 8003988:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800398c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	6323      	str	r3, [r4, #48]	; 0x30
 8003994:	6363      	str	r3, [r4, #52]	; 0x34
 8003996:	f000 fec7 	bl	8004728 <LCD_SetBkColor>
 800399a:	68a8      	ldr	r0, [r5, #8]
 800399c:	f000 feca 	bl	8004734 <LCD_SetColor>
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <_InitContext+0x78>)
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <_InitContext+0x7c>)
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	24000018 	.word	0x24000018
 80039ac:	2402d340 	.word	0x2402d340
 80039b0:	2402d630 	.word	0x2402d630
 80039b4:	08008180 	.word	0x08008180
 80039b8:	08008198 	.word	0x08008198
 80039bc:	2402d628 	.word	0x2402d628

080039c0 <_OnExit>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	2400      	movs	r4, #0
 80039c4:	4d09      	ldr	r5, [pc, #36]	; (80039ec <_OnExit+0x2c>)
 80039c6:	4e0a      	ldr	r6, [pc, #40]	; (80039f0 <_OnExit+0x30>)
 80039c8:	2274      	movs	r2, #116	; 0x74
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	6833      	ldr	r3, [r6, #0]
 80039d0:	67ec      	str	r4, [r5, #124]	; 0x7c
 80039d2:	4798      	blx	r3
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	4621      	mov	r1, r4
 80039da:	4806      	ldr	r0, [pc, #24]	; (80039f4 <_OnExit+0x34>)
 80039dc:	4798      	blx	r3
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <_OnExit+0x38>)
 80039e0:	611d      	str	r5, [r3, #16]
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <_OnExit+0x3c>)
 80039e4:	701c      	strb	r4, [r3, #0]
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <_OnExit+0x40>)
 80039e8:	601c      	str	r4, [r3, #0]
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	2402d2c0 	.word	0x2402d2c0
 80039f0:	24000030 	.word	0x24000030
 80039f4:	2402d630 	.word	0x2402d630
 80039f8:	24000018 	.word	0x24000018
 80039fc:	2402d618 	.word	0x2402d618
 8003a00:	2402d5f4 	.word	0x2402d5f4

08003a04 <GUI_ClearRect>:
 8003a04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003a08:	4604      	mov	r4, r0
 8003a0a:	2004      	movs	r0, #4
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	461f      	mov	r7, r3
 8003a10:	460d      	mov	r5, r1
 8003a12:	f000 fb4d 	bl	80040b0 <LCD_SetDrawMode>
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <GUI_ClearRect+0x60>)
 8003a18:	4680      	mov	r8, r0
 8003a1a:	4668      	mov	r0, sp
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	4414      	add	r4, r2
 8003a24:	4416      	add	r6, r2
 8003a26:	441d      	add	r5, r3
 8003a28:	441f      	add	r7, r3
 8003a2a:	f8ad 4000 	strh.w	r4, [sp]
 8003a2e:	f8ad 6004 	strh.w	r6, [sp, #4]
 8003a32:	f8ad 5002 	strh.w	r5, [sp, #2]
 8003a36:	f8ad 7006 	strh.w	r7, [sp, #6]
 8003a3a:	f003 fe2f 	bl	800769c <WM__InitIVRSearch>
 8003a3e:	b928      	cbnz	r0, 8003a4c <GUI_ClearRect+0x48>
 8003a40:	4640      	mov	r0, r8
 8003a42:	f000 fb35 	bl	80040b0 <LCD_SetDrawMode>
 8003a46:	b002      	add	sp, #8
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	4632      	mov	r2, r6
 8003a50:	4629      	mov	r1, r5
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 fb8a 	bl	800416c <LCD_FillRect>
 8003a58:	f003 fd5e 	bl	8007518 <WM__GetNextIVR>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d1f5      	bne.n	8003a4c <GUI_ClearRect+0x48>
 8003a60:	e7ee      	b.n	8003a40 <GUI_ClearRect+0x3c>
 8003a62:	bf00      	nop
 8003a64:	24000018 	.word	0x24000018

08003a68 <GUI_Clear>:
 8003a68:	2100      	movs	r1, #0
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	4608      	mov	r0, r1
 8003a6e:	f7ff ff0f 	bl	8003890 <GUI_GotoXY>
 8003a72:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003a76:	4903      	ldr	r1, [pc, #12]	; (8003a84 <GUI_Clear+0x1c>)
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a80:	f7ff bfc0 	b.w	8003a04 <GUI_ClearRect>
 8003a84:	ffffc001 	.word	0xffffc001

08003a88 <GUI__Config>:
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	4d1f      	ldr	r5, [pc, #124]	; (8003b08 <GUI__Config+0x80>)
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d136      	bne.n	8003b02 <GUI__Config+0x7a>
 8003a94:	2301      	movs	r3, #1
 8003a96:	466a      	mov	r2, sp
 8003a98:	466e      	mov	r6, sp
 8003a9a:	67eb      	str	r3, [r5, #124]	; 0x7c
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <GUI__Config+0x84>)
 8003a9e:	f103 0708 	add.w	r7, r3, #8
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003aaa:	4614      	mov	r4, r2
 8003aac:	42bb      	cmp	r3, r7
 8003aae:	c403      	stmia	r4!, {r0, r1}
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	d1f6      	bne.n	8003aa2 <GUI__Config+0x1a>
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	8899      	ldrh	r1, [r3, #4]
 8003ab8:	799b      	ldrb	r3, [r3, #6]
 8003aba:	6020      	str	r0, [r4, #0]
 8003abc:	71a3      	strb	r3, [r4, #6]
 8003abe:	4633      	mov	r3, r6
 8003ac0:	80a1      	strh	r1, [r4, #4]
 8003ac2:	4c13      	ldr	r4, [pc, #76]	; (8003b10 <GUI__Config+0x88>)
 8003ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ac8:	f804 2b01 	strb.w	r2, [r4], #1
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d1f8      	bne.n	8003ac4 <GUI__Config+0x3c>
 8003ad2:	f7ff fe95 	bl	8003800 <GUI_GetVersionString>
 8003ad6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003ada:	4622      	mov	r2, r4
 8003adc:	f804 3b01 	strb.w	r3, [r4], #1
 8003ae0:	7803      	ldrb	r3, [r0, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f7      	bne.n	8003ad6 <GUI__Config+0x4e>
 8003ae6:	7053      	strb	r3, [r2, #1]
 8003ae8:	f7fe ff9c 	bl	8002a24 <GUI_X_Config>
 8003aec:	f7ff f91e 	bl	8002d2c <LCD_X_Config>
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <GUI__Config+0x8c>)
 8003af2:	4809      	ldr	r0, [pc, #36]	; (8003b18 <GUI__Config+0x90>)
 8003af4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8003af8:	b005      	add	sp, #20
 8003afa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003afe:	f000 b8d1 	b.w	8003ca4 <GUI__RegisterExit>
 8003b02:	b005      	add	sp, #20
 8003b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2402d2c0 	.word	0x2402d2c0
 8003b0c:	08008188 	.word	0x08008188
 8003b10:	2402d340 	.word	0x2402d340
 8003b14:	080039c1 	.word	0x080039c1
 8003b18:	2402d354 	.word	0x2402d354

08003b1c <GUI_Init>:
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4a53      	ldr	r2, [pc, #332]	; (8003c70 <GUI_Init+0x154>)
 8003b24:	4b52      	ldr	r3, [pc, #328]	; (8003c70 <GUI_Init+0x154>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <GUI_Init+0x158>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b36:	f240 4249 	movw	r2, #1097	; 0x449
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <GUI_Init+0x158>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4c:	f240 4151 	movw	r1, #1105	; 0x451
 8003b50:	428b      	cmp	r3, r1
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <GUI_Init+0x158>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b68:	f240 4252 	movw	r2, #1106	; 0x452
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	430b      	orrs	r3, r1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <GUI_Init+0x82>
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <GUI_Init+0x15c>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	bf00      	nop
 8003b84:	4b3c      	ldr	r3, [pc, #240]	; (8003c78 <GUI_Init+0x15c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1fb      	bne.n	8003b84 <GUI_Init+0x68>
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <GUI_Init+0x160>)
 8003b8e:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <GUI_Init+0x164>)
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	4b3a      	ldr	r3, [pc, #232]	; (8003c7c <GUI_Init+0x160>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <GUI_Init+0x168>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d018      	beq.n	8003bce <GUI_Init+0xb2>
 8003b9c:	e7fe      	b.n	8003b9c <GUI_Init+0x80>
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <GUI_Init+0x16c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003baa:	d110      	bne.n	8003bce <GUI_Init+0xb2>
 8003bac:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <GUI_Init+0x170>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	bf00      	nop
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <GUI_Init+0x170>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1fb      	bne.n	8003bb4 <GUI_Init+0x98>
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <GUI_Init+0x174>)
 8003bbe:	4a30      	ldr	r2, [pc, #192]	; (8003c80 <GUI_Init+0x164>)
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <GUI_Init+0x174>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <GUI_Init+0x168>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d000      	beq.n	8003bce <GUI_Init+0xb2>
 8003bcc:	e7fe      	b.n	8003bcc <GUI_Init+0xb0>
 8003bce:	f7ff ff5b 	bl	8003a88 <GUI__Config>
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <GUI_Init+0x178>)
 8003bd4:	222e      	movs	r2, #46	; 0x2e
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	f7fe ff22 	bl	8002a20 <GUI_X_Init>
 8003bdc:	482e      	ldr	r0, [pc, #184]	; (8003c98 <GUI_Init+0x17c>)
 8003bde:	f7ff feaf 	bl	8003940 <_InitContext>
 8003be2:	f000 fcfb 	bl	80045dc <emWin_LCD_Init>
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	f000 feea 	bl	80049c0 <LCD_GetXSizeDisplay>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2dc      	uxtb	r4, r3
 8003bf8:	f000 fee8 	bl	80049cc <LCD_GetYSizeDisplay>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	4323      	orrs	r3, r4
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <GUI_Init+0x108>
 8003c10:	f000 feca 	bl	80049a8 <LCD_GetXSizeMax>
 8003c14:	4604      	mov	r4, r0
 8003c16:	f000 feca 	bl	80049ae <LCD_GetYSizeMax>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 fec8 	bl	80049b4 <LCD_SetDisplaySize>
 8003c24:	2100      	movs	r1, #0
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7ff fe6e 	bl	8003908 <GUI_SetOrg>
 8003c2c:	f003 fe16 	bl	800785c <WM_Init>
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <GUI_Init+0x180>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d012      	beq.n	8003c5e <GUI_Init+0x142>
 8003c38:	e00d      	b.n	8003c56 <GUI_Init+0x13a>
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <GUI_Init+0x180>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <GUI_Init+0x130>
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <GUI_Init+0x180>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4798      	blx	r3
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <GUI_Init+0x180>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <GUI_Init+0x180>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <GUI_Init+0x180>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ed      	bne.n	8003c3a <GUI_Init+0x11e>
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <GUI_Init+0x184>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e0002000 	.word	0xe0002000
 8003c74:	e0042000 	.word	0xe0042000
 8003c78:	40023008 	.word	0x40023008
 8003c7c:	40023000 	.word	0x40023000
 8003c80:	f407a5c2 	.word	0xf407a5c2
 8003c84:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c88:	5c001000 	.word	0x5c001000
 8003c8c:	58024c08 	.word	0x58024c08
 8003c90:	58024c00 	.word	0x58024c00
 8003c94:	2402d5e8 	.word	0x2402d5e8
 8003c98:	2402d2c0 	.word	0x2402d2c0
 8003c9c:	2402d338 	.word	0x2402d338
 8003ca0:	2402d610 	.word	0x2402d610

08003ca4 <GUI__RegisterExit>:
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <GUI__RegisterExit+0x24>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <GUI__RegisterExit+0x24>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	2402d334 	.word	0x2402d334

08003ccc <GUI_DEVICE__GetpDriver>:
 8003ccc:	2801      	cmp	r0, #1
 8003cce:	dc09      	bgt.n	8003ce4 <GUI_DEVICE__GetpDriver+0x18>
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <GUI_DEVICE__GetpDriver+0x1c>)
 8003cd2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003cd6:	b120      	cbz	r0, 8003ce2 <GUI_DEVICE__GetpDriver+0x16>
 8003cd8:	68c3      	ldr	r3, [r0, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b11b      	cbz	r3, 8003ce6 <GUI_DEVICE__GetpDriver+0x1a>
 8003cde:	6800      	ldr	r0, [r0, #0]
 8003ce0:	e7f9      	b.n	8003cd6 <GUI_DEVICE__GetpDriver+0xa>
 8003ce2:	4770      	bx	lr
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	4770      	bx	lr
 8003ce8:	2402d630 	.word	0x2402d630

08003cec <GUI_DEVICE_Delete>:
 8003cec:	f7ff bae6 	b.w	80032bc <GUI_ALLOC_FreeFixedBlock>

08003cf0 <GUI_DEVICE_Create>:
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	460d      	mov	r5, r1
 8003cf8:	4617      	mov	r7, r2
 8003cfa:	461c      	mov	r4, r3
 8003cfc:	dd01      	ble.n	8003d02 <GUI_DEVICE_Create+0x12>
 8003cfe:	2000      	movs	r0, #0
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d02:	201c      	movs	r0, #28
 8003d04:	f7ff fbb2 	bl	800346c <GUI_ALLOC_GetFixedBlock>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d0f8      	beq.n	8003cfe <GUI_DEVICE_Create+0xe>
 8003d0c:	b10d      	cbz	r5, 8003d12 <GUI_DEVICE_Create+0x22>
 8003d0e:	6105      	str	r5, [r0, #16]
 8003d10:	e009      	b.n	8003d26 <GUI_DEVICE_Create+0x36>
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <GUI_DEVICE_Create+0x48>)
 8003d14:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003d18:	b129      	cbz	r1, 8003d26 <GUI_DEVICE_Create+0x36>
 8003d1a:	680b      	ldr	r3, [r1, #0]
 8003d1c:	b10b      	cbz	r3, 8003d22 <GUI_DEVICE_Create+0x32>
 8003d1e:	4619      	mov	r1, r3
 8003d20:	e7fb      	b.n	8003d1a <GUI_DEVICE_Create+0x2a>
 8003d22:	690b      	ldr	r3, [r1, #16]
 8003d24:	6103      	str	r3, [r0, #16]
 8003d26:	2300      	movs	r3, #0
 8003d28:	6184      	str	r4, [r0, #24]
 8003d2a:	8287      	strh	r7, [r0, #20]
 8003d2c:	60c6      	str	r6, [r0, #12]
 8003d2e:	6003      	str	r3, [r0, #0]
 8003d30:	6043      	str	r3, [r0, #4]
 8003d32:	6083      	str	r3, [r0, #8]
 8003d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2402d630 	.word	0x2402d630

08003d3c <GUI_DEVICE_Unlink>:
 8003d3c:	6981      	ldr	r1, [r0, #24]
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <GUI_DEVICE_Unlink+0x2c>)
 8003d40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d44:	4298      	cmp	r0, r3
 8003d46:	6803      	ldr	r3, [r0, #0]
 8003d48:	d104      	bne.n	8003d54 <GUI_DEVICE_Unlink+0x18>
 8003d4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003d4e:	b10b      	cbz	r3, 8003d54 <GUI_DEVICE_Unlink+0x18>
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	6842      	ldr	r2, [r0, #4]
 8003d56:	b102      	cbz	r2, 8003d5a <GUI_DEVICE_Unlink+0x1e>
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	6803      	ldr	r3, [r0, #0]
 8003d5c:	b103      	cbz	r3, 8003d60 <GUI_DEVICE_Unlink+0x24>
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	2300      	movs	r3, #0
 8003d62:	6003      	str	r3, [r0, #0]
 8003d64:	6043      	str	r3, [r0, #4]
 8003d66:	4770      	bx	lr
 8003d68:	2402d630 	.word	0x2402d630

08003d6c <GUI_DEVICE_Link>:
 8003d6c:	b530      	push	{r4, r5, lr}
 8003d6e:	b908      	cbnz	r0, 8003d74 <GUI_DEVICE_Link+0x8>
 8003d70:	2001      	movs	r0, #1
 8003d72:	bd30      	pop	{r4, r5, pc}
 8003d74:	6984      	ldr	r4, [r0, #24]
 8003d76:	2c01      	cmp	r4, #1
 8003d78:	dcfa      	bgt.n	8003d70 <GUI_DEVICE_Link+0x4>
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <GUI_DEVICE_Link+0x7c>)
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	4294      	cmp	r4, r2
 8003d80:	bfa4      	itt	ge
 8003d82:	1c62      	addge	r2, r4, #1
 8003d84:	701a      	strbge	r2, [r3, #0]
 8003d86:	4a19      	ldr	r2, [pc, #100]	; (8003dec <GUI_DEVICE_Link+0x80>)
 8003d88:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003d8c:	4615      	mov	r5, r2
 8003d8e:	b91b      	cbnz	r3, 8003d98 <GUI_DEVICE_Link+0x2c>
 8003d90:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd30      	pop	{r4, r5, pc}
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	b10a      	cbz	r2, 8003da0 <GUI_DEVICE_Link+0x34>
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	e7fb      	b.n	8003d98 <GUI_DEVICE_Link+0x2c>
 8003da0:	68c2      	ldr	r2, [r0, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	68d9      	ldr	r1, [r3, #12]
 8003da6:	6809      	ldr	r1, [r1, #0]
 8003da8:	4291      	cmp	r1, r2
 8003daa:	dd03      	ble.n	8003db4 <GUI_DEVICE_Link+0x48>
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f8      	bne.n	8003da4 <GUI_DEVICE_Link+0x38>
 8003db2:	e7dd      	b.n	8003d70 <GUI_DEVICE_Link+0x4>
 8003db4:	d109      	bne.n	8003dca <GUI_DEVICE_Link+0x5e>
 8003db6:	8a81      	ldrh	r1, [r0, #20]
 8003db8:	2901      	cmp	r1, #1
 8003dba:	d106      	bne.n	8003dca <GUI_DEVICE_Link+0x5e>
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	b121      	cbz	r1, 8003dca <GUI_DEVICE_Link+0x5e>
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	68c9      	ldr	r1, [r1, #12]
 8003dc4:	6809      	ldr	r1, [r1, #0]
 8003dc6:	428a      	cmp	r2, r1
 8003dc8:	ddf8      	ble.n	8003dbc <GUI_DEVICE_Link+0x50>
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	b112      	cbz	r2, 8003dd4 <GUI_DEVICE_Link+0x68>
 8003dce:	6010      	str	r0, [r2, #0]
 8003dd0:	6042      	str	r2, [r0, #4]
 8003dd2:	e001      	b.n	8003dd8 <GUI_DEVICE_Link+0x6c>
 8003dd4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8003dd8:	6058      	str	r0, [r3, #4]
 8003dda:	4298      	cmp	r0, r3
 8003ddc:	bf08      	it	eq
 8003dde:	2300      	moveq	r3, #0
 8003de0:	6003      	str	r3, [r0, #0]
 8003de2:	2000      	movs	r0, #0
 8003de4:	bd30      	pop	{r4, r5, pc}
 8003de6:	bf00      	nop
 8003de8:	2402d5e2 	.word	0x2402d5e2
 8003dec:	2402d630 	.word	0x2402d630

08003df0 <GUI_DEVICE_CreateAndLink>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	461d      	mov	r5, r3
 8003df4:	f7ff ff7c 	bl	8003cf0 <GUI_DEVICE_Create>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	b148      	cbz	r0, 8003e10 <GUI_DEVICE_CreateAndLink+0x20>
 8003dfc:	f7ff ffb6 	bl	8003d6c <GUI_DEVICE_Link>
 8003e00:	68e3      	ldr	r3, [r4, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b923      	cbnz	r3, 8003e10 <GUI_DEVICE_CreateAndLink+0x20>
 8003e06:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <GUI_DEVICE_CreateAndLink+0x24>)
 8003e08:	3516      	adds	r5, #22
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8003e10:	4620      	mov	r0, r4
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	24000028 	.word	0x24000028

08003e18 <_OnExit>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4c0e      	ldr	r4, [pc, #56]	; (8003e54 <_OnExit+0x3c>)
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	4d0e      	ldr	r5, [pc, #56]	; (8003e58 <_OnExit+0x40>)
 8003e20:	2100      	movs	r1, #0
 8003e22:	4620      	mov	r0, r4
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	4798      	blx	r3
 8003e28:	2208      	movs	r2, #8
 8003e2a:	682b      	ldr	r3, [r5, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	18a0      	adds	r0, r4, r2
 8003e30:	4798      	blx	r3
 8003e32:	682b      	ldr	r3, [r5, #0]
 8003e34:	2208      	movs	r2, #8
 8003e36:	2100      	movs	r1, #0
 8003e38:	f104 0010 	add.w	r0, r4, #16
 8003e3c:	4798      	blx	r3
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	2208      	movs	r2, #8
 8003e42:	2100      	movs	r1, #0
 8003e44:	f104 0018 	add.w	r0, r4, #24
 8003e48:	4798      	blx	r3
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <_OnExit+0x44>)
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	bd38      	pop	{r3, r4, r5, pc}
 8003e52:	bf00      	nop
 8003e54:	2402d35c 	.word	0x2402d35c
 8003e58:	24000030 	.word	0x24000030
 8003e5c:	2402d5e4 	.word	0x2402d5e4

08003e60 <GUI_MULTIBUF_ConfirmEx>:
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <GUI_MULTIBUF_ConfirmEx+0x24>)
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	2a00      	cmp	r2, #0
 8003e66:	bf18      	it	ne
 8003e68:	2000      	movne	r0, #0
 8003e6a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	6994      	ldr	r4, [r2, #24]
 8003e72:	2c00      	cmp	r4, #0
 8003e74:	bfa2      	ittt	ge
 8003e76:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 8003e7a:	f04f 33ff 	movge.w	r3, #4294967295
 8003e7e:	6193      	strge	r3, [r2, #24]
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	bf00      	nop
 8003e84:	2402d35c 	.word	0x2402d35c

08003e88 <GUI_MULTIBUF_ConfigEx>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4c0a      	ldr	r4, [pc, #40]	; (8003eb4 <GUI_MULTIBUF_ConfigEx+0x2c>)
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	460e      	mov	r6, r1
 8003e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e92:	b92b      	cbnz	r3, 8003ea0 <GUI_MULTIBUF_ConfigEx+0x18>
 8003e94:	4620      	mov	r0, r4
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <GUI_MULTIBUF_ConfigEx+0x30>)
 8003e98:	f840 3f24 	str.w	r3, [r0, #36]!
 8003e9c:	f7ff ff02 	bl	8003ca4 <GUI__RegisterExit>
 8003ea0:	6a23      	ldr	r3, [r4, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <GUI_MULTIBUF_ConfigEx+0x34>)
 8003ea6:	bf18      	it	ne
 8003ea8:	2500      	movne	r5, #0
 8003eaa:	2e01      	cmp	r6, #1
 8003eac:	bfb8      	it	lt
 8003eae:	2601      	movlt	r6, #1
 8003eb0:	555e      	strb	r6, [r3, r5]
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	2402d35c 	.word	0x2402d35c
 8003eb8:	08003e19 	.word	0x08003e19
 8003ebc:	2402d5e0 	.word	0x2402d5e0

08003ec0 <GUI_StoreKey>:
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <GUI_StoreKey+0xc>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	b902      	cbnz	r2, 8003ec8 <GUI_StoreKey+0x8>
 8003ec6:	6018      	str	r0, [r3, #0]
 8003ec8:	f000 b82e 	b.w	8003f28 <GUI_SignalEvent>
 8003ecc:	2402d388 	.word	0x2402d388

08003ed0 <GUI_GetLayerPosEx>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	f000 fe03 	bl	8004ae0 <LCD_GetPosEx>
 8003eda:	b110      	cbz	r0, 8003ee2 <GUI_GetLayerPosEx+0x12>
 8003edc:	2300      	movs	r3, #0
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}

08003ee4 <GUI_SelectLayer>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4d08      	ldr	r5, [pc, #32]	; (8003f08 <GUI_SelectLayer+0x24>)
 8003ee8:	2801      	cmp	r0, #1
 8003eea:	4604      	mov	r4, r0
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	7c5e      	ldrb	r6, [r3, #17]
 8003ef0:	d808      	bhi.n	8003f04 <GUI_SelectLayer+0x20>
 8003ef2:	f7ff feeb 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8003ef6:	b128      	cbz	r0, 8003f04 <GUI_SelectLayer+0x20>
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	745c      	strb	r4, [r3, #17]
 8003efc:	f7ff fced 	bl	80038da <GUI_SelectLCD>
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <GUI_SelectLayer+0x28>)
 8003f02:	601c      	str	r4, [r3, #0]
 8003f04:	4630      	mov	r0, r6
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	24000028 	.word	0x24000028
 8003f0c:	2402d66c 	.word	0x2402d66c

08003f10 <GUI_SetLayerVisEx>:
 8003f10:	f000 be47 	b.w	8004ba2 <LCD_SetVisEx>

08003f14 <_GetCharCode>:
 8003f14:	7800      	ldrb	r0, [r0, #0]
 8003f16:	4770      	bx	lr

08003f18 <_GetCharSize>:
 8003f18:	2001      	movs	r0, #1
 8003f1a:	4770      	bx	lr

08003f1c <_CalcSizeOfChar>:
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	4770      	bx	lr

08003f20 <_Encode>:
 8003f20:	7001      	strb	r1, [r0, #0]
 8003f22:	2001      	movs	r0, #1
 8003f24:	4770      	bx	lr
	...

08003f28 <GUI_SignalEvent>:
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <GUI_SignalEvent+0xc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	b103      	cbz	r3, 8003f30 <GUI_SignalEvent+0x8>
 8003f2e:	4718      	bx	r3
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2402d3e8 	.word	0x2402d3e8

08003f38 <GUI__IntersectRect>:
 8003f38:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003f3c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003f46:	bfb8      	it	lt
 8003f48:	8003      	strhlt	r3, [r0, #0]
 8003f4a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8003f54:	bfb8      	it	lt
 8003f56:	8043      	strhlt	r3, [r0, #2]
 8003f58:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003f62:	bfc8      	it	gt
 8003f64:	8083      	strhgt	r3, [r0, #4]
 8003f66:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bfc8      	it	gt
 8003f6e:	80c3      	strhgt	r3, [r0, #6]
 8003f70:	4770      	bx	lr

08003f72 <GUI__IntersectRects>:
 8003f72:	b570      	push	{r4, r5, r6, lr}
 8003f74:	f9b1 3000 	ldrsh.w	r3, [r1]
 8003f78:	4606      	mov	r6, r0
 8003f7a:	f9b2 5000 	ldrsh.w	r5, [r2]
 8003f7e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8003f82:	429d      	cmp	r5, r3
 8003f84:	bfb8      	it	lt
 8003f86:	461d      	movlt	r5, r3
 8003f88:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8003f8c:	8005      	strh	r5, [r0, #0]
 8003f8e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8003f92:	4283      	cmp	r3, r0
 8003f94:	bfb8      	it	lt
 8003f96:	4603      	movlt	r3, r0
 8003f98:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8003f9c:	4284      	cmp	r4, r0
 8003f9e:	8073      	strh	r3, [r6, #2]
 8003fa0:	bfa8      	it	ge
 8003fa2:	4604      	movge	r4, r0
 8003fa4:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8003fa8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8003fac:	80b4      	strh	r4, [r6, #4]
 8003fae:	4282      	cmp	r2, r0
 8003fb0:	bfa8      	it	ge
 8003fb2:	4602      	movge	r2, r0
 8003fb4:	42a5      	cmp	r5, r4
 8003fb6:	80f2      	strh	r2, [r6, #6]
 8003fb8:	dc04      	bgt.n	8003fc4 <GUI__IntersectRects+0x52>
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bfcc      	ite	gt
 8003fbe:	2000      	movgt	r0, #0
 8003fc0:	2001      	movle	r0, #1
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}

08003fc8 <GUI__memset>:
 8003fc8:	b2c9      	uxtb	r1, r1
 8003fca:	4603      	mov	r3, r0
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	b12a      	cbz	r2, 8003fdc <GUI__memset+0x14>
 8003fd0:	079c      	lsls	r4, r3, #30
 8003fd2:	d003      	beq.n	8003fdc <GUI__memset+0x14>
 8003fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	e7f8      	b.n	8003fce <GUI__memset+0x6>
 8003fdc:	0895      	lsrs	r5, r2, #2
 8003fde:	d101      	bne.n	8003fe4 <GUI__memset+0x1c>
 8003fe0:	441a      	add	r2, r3
 8003fe2:	e01a      	b.n	800401a <GUI__memset+0x52>
 8003fe4:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8003fe8:	f002 0203 	and.w	r2, r2, #3
 8003fec:	434c      	muls	r4, r1
 8003fee:	2d03      	cmp	r5, #3
 8003ff0:	461e      	mov	r6, r3
 8003ff2:	f103 0310 	add.w	r3, r3, #16
 8003ff6:	dd09      	ble.n	800400c <GUI__memset+0x44>
 8003ff8:	f843 4c10 	str.w	r4, [r3, #-16]
 8003ffc:	3d04      	subs	r5, #4
 8003ffe:	f843 4c0c 	str.w	r4, [r3, #-12]
 8004002:	f843 4c08 	str.w	r4, [r3, #-8]
 8004006:	f843 4c04 	str.w	r4, [r3, #-4]
 800400a:	e7f0      	b.n	8003fee <GUI__memset+0x26>
 800400c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8004010:	429e      	cmp	r6, r3
 8004012:	d0e5      	beq.n	8003fe0 <GUI__memset+0x18>
 8004014:	f846 4b04 	str.w	r4, [r6], #4
 8004018:	e7fa      	b.n	8004010 <GUI__memset+0x48>
 800401a:	4293      	cmp	r3, r2
 800401c:	d002      	beq.n	8004024 <GUI__memset+0x5c>
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7fa      	b.n	800401a <GUI__memset+0x52>
 8004024:	bd70      	pop	{r4, r5, r6, pc}

08004026 <GUI__memset16>:
 8004026:	b570      	push	{r4, r5, r6, lr}
 8004028:	0784      	lsls	r4, r0, #30
 800402a:	bf42      	ittt	mi
 800402c:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8004030:	8001      	strhmi	r1, [r0, #0]
 8004032:	3002      	addmi	r0, #2
 8004034:	0854      	lsrs	r4, r2, #1
 8004036:	d023      	beq.n	8004080 <GUI__memset16+0x5a>
 8004038:	2c03      	cmp	r4, #3
 800403a:	4623      	mov	r3, r4
 800403c:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8004040:	d802      	bhi.n	8004048 <GUI__memset16+0x22>
 8004042:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004046:	e016      	b.n	8004076 <GUI__memset16+0x50>
 8004048:	f100 0310 	add.w	r3, r0, #16
 800404c:	4626      	mov	r6, r4
 800404e:	3e04      	subs	r6, #4
 8004050:	f843 5c10 	str.w	r5, [r3, #-16]
 8004054:	f843 5c0c 	str.w	r5, [r3, #-12]
 8004058:	3310      	adds	r3, #16
 800405a:	2e03      	cmp	r6, #3
 800405c:	f843 5c18 	str.w	r5, [r3, #-24]
 8004060:	f843 5c14 	str.w	r5, [r3, #-20]
 8004064:	dcf3      	bgt.n	800404e <GUI__memset16+0x28>
 8004066:	3c04      	subs	r4, #4
 8004068:	08a3      	lsrs	r3, r4, #2
 800406a:	1c5e      	adds	r6, r3, #1
 800406c:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8004070:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8004074:	e7e5      	b.n	8004042 <GUI__memset16+0x1c>
 8004076:	4298      	cmp	r0, r3
 8004078:	d002      	beq.n	8004080 <GUI__memset16+0x5a>
 800407a:	f840 5b04 	str.w	r5, [r0], #4
 800407e:	e7fa      	b.n	8004076 <GUI__memset16+0x50>
 8004080:	07d3      	lsls	r3, r2, #31
 8004082:	bf48      	it	mi
 8004084:	8001      	strhmi	r1, [r0, #0]
 8004086:	bd70      	pop	{r4, r5, r6, pc}

08004088 <_SetDrawMode>:
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_SetDrawMode+0x24>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	7c1a      	ldrb	r2, [r3, #16]
 8004090:	ea82 0100 	eor.w	r1, r2, r0
 8004094:	0749      	lsls	r1, r1, #29
 8004096:	d505      	bpl.n	80040a4 <_SetDrawMode+0x1c>
 8004098:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800409a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	680e      	ldr	r6, [r1, #0]
 80040a0:	6026      	str	r6, [r4, #0]
 80040a2:	600d      	str	r5, [r1, #0]
 80040a4:	7418      	strb	r0, [r3, #16]
 80040a6:	4610      	mov	r0, r2
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	24000028 	.word	0x24000028

080040b0 <LCD_SetDrawMode>:
 80040b0:	4b01      	ldr	r3, [pc, #4]	; (80040b8 <LCD_SetDrawMode+0x8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4718      	bx	r3
 80040b8:	24000034 	.word	0x24000034

080040bc <LCD_DrawPixel>:
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <LCD_DrawPixel+0x58>)
 80040be:	460a      	mov	r2, r1
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80040c6:	4291      	cmp	r1, r2
 80040c8:	b430      	push	{r4, r5}
 80040ca:	4604      	mov	r4, r0
 80040cc:	dc20      	bgt.n	8004110 <LCD_DrawPixel+0x54>
 80040ce:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80040d2:	428a      	cmp	r2, r1
 80040d4:	dc1c      	bgt.n	8004110 <LCD_DrawPixel+0x54>
 80040d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80040da:	4281      	cmp	r1, r0
 80040dc:	dc18      	bgt.n	8004110 <LCD_DrawPixel+0x54>
 80040de:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80040e2:	4288      	cmp	r0, r1
 80040e4:	dc14      	bgt.n	8004110 <LCD_DrawPixel+0x54>
 80040e6:	7c19      	ldrb	r1, [r3, #16]
 80040e8:	7c58      	ldrb	r0, [r3, #17]
 80040ea:	f011 0f01 	tst.w	r1, #1
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <LCD_DrawPixel+0x5c>)
 80040f0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80040f4:	d004      	beq.n	8004100 <LCD_DrawPixel+0x44>
 80040f6:	68c3      	ldr	r3, [r0, #12]
 80040f8:	4621      	mov	r1, r4
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	bc30      	pop	{r4, r5}
 80040fe:	4718      	bx	r3
 8004100:	68c1      	ldr	r1, [r0, #12]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	698d      	ldr	r5, [r1, #24]
 8004106:	4621      	mov	r1, r4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	46ac      	mov	ip, r5
 800410c:	bc30      	pop	{r4, r5}
 800410e:	4760      	bx	ip
 8004110:	bc30      	pop	{r4, r5}
 8004112:	4770      	bx	lr
 8004114:	24000028 	.word	0x24000028
 8004118:	2402d630 	.word	0x2402d630

0800411c <LCD_DrawHLine>:
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <LCD_DrawHLine+0x48>)
 800411e:	b430      	push	{r4, r5}
 8004120:	681c      	ldr	r4, [r3, #0]
 8004122:	460d      	mov	r5, r1
 8004124:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8004128:	428b      	cmp	r3, r1
 800412a:	dc19      	bgt.n	8004160 <LCD_DrawHLine+0x44>
 800412c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004130:	4299      	cmp	r1, r3
 8004132:	dc15      	bgt.n	8004160 <LCD_DrawHLine+0x44>
 8004134:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8004138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800413c:	4281      	cmp	r1, r0
 800413e:	bfb8      	it	lt
 8004140:	4601      	movlt	r1, r0
 8004142:	4293      	cmp	r3, r2
 8004144:	bfa8      	it	ge
 8004146:	4613      	movge	r3, r2
 8004148:	4299      	cmp	r1, r3
 800414a:	dc09      	bgt.n	8004160 <LCD_DrawHLine+0x44>
 800414c:	7c60      	ldrb	r0, [r4, #17]
 800414e:	4a06      	ldr	r2, [pc, #24]	; (8004168 <LCD_DrawHLine+0x4c>)
 8004150:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004154:	68c2      	ldr	r2, [r0, #12]
 8004156:	6894      	ldr	r4, [r2, #8]
 8004158:	462a      	mov	r2, r5
 800415a:	46a4      	mov	ip, r4
 800415c:	bc30      	pop	{r4, r5}
 800415e:	4760      	bx	ip
 8004160:	bc30      	pop	{r4, r5}
 8004162:	4770      	bx	lr
 8004164:	24000028 	.word	0x24000028
 8004168:	2402d630 	.word	0x2402d630

0800416c <LCD_FillRect>:
 800416c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800416e:	4c13      	ldr	r4, [pc, #76]	; (80041bc <LCD_FillRect+0x50>)
 8004170:	6824      	ldr	r4, [r4, #0]
 8004172:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8004176:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800417a:	4285      	cmp	r5, r0
 800417c:	bfb8      	it	lt
 800417e:	4605      	movlt	r5, r0
 8004180:	4296      	cmp	r6, r2
 8004182:	bfa8      	it	ge
 8004184:	4616      	movge	r6, r2
 8004186:	42ae      	cmp	r6, r5
 8004188:	db15      	blt.n	80041b6 <LCD_FillRect+0x4a>
 800418a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800418e:	428a      	cmp	r2, r1
 8004190:	bfb8      	it	lt
 8004192:	460a      	movlt	r2, r1
 8004194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004198:	428b      	cmp	r3, r1
 800419a:	bfa8      	it	ge
 800419c:	460b      	movge	r3, r1
 800419e:	429a      	cmp	r2, r3
 80041a0:	dc09      	bgt.n	80041b6 <LCD_FillRect+0x4a>
 80041a2:	7c60      	ldrb	r0, [r4, #17]
 80041a4:	4906      	ldr	r1, [pc, #24]	; (80041c0 <LCD_FillRect+0x54>)
 80041a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80041aa:	68c1      	ldr	r1, [r0, #12]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4633      	mov	r3, r6
 80041b0:	690c      	ldr	r4, [r1, #16]
 80041b2:	4629      	mov	r1, r5
 80041b4:	47a0      	blx	r4
 80041b6:	b002      	add	sp, #8
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	bf00      	nop
 80041bc:	24000028 	.word	0x24000028
 80041c0:	2402d630 	.word	0x2402d630

080041c4 <LCD__DrawBitmap_1bpp>:
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	b08f      	sub	sp, #60	; 0x3c
 80041ca:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8004398 <LCD__DrawBitmap_1bpp+0x1d4>
 80041ce:	460c      	mov	r4, r1
 80041d0:	4617      	mov	r7, r2
 80041d2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80041d4:	f8de e000 	ldr.w	lr, [lr]
 80041d8:	9502      	str	r5, [sp, #8]
 80041da:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80041dc:	9007      	str	r0, [sp, #28]
 80041de:	9508      	str	r5, [sp, #32]
 80041e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	9503      	str	r5, [sp, #12]
 80041e6:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80041ea:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80041ec:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80041f0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80041f2:	f1be 0f00 	cmp.w	lr, #0
 80041f6:	d002      	beq.n	80041fe <LCD__DrawBitmap_1bpp+0x3a>
 80041f8:	f8de 4000 	ldr.w	r4, [lr]
 80041fc:	e054      	b.n	80042a8 <LCD__DrawBitmap_1bpp+0xe4>
 80041fe:	9b02      	ldr	r3, [sp, #8]
 8004200:	9a08      	ldr	r2, [sp, #32]
 8004202:	4313      	orrs	r3, r2
 8004204:	2b01      	cmp	r3, #1
 8004206:	d154      	bne.n	80042b2 <LCD__DrawBitmap_1bpp+0xee>
 8004208:	4b61      	ldr	r3, [pc, #388]	; (8004390 <LCD__DrawBitmap_1bpp+0x1cc>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8004210:	1a53      	subs	r3, r2, r1
 8004212:	2b00      	cmp	r3, #0
 8004214:	dd0a      	ble.n	800422c <LCD__DrawBitmap_1bpp+0x68>
 8004216:	9901      	ldr	r1, [sp, #4]
 8004218:	ebc3 0e01 	rsb	lr, r3, r1
 800421c:	f1be 0f00 	cmp.w	lr, #0
 8004220:	f340 80b2 	ble.w	8004388 <LCD__DrawBitmap_1bpp+0x1c4>
 8004224:	9903      	ldr	r1, [sp, #12]
 8004226:	fb01 6603 	mla	r6, r1, r3, r6
 800422a:	e002      	b.n	8004232 <LCD__DrawBitmap_1bpp+0x6e>
 800422c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004230:	460a      	mov	r2, r1
 8004232:	9b01      	ldr	r3, [sp, #4]
 8004234:	441c      	add	r4, r3
 8004236:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800423a:	3c01      	subs	r4, #1
 800423c:	1ae4      	subs	r4, r4, r3
 800423e:	2c00      	cmp	r4, #0
 8004240:	dd05      	ble.n	800424e <LCD__DrawBitmap_1bpp+0x8a>
 8004242:	ebc4 0e0e 	rsb	lr, r4, lr
 8004246:	f1be 0f00 	cmp.w	lr, #0
 800424a:	f340 809d 	ble.w	8004388 <LCD__DrawBitmap_1bpp+0x1c4>
 800424e:	9b07      	ldr	r3, [sp, #28]
 8004250:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8004254:	443b      	add	r3, r7
 8004256:	3b01      	subs	r3, #1
 8004258:	1a5b      	subs	r3, r3, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	bfc8      	it	gt
 800425e:	1aff      	subgt	r7, r7, r3
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	1b59      	subs	r1, r3, r5
 8004264:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8004268:	4299      	cmp	r1, r3
 800426a:	da09      	bge.n	8004280 <LCD__DrawBitmap_1bpp+0xbc>
 800426c:	1a5b      	subs	r3, r3, r1
 800426e:	441d      	add	r5, r3
 8004270:	1aff      	subs	r7, r7, r3
 8004272:	f023 0307 	bic.w	r3, r3, #7
 8004276:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 800427a:	f005 0507 	and.w	r5, r5, #7
 800427e:	4419      	add	r1, r3
 8004280:	2f00      	cmp	r7, #0
 8004282:	f340 8081 	ble.w	8004388 <LCD__DrawBitmap_1bpp+0x1c4>
 8004286:	7c40      	ldrb	r0, [r0, #17]
 8004288:	4b42      	ldr	r3, [pc, #264]	; (8004394 <LCD__DrawBitmap_1bpp+0x1d0>)
 800428a:	9c03      	ldr	r4, [sp, #12]
 800428c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004290:	68c3      	ldr	r3, [r0, #12]
 8004292:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8004296:	951c      	str	r5, [sp, #112]	; 0x70
 8004298:	961b      	str	r6, [sp, #108]	; 0x6c
 800429a:	941a      	str	r4, [sp, #104]	; 0x68
 800429c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 80042a0:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 80042a4:	685c      	ldr	r4, [r3, #4]
 80042a6:	463b      	mov	r3, r7
 80042a8:	46a4      	mov	ip, r4
 80042aa:	b00f      	add	sp, #60	; 0x3c
 80042ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	4760      	bx	ip
 80042b2:	f1ca 0308 	rsb	r3, sl, #8
 80042b6:	4675      	mov	r5, lr
 80042b8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004390 <LCD__DrawBitmap_1bpp+0x1cc>
 80042bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80042be:	9b02      	ldr	r3, [sp, #8]
 80042c0:	f8cd e014 	str.w	lr, [sp, #20]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	930d      	str	r3, [sp, #52]	; 0x34
 80042c8:	9b05      	ldr	r3, [sp, #20]
 80042ca:	9a01      	ldr	r2, [sp, #4]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	da5b      	bge.n	8004388 <LCD__DrawBitmap_1bpp+0x1c4>
 80042d0:	9b08      	ldr	r3, [sp, #32]
 80042d2:	18e3      	adds	r3, r4, r3
 80042d4:	9309      	str	r3, [sp, #36]	; 0x24
 80042d6:	3b01      	subs	r3, #1
 80042d8:	930a      	str	r3, [sp, #40]	; 0x28
 80042da:	f8d9 3000 	ldr.w	r3, [r9]
 80042de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042e0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80042e4:	428a      	cmp	r2, r1
 80042e6:	dc48      	bgt.n	800437a <LCD__DrawBitmap_1bpp+0x1b6>
 80042e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042ec:	429c      	cmp	r4, r3
 80042ee:	dc44      	bgt.n	800437a <LCD__DrawBitmap_1bpp+0x1b6>
 80042f0:	9b07      	ldr	r3, [sp, #28]
 80042f2:	f04f 0800 	mov.w	r8, #0
 80042f6:	9606      	str	r6, [sp, #24]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80042fe:	9b04      	ldr	r3, [sp, #16]
 8004300:	42bb      	cmp	r3, r7
 8004302:	da3a      	bge.n	800437a <LCD__DrawBitmap_1bpp+0x1b6>
 8004304:	f1b8 0f00 	cmp.w	r8, #0
 8004308:	d105      	bne.n	8004316 <LCD__DrawBitmap_1bpp+0x152>
 800430a:	9b06      	ldr	r3, [sp, #24]
 800430c:	f04f 0808 	mov.w	r8, #8
 8004310:	781d      	ldrb	r5, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	9306      	str	r3, [sp, #24]
 8004316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004318:	ebca 0808 	rsb	r8, sl, r8
 800431c:	fa45 f303 	asr.w	r3, r5, r3
 8004320:	fa05 f50a 	lsl.w	r5, r5, sl
 8004324:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8004328:	b2ed      	uxtb	r5, r5
 800432a:	d104      	bne.n	8004336 <LCD__DrawBitmap_1bpp+0x172>
 800432c:	f8d9 2000 	ldr.w	r2, [r9]
 8004330:	7c12      	ldrb	r2, [r2, #16]
 8004332:	0792      	lsls	r2, r2, #30
 8004334:	d419      	bmi.n	800436a <LCD__DrawBitmap_1bpp+0x1a6>
 8004336:	f8d9 2000 	ldr.w	r2, [r9]
 800433a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800433c:	6810      	ldr	r0, [r2, #0]
 800433e:	900c      	str	r0, [sp, #48]	; 0x30
 8004340:	f1bb 0f00 	cmp.w	fp, #0
 8004344:	d002      	beq.n	800434c <LCD__DrawBitmap_1bpp+0x188>
 8004346:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800434a:	e000      	b.n	800434e <LCD__DrawBitmap_1bpp+0x18a>
 800434c:	b2db      	uxtb	r3, r3
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	9900      	ldr	r1, [sp, #0]
 8004352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004356:	440a      	add	r2, r1
 8004358:	9800      	ldr	r0, [sp, #0]
 800435a:	4621      	mov	r1, r4
 800435c:	f7ff ff06 	bl	800416c <LCD_FillRect>
 8004360:	f8d9 3000 	ldr.w	r3, [r9]
 8004364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	9b04      	ldr	r3, [sp, #16]
 800436c:	9a02      	ldr	r2, [sp, #8]
 800436e:	3301      	adds	r3, #1
 8004370:	9304      	str	r3, [sp, #16]
 8004372:	9b00      	ldr	r3, [sp, #0]
 8004374:	4413      	add	r3, r2
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	e7c1      	b.n	80042fe <LCD__DrawBitmap_1bpp+0x13a>
 800437a:	9b05      	ldr	r3, [sp, #20]
 800437c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800437e:	3301      	adds	r3, #1
 8004380:	9305      	str	r3, [sp, #20]
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	441e      	add	r6, r3
 8004386:	e79f      	b.n	80042c8 <LCD__DrawBitmap_1bpp+0x104>
 8004388:	b00f      	add	sp, #60	; 0x3c
 800438a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438e:	bf00      	nop
 8004390:	24000028 	.word	0x24000028
 8004394:	2402d630 	.word	0x2402d630
 8004398:	2402d5ec 	.word	0x2402d5ec

0800439c <LCD_DrawBitmap>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	b08f      	sub	sp, #60	; 0x3c
 80043a2:	f8df e218 	ldr.w	lr, [pc, #536]	; 80045bc <LCD_DrawBitmap+0x220>
 80043a6:	4605      	mov	r5, r0
 80043a8:	4690      	mov	r8, r2
 80043aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80043ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80043ae:	9402      	str	r4, [sp, #8]
 80043b0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80043b2:	f8de e000 	ldr.w	lr, [lr]
 80043b6:	9408      	str	r4, [sp, #32]
 80043b8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80043ba:	9100      	str	r1, [sp, #0]
 80043bc:	9403      	str	r4, [sp, #12]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80043c2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80043c4:	9604      	str	r6, [sp, #16]
 80043c6:	f1be 0f00 	cmp.w	lr, #0
 80043ca:	d002      	beq.n	80043d2 <LCD_DrawBitmap+0x36>
 80043cc:	f8de 4000 	ldr.w	r4, [lr]
 80043d0:	e07a      	b.n	80044c8 <LCD_DrawBitmap+0x12c>
 80043d2:	9b02      	ldr	r3, [sp, #8]
 80043d4:	9a08      	ldr	r2, [sp, #32]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d17a      	bne.n	80044d2 <LCD_DrawBitmap+0x136>
 80043dc:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <LCD_DrawBitmap+0x218>)
 80043de:	9901      	ldr	r1, [sp, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	9b00      	ldr	r3, [sp, #0]
 80043e4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	dd07      	ble.n	80043fe <LCD_DrawBitmap+0x62>
 80043ee:	1ac9      	subs	r1, r1, r3
 80043f0:	2900      	cmp	r1, #0
 80043f2:	f340 80db 	ble.w	80045ac <LCD_DrawBitmap+0x210>
 80043f6:	9e03      	ldr	r6, [sp, #12]
 80043f8:	fb06 4403 	mla	r4, r6, r3, r4
 80043fc:	e000      	b.n	8004400 <LCD_DrawBitmap+0x64>
 80043fe:	9a00      	ldr	r2, [sp, #0]
 8004400:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8004404:	441e      	add	r6, r3
 8004406:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800440a:	3e01      	subs	r6, #1
 800440c:	1af6      	subs	r6, r6, r3
 800440e:	2e00      	cmp	r6, #0
 8004410:	dd03      	ble.n	800441a <LCD_DrawBitmap+0x7e>
 8004412:	1b89      	subs	r1, r1, r6
 8004414:	2900      	cmp	r1, #0
 8004416:	f340 80c9 	ble.w	80045ac <LCD_DrawBitmap+0x210>
 800441a:	eb05 0308 	add.w	r3, r5, r8
 800441e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	1b9b      	subs	r3, r3, r6
 8004426:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	bfc8      	it	gt
 800442e:	ebc3 0808 	rsbgt	r8, r3, r8
 8004432:	42b5      	cmp	r5, r6
 8004434:	da31      	bge.n	800449a <LCD_DrawBitmap+0xfe>
 8004436:	1b73      	subs	r3, r6, r5
 8004438:	2f08      	cmp	r7, #8
 800443a:	ebc3 0808 	rsb	r8, r3, r8
 800443e:	d027      	beq.n	8004490 <LCD_DrawBitmap+0xf4>
 8004440:	dc0d      	bgt.n	800445e <LCD_DrawBitmap+0xc2>
 8004442:	2f02      	cmp	r7, #2
 8004444:	d014      	beq.n	8004470 <LCD_DrawBitmap+0xd4>
 8004446:	2f04      	cmp	r7, #4
 8004448:	d01a      	beq.n	8004480 <LCD_DrawBitmap+0xe4>
 800444a:	2f01      	cmp	r7, #1
 800444c:	d126      	bne.n	800449c <LCD_DrawBitmap+0x100>
 800444e:	f023 0607 	bic.w	r6, r3, #7
 8004452:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	4435      	add	r5, r6
 800445c:	e01e      	b.n	800449c <LCD_DrawBitmap+0x100>
 800445e:	2f18      	cmp	r7, #24
 8004460:	d018      	beq.n	8004494 <LCD_DrawBitmap+0xf8>
 8004462:	2f20      	cmp	r7, #32
 8004464:	d016      	beq.n	8004494 <LCD_DrawBitmap+0xf8>
 8004466:	2f10      	cmp	r7, #16
 8004468:	d118      	bne.n	800449c <LCD_DrawBitmap+0x100>
 800446a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800446e:	e013      	b.n	8004498 <LCD_DrawBitmap+0xfc>
 8004470:	f023 0603 	bic.w	r6, r3, #3
 8004474:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	4435      	add	r5, r6
 800447e:	e00d      	b.n	800449c <LCD_DrawBitmap+0x100>
 8004480:	f023 0601 	bic.w	r6, r3, #1
 8004484:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	4435      	add	r5, r6
 800448e:	e005      	b.n	800449c <LCD_DrawBitmap+0x100>
 8004490:	441c      	add	r4, r3
 8004492:	e001      	b.n	8004498 <LCD_DrawBitmap+0xfc>
 8004494:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004498:	4635      	mov	r5, r6
 800449a:	2300      	movs	r3, #0
 800449c:	f1b8 0f00 	cmp.w	r8, #0
 80044a0:	f340 8084 	ble.w	80045ac <LCD_DrawBitmap+0x210>
 80044a4:	7c46      	ldrb	r6, [r0, #17]
 80044a6:	4844      	ldr	r0, [pc, #272]	; (80045b8 <LCD_DrawBitmap+0x21c>)
 80044a8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80044ac:	9e04      	ldr	r6, [sp, #16]
 80044ae:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80044b2:	931c      	str	r3, [sp, #112]	; 0x70
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	9118      	str	r1, [sp, #96]	; 0x60
 80044b8:	4629      	mov	r1, r5
 80044ba:	931a      	str	r3, [sp, #104]	; 0x68
 80044bc:	4643      	mov	r3, r8
 80044be:	961d      	str	r6, [sp, #116]	; 0x74
 80044c0:	941b      	str	r4, [sp, #108]	; 0x6c
 80044c2:	9719      	str	r7, [sp, #100]	; 0x64
 80044c4:	f8de 4004 	ldr.w	r4, [lr, #4]
 80044c8:	46a4      	mov	ip, r4
 80044ca:	b00f      	add	sp, #60	; 0x3c
 80044cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	4760      	bx	ip
 80044d2:	f1c7 0308 	rsb	r3, r7, #8
 80044d6:	46f3      	mov	fp, lr
 80044d8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80045b4 <LCD_DrawBitmap+0x218>
 80044dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80044de:	9b02      	ldr	r3, [sp, #8]
 80044e0:	f8cd e018 	str.w	lr, [sp, #24]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	930d      	str	r3, [sp, #52]	; 0x34
 80044e8:	9b06      	ldr	r3, [sp, #24]
 80044ea:	9a01      	ldr	r2, [sp, #4]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	da5d      	bge.n	80045ac <LCD_DrawBitmap+0x210>
 80044f0:	9a00      	ldr	r2, [sp, #0]
 80044f2:	9b08      	ldr	r3, [sp, #32]
 80044f4:	4413      	add	r3, r2
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	3b01      	subs	r3, #1
 80044fa:	930a      	str	r3, [sp, #40]	; 0x28
 80044fc:	f8da 3000 	ldr.w	r3, [sl]
 8004500:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004502:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004506:	428a      	cmp	r2, r1
 8004508:	dc48      	bgt.n	800459c <LCD_DrawBitmap+0x200>
 800450a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800450e:	9a00      	ldr	r2, [sp, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	dc43      	bgt.n	800459c <LCD_DrawBitmap+0x200>
 8004514:	f04f 0900 	mov.w	r9, #0
 8004518:	462e      	mov	r6, r5
 800451a:	9407      	str	r4, [sp, #28]
 800451c:	f8cd 9014 	str.w	r9, [sp, #20]
 8004520:	9b05      	ldr	r3, [sp, #20]
 8004522:	4543      	cmp	r3, r8
 8004524:	da3a      	bge.n	800459c <LCD_DrawBitmap+0x200>
 8004526:	f1b9 0f00 	cmp.w	r9, #0
 800452a:	d106      	bne.n	800453a <LCD_DrawBitmap+0x19e>
 800452c:	9b07      	ldr	r3, [sp, #28]
 800452e:	f04f 0908 	mov.w	r9, #8
 8004532:	f893 b000 	ldrb.w	fp, [r3]
 8004536:	3301      	adds	r3, #1
 8004538:	9307      	str	r3, [sp, #28]
 800453a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453c:	fa0b f207 	lsl.w	r2, fp, r7
 8004540:	ebc7 0909 	rsb	r9, r7, r9
 8004544:	fa4b f303 	asr.w	r3, fp, r3
 8004548:	fa5f fb82 	uxtb.w	fp, r2
 800454c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8004550:	d104      	bne.n	800455c <LCD_DrawBitmap+0x1c0>
 8004552:	f8da 2000 	ldr.w	r2, [sl]
 8004556:	7c12      	ldrb	r2, [r2, #16]
 8004558:	0792      	lsls	r2, r2, #30
 800455a:	d417      	bmi.n	800458c <LCD_DrawBitmap+0x1f0>
 800455c:	f8da 2000 	ldr.w	r2, [sl]
 8004560:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004562:	6810      	ldr	r0, [r2, #0]
 8004564:	900c      	str	r0, [sp, #48]	; 0x30
 8004566:	9804      	ldr	r0, [sp, #16]
 8004568:	b110      	cbz	r0, 8004570 <LCD_DrawBitmap+0x1d4>
 800456a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800456e:	e000      	b.n	8004572 <LCD_DrawBitmap+0x1d6>
 8004570:	b2db      	uxtb	r3, r3
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4630      	mov	r0, r6
 8004576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457a:	4432      	add	r2, r6
 800457c:	9900      	ldr	r1, [sp, #0]
 800457e:	f7ff fdf5 	bl	800416c <LCD_FillRect>
 8004582:	f8da 3000 	ldr.w	r3, [sl]
 8004586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	9b05      	ldr	r3, [sp, #20]
 800458e:	9a02      	ldr	r2, [sp, #8]
 8004590:	3301      	adds	r3, #1
 8004592:	9305      	str	r3, [sp, #20]
 8004594:	4633      	mov	r3, r6
 8004596:	4413      	add	r3, r2
 8004598:	461e      	mov	r6, r3
 800459a:	e7c1      	b.n	8004520 <LCD_DrawBitmap+0x184>
 800459c:	9b06      	ldr	r3, [sp, #24]
 800459e:	3301      	adds	r3, #1
 80045a0:	9306      	str	r3, [sp, #24]
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	441c      	add	r4, r3
 80045a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	e79d      	b.n	80044e8 <LCD_DrawBitmap+0x14c>
 80045ac:	b00f      	add	sp, #60	; 0x3c
 80045ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b2:	bf00      	nop
 80045b4:	24000028 	.word	0x24000028
 80045b8:	2402d630 	.word	0x2402d630
 80045bc:	2402d5ec 	.word	0x2402d5ec

080045c0 <LCD_SetClipRectMax>:
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <LCD_SetClipRectMax+0x14>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <LCD_SetClipRectMax+0x18>)
 80045c6:	7c4a      	ldrb	r2, [r1, #17]
 80045c8:	3108      	adds	r1, #8
 80045ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80045ce:	68c3      	ldr	r3, [r0, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4718      	bx	r3
 80045d4:	24000028 	.word	0x24000028
 80045d8:	2402d630 	.word	0x2402d630

080045dc <emWin_LCD_Init>:
 80045dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045de:	f7ff ffef 	bl	80045c0 <LCD_SetClipRectMax>
 80045e2:	f000 f8bb 	bl	800475c <LCD_InitColors>
 80045e6:	4604      	mov	r4, r0
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d144      	bne.n	8004676 <emWin_LCD_Init+0x9a>
 80045ec:	4605      	mov	r5, r0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7ff fb6c 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 80045f4:	9001      	str	r0, [sp, #4]
 80045f6:	b150      	cbz	r0, 800460e <emWin_LCD_Init+0x32>
 80045f8:	68c3      	ldr	r3, [r0, #12]
 80045fa:	210c      	movs	r1, #12
 80045fc:	a801      	add	r0, sp, #4
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	4798      	blx	r3
 8004602:	4603      	mov	r3, r0
 8004604:	2800      	cmp	r0, #0
 8004606:	d034      	beq.n	8004672 <emWin_LCD_Init+0x96>
 8004608:	9801      	ldr	r0, [sp, #4]
 800460a:	4798      	blx	r3
 800460c:	4304      	orrs	r4, r0
 800460e:	3501      	adds	r5, #1
 8004610:	2d02      	cmp	r5, #2
 8004612:	d1ec      	bne.n	80045ee <emWin_LCD_Init+0x12>
 8004614:	bb7c      	cbnz	r4, 8004676 <emWin_LCD_Init+0x9a>
 8004616:	f000 f8f7 	bl	8004808 <LCD_InitLUT>
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <emWin_LCD_Init+0xa0>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004622:	429a      	cmp	r2, r3
 8004624:	d101      	bne.n	800462a <emWin_LCD_Init+0x4e>
 8004626:	2000      	movs	r0, #0
 8004628:	e026      	b.n	8004678 <emWin_LCD_Init+0x9c>
 800462a:	2401      	movs	r4, #1
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff fb4d 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004632:	9001      	str	r0, [sp, #4]
 8004634:	b1c8      	cbz	r0, 800466a <emWin_LCD_Init+0x8e>
 8004636:	4620      	mov	r0, r4
 8004638:	f7ff fc54 	bl	8003ee4 <GUI_SelectLayer>
 800463c:	2004      	movs	r0, #4
 800463e:	f7ff fd37 	bl	80040b0 <LCD_SetDrawMode>
 8004642:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004646:	2100      	movs	r1, #0
 8004648:	461a      	mov	r2, r3
 800464a:	4608      	mov	r0, r1
 800464c:	f7ff fd8e 	bl	800416c <LCD_FillRect>
 8004650:	2000      	movs	r0, #0
 8004652:	f7ff fd2d 	bl	80040b0 <LCD_SetDrawMode>
 8004656:	9b01      	ldr	r3, [sp, #4]
 8004658:	210e      	movs	r1, #14
 800465a:	a801      	add	r0, sp, #4
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	4798      	blx	r3
 8004662:	4603      	mov	r3, r0
 8004664:	b108      	cbz	r0, 800466a <emWin_LCD_Init+0x8e>
 8004666:	9801      	ldr	r0, [sp, #4]
 8004668:	4798      	blx	r3
 800466a:	f114 34ff 	adds.w	r4, r4, #4294967295
 800466e:	d2dd      	bcs.n	800462c <emWin_LCD_Init+0x50>
 8004670:	e7d9      	b.n	8004626 <emWin_LCD_Init+0x4a>
 8004672:	2001      	movs	r0, #1
 8004674:	e000      	b.n	8004678 <emWin_LCD_Init+0x9c>
 8004676:	4620      	mov	r0, r4
 8004678:	b003      	add	sp, #12
 800467a:	bd30      	pop	{r4, r5, pc}
 800467c:	24000024 	.word	0x24000024

08004680 <LCD_Color2Index>:
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <LCD_Color2Index+0x14>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	7c5a      	ldrb	r2, [r3, #17]
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <LCD_Color2Index+0x18>)
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4718      	bx	r3
 8004692:	bf00      	nop
 8004694:	24000028 	.word	0x24000028
 8004698:	2402d630 	.word	0x2402d630

0800469c <LCD_Index2Color>:
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <LCD_Index2Color+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	7c5a      	ldrb	r2, [r3, #17]
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <LCD_Index2Color+0x18>)
 80046a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4718      	bx	r3
 80046ae:	bf00      	nop
 80046b0:	24000028 	.word	0x24000028
 80046b4:	2402d630 	.word	0x2402d630

080046b8 <LCD_SetColorIndex>:
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <LCD_SetColorIndex+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	7c1a      	ldrb	r2, [r3, #16]
 80046be:	0752      	lsls	r2, r2, #29
 80046c0:	bf4c      	ite	mi
 80046c2:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80046c4:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80046c6:	6018      	str	r0, [r3, #0]
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	24000028 	.word	0x24000028

080046d0 <_SetColor>:
 80046d0:	b508      	push	{r3, lr}
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <_SetColor+0x1c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046d8:	4281      	cmp	r1, r0
 80046da:	d006      	beq.n	80046ea <_SetColor+0x1a>
 80046dc:	6318      	str	r0, [r3, #48]	; 0x30
 80046de:	f7ff ffcf 	bl	8004680 <LCD_Color2Index>
 80046e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046e6:	f7ff bfe7 	b.w	80046b8 <LCD_SetColorIndex>
 80046ea:	bd08      	pop	{r3, pc}
 80046ec:	24000028 	.word	0x24000028

080046f0 <LCD_SetBkColorIndex>:
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <LCD_SetBkColorIndex+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	7c1a      	ldrb	r2, [r3, #16]
 80046f6:	0752      	lsls	r2, r2, #29
 80046f8:	bf4c      	ite	mi
 80046fa:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80046fc:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80046fe:	6018      	str	r0, [r3, #0]
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	24000028 	.word	0x24000028

08004708 <_SetBkColor>:
 8004708:	b508      	push	{r3, lr}
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <_SetBkColor+0x1c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004710:	4281      	cmp	r1, r0
 8004712:	d006      	beq.n	8004722 <_SetBkColor+0x1a>
 8004714:	6358      	str	r0, [r3, #52]	; 0x34
 8004716:	f7ff ffb3 	bl	8004680 <LCD_Color2Index>
 800471a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800471e:	f7ff bfe7 	b.w	80046f0 <LCD_SetBkColorIndex>
 8004722:	bd08      	pop	{r3, pc}
 8004724:	24000028 	.word	0x24000028

08004728 <LCD_SetBkColor>:
 8004728:	4b01      	ldr	r3, [pc, #4]	; (8004730 <LCD_SetBkColor+0x8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4718      	bx	r3
 8004730:	24000034 	.word	0x24000034

08004734 <LCD_SetColor>:
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <LCD_SetColor+0x8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4718      	bx	r3
 800473c:	24000034 	.word	0x24000034

08004740 <_OnExit>:
 8004740:	b510      	push	{r4, lr}
 8004742:	4c04      	ldr	r4, [pc, #16]	; (8004754 <_OnExit+0x14>)
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	f7fe fdb9 	bl	80032bc <GUI_ALLOC_FreeFixedBlock>
 800474a:	2300      	movs	r3, #0
 800474c:	4a02      	ldr	r2, [pc, #8]	; (8004758 <_OnExit+0x18>)
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	bd10      	pop	{r4, pc}
 8004754:	2402d640 	.word	0x2402d640
 8004758:	2402d3f0 	.word	0x2402d3f0

0800475c <LCD_InitColors>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d0a      	ldr	r5, [pc, #40]	; (8004788 <LCD_InitColors+0x2c>)
 8004760:	682c      	ldr	r4, [r5, #0]
 8004762:	b964      	cbnz	r4, 800477e <LCD_InitColors+0x22>
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <LCD_InitColors+0x30>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	0080      	lsls	r0, r0, #2
 800476a:	f7fe fe7f 	bl	800346c <GUI_ALLOC_GetFixedBlock>
 800476e:	6028      	str	r0, [r5, #0]
 8004770:	b138      	cbz	r0, 8004782 <LCD_InitColors+0x26>
 8004772:	4807      	ldr	r0, [pc, #28]	; (8004790 <LCD_InitColors+0x34>)
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <LCD_InitColors+0x38>)
 8004776:	f840 3f04 	str.w	r3, [r0, #4]!
 800477a:	f7ff fa93 	bl	8003ca4 <GUI__RegisterExit>
 800477e:	2000      	movs	r0, #0
 8004780:	bd38      	pop	{r3, r4, r5, pc}
 8004782:	2001      	movs	r0, #1
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	2402d640 	.word	0x2402d640
 800478c:	24000038 	.word	0x24000038
 8004790:	2402d3f0 	.word	0x2402d3f0
 8004794:	08004741 	.word	0x08004741

08004798 <LCD_GetpPalConvTableUncached>:
 8004798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800479c:	4604      	mov	r4, r0
 800479e:	b318      	cbz	r0, 80047e8 <LCD_GetpPalConvTableUncached+0x50>
 80047a0:	6887      	ldr	r7, [r0, #8]
 80047a2:	b31f      	cbz	r7, 80047ec <LCD_GetpPalConvTableUncached+0x54>
 80047a4:	4d14      	ldr	r5, [pc, #80]	; (80047f8 <LCD_GetpPalConvTableUncached+0x60>)
 80047a6:	6828      	ldr	r0, [r5, #0]
 80047a8:	b320      	cbz	r0, 80047f4 <LCD_GetpPalConvTableUncached+0x5c>
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80047b0:	dc1f      	bgt.n	80047f2 <LCD_GetpPalConvTableUncached+0x5a>
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <LCD_GetpPalConvTableUncached+0x64>)
 80047b4:	2600      	movs	r6, #0
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	bfa8      	it	ge
 80047bc:	461a      	movge	r2, r3
 80047be:	4690      	mov	r8, r2
 80047c0:	4546      	cmp	r6, r8
 80047c2:	da09      	bge.n	80047d8 <LCD_GetpPalConvTableUncached+0x40>
 80047c4:	f8d5 9000 	ldr.w	r9, [r5]
 80047c8:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80047cc:	f7ff ff58 	bl	8004680 <LCD_Color2Index>
 80047d0:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 80047d4:	3601      	adds	r6, #1
 80047d6:	e7f3      	b.n	80047c0 <LCD_GetpPalConvTableUncached+0x28>
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <LCD_GetpPalConvTableUncached+0x68>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b10b      	cbz	r3, 80047e2 <LCD_GetpPalConvTableUncached+0x4a>
 80047de:	4620      	mov	r0, r4
 80047e0:	4798      	blx	r3
 80047e2:	6828      	ldr	r0, [r5, #0]
 80047e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ec:	4638      	mov	r0, r7
 80047ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f2:	2000      	movs	r0, #0
 80047f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f8:	2402d640 	.word	0x2402d640
 80047fc:	24000038 	.word	0x24000038
 8004800:	2402d3f0 	.word	0x2402d3f0

08004804 <LCD_GetpPalConvTableBM>:
 8004804:	f7ff bfc8 	b.w	8004798 <LCD_GetpPalConvTableUncached>

08004808 <LCD_InitLUT>:
 8004808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	4e1d      	ldr	r6, [pc, #116]	; (8004884 <LCD_InitLUT+0x7c>)
 800480e:	f000 f938 	bl	8004a82 <LCD_GetNumLayers>
 8004812:	2400      	movs	r4, #0
 8004814:	4680      	mov	r8, r0
 8004816:	46b1      	mov	r9, r6
 8004818:	f8df a070 	ldr.w	sl, [pc, #112]	; 800488c <LCD_InitLUT+0x84>
 800481c:	4544      	cmp	r4, r8
 800481e:	da2d      	bge.n	800487c <LCD_InitLUT+0x74>
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff fa53 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004826:	b338      	cbz	r0, 8004878 <LCD_InitLUT+0x70>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	4620      	mov	r0, r4
 800482c:	f893 b011 	ldrb.w	fp, [r3, #17]
 8004830:	745c      	strb	r4, [r3, #17]
 8004832:	f000 f863 	bl	80048fc <LCD_GetBitsPerPixelEx>
 8004836:	2808      	cmp	r0, #8
 8004838:	dd04      	ble.n	8004844 <LCD_InitLUT+0x3c>
 800483a:	f8d9 3000 	ldr.w	r3, [r9]
 800483e:	f883 b011 	strb.w	fp, [r3, #17]
 8004842:	e019      	b.n	8004878 <LCD_InitLUT+0x70>
 8004844:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <LCD_InitLUT+0x80>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d0f4      	beq.n	800483a <LCD_InitLUT+0x32>
 8004850:	4620      	mov	r0, r4
 8004852:	2500      	movs	r5, #0
 8004854:	f000 f855 	bl	8004902 <LCD_GetNumColorsEx>
 8004858:	4603      	mov	r3, r0
 800485a:	429d      	cmp	r5, r3
 800485c:	daed      	bge.n	800483a <LCD_InitLUT+0x32>
 800485e:	b2ef      	uxtb	r7, r5
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	3501      	adds	r5, #1
 8004864:	4638      	mov	r0, r7
 8004866:	f7ff ff19 	bl	800469c <LCD_Index2Color>
 800486a:	4639      	mov	r1, r7
 800486c:	4602      	mov	r2, r0
 800486e:	4620      	mov	r0, r4
 8004870:	f000 f967 	bl	8004b42 <LCD_SetLUTEntryEx>
 8004874:	9b01      	ldr	r3, [sp, #4]
 8004876:	e7f0      	b.n	800485a <LCD_InitLUT+0x52>
 8004878:	3401      	adds	r4, #1
 800487a:	e7cf      	b.n	800481c <LCD_InitLUT+0x14>
 800487c:	b003      	add	sp, #12
 800487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004882:	bf00      	nop
 8004884:	24000028 	.word	0x24000028
 8004888:	0800c780 	.word	0x0800c780
 800488c:	2402d630 	.word	0x2402d630

08004890 <LCD_GetBkColorIndex>:
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <LCD_GetBkColorIndex+0xc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	24000028 	.word	0x24000028

080048a0 <LCD_GetColorIndex>:
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <LCD_GetColorIndex+0xc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	24000028 	.word	0x24000028

080048b0 <_GetDevProp>:
 80048b0:	2801      	cmp	r0, #1
 80048b2:	b510      	push	{r4, lr}
 80048b4:	460c      	mov	r4, r1
 80048b6:	dc08      	bgt.n	80048ca <_GetDevProp+0x1a>
 80048b8:	f7ff fa08 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 80048bc:	b128      	cbz	r0, 80048ca <_GetDevProp+0x1a>
 80048be:	68c3      	ldr	r3, [r0, #12]
 80048c0:	4621      	mov	r1, r4
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c8:	4718      	bx	r3
 80048ca:	2000      	movs	r0, #0
 80048cc:	bd10      	pop	{r4, pc}

080048ce <_GetMaxValue>:
 80048ce:	b538      	push	{r3, r4, r5, lr}
 80048d0:	4601      	mov	r1, r0
 80048d2:	4605      	mov	r5, r0
 80048d4:	2001      	movs	r0, #1
 80048d6:	f7ff ffeb 	bl	80048b0 <_GetDevProp>
 80048da:	4604      	mov	r4, r0
 80048dc:	4629      	mov	r1, r5
 80048de:	2000      	movs	r0, #0
 80048e0:	f7ff ffe6 	bl	80048b0 <_GetDevProp>
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	bfb8      	it	lt
 80048e8:	4620      	movlt	r0, r4
 80048ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80048ee:	bd38      	pop	{r3, r4, r5, pc}

080048f0 <LCD_GetXSizeEx>:
 80048f0:	2101      	movs	r1, #1
 80048f2:	f7ff bfdd 	b.w	80048b0 <_GetDevProp>

080048f6 <LCD_GetYSizeEx>:
 80048f6:	2102      	movs	r1, #2
 80048f8:	f7ff bfda 	b.w	80048b0 <_GetDevProp>

080048fc <LCD_GetBitsPerPixelEx>:
 80048fc:	2108      	movs	r1, #8
 80048fe:	f7ff bfd7 	b.w	80048b0 <_GetDevProp>

08004902 <LCD_GetNumColorsEx>:
 8004902:	2109      	movs	r1, #9
 8004904:	f7ff bfd4 	b.w	80048b0 <_GetDevProp>

08004908 <LCD_GetMirrorXEx>:
 8004908:	210c      	movs	r1, #12
 800490a:	f7ff bfd1 	b.w	80048b0 <_GetDevProp>

0800490e <LCD_GetMirrorYEx>:
 800490e:	210d      	movs	r1, #13
 8004910:	f7ff bfce 	b.w	80048b0 <_GetDevProp>

08004914 <LCD_GetSwapXYEx>:
 8004914:	210e      	movs	r1, #14
 8004916:	f7ff bfcb 	b.w	80048b0 <_GetDevProp>
	...

0800491c <LCD_GetXSize>:
 800491c:	4b02      	ldr	r3, [pc, #8]	; (8004928 <LCD_GetXSize+0xc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	7c58      	ldrb	r0, [r3, #17]
 8004922:	f7ff bfe5 	b.w	80048f0 <LCD_GetXSizeEx>
 8004926:	bf00      	nop
 8004928:	24000028 	.word	0x24000028

0800492c <LCD_GetYSize>:
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <LCD_GetYSize+0xc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	7c58      	ldrb	r0, [r3, #17]
 8004932:	f7ff bfe0 	b.w	80048f6 <LCD_GetYSizeEx>
 8004936:	bf00      	nop
 8004938:	24000028 	.word	0x24000028

0800493c <LCD_GetNumColors>:
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <LCD_GetNumColors+0xc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	7c58      	ldrb	r0, [r3, #17]
 8004942:	f7ff bfde 	b.w	8004902 <LCD_GetNumColorsEx>
 8004946:	bf00      	nop
 8004948:	24000028 	.word	0x24000028

0800494c <GUI_GetBitsPerPixelEx>:
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <GUI_GetBitsPerPixelEx+0x10>)
 800494e:	2108      	movs	r1, #8
 8004950:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004954:	68c3      	ldr	r3, [r0, #12]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	4718      	bx	r3
 800495a:	bf00      	nop
 800495c:	2402d630 	.word	0x2402d630

08004960 <LCD_GetPaletteEx>:
 8004960:	b510      	push	{r4, lr}
 8004962:	f7ff f9b3 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004966:	b128      	cbz	r0, 8004974 <LCD_GetPaletteEx+0x14>
 8004968:	68c3      	ldr	r3, [r0, #12]
 800496a:	2102      	movs	r1, #2
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004972:	4718      	bx	r3
 8004974:	bd10      	pop	{r4, pc}
	...

08004978 <LCD_GetPalette>:
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <LCD_GetPalette+0xc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	7c58      	ldrb	r0, [r3, #17]
 800497e:	f7ff bfef 	b.w	8004960 <LCD_GetPaletteEx>
 8004982:	bf00      	nop
 8004984:	24000028 	.word	0x24000028

08004988 <GUI_GetpfIndex2ColorEx>:
 8004988:	4b02      	ldr	r3, [pc, #8]	; (8004994 <GUI_GetpfIndex2ColorEx+0xc>)
 800498a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	6858      	ldr	r0, [r3, #4]
 8004992:	4770      	bx	lr
 8004994:	2402d630 	.word	0x2402d630

08004998 <GUI_GetpfColor2IndexEx>:
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <GUI_GetpfColor2IndexEx+0xc>)
 800499a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	4770      	bx	lr
 80049a4:	2402d630 	.word	0x2402d630

080049a8 <LCD_GetXSizeMax>:
 80049a8:	2001      	movs	r0, #1
 80049aa:	f7ff bf90 	b.w	80048ce <_GetMaxValue>

080049ae <LCD_GetYSizeMax>:
 80049ae:	2002      	movs	r0, #2
 80049b0:	f7ff bf8d 	b.w	80048ce <_GetMaxValue>

080049b4 <LCD_SetDisplaySize>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <LCD_SetDisplaySize+0x8>)
 80049b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80049ba:	4770      	bx	lr
 80049bc:	2402d3fc 	.word	0x2402d3fc

080049c0 <LCD_GetXSizeDisplay>:
 80049c0:	4b01      	ldr	r3, [pc, #4]	; (80049c8 <LCD_GetXSizeDisplay+0x8>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	2402d3fc 	.word	0x2402d3fc

080049cc <LCD_GetYSizeDisplay>:
 80049cc:	4b01      	ldr	r3, [pc, #4]	; (80049d4 <LCD_GetYSizeDisplay+0x8>)
 80049ce:	6858      	ldr	r0, [r3, #4]
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	2402d3fc 	.word	0x2402d3fc

080049d8 <LCD__GetBPP>:
 80049d8:	2800      	cmp	r0, #0
 80049da:	d03b      	beq.n	8004a54 <LCD__GetBPP+0x7c>
 80049dc:	f030 0301 	bics.w	r3, r0, #1
 80049e0:	d029      	beq.n	8004a36 <LCD__GetBPP+0x5e>
 80049e2:	f030 0303 	bics.w	r3, r0, #3
 80049e6:	d028      	beq.n	8004a3a <LCD__GetBPP+0x62>
 80049e8:	f030 0307 	bics.w	r3, r0, #7
 80049ec:	d027      	beq.n	8004a3e <LCD__GetBPP+0x66>
 80049ee:	f030 030f 	bics.w	r3, r0, #15
 80049f2:	d026      	beq.n	8004a42 <LCD__GetBPP+0x6a>
 80049f4:	f030 031f 	bics.w	r3, r0, #31
 80049f8:	d025      	beq.n	8004a46 <LCD__GetBPP+0x6e>
 80049fa:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80049fe:	d024      	beq.n	8004a4a <LCD__GetBPP+0x72>
 8004a00:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	b30b      	cbz	r3, 8004a4e <LCD__GetBPP+0x76>
 8004a0a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8004a0e:	f023 030f 	bic.w	r3, r3, #15
 8004a12:	b1e3      	cbz	r3, 8004a4e <LCD__GetBPP+0x76>
 8004a14:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8004a18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a1c:	b1bb      	cbz	r3, 8004a4e <LCD__GetBPP+0x76>
 8004a1e:	0c03      	lsrs	r3, r0, #16
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	b1a3      	cbz	r3, 8004a4e <LCD__GetBPP+0x76>
 8004a24:	0c83      	lsrs	r3, r0, #18
 8004a26:	049b      	lsls	r3, r3, #18
 8004a28:	b19b      	cbz	r3, 8004a52 <LCD__GetBPP+0x7a>
 8004a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a2e:	bf0c      	ite	eq
 8004a30:	2018      	moveq	r0, #24
 8004a32:	2020      	movne	r0, #32
 8004a34:	4770      	bx	lr
 8004a36:	2001      	movs	r0, #1
 8004a38:	4770      	bx	lr
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	4770      	bx	lr
 8004a3e:	2003      	movs	r0, #3
 8004a40:	4770      	bx	lr
 8004a42:	2004      	movs	r0, #4
 8004a44:	4770      	bx	lr
 8004a46:	2005      	movs	r0, #5
 8004a48:	4770      	bx	lr
 8004a4a:	2008      	movs	r0, #8
 8004a4c:	4770      	bx	lr
 8004a4e:	2010      	movs	r0, #16
 8004a50:	4770      	bx	lr
 8004a52:	2012      	movs	r0, #18
 8004a54:	4770      	bx	lr

08004a56 <LCD__GetBPPDevice>:
 8004a56:	b508      	push	{r3, lr}
 8004a58:	f7ff ffbe 	bl	80049d8 <LCD__GetBPP>
 8004a5c:	2801      	cmp	r0, #1
 8004a5e:	d00f      	beq.n	8004a80 <LCD__GetBPPDevice+0x2a>
 8004a60:	1e83      	subs	r3, r0, #2
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d909      	bls.n	8004a7a <LCD__GetBPPDevice+0x24>
 8004a66:	f1a0 0309 	sub.w	r3, r0, #9
 8004a6a:	2b07      	cmp	r3, #7
 8004a6c:	d907      	bls.n	8004a7e <LCD__GetBPPDevice+0x28>
 8004a6e:	3811      	subs	r0, #17
 8004a70:	280f      	cmp	r0, #15
 8004a72:	bf8c      	ite	hi
 8004a74:	2000      	movhi	r0, #0
 8004a76:	2020      	movls	r0, #32
 8004a78:	bd08      	pop	{r3, pc}
 8004a7a:	2008      	movs	r0, #8
 8004a7c:	bd08      	pop	{r3, pc}
 8004a7e:	2010      	movs	r0, #16
 8004a80:	bd08      	pop	{r3, pc}

08004a82 <LCD_GetNumLayers>:
 8004a82:	b510      	push	{r4, lr}
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7ff f921 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004a8a:	1c04      	adds	r4, r0, #0
 8004a8c:	f04f 0001 	mov.w	r0, #1
 8004a90:	bf18      	it	ne
 8004a92:	2401      	movne	r4, #1
 8004a94:	f7ff f91a 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004a98:	b100      	cbz	r0, 8004a9c <LCD_GetNumLayers+0x1a>
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <LCD_SelectLCD>:
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <LCD_SelectLCD+0x38>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	7c51      	ldrb	r1, [r2, #17]
 8004aa8:	461c      	mov	r4, r3
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <LCD_SelectLCD+0x3c>)
 8004aac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004ab0:	b140      	cbz	r0, 8004ac4 <LCD_SelectLCD+0x24>
 8004ab2:	68c3      	ldr	r3, [r0, #12]
 8004ab4:	b113      	cbz	r3, 8004abc <LCD_SelectLCD+0x1c>
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d001      	beq.n	8004ac0 <LCD_SelectLCD+0x20>
 8004abc:	6800      	ldr	r0, [r0, #0]
 8004abe:	e7f7      	b.n	8004ab0 <LCD_SelectLCD+0x10>
 8004ac0:	f7ff f93c 	bl	8003d3c <GUI_DEVICE_Unlink>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60
 8004aca:	f103 0208 	add.w	r2, r3, #8
 8004ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad2:	615a      	str	r2, [r3, #20]
 8004ad4:	f7ff bd74 	b.w	80045c0 <LCD_SetClipRectMax>
 8004ad8:	24000028 	.word	0x24000028
 8004adc:	2402d630 	.word	0x2402d630

08004ae0 <LCD_GetPosEx>:
 8004ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	4615      	mov	r5, r2
 8004ae6:	f7ff f8f1 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004aea:	9001      	str	r0, [sp, #4]
 8004aec:	b908      	cbnz	r0, 8004af2 <LCD_GetPosEx+0x12>
 8004aee:	2001      	movs	r0, #1
 8004af0:	e00d      	b.n	8004b0e <LCD_GetPosEx+0x2e>
 8004af2:	68c3      	ldr	r3, [r0, #12]
 8004af4:	2104      	movs	r1, #4
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	eb0d 0001 	add.w	r0, sp, r1
 8004afc:	4798      	blx	r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0f4      	beq.n	8004aee <LCD_GetPosEx+0xe>
 8004b04:	9801      	ldr	r0, [sp, #4]
 8004b06:	462a      	mov	r2, r5
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4798      	blx	r3
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	b003      	add	sp, #12
 8004b10:	bd30      	pop	{r4, r5, pc}

08004b12 <LCD_SetDevFunc>:
 8004b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b14:	460c      	mov	r4, r1
 8004b16:	4615      	mov	r5, r2
 8004b18:	f7ff f8d8 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004b1c:	9001      	str	r0, [sp, #4]
 8004b1e:	b908      	cbnz	r0, 8004b24 <LCD_SetDevFunc+0x12>
 8004b20:	2001      	movs	r0, #1
 8004b22:	e00c      	b.n	8004b3e <LCD_SetDevFunc+0x2c>
 8004b24:	68c3      	ldr	r3, [r0, #12]
 8004b26:	2116      	movs	r1, #22
 8004b28:	a801      	add	r0, sp, #4
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	4798      	blx	r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d0f5      	beq.n	8004b20 <LCD_SetDevFunc+0xe>
 8004b34:	9801      	ldr	r0, [sp, #4]
 8004b36:	462a      	mov	r2, r5
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4798      	blx	r3
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	b003      	add	sp, #12
 8004b40:	bd30      	pop	{r4, r5, pc}

08004b42 <LCD_SetLUTEntryEx>:
 8004b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	4615      	mov	r5, r2
 8004b48:	f7ff f8c0 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004b4c:	9001      	str	r0, [sp, #4]
 8004b4e:	b908      	cbnz	r0, 8004b54 <LCD_SetLUTEntryEx+0x12>
 8004b50:	2001      	movs	r0, #1
 8004b52:	e00c      	b.n	8004b6e <LCD_SetLUTEntryEx+0x2c>
 8004b54:	68c3      	ldr	r3, [r0, #12]
 8004b56:	2110      	movs	r1, #16
 8004b58:	a801      	add	r0, sp, #4
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	4798      	blx	r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d0f5      	beq.n	8004b50 <LCD_SetLUTEntryEx+0xe>
 8004b64:	9801      	ldr	r0, [sp, #4]
 8004b66:	462a      	mov	r2, r5
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4798      	blx	r3
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	b003      	add	sp, #12
 8004b70:	bd30      	pop	{r4, r5, pc}

08004b72 <LCD_SetSizeEx>:
 8004b72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	4615      	mov	r5, r2
 8004b78:	f7ff f8a8 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004b7c:	9001      	str	r0, [sp, #4]
 8004b7e:	b908      	cbnz	r0, 8004b84 <LCD_SetSizeEx+0x12>
 8004b80:	2001      	movs	r0, #1
 8004b82:	e00c      	b.n	8004b9e <LCD_SetSizeEx+0x2c>
 8004b84:	68c3      	ldr	r3, [r0, #12]
 8004b86:	210b      	movs	r1, #11
 8004b88:	a801      	add	r0, sp, #4
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	4798      	blx	r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d0f5      	beq.n	8004b80 <LCD_SetSizeEx+0xe>
 8004b94:	9801      	ldr	r0, [sp, #4]
 8004b96:	462a      	mov	r2, r5
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4798      	blx	r3
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	b003      	add	sp, #12
 8004ba0:	bd30      	pop	{r4, r5, pc}

08004ba2 <LCD_SetVisEx>:
 8004ba2:	b513      	push	{r0, r1, r4, lr}
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	f7ff f891 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004baa:	9001      	str	r0, [sp, #4]
 8004bac:	b908      	cbnz	r0, 8004bb2 <LCD_SetVisEx+0x10>
 8004bae:	2001      	movs	r0, #1
 8004bb0:	e00b      	b.n	8004bca <LCD_SetVisEx+0x28>
 8004bb2:	68c3      	ldr	r3, [r0, #12]
 8004bb4:	2106      	movs	r1, #6
 8004bb6:	a801      	add	r0, sp, #4
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	4798      	blx	r3
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d0f5      	beq.n	8004bae <LCD_SetVisEx+0xc>
 8004bc2:	9801      	ldr	r0, [sp, #4]
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4798      	blx	r3
 8004bc8:	2000      	movs	r0, #0
 8004bca:	b002      	add	sp, #8
 8004bcc:	bd10      	pop	{r4, pc}

08004bce <LCD_SetVRAMAddrEx>:
 8004bce:	b513      	push	{r0, r1, r4, lr}
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	f7ff f87b 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004bd6:	9001      	str	r0, [sp, #4]
 8004bd8:	b908      	cbnz	r0, 8004bde <LCD_SetVRAMAddrEx+0x10>
 8004bda:	2001      	movs	r0, #1
 8004bdc:	e00b      	b.n	8004bf6 <LCD_SetVRAMAddrEx+0x28>
 8004bde:	68c3      	ldr	r3, [r0, #12]
 8004be0:	2109      	movs	r1, #9
 8004be2:	a801      	add	r0, sp, #4
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	4798      	blx	r3
 8004be8:	4603      	mov	r3, r0
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d0f5      	beq.n	8004bda <LCD_SetVRAMAddrEx+0xc>
 8004bee:	9801      	ldr	r0, [sp, #4]
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4798      	blx	r3
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <LCD_SetVSizeEx>:
 8004bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	4615      	mov	r5, r2
 8004c00:	f7ff f864 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 8004c04:	9001      	str	r0, [sp, #4]
 8004c06:	b908      	cbnz	r0, 8004c0c <LCD_SetVSizeEx+0x12>
 8004c08:	2001      	movs	r0, #1
 8004c0a:	e00c      	b.n	8004c26 <LCD_SetVSizeEx+0x2c>
 8004c0c:	68c3      	ldr	r3, [r0, #12]
 8004c0e:	210a      	movs	r1, #10
 8004c10:	a801      	add	r0, sp, #4
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	4798      	blx	r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d0f5      	beq.n	8004c08 <LCD_SetVSizeEx+0xe>
 8004c1c:	9801      	ldr	r0, [sp, #4]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4621      	mov	r1, r4
 8004c22:	4798      	blx	r3
 8004c24:	2000      	movs	r0, #0
 8004c26:	b003      	add	sp, #12
 8004c28:	bd30      	pop	{r4, r5, pc}
	...

08004c2c <LCD_UpdateColorIndices>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4c07      	ldr	r4, [pc, #28]	; (8004c4c <LCD_UpdateColorIndices+0x20>)
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c34:	f7ff fd24 	bl	8004680 <LCD_Color2Index>
 8004c38:	f7ff fd3e 	bl	80046b8 <LCD_SetColorIndex>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004c40:	f7ff fd1e 	bl	8004680 <LCD_Color2Index>
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	f7ff bd52 	b.w	80046f0 <LCD_SetBkColorIndex>
 8004c4c:	24000028 	.word	0x24000028

08004c50 <_GetRect>:
 8004c50:	6882      	ldr	r2, [r0, #8]
 8004c52:	2300      	movs	r3, #0
 8004c54:	800b      	strh	r3, [r1, #0]
 8004c56:	804b      	strh	r3, [r1, #2]
 8004c58:	6993      	ldr	r3, [r2, #24]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	808b      	strh	r3, [r1, #4]
 8004c5e:	69d3      	ldr	r3, [r2, #28]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	80cb      	strh	r3, [r1, #6]
 8004c64:	4770      	bx	lr

08004c66 <_SetPixelIndex>:
 8004c66:	b510      	push	{r4, lr}
 8004c68:	6884      	ldr	r4, [r0, #8]
 8004c6a:	6a20      	ldr	r0, [r4, #32]
 8004c6c:	fb00 1202 	mla	r2, r0, r2, r1
 8004c70:	6821      	ldr	r1, [r4, #0]
 8004c72:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8004c76:	bd10      	pop	{r4, pc}

08004c78 <_GetPixelIndex>:
 8004c78:	6880      	ldr	r0, [r0, #8]
 8004c7a:	6a03      	ldr	r3, [r0, #32]
 8004c7c:	fb03 1202 	mla	r2, r3, r2, r1
 8004c80:	6803      	ldr	r3, [r0, #0]
 8004c82:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8004c86:	4770      	bx	lr

08004c88 <_XorPixel>:
 8004c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	4616      	mov	r6, r2
 8004c92:	f7ff fff1 	bl	8004c78 <_GetPixelIndex>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	4607      	mov	r7, r0
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4798      	blx	r3
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	ea87 0300 	eor.w	r3, r7, r0
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cac:	f7ff bfdb 	b.w	8004c66 <_SetPixelIndex>

08004cb0 <_GetDevProp>:
 8004cb0:	3901      	subs	r1, #1
 8004cb2:	6883      	ldr	r3, [r0, #8]
 8004cb4:	290d      	cmp	r1, #13
 8004cb6:	d814      	bhi.n	8004ce2 <_GetDevProp+0x32>
 8004cb8:	e8df f001 	tbb	[pc, r1]
 8004cbc:	0f0d0b09 	.word	0x0f0d0b09
 8004cc0:	16131313 	.word	0x16131313
 8004cc4:	07111107 	.word	0x07111107
 8004cc8:	0707      	.short	0x0707
 8004cca:	2000      	movs	r0, #0
 8004ccc:	4770      	bx	lr
 8004cce:	6918      	ldr	r0, [r3, #16]
 8004cd0:	4770      	bx	lr
 8004cd2:	6958      	ldr	r0, [r3, #20]
 8004cd4:	4770      	bx	lr
 8004cd6:	6998      	ldr	r0, [r3, #24]
 8004cd8:	4770      	bx	lr
 8004cda:	69d8      	ldr	r0, [r3, #28]
 8004cdc:	4770      	bx	lr
 8004cde:	2001      	movs	r0, #1
 8004ce0:	4770      	bx	lr
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce6:	4770      	bx	lr
 8004ce8:	2010      	movs	r0, #16
 8004cea:	4770      	bx	lr

08004cec <_GetDevData>:
 8004cec:	2901      	cmp	r1, #1
 8004cee:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <_GetDevData+0xc>)
 8004cf0:	bf18      	it	ne
 8004cf2:	2000      	movne	r0, #0
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	0800c70c 	.word	0x0800c70c

08004cfc <_ReadRect>:
 8004cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d00:	6886      	ldr	r6, [r0, #8]
 8004d02:	9d07      	ldr	r5, [sp, #28]
 8004d04:	6a30      	ldr	r0, [r6, #32]
 8004d06:	6836      	ldr	r6, [r6, #0]
 8004d08:	0047      	lsls	r7, r0, #1
 8004d0a:	fb00 1002 	mla	r0, r0, r2, r1
 8004d0e:	9c08      	ldr	r4, [sp, #32]
 8004d10:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8004d14:	07c8      	lsls	r0, r1, #31
 8004d16:	1a41      	subs	r1, r0, r1
 8004d18:	18c8      	adds	r0, r1, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4419      	add	r1, r3
 8004d1e:	0040      	lsls	r0, r0, #1
 8004d20:	2300      	movs	r3, #0
 8004d22:	0049      	lsls	r1, r1, #1
 8004d24:	eb03 0c06 	add.w	ip, r3, r6
 8004d28:	f1a4 0e02 	sub.w	lr, r4, #2
 8004d2c:	eb04 0800 	add.w	r8, r4, r0
 8004d30:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8004d34:	f82e 9f02 	strh.w	r9, [lr, #2]!
 8004d38:	45c6      	cmp	lr, r8
 8004d3a:	d1f9      	bne.n	8004d30 <_ReadRect+0x34>
 8004d3c:	3201      	adds	r2, #1
 8004d3e:	440c      	add	r4, r1
 8004d40:	443b      	add	r3, r7
 8004d42:	f102 3eff 	add.w	lr, r2, #4294967295
 8004d46:	45ae      	cmp	lr, r5
 8004d48:	dbec      	blt.n	8004d24 <_ReadRect+0x28>
 8004d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004d50 <_GetDevFunc>:
 8004d50:	3901      	subs	r1, #1
 8004d52:	2928      	cmp	r1, #40	; 0x28
 8004d54:	d848      	bhi.n	8004de8 <_GetDevFunc+0x98>
 8004d56:	e8df f001 	tbb	[pc, r1]
 8004d5a:	1f45      	.short	0x1f45
 8004d5c:	21471d1b 	.word	0x21471d1b
 8004d60:	17494747 	.word	0x17494747
 8004d64:	25472319 	.word	0x25472319
 8004d68:	47474727 	.word	0x47474727
 8004d6c:	332d2b29 	.word	0x332d2b29
 8004d70:	47354747 	.word	0x47354747
 8004d74:	47474747 	.word	0x47474747
 8004d78:	312f3947 	.word	0x312f3947
 8004d7c:	473d4741 	.word	0x473d4741
 8004d80:	4747      	.short	0x4747
 8004d82:	15          	.byte	0x15
 8004d83:	00          	.byte	0x00
 8004d84:	481a      	ldr	r0, [pc, #104]	; (8004df0 <_GetDevFunc+0xa0>)
 8004d86:	4770      	bx	lr
 8004d88:	481a      	ldr	r0, [pc, #104]	; (8004df4 <_GetDevFunc+0xa4>)
 8004d8a:	4770      	bx	lr
 8004d8c:	481a      	ldr	r0, [pc, #104]	; (8004df8 <_GetDevFunc+0xa8>)
 8004d8e:	4770      	bx	lr
 8004d90:	481a      	ldr	r0, [pc, #104]	; (8004dfc <_GetDevFunc+0xac>)
 8004d92:	4770      	bx	lr
 8004d94:	481a      	ldr	r0, [pc, #104]	; (8004e00 <_GetDevFunc+0xb0>)
 8004d96:	4770      	bx	lr
 8004d98:	481a      	ldr	r0, [pc, #104]	; (8004e04 <_GetDevFunc+0xb4>)
 8004d9a:	4770      	bx	lr
 8004d9c:	481a      	ldr	r0, [pc, #104]	; (8004e08 <_GetDevFunc+0xb8>)
 8004d9e:	4770      	bx	lr
 8004da0:	481a      	ldr	r0, [pc, #104]	; (8004e0c <_GetDevFunc+0xbc>)
 8004da2:	4770      	bx	lr
 8004da4:	481a      	ldr	r0, [pc, #104]	; (8004e10 <_GetDevFunc+0xc0>)
 8004da6:	4770      	bx	lr
 8004da8:	481a      	ldr	r0, [pc, #104]	; (8004e14 <_GetDevFunc+0xc4>)
 8004daa:	4770      	bx	lr
 8004dac:	481a      	ldr	r0, [pc, #104]	; (8004e18 <_GetDevFunc+0xc8>)
 8004dae:	4770      	bx	lr
 8004db0:	481a      	ldr	r0, [pc, #104]	; (8004e1c <_GetDevFunc+0xcc>)
 8004db2:	4770      	bx	lr
 8004db4:	481a      	ldr	r0, [pc, #104]	; (8004e20 <_GetDevFunc+0xd0>)
 8004db6:	4770      	bx	lr
 8004db8:	481a      	ldr	r0, [pc, #104]	; (8004e24 <_GetDevFunc+0xd4>)
 8004dba:	4770      	bx	lr
 8004dbc:	481a      	ldr	r0, [pc, #104]	; (8004e28 <_GetDevFunc+0xd8>)
 8004dbe:	4770      	bx	lr
 8004dc0:	481a      	ldr	r0, [pc, #104]	; (8004e2c <_GetDevFunc+0xdc>)
 8004dc2:	4770      	bx	lr
 8004dc4:	6803      	ldr	r3, [r0, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004dca:	4770      	bx	lr
 8004dcc:	6803      	ldr	r3, [r0, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004dd2:	4770      	bx	lr
 8004dd4:	6803      	ldr	r3, [r0, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004dda:	4770      	bx	lr
 8004ddc:	6803      	ldr	r3, [r0, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004de2:	4770      	bx	lr
 8004de4:	4812      	ldr	r0, [pc, #72]	; (8004e30 <_GetDevFunc+0xe0>)
 8004de6:	4770      	bx	lr
 8004de8:	2000      	movs	r0, #0
 8004dea:	4770      	bx	lr
 8004dec:	4811      	ldr	r0, [pc, #68]	; (8004e34 <_GetDevFunc+0xe4>)
 8004dee:	4770      	bx	lr
 8004df0:	08005815 	.word	0x08005815
 8004df4:	08005a23 	.word	0x08005a23
 8004df8:	080059e1 	.word	0x080059e1
 8004dfc:	080058e7 	.word	0x080058e7
 8004e00:	080057f9 	.word	0x080057f9
 8004e04:	08005895 	.word	0x08005895
 8004e08:	0800586d 	.word	0x0800586d
 8004e0c:	08005853 	.word	0x08005853
 8004e10:	08004e85 	.word	0x08004e85
 8004e14:	08004e7b 	.word	0x08004e7b
 8004e18:	08004e65 	.word	0x08004e65
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e39 	.word	0x08004e39
 8004e24:	08005795 	.word	0x08005795
 8004e28:	0800582d 	.word	0x0800582d
 8004e2c:	08005747 	.word	0x08005747
 8004e30:	08004cfd 	.word	0x08004cfd
 8004e34:	080058bd 	.word	0x080058bd

08004e38 <_SetChroma>:
 8004e38:	b507      	push	{r0, r1, r2, lr}
 8004e3a:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004e3e:	466a      	mov	r2, sp
 8004e40:	210d      	movs	r1, #13
 8004e42:	6980      	ldr	r0, [r0, #24]
 8004e44:	f7fe f820 	bl	8002e88 <LCD_X_DisplayDriver>
 8004e48:	b003      	add	sp, #12
 8004e4a:	f85d fb04 	ldr.w	pc, [sp], #4

08004e4e <_SetChromaMode>:
 8004e4e:	b507      	push	{r0, r1, r2, lr}
 8004e50:	aa02      	add	r2, sp, #8
 8004e52:	6980      	ldr	r0, [r0, #24]
 8004e54:	f842 1d04 	str.w	r1, [r2, #-4]!
 8004e58:	210c      	movs	r1, #12
 8004e5a:	f7fe f815 	bl	8002e88 <LCD_X_DisplayDriver>
 8004e5e:	b003      	add	sp, #12
 8004e60:	f85d fb04 	ldr.w	pc, [sp], #4

08004e64 <_SetAlphaMode>:
 8004e64:	b507      	push	{r0, r1, r2, lr}
 8004e66:	aa02      	add	r2, sp, #8
 8004e68:	6980      	ldr	r0, [r0, #24]
 8004e6a:	f842 1d04 	str.w	r1, [r2, #-4]!
 8004e6e:	210b      	movs	r1, #11
 8004e70:	f7fe f80a 	bl	8002e88 <LCD_X_DisplayDriver>
 8004e74:	b003      	add	sp, #12
 8004e76:	f85d fb04 	ldr.w	pc, [sp], #4

08004e7a <_Off>:
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2106      	movs	r1, #6
 8004e7e:	6980      	ldr	r0, [r0, #24]
 8004e80:	f7fe b802 	b.w	8002e88 <LCD_X_DisplayDriver>

08004e84 <_On>:
 8004e84:	2200      	movs	r2, #0
 8004e86:	2105      	movs	r1, #5
 8004e88:	6980      	ldr	r0, [r0, #24]
 8004e8a:	f7fd bffd 	b.w	8002e88 <LCD_X_DisplayDriver>

08004e8e <_SetOrg>:
 8004e8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e92:	2300      	movs	r3, #0
 8004e94:	4607      	mov	r7, r0
 8004e96:	6884      	ldr	r4, [r0, #8]
 8004e98:	460d      	mov	r5, r1
 8004e9a:	6980      	ldr	r0, [r0, #24]
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	f7ff fd31 	bl	8004908 <LCD_GetMirrorXEx>
 8004ea6:	4680      	mov	r8, r0
 8004ea8:	69b8      	ldr	r0, [r7, #24]
 8004eaa:	f7ff fd30 	bl	800490e <LCD_GetMirrorYEx>
 8004eae:	4681      	mov	r9, r0
 8004eb0:	69b8      	ldr	r0, [r7, #24]
 8004eb2:	f7ff fd2f 	bl	8004914 <LCD_GetSwapXYEx>
 8004eb6:	0080      	lsls	r0, r0, #2
 8004eb8:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8004ebc:	ea40 0008 	orr.w	r0, r0, r8
 8004ec0:	2807      	cmp	r0, #7
 8004ec2:	d826      	bhi.n	8004f12 <_SetOrg+0x84>
 8004ec4:	e8df f000 	tbb	[pc, r0]
 8004ec8:	0b0f0408 	.word	0x0b0f0408
 8004ecc:	1b1f1519 	.word	0x1b1f1519
 8004ed0:	69a3      	ldr	r3, [r4, #24]
 8004ed2:	6921      	ldr	r1, [r4, #16]
 8004ed4:	1a59      	subs	r1, r3, r1
 8004ed6:	1b4d      	subs	r5, r1, r5
 8004ed8:	9500      	str	r5, [sp, #0]
 8004eda:	9601      	str	r6, [sp, #4]
 8004edc:	e019      	b.n	8004f12 <_SetOrg+0x84>
 8004ede:	69a3      	ldr	r3, [r4, #24]
 8004ee0:	6921      	ldr	r1, [r4, #16]
 8004ee2:	1a5b      	subs	r3, r3, r1
 8004ee4:	1b5d      	subs	r5, r3, r5
 8004ee6:	69e3      	ldr	r3, [r4, #28]
 8004ee8:	6962      	ldr	r2, [r4, #20]
 8004eea:	9500      	str	r5, [sp, #0]
 8004eec:	1a9a      	subs	r2, r3, r2
 8004eee:	1b96      	subs	r6, r2, r6
 8004ef0:	e7f3      	b.n	8004eda <_SetOrg+0x4c>
 8004ef2:	69e3      	ldr	r3, [r4, #28]
 8004ef4:	6962      	ldr	r2, [r4, #20]
 8004ef6:	1a9a      	subs	r2, r3, r2
 8004ef8:	1b96      	subs	r6, r2, r6
 8004efa:	9600      	str	r6, [sp, #0]
 8004efc:	e008      	b.n	8004f10 <_SetOrg+0x82>
 8004efe:	69e3      	ldr	r3, [r4, #28]
 8004f00:	6962      	ldr	r2, [r4, #20]
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	1b9e      	subs	r6, r3, r6
 8004f06:	69a3      	ldr	r3, [r4, #24]
 8004f08:	6921      	ldr	r1, [r4, #16]
 8004f0a:	9600      	str	r6, [sp, #0]
 8004f0c:	1a59      	subs	r1, r3, r1
 8004f0e:	1b4d      	subs	r5, r1, r5
 8004f10:	9501      	str	r5, [sp, #4]
 8004f12:	466a      	mov	r2, sp
 8004f14:	2103      	movs	r1, #3
 8004f16:	69b8      	ldr	r0, [r7, #24]
 8004f18:	f7fd ffb6 	bl	8002e88 <LCD_X_DisplayDriver>
 8004f1c:	b003      	add	sp, #12
 8004f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004f24 <_FillRect>:
 8004f24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	6885      	ldr	r5, [r0, #8]
 8004f2a:	469c      	mov	ip, r3
 8004f2c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8004f30:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8004f34:	4e6c      	ldr	r6, [pc, #432]	; (80050e8 <_FillRect+0x1c4>)
 8004f36:	f1b9 0f00 	cmp.w	r9, #0
 8004f3a:	d008      	beq.n	8004f4e <_FillRect+0x2a>
 8004f3c:	6834      	ldr	r4, [r6, #0]
 8004f3e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8004f40:	6824      	ldr	r4, [r4, #0]
 8004f42:	f8cd 8000 	str.w	r8, [sp]
 8004f46:	9401      	str	r4, [sp, #4]
 8004f48:	6980      	ldr	r0, [r0, #24]
 8004f4a:	47c8      	blx	r9
 8004f4c:	e0c8      	b.n	80050e0 <_FillRect+0x1bc>
 8004f4e:	f8d6 e000 	ldr.w	lr, [r6]
 8004f52:	0848      	lsrs	r0, r1, #1
 8004f54:	6a2e      	ldr	r6, [r5, #32]
 8004f56:	ebc1 0c0c 	rsb	ip, r1, ip
 8004f5a:	f001 0101 	and.w	r1, r1, #1
 8004f5e:	1076      	asrs	r6, r6, #1
 8004f60:	fb06 0302 	mla	r3, r6, r2, r0
 8004f64:	6828      	ldr	r0, [r5, #0]
 8004f66:	ebc2 0208 	rsb	r2, r2, r8
 8004f6a:	f10c 0501 	add.w	r5, ip, #1
 8004f6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004f72:	f89e 3010 	ldrb.w	r3, [lr, #16]
 8004f76:	1c57      	adds	r7, r2, #1
 8004f78:	f013 0f01 	tst.w	r3, #1
 8004f7c:	d03d      	beq.n	8004ffa <_FillRect+0xd6>
 8004f7e:	b181      	cbz	r1, 8004fa2 <_FillRect+0x7e>
 8004f80:	00b1      	lsls	r1, r6, #2
 8004f82:	463d      	mov	r5, r7
 8004f84:	4604      	mov	r4, r0
 8004f86:	b145      	cbz	r5, 8004f9a <_FillRect+0x76>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	3d01      	subs	r5, #1
 8004f8c:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	440c      	add	r4, r1
 8004f98:	e7f5      	b.n	8004f86 <_FillRect+0x62>
 8004f9a:	fb01 0107 	mla	r1, r1, r7, r0
 8004f9e:	4665      	mov	r5, ip
 8004fa0:	3004      	adds	r0, #4
 8004fa2:	2d01      	cmp	r5, #1
 8004fa4:	dd1b      	ble.n	8004fde <_FillRect+0xba>
 8004fa6:	1eab      	subs	r3, r5, #2
 8004fa8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8004fac:	463c      	mov	r4, r7
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	fb0e 0202 	mla	r2, lr, r2, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	b174      	cbz	r4, 8004fda <_FillRect+0xb6>
 8004fbc:	3c01      	subs	r4, #1
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	4694      	mov	ip, r2
 8004fc2:	f8dc 1000 	ldr.w	r1, [ip]
 8004fc6:	3802      	subs	r0, #2
 8004fc8:	43c9      	mvns	r1, r1
 8004fca:	2801      	cmp	r0, #1
 8004fcc:	f84c 1b04 	str.w	r1, [ip], #4
 8004fd0:	dcf7      	bgt.n	8004fc2 <_FillRect+0x9e>
 8004fd2:	18d0      	adds	r0, r2, r3
 8004fd4:	ebce 0202 	rsb	r2, lr, r2
 8004fd8:	e7ef      	b.n	8004fba <_FillRect+0x96>
 8004fda:	f005 0501 	and.w	r5, r5, #1
 8004fde:	2d01      	cmp	r5, #1
 8004fe0:	d17e      	bne.n	80050e0 <_FillRect+0x1bc>
 8004fe2:	00b6      	lsls	r6, r6, #2
 8004fe4:	2f00      	cmp	r7, #0
 8004fe6:	d07b      	beq.n	80050e0 <_FillRect+0x1bc>
 8004fe8:	6803      	ldr	r3, [r0, #0]
 8004fea:	3f01      	subs	r7, #1
 8004fec:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8004ff0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	4430      	add	r0, r6
 8004ff8:	e7f4      	b.n	8004fe4 <_FillRect+0xc0>
 8004ffa:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 8004ffe:	f8d3 e000 	ldr.w	lr, [r3]
 8005002:	ea4f 480e 	mov.w	r8, lr, lsl #16
 8005006:	b171      	cbz	r1, 8005026 <_FillRect+0x102>
 8005008:	00b1      	lsls	r1, r6, #2
 800500a:	463d      	mov	r5, r7
 800500c:	4604      	mov	r4, r0
 800500e:	b135      	cbz	r5, 800501e <_FillRect+0xfa>
 8005010:	8823      	ldrh	r3, [r4, #0]
 8005012:	3d01      	subs	r5, #1
 8005014:	ea43 0308 	orr.w	r3, r3, r8
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	440c      	add	r4, r1
 800501c:	e7f7      	b.n	800500e <_FillRect+0xea>
 800501e:	fb01 0107 	mla	r1, r1, r7, r0
 8005022:	4665      	mov	r5, ip
 8005024:	3004      	adds	r0, #4
 8005026:	2d0f      	cmp	r5, #15
 8005028:	eb08 030e 	add.w	r3, r8, lr
 800502c:	dd2f      	ble.n	800508e <_FillRect+0x16a>
 800502e:	f1a5 0910 	sub.w	r9, r5, #16
 8005032:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8005036:	46b8      	mov	r8, r7
 8005038:	ea4f 1419 	mov.w	r4, r9, lsr #4
 800503c:	fb0a 0c02 	mla	ip, sl, r2, r0
 8005040:	4608      	mov	r0, r1
 8005042:	3401      	adds	r4, #1
 8005044:	0164      	lsls	r4, r4, #5
 8005046:	f1b8 0f00 	cmp.w	r8, #0
 800504a:	d01d      	beq.n	8005088 <_FillRect+0x164>
 800504c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005050:	f10c 0120 	add.w	r1, ip, #32
 8005054:	4648      	mov	r0, r9
 8005056:	3810      	subs	r0, #16
 8005058:	f841 3c20 	str.w	r3, [r1, #-32]
 800505c:	f841 3c1c 	str.w	r3, [r1, #-28]
 8005060:	f101 0120 	add.w	r1, r1, #32
 8005064:	f841 3c38 	str.w	r3, [r1, #-56]
 8005068:	f841 3c34 	str.w	r3, [r1, #-52]
 800506c:	f841 3c30 	str.w	r3, [r1, #-48]
 8005070:	f841 3c2c 	str.w	r3, [r1, #-44]
 8005074:	f841 3c28 	str.w	r3, [r1, #-40]
 8005078:	f841 3c24 	str.w	r3, [r1, #-36]
 800507c:	d5eb      	bpl.n	8005056 <_FillRect+0x132>
 800507e:	eb0c 0004 	add.w	r0, ip, r4
 8005082:	ebca 0c0c 	rsb	ip, sl, ip
 8005086:	e7de      	b.n	8005046 <_FillRect+0x122>
 8005088:	f005 050f 	and.w	r5, r5, #15
 800508c:	4601      	mov	r1, r0
 800508e:	2d01      	cmp	r5, #1
 8005090:	dd1b      	ble.n	80050ca <_FillRect+0x1a6>
 8005092:	1eac      	subs	r4, r5, #2
 8005094:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8005098:	46b8      	mov	r8, r7
 800509a:	0864      	lsrs	r4, r4, #1
 800509c:	fb0c 0202 	mla	r2, ip, r2, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	3401      	adds	r4, #1
 80050a4:	00a4      	lsls	r4, r4, #2
 80050a6:	f1b8 0f00 	cmp.w	r8, #0
 80050aa:	d00c      	beq.n	80050c6 <_FillRect+0x1a2>
 80050ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80050b0:	4629      	mov	r1, r5
 80050b2:	4610      	mov	r0, r2
 80050b4:	3902      	subs	r1, #2
 80050b6:	f840 3b04 	str.w	r3, [r0], #4
 80050ba:	2901      	cmp	r1, #1
 80050bc:	dcfa      	bgt.n	80050b4 <_FillRect+0x190>
 80050be:	1910      	adds	r0, r2, r4
 80050c0:	ebcc 0202 	rsb	r2, ip, r2
 80050c4:	e7ef      	b.n	80050a6 <_FillRect+0x182>
 80050c6:	f005 0501 	and.w	r5, r5, #1
 80050ca:	2d01      	cmp	r5, #1
 80050cc:	d108      	bne.n	80050e0 <_FillRect+0x1bc>
 80050ce:	00b6      	lsls	r6, r6, #2
 80050d0:	b137      	cbz	r7, 80050e0 <_FillRect+0x1bc>
 80050d2:	8843      	ldrh	r3, [r0, #2]
 80050d4:	3f01      	subs	r7, #1
 80050d6:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 80050da:	6003      	str	r3, [r0, #0]
 80050dc:	4430      	add	r0, r6
 80050de:	e7f7      	b.n	80050d0 <_FillRect+0x1ac>
 80050e0:	b002      	add	sp, #8
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	bf00      	nop
 80050e8:	24000028 	.word	0x24000028

080050ec <_DrawHLine>:
 80050ec:	b507      	push	{r0, r1, r2, lr}
 80050ee:	9200      	str	r2, [sp, #0]
 80050f0:	f7ff ff18 	bl	8004f24 <_FillRect>
 80050f4:	b003      	add	sp, #12
 80050f6:	f85d fb04 	ldr.w	pc, [sp], #4

080050fa <_DrawVLine>:
 80050fa:	b507      	push	{r0, r1, r2, lr}
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	460b      	mov	r3, r1
 8005100:	f7ff ff10 	bl	8004f24 <_FillRect>
 8005104:	b003      	add	sp, #12
 8005106:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800510c <_DrawBitmap>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	b08b      	sub	sp, #44	; 0x2c
 8005112:	4683      	mov	fp, r0
 8005114:	4688      	mov	r8, r1
 8005116:	6887      	ldr	r7, [r0, #8]
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800511c:	9203      	str	r2, [sp, #12]
 800511e:	9304      	str	r3, [sp, #16]
 8005120:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005122:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005124:	9305      	str	r3, [sp, #20]
 8005126:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005128:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800512a:	9302      	str	r3, [sp, #8]
 800512c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800512e:	3b01      	subs	r3, #1
 8005130:	2b0f      	cmp	r3, #15
 8005132:	f200 82f3 	bhi.w	800571c <_DrawBitmap+0x610>
 8005136:	e8df f013 	tbh	[pc, r3, lsl #1]
 800513a:	0023      	.short	0x0023
 800513c:	02f10019 	.word	0x02f10019
 8005140:	02f10010 	.word	0x02f10010
 8005144:	02f102f1 	.word	0x02f102f1
 8005148:	02f10210 	.word	0x02f10210
 800514c:	02f102f1 	.word	0x02f102f1
 8005150:	02f102f1 	.word	0x02f102f1
 8005154:	02f102f1 	.word	0x02f102f1
 8005158:	02bd      	.short	0x02bd
 800515a:	2300      	movs	r3, #0
 800515c:	9a01      	ldr	r2, [sp, #4]
 800515e:	9306      	str	r3, [sp, #24]
 8005160:	9b02      	ldr	r3, [sp, #8]
 8005162:	18cb      	adds	r3, r1, r3
 8005164:	9308      	str	r3, [sp, #32]
 8005166:	4413      	add	r3, r2
 8005168:	9309      	str	r3, [sp, #36]	; 0x24
 800516a:	e169      	b.n	8005440 <_DrawBitmap+0x334>
 800516c:	2300      	movs	r3, #0
 800516e:	9306      	str	r3, [sp, #24]
 8005170:	9b02      	ldr	r3, [sp, #8]
 8005172:	18cb      	adds	r3, r1, r3
 8005174:	9308      	str	r3, [sp, #32]
 8005176:	9a08      	ldr	r2, [sp, #32]
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	4413      	add	r3, r2
 800517c:	9309      	str	r3, [sp, #36]	; 0x24
 800517e:	e0bc      	b.n	80052fa <_DrawBitmap+0x1ee>
 8005180:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8005182:	b126      	cbz	r6, 800518e <_DrawBitmap+0x82>
 8005184:	4ba3      	ldr	r3, [pc, #652]	; (8005414 <_DrawBitmap+0x308>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	7c1b      	ldrb	r3, [r3, #16]
 800518a:	07d9      	lsls	r1, r3, #31
 800518c:	d502      	bpl.n	8005194 <_DrawBitmap+0x88>
 800518e:	f04f 0900 	mov.w	r9, #0
 8005192:	e061      	b.n	8005258 <_DrawBitmap+0x14c>
 8005194:	9b05      	ldr	r3, [sp, #20]
 8005196:	4641      	mov	r1, r8
 8005198:	9518      	str	r5, [sp, #96]	; 0x60
 800519a:	46b4      	mov	ip, r6
 800519c:	9317      	str	r3, [sp, #92]	; 0x5c
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	9a03      	ldr	r2, [sp, #12]
 80051a2:	9316      	str	r3, [sp, #88]	; 0x58
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	9315      	str	r3, [sp, #84]	; 0x54
 80051a8:	9b02      	ldr	r3, [sp, #8]
 80051aa:	9314      	str	r3, [sp, #80]	; 0x50
 80051ac:	4623      	mov	r3, r4
 80051ae:	6980      	ldr	r0, [r0, #24]
 80051b0:	b00b      	add	sp, #44	; 0x2c
 80051b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	4760      	bx	ip
 80051b8:	686b      	ldr	r3, [r5, #4]
 80051ba:	f8db a008 	ldr.w	sl, [fp, #8]
 80051be:	9307      	str	r3, [sp, #28]
 80051c0:	9902      	ldr	r1, [sp, #8]
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	f8da 2020 	ldr.w	r2, [sl, #32]
 80051c8:	4441      	add	r1, r8
 80051ca:	444b      	add	r3, r9
 80051cc:	fb02 1303 	mla	r3, r2, r3, r1
 80051d0:	9a02      	ldr	r2, [sp, #8]
 80051d2:	4991      	ldr	r1, [pc, #580]	; (8005418 <_DrawBitmap+0x30c>)
 80051d4:	f1c2 0708 	rsb	r7, r2, #8
 80051d8:	7822      	ldrb	r2, [r4, #0]
 80051da:	5c8e      	ldrb	r6, [r1, r2]
 80051dc:	0059      	lsls	r1, r3, #1
 80051de:	9a02      	ldr	r2, [sp, #8]
 80051e0:	4116      	asrs	r6, r2
 80051e2:	4a8c      	ldr	r2, [pc, #560]	; (8005414 <_DrawBitmap+0x308>)
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	7c12      	ldrb	r2, [r2, #16]
 80051e8:	f002 0203 	and.w	r2, r2, #3
 80051ec:	2a02      	cmp	r2, #2
 80051ee:	d037      	beq.n	8005260 <_DrawBitmap+0x154>
 80051f0:	2a03      	cmp	r2, #3
 80051f2:	d04e      	beq.n	8005292 <_DrawBitmap+0x186>
 80051f4:	2a01      	cmp	r2, #1
 80051f6:	d04c      	beq.n	8005292 <_DrawBitmap+0x186>
 80051f8:	682a      	ldr	r2, [r5, #0]
 80051fa:	9901      	ldr	r1, [sp, #4]
 80051fc:	9208      	str	r2, [sp, #32]
 80051fe:	f8da 2000 	ldr.w	r2, [sl]
 8005202:	9406      	str	r4, [sp, #24]
 8005204:	9209      	str	r2, [sp, #36]	; 0x24
 8005206:	42b9      	cmp	r1, r7
 8005208:	460a      	mov	r2, r1
 800520a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800520c:	bf28      	it	cs
 800520e:	463a      	movcs	r2, r7
 8005210:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 8005214:	4696      	mov	lr, r2
 8005216:	9808      	ldr	r0, [sp, #32]
 8005218:	f016 0f01 	tst.w	r6, #1
 800521c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005220:	4682      	mov	sl, r0
 8005222:	9807      	ldr	r0, [sp, #28]
 8005224:	bf18      	it	ne
 8005226:	4682      	movne	sl, r0
 8005228:	f1be 0e01 	subs.w	lr, lr, #1
 800522c:	f82c ab02 	strh.w	sl, [ip], #2
 8005230:	d1f1      	bne.n	8005216 <_DrawBitmap+0x10a>
 8005232:	1abf      	subs	r7, r7, r2
 8005234:	4413      	add	r3, r2
 8005236:	eba1 0102 	sub.w	r1, r1, r2
 800523a:	d107      	bne.n	800524c <_DrawBitmap+0x140>
 800523c:	9a06      	ldr	r2, [sp, #24]
 800523e:	2708      	movs	r7, #8
 8005240:	4875      	ldr	r0, [pc, #468]	; (8005418 <_DrawBitmap+0x30c>)
 8005242:	7852      	ldrb	r2, [r2, #1]
 8005244:	5c86      	ldrb	r6, [r0, r2]
 8005246:	9a06      	ldr	r2, [sp, #24]
 8005248:	3201      	adds	r2, #1
 800524a:	9206      	str	r2, [sp, #24]
 800524c:	2900      	cmp	r1, #0
 800524e:	d1da      	bne.n	8005206 <_DrawBitmap+0xfa>
 8005250:	9b05      	ldr	r3, [sp, #20]
 8005252:	f109 0901 	add.w	r9, r9, #1
 8005256:	441c      	add	r4, r3
 8005258:	9b04      	ldr	r3, [sp, #16]
 800525a:	4599      	cmp	r9, r3
 800525c:	dbac      	blt.n	80051b8 <_DrawBitmap+0xac>
 800525e:	e25d      	b.n	800571c <_DrawBitmap+0x610>
 8005260:	460b      	mov	r3, r1
 8005262:	4620      	mov	r0, r4
 8005264:	9901      	ldr	r1, [sp, #4]
 8005266:	07f2      	lsls	r2, r6, #31
 8005268:	bf42      	ittt	mi
 800526a:	f8da 2000 	ldrmi.w	r2, [sl]
 800526e:	f8bd e01c 	ldrhmi.w	lr, [sp, #28]
 8005272:	f822 e003 	strhmi.w	lr, [r2, r3]
 8005276:	3f01      	subs	r7, #1
 8005278:	f103 0302 	add.w	r3, r3, #2
 800527c:	bf09      	itett	eq
 800527e:	7842      	ldrbeq	r2, [r0, #1]
 8005280:	0876      	lsrne	r6, r6, #1
 8005282:	4e65      	ldreq	r6, [pc, #404]	; (8005418 <_DrawBitmap+0x30c>)
 8005284:	3001      	addeq	r0, #1
 8005286:	bf04      	itt	eq
 8005288:	2708      	moveq	r7, #8
 800528a:	5cb6      	ldrbeq	r6, [r6, r2]
 800528c:	3901      	subs	r1, #1
 800528e:	d1ea      	bne.n	8005266 <_DrawBitmap+0x15a>
 8005290:	e7de      	b.n	8005250 <_DrawBitmap+0x144>
 8005292:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005296:	9106      	str	r1, [sp, #24]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4798      	blx	r3
 800529c:	9906      	ldr	r1, [sp, #24]
 800529e:	9a01      	ldr	r2, [sp, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	4621      	mov	r1, r4
 80052a4:	f016 0f01 	tst.w	r6, #1
 80052a8:	bf1f      	itttt	ne
 80052aa:	f8da c000 	ldrne.w	ip, [sl]
 80052ae:	f833 e00c 	ldrhne.w	lr, [r3, ip]
 80052b2:	ea80 0e0e 	eorne.w	lr, r0, lr
 80052b6:	f823 e00c 	strhne.w	lr, [r3, ip]
 80052ba:	3f01      	subs	r7, #1
 80052bc:	f103 0302 	add.w	r3, r3, #2
 80052c0:	bf09      	itett	eq
 80052c2:	784e      	ldrbeq	r6, [r1, #1]
 80052c4:	0876      	lsrne	r6, r6, #1
 80052c6:	4f54      	ldreq	r7, [pc, #336]	; (8005418 <_DrawBitmap+0x30c>)
 80052c8:	3101      	addeq	r1, #1
 80052ca:	bf04      	itt	eq
 80052cc:	5dbe      	ldrbeq	r6, [r7, r6]
 80052ce:	2708      	moveq	r7, #8
 80052d0:	3a01      	subs	r2, #1
 80052d2:	d1e7      	bne.n	80052a4 <_DrawBitmap+0x198>
 80052d4:	e7bc      	b.n	8005250 <_DrawBitmap+0x144>
 80052d6:	9b06      	ldr	r3, [sp, #24]
 80052d8:	9a03      	ldr	r2, [sp, #12]
 80052da:	7826      	ldrb	r6, [r4, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	4b4c      	ldr	r3, [pc, #304]	; (8005414 <_DrawBitmap+0x308>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	7c1b      	ldrb	r3, [r3, #16]
 80052e6:	f013 0303 	ands.w	r3, r3, #3
 80052ea:	d00b      	beq.n	8005304 <_DrawBitmap+0x1f8>
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d04c      	beq.n	800538a <_DrawBitmap+0x27e>
 80052f0:	9b05      	ldr	r3, [sp, #20]
 80052f2:	441c      	add	r4, r3
 80052f4:	9b06      	ldr	r3, [sp, #24]
 80052f6:	3301      	adds	r3, #1
 80052f8:	9306      	str	r3, [sp, #24]
 80052fa:	9b06      	ldr	r3, [sp, #24]
 80052fc:	9a04      	ldr	r2, [sp, #16]
 80052fe:	4293      	cmp	r3, r2
 8005300:	dbe9      	blt.n	80052d6 <_DrawBitmap+0x1ca>
 8005302:	e20b      	b.n	800571c <_DrawBitmap+0x610>
 8005304:	9f02      	ldr	r7, [sp, #8]
 8005306:	46a0      	mov	r8, r4
 8005308:	9908      	ldr	r1, [sp, #32]
 800530a:	b305      	cbz	r5, 800534e <_DrawBitmap+0x242>
 800530c:	9a01      	ldr	r2, [sp, #4]
 800530e:	eb01 0902 	add.w	r9, r1, r2
 8005312:	f1c7 0303 	rsb	r3, r7, #3
 8005316:	20c0      	movs	r0, #192	; 0xc0
 8005318:	3701      	adds	r7, #1
 800531a:	f101 0a01 	add.w	sl, r1, #1
 800531e:	005a      	lsls	r2, r3, #1
 8005320:	f1c2 0306 	rsb	r3, r2, #6
 8005324:	fa40 f303 	asr.w	r3, r0, r3
 8005328:	4658      	mov	r0, fp
 800532a:	4033      	ands	r3, r6
 800532c:	40d3      	lsrs	r3, r2
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005334:	f7ff fc97 	bl	8004c66 <_SetPixelIndex>
 8005338:	2f04      	cmp	r7, #4
 800533a:	4651      	mov	r1, sl
 800533c:	bf02      	ittt	eq
 800533e:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8005342:	2700      	moveq	r7, #0
 8005344:	f108 0801 	addeq.w	r8, r8, #1
 8005348:	45ca      	cmp	sl, r9
 800534a:	d1e2      	bne.n	8005312 <_DrawBitmap+0x206>
 800534c:	e7d0      	b.n	80052f0 <_DrawBitmap+0x1e4>
 800534e:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8005352:	f1c7 0203 	rsb	r2, r7, #3
 8005356:	3701      	adds	r7, #1
 8005358:	4658      	mov	r0, fp
 800535a:	f101 0901 	add.w	r9, r1, #1
 800535e:	0052      	lsls	r2, r2, #1
 8005360:	f1c2 0306 	rsb	r3, r2, #6
 8005364:	fa4a f303 	asr.w	r3, sl, r3
 8005368:	4033      	ands	r3, r6
 800536a:	40d3      	lsrs	r3, r2
 800536c:	9a07      	ldr	r2, [sp, #28]
 800536e:	f7ff fc7a 	bl	8004c66 <_SetPixelIndex>
 8005372:	2f04      	cmp	r7, #4
 8005374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005376:	4649      	mov	r1, r9
 8005378:	bf02      	ittt	eq
 800537a:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 800537e:	2700      	moveq	r7, #0
 8005380:	f108 0801 	addeq.w	r8, r8, #1
 8005384:	4599      	cmp	r9, r3
 8005386:	d1e4      	bne.n	8005352 <_DrawBitmap+0x246>
 8005388:	e7b2      	b.n	80052f0 <_DrawBitmap+0x1e4>
 800538a:	9f02      	ldr	r7, [sp, #8]
 800538c:	46a1      	mov	r9, r4
 800538e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005392:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8005396:	b355      	cbz	r5, 80053ee <_DrawBitmap+0x2e2>
 8005398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539a:	ebc8 0103 	rsb	r1, r8, r3
 800539e:	f1c7 0303 	rsb	r3, r7, #3
 80053a2:	0058      	lsls	r0, r3, #1
 80053a4:	f1c0 0206 	rsb	r2, r0, #6
 80053a8:	fa4a f202 	asr.w	r2, sl, r2
 80053ac:	ea02 0306 	and.w	r3, r2, r6
 80053b0:	40c3      	lsrs	r3, r0
 80053b2:	d005      	beq.n	80053c0 <_DrawBitmap+0x2b4>
 80053b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80053b8:	4658      	mov	r0, fp
 80053ba:	9a07      	ldr	r2, [sp, #28]
 80053bc:	f7ff fc53 	bl	8004c66 <_SetPixelIndex>
 80053c0:	3701      	adds	r7, #1
 80053c2:	2f04      	cmp	r7, #4
 80053c4:	bf02      	ittt	eq
 80053c6:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 80053ca:	2700      	moveq	r7, #0
 80053cc:	f109 0901 	addeq.w	r9, r9, #1
 80053d0:	f1b8 0801 	subs.w	r8, r8, #1
 80053d4:	d1e0      	bne.n	8005398 <_DrawBitmap+0x28c>
 80053d6:	e78b      	b.n	80052f0 <_DrawBitmap+0x1e4>
 80053d8:	3701      	adds	r7, #1
 80053da:	2f04      	cmp	r7, #4
 80053dc:	bf02      	ittt	eq
 80053de:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 80053e2:	2700      	moveq	r7, #0
 80053e4:	f109 0901 	addeq.w	r9, r9, #1
 80053e8:	f1b8 0801 	subs.w	r8, r8, #1
 80053ec:	d080      	beq.n	80052f0 <_DrawBitmap+0x1e4>
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	ebc8 0103 	rsb	r1, r8, r3
 80053f4:	f1c7 0303 	rsb	r3, r7, #3
 80053f8:	0058      	lsls	r0, r3, #1
 80053fa:	f1c0 0206 	rsb	r2, r0, #6
 80053fe:	fa4a f202 	asr.w	r2, sl, r2
 8005402:	ea02 0306 	and.w	r3, r2, r6
 8005406:	40c3      	lsrs	r3, r0
 8005408:	d0e6      	beq.n	80053d8 <_DrawBitmap+0x2cc>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4658      	mov	r0, fp
 800540e:	f7ff fc2a 	bl	8004c66 <_SetPixelIndex>
 8005412:	e7e1      	b.n	80053d8 <_DrawBitmap+0x2cc>
 8005414:	24000028 	.word	0x24000028
 8005418:	0800c798 	.word	0x0800c798
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	9a06      	ldr	r2, [sp, #24]
 8005420:	7826      	ldrb	r6, [r4, #0]
 8005422:	4413      	add	r3, r2
 8005424:	9307      	str	r3, [sp, #28]
 8005426:	4bbb      	ldr	r3, [pc, #748]	; (8005714 <_DrawBitmap+0x608>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	7c1b      	ldrb	r3, [r3, #16]
 800542c:	f013 0303 	ands.w	r3, r3, #3
 8005430:	d00b      	beq.n	800544a <_DrawBitmap+0x33e>
 8005432:	2b02      	cmp	r3, #2
 8005434:	d049      	beq.n	80054ca <_DrawBitmap+0x3be>
 8005436:	9b05      	ldr	r3, [sp, #20]
 8005438:	441c      	add	r4, r3
 800543a:	9b06      	ldr	r3, [sp, #24]
 800543c:	3301      	adds	r3, #1
 800543e:	9306      	str	r3, [sp, #24]
 8005440:	9b06      	ldr	r3, [sp, #24]
 8005442:	9a04      	ldr	r2, [sp, #16]
 8005444:	4293      	cmp	r3, r2
 8005446:	dbe9      	blt.n	800541c <_DrawBitmap+0x310>
 8005448:	e168      	b.n	800571c <_DrawBitmap+0x610>
 800544a:	9f02      	ldr	r7, [sp, #8]
 800544c:	46a0      	mov	r8, r4
 800544e:	9908      	ldr	r1, [sp, #32]
 8005450:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8005454:	b1ed      	cbz	r5, 8005492 <_DrawBitmap+0x386>
 8005456:	f1c7 0301 	rsb	r3, r7, #1
 800545a:	3701      	adds	r7, #1
 800545c:	4658      	mov	r0, fp
 800545e:	f101 0901 	add.w	r9, r1, #1
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	f1c2 0304 	rsb	r3, r2, #4
 8005468:	fa4a f303 	asr.w	r3, sl, r3
 800546c:	4033      	ands	r3, r6
 800546e:	40d3      	lsrs	r3, r2
 8005470:	9a07      	ldr	r2, [sp, #28]
 8005472:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005476:	f7ff fbf6 	bl	8004c66 <_SetPixelIndex>
 800547a:	2f02      	cmp	r7, #2
 800547c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547e:	4649      	mov	r1, r9
 8005480:	bf02      	ittt	eq
 8005482:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8005486:	2700      	moveq	r7, #0
 8005488:	f108 0801 	addeq.w	r8, r8, #1
 800548c:	4599      	cmp	r9, r3
 800548e:	d1e2      	bne.n	8005456 <_DrawBitmap+0x34a>
 8005490:	e7d1      	b.n	8005436 <_DrawBitmap+0x32a>
 8005492:	f1c7 0201 	rsb	r2, r7, #1
 8005496:	3701      	adds	r7, #1
 8005498:	4658      	mov	r0, fp
 800549a:	f101 0901 	add.w	r9, r1, #1
 800549e:	0092      	lsls	r2, r2, #2
 80054a0:	f1c2 0304 	rsb	r3, r2, #4
 80054a4:	fa4a f303 	asr.w	r3, sl, r3
 80054a8:	4033      	ands	r3, r6
 80054aa:	40d3      	lsrs	r3, r2
 80054ac:	9a07      	ldr	r2, [sp, #28]
 80054ae:	f7ff fbda 	bl	8004c66 <_SetPixelIndex>
 80054b2:	2f02      	cmp	r7, #2
 80054b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b6:	4649      	mov	r1, r9
 80054b8:	bf02      	ittt	eq
 80054ba:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 80054be:	2700      	moveq	r7, #0
 80054c0:	f108 0801 	addeq.w	r8, r8, #1
 80054c4:	4599      	cmp	r9, r3
 80054c6:	d1e4      	bne.n	8005492 <_DrawBitmap+0x386>
 80054c8:	e7b5      	b.n	8005436 <_DrawBitmap+0x32a>
 80054ca:	9f02      	ldr	r7, [sp, #8]
 80054cc:	46a1      	mov	r9, r4
 80054ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80054d2:	b315      	cbz	r5, 800551a <_DrawBitmap+0x40e>
 80054d4:	9a08      	ldr	r2, [sp, #32]
 80054d6:	eb08 0a02 	add.w	sl, r8, r2
 80054da:	f1c7 0301 	rsb	r3, r7, #1
 80054de:	ebc8 010a 	rsb	r1, r8, sl
 80054e2:	0098      	lsls	r0, r3, #2
 80054e4:	23f0      	movs	r3, #240	; 0xf0
 80054e6:	f1c0 0204 	rsb	r2, r0, #4
 80054ea:	fa43 f202 	asr.w	r2, r3, r2
 80054ee:	ea02 0306 	and.w	r3, r2, r6
 80054f2:	40c3      	lsrs	r3, r0
 80054f4:	d005      	beq.n	8005502 <_DrawBitmap+0x3f6>
 80054f6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80054fa:	4658      	mov	r0, fp
 80054fc:	9a07      	ldr	r2, [sp, #28]
 80054fe:	f7ff fbb2 	bl	8004c66 <_SetPixelIndex>
 8005502:	3701      	adds	r7, #1
 8005504:	2f02      	cmp	r7, #2
 8005506:	bf02      	ittt	eq
 8005508:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 800550c:	2700      	moveq	r7, #0
 800550e:	f109 0901 	addeq.w	r9, r9, #1
 8005512:	f1b8 0801 	subs.w	r8, r8, #1
 8005516:	d1e0      	bne.n	80054da <_DrawBitmap+0x3ce>
 8005518:	e78d      	b.n	8005436 <_DrawBitmap+0x32a>
 800551a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005520:	ebc8 0103 	rsb	r1, r8, r3
 8005524:	f1c7 0301 	rsb	r3, r7, #1
 8005528:	0098      	lsls	r0, r3, #2
 800552a:	f1c0 0204 	rsb	r2, r0, #4
 800552e:	fa4a f202 	asr.w	r2, sl, r2
 8005532:	ea02 0306 	and.w	r3, r2, r6
 8005536:	40c3      	lsrs	r3, r0
 8005538:	d003      	beq.n	8005542 <_DrawBitmap+0x436>
 800553a:	9a07      	ldr	r2, [sp, #28]
 800553c:	4658      	mov	r0, fp
 800553e:	f7ff fb92 	bl	8004c66 <_SetPixelIndex>
 8005542:	3701      	adds	r7, #1
 8005544:	2f02      	cmp	r7, #2
 8005546:	bf02      	ittt	eq
 8005548:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 800554c:	2700      	moveq	r7, #0
 800554e:	f109 0901 	addeq.w	r9, r9, #1
 8005552:	f1b8 0801 	subs.w	r8, r8, #1
 8005556:	d1e2      	bne.n	800551e <_DrawBitmap+0x412>
 8005558:	e76d      	b.n	8005436 <_DrawBitmap+0x32a>
 800555a:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800555c:	4b6d      	ldr	r3, [pc, #436]	; (8005714 <_DrawBitmap+0x608>)
 800555e:	b926      	cbnz	r6, 800556a <_DrawBitmap+0x45e>
 8005560:	f8d3 c000 	ldr.w	ip, [r3]
 8005564:	f04f 0e00 	mov.w	lr, #0
 8005568:	e019      	b.n	800559e <_DrawBitmap+0x492>
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	7c12      	ldrb	r2, [r2, #16]
 800556e:	0792      	lsls	r2, r2, #30
 8005570:	d4f6      	bmi.n	8005560 <_DrawBitmap+0x454>
 8005572:	2d00      	cmp	r5, #0
 8005574:	d0f4      	beq.n	8005560 <_DrawBitmap+0x454>
 8005576:	9b05      	ldr	r3, [sp, #20]
 8005578:	46b4      	mov	ip, r6
 800557a:	9517      	str	r5, [sp, #92]	; 0x5c
 800557c:	9316      	str	r3, [sp, #88]	; 0x58
 800557e:	9b04      	ldr	r3, [sp, #16]
 8005580:	9a03      	ldr	r2, [sp, #12]
 8005582:	9315      	str	r3, [sp, #84]	; 0x54
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	9314      	str	r3, [sp, #80]	; 0x50
 8005588:	4623      	mov	r3, r4
 800558a:	6980      	ldr	r0, [r0, #24]
 800558c:	b00b      	add	sp, #44	; 0x2c
 800558e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005592:	4760      	bx	ip
 8005594:	b93d      	cbnz	r5, 80055a6 <_DrawBitmap+0x49a>
 8005596:	9b05      	ldr	r3, [sp, #20]
 8005598:	f10e 0e01 	add.w	lr, lr, #1
 800559c:	441c      	add	r4, r3
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	459e      	cmp	lr, r3
 80055a2:	dbf7      	blt.n	8005594 <_DrawBitmap+0x488>
 80055a4:	e0ba      	b.n	800571c <_DrawBitmap+0x610>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	4473      	add	r3, lr
 80055ac:	fb02 8303 	mla	r3, r2, r3, r8
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80055b6:	f89c 2010 	ldrb.w	r2, [ip, #16]
 80055ba:	f012 0203 	ands.w	r2, r2, #3
 80055be:	d003      	beq.n	80055c8 <_DrawBitmap+0x4bc>
 80055c0:	2a02      	cmp	r2, #2
 80055c2:	d1e8      	bne.n	8005596 <_DrawBitmap+0x48a>
 80055c4:	2200      	movs	r2, #0
 80055c6:	e070      	b.n	80056aa <_DrawBitmap+0x59e>
 80055c8:	4621      	mov	r1, r4
 80055ca:	9a01      	ldr	r2, [sp, #4]
 80055cc:	2a07      	cmp	r2, #7
 80055ce:	f101 0608 	add.w	r6, r1, #8
 80055d2:	f103 0010 	add.w	r0, r3, #16
 80055d6:	dd33      	ble.n	8005640 <_DrawBitmap+0x534>
 80055d8:	f816 3c08 	ldrb.w	r3, [r6, #-8]
 80055dc:	3a08      	subs	r2, #8
 80055de:	4631      	mov	r1, r6
 80055e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055e4:	f820 3c10 	strh.w	r3, [r0, #-16]
 80055e8:	f816 3c07 	ldrb.w	r3, [r6, #-7]
 80055ec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055f0:	f820 3c0e 	strh.w	r3, [r0, #-14]
 80055f4:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 80055f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80055fc:	f820 3c0c 	strh.w	r3, [r0, #-12]
 8005600:	f816 3c05 	ldrb.w	r3, [r6, #-5]
 8005604:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005608:	f820 3c0a 	strh.w	r3, [r0, #-10]
 800560c:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8005610:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005614:	f820 3c08 	strh.w	r3, [r0, #-8]
 8005618:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 800561c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005620:	f820 3c06 	strh.w	r3, [r0, #-6]
 8005624:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 8005628:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800562c:	f820 3c04 	strh.w	r3, [r0, #-4]
 8005630:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005634:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005638:	f820 3c02 	strh.w	r3, [r0, #-2]
 800563c:	4603      	mov	r3, r0
 800563e:	e7c5      	b.n	80055cc <_DrawBitmap+0x4c0>
 8005640:	2a03      	cmp	r2, #3
 8005642:	4618      	mov	r0, r3
 8005644:	460e      	mov	r6, r1
 8005646:	f103 0308 	add.w	r3, r3, #8
 800564a:	f101 0104 	add.w	r1, r1, #4
 800564e:	dd19      	ble.n	8005684 <_DrawBitmap+0x578>
 8005650:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8005654:	3a04      	subs	r2, #4
 8005656:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800565a:	f823 0c08 	strh.w	r0, [r3, #-8]
 800565e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8005662:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8005666:	f823 0c06 	strh.w	r0, [r3, #-6]
 800566a:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800566e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8005672:	f823 0c04 	strh.w	r0, [r3, #-4]
 8005676:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800567a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800567e:	f823 0c02 	strh.w	r0, [r3, #-2]
 8005682:	e7dd      	b.n	8005640 <_DrawBitmap+0x534>
 8005684:	3e01      	subs	r6, #1
 8005686:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800568a:	4282      	cmp	r2, r0
 800568c:	d083      	beq.n	8005596 <_DrawBitmap+0x48a>
 800568e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005692:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005696:	f820 3b02 	strh.w	r3, [r0], #2
 800569a:	e7f6      	b.n	800568a <_DrawBitmap+0x57e>
 800569c:	5ca1      	ldrb	r1, [r4, r2]
 800569e:	b119      	cbz	r1, 80056a8 <_DrawBitmap+0x59c>
 80056a0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80056a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80056a8:	3201      	adds	r2, #1
 80056aa:	9901      	ldr	r1, [sp, #4]
 80056ac:	1a89      	subs	r1, r1, r2
 80056ae:	2900      	cmp	r1, #0
 80056b0:	dcf4      	bgt.n	800569c <_DrawBitmap+0x590>
 80056b2:	e770      	b.n	8005596 <_DrawBitmap+0x48a>
 80056b4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80056b6:	b925      	cbnz	r5, 80056c2 <_DrawBitmap+0x5b6>
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	2600      	movs	r6, #0
 80056bc:	4f16      	ldr	r7, [pc, #88]	; (8005718 <_DrawBitmap+0x60c>)
 80056be:	005d      	lsls	r5, r3, #1
 80056c0:	e012      	b.n	80056e8 <_DrawBitmap+0x5dc>
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <_DrawBitmap+0x608>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	7c1b      	ldrb	r3, [r3, #16]
 80056c8:	07db      	lsls	r3, r3, #31
 80056ca:	d4f5      	bmi.n	80056b8 <_DrawBitmap+0x5ac>
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	46ac      	mov	ip, r5
 80056d0:	9a03      	ldr	r2, [sp, #12]
 80056d2:	9316      	str	r3, [sp, #88]	; 0x58
 80056d4:	9b04      	ldr	r3, [sp, #16]
 80056d6:	9315      	str	r3, [sp, #84]	; 0x54
 80056d8:	9b01      	ldr	r3, [sp, #4]
 80056da:	9314      	str	r3, [sp, #80]	; 0x50
 80056dc:	4623      	mov	r3, r4
 80056de:	6980      	ldr	r0, [r0, #24]
 80056e0:	b00b      	add	sp, #44	; 0x2c
 80056e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	4760      	bx	ip
 80056e8:	9b04      	ldr	r3, [sp, #16]
 80056ea:	429e      	cmp	r6, r3
 80056ec:	da16      	bge.n	800571c <_DrawBitmap+0x610>
 80056ee:	f8db 2008 	ldr.w	r2, [fp, #8]
 80056f2:	4621      	mov	r1, r4
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	18f0      	adds	r0, r6, r3
 80056f8:	6a13      	ldr	r3, [r2, #32]
 80056fa:	3601      	adds	r6, #1
 80056fc:	fb03 8300 	mla	r3, r3, r0, r8
 8005700:	6810      	ldr	r0, [r2, #0]
 8005702:	462a      	mov	r2, r5
 8005704:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4798      	blx	r3
 800570c:	9b05      	ldr	r3, [sp, #20]
 800570e:	441c      	add	r4, r3
 8005710:	e7ea      	b.n	80056e8 <_DrawBitmap+0x5dc>
 8005712:	bf00      	nop
 8005714:	24000028 	.word	0x24000028
 8005718:	2400002c 	.word	0x2400002c
 800571c:	b00b      	add	sp, #44	; 0x2c
 800571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005722:	bf00      	nop

08005724 <_InitOnce.isra.3>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	6805      	ldr	r5, [r0, #0]
 8005728:	4604      	mov	r4, r0
 800572a:	b93d      	cbnz	r5, 800573c <_InitOnce.isra.3+0x18>
 800572c:	2050      	movs	r0, #80	; 0x50
 800572e:	f7fd fe9d 	bl	800346c <GUI_ALLOC_GetFixedBlock>
 8005732:	2250      	movs	r2, #80	; 0x50
 8005734:	6020      	str	r0, [r4, #0]
 8005736:	4629      	mov	r1, r5
 8005738:	f7fe fc46 	bl	8003fc8 <GUI__memset>
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	fab0 f080 	clz	r0, r0
 8005742:	0940      	lsrs	r0, r0, #5
 8005744:	bd38      	pop	{r3, r4, r5, pc}

08005746 <_SetDevFunc>:
 8005746:	b570      	push	{r4, r5, r6, lr}
 8005748:	4606      	mov	r6, r0
 800574a:	3008      	adds	r0, #8
 800574c:	460d      	mov	r5, r1
 800574e:	4614      	mov	r4, r2
 8005750:	f7ff ffe8 	bl	8005724 <_InitOnce.isra.3>
 8005754:	68b3      	ldr	r3, [r6, #8]
 8005756:	b1db      	cbz	r3, 8005790 <_SetDevFunc+0x4a>
 8005758:	2d21      	cmp	r5, #33	; 0x21
 800575a:	d012      	beq.n	8005782 <_SetDevFunc+0x3c>
 800575c:	dc07      	bgt.n	800576e <_SetDevFunc+0x28>
 800575e:	2d19      	cmp	r5, #25
 8005760:	d00d      	beq.n	800577e <_SetDevFunc+0x38>
 8005762:	2d20      	cmp	r5, #32
 8005764:	d00f      	beq.n	8005786 <_SetDevFunc+0x40>
 8005766:	2d03      	cmp	r5, #3
 8005768:	d112      	bne.n	8005790 <_SetDevFunc+0x4a>
 800576a:	649c      	str	r4, [r3, #72]	; 0x48
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	2d24      	cmp	r5, #36	; 0x24
 8005770:	d00d      	beq.n	800578e <_SetDevFunc+0x48>
 8005772:	2d25      	cmp	r5, #37	; 0x25
 8005774:	d009      	beq.n	800578a <_SetDevFunc+0x44>
 8005776:	2d23      	cmp	r5, #35	; 0x23
 8005778:	d10a      	bne.n	8005790 <_SetDevFunc+0x4a>
 800577a:	645c      	str	r4, [r3, #68]	; 0x44
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	635c      	str	r4, [r3, #52]	; 0x34
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	639c      	str	r4, [r3, #56]	; 0x38
 8005784:	bd70      	pop	{r4, r5, r6, pc}
 8005786:	63dc      	str	r4, [r3, #60]	; 0x3c
 8005788:	bd70      	pop	{r4, r5, r6, pc}
 800578a:	641c      	str	r4, [r3, #64]	; 0x40
 800578c:	bd70      	pop	{r4, r5, r6, pc}
 800578e:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005790:	bd70      	pop	{r4, r5, r6, pc}
	...

08005794 <_CopyBuffer>:
 8005794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005798:	4606      	mov	r6, r0
 800579a:	3008      	adds	r0, #8
 800579c:	460f      	mov	r7, r1
 800579e:	4690      	mov	r8, r2
 80057a0:	f7ff ffc0 	bl	8005724 <_InitOnce.isra.3>
 80057a4:	68b4      	ldr	r4, [r6, #8]
 80057a6:	b31c      	cbz	r4, 80057f0 <_CopyBuffer+0x5c>
 80057a8:	4547      	cmp	r7, r8
 80057aa:	d021      	beq.n	80057f0 <_CopyBuffer+0x5c>
 80057ac:	68f3      	ldr	r3, [r6, #12]
 80057ae:	2108      	movs	r1, #8
 80057b0:	4630      	mov	r0, r6
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	4798      	blx	r3
 80057b6:	69a2      	ldr	r2, [r4, #24]
 80057b8:	6963      	ldr	r3, [r4, #20]
 80057ba:	4353      	muls	r3, r2
 80057bc:	4358      	muls	r0, r3
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	08c2      	lsrs	r2, r0, #3
 80057c2:	b123      	cbz	r3, 80057ce <_CopyBuffer+0x3a>
 80057c4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80057c8:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 80057cc:	e004      	b.n	80057d8 <_CopyBuffer+0x44>
 80057ce:	6865      	ldr	r5, [r4, #4]
 80057d0:	fb02 5107 	mla	r1, r2, r7, r5
 80057d4:	fb02 5508 	mla	r5, r2, r8, r5
 80057d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057da:	b123      	cbz	r3, 80057e6 <_CopyBuffer+0x52>
 80057dc:	4642      	mov	r2, r8
 80057de:	4639      	mov	r1, r7
 80057e0:	69b0      	ldr	r0, [r6, #24]
 80057e2:	4798      	blx	r3
 80057e4:	e003      	b.n	80057ee <_CopyBuffer+0x5a>
 80057e6:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <_CopyBuffer+0x60>)
 80057e8:	4628      	mov	r0, r5
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4798      	blx	r3
 80057ee:	6025      	str	r5, [r4, #0]
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f4:	2400002c 	.word	0x2400002c

080057f8 <_GetPos>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4604      	mov	r4, r0
 80057fc:	3008      	adds	r0, #8
 80057fe:	460e      	mov	r6, r1
 8005800:	4615      	mov	r5, r2
 8005802:	f7ff ff8f 	bl	8005724 <_InitOnce.isra.3>
 8005806:	68a3      	ldr	r3, [r4, #8]
 8005808:	b11b      	cbz	r3, 8005812 <_GetPos+0x1a>
 800580a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800580c:	6032      	str	r2, [r6, #0]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	bd70      	pop	{r4, r5, r6, pc}

08005814 <_SetVRAM_BufferPTR>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4605      	mov	r5, r0
 8005818:	3008      	adds	r0, #8
 800581a:	460c      	mov	r4, r1
 800581c:	f7ff ff82 	bl	8005724 <_InitOnce.isra.3>
 8005820:	68ab      	ldr	r3, [r5, #8]
 8005822:	b113      	cbz	r3, 800582a <_SetVRAM_BufferPTR+0x16>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	609c      	str	r4, [r3, #8]
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}

0800582c <_ShowBuffer>:
 800582c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800582e:	2300      	movs	r3, #0
 8005830:	4604      	mov	r4, r0
 8005832:	3008      	adds	r0, #8
 8005834:	460d      	mov	r5, r1
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	f7ff ff74 	bl	8005724 <_InitOnce.isra.3>
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	b133      	cbz	r3, 800584e <_ShowBuffer+0x22>
 8005840:	aa02      	add	r2, sp, #8
 8005842:	210e      	movs	r1, #14
 8005844:	69a0      	ldr	r0, [r4, #24]
 8005846:	f842 5d04 	str.w	r5, [r2, #-4]!
 800584a:	f7fd fb1d 	bl	8002e88 <LCD_X_DisplayDriver>
 800584e:	b003      	add	sp, #12
 8005850:	bd30      	pop	{r4, r5, pc}

08005852 <_Init>:
 8005852:	b538      	push	{r3, r4, r5, lr}
 8005854:	4604      	mov	r4, r0
 8005856:	3008      	adds	r0, #8
 8005858:	f7ff ff64 	bl	8005724 <_InitOnce.isra.3>
 800585c:	4605      	mov	r5, r0
 800585e:	2200      	movs	r2, #0
 8005860:	2101      	movs	r1, #1
 8005862:	69a0      	ldr	r0, [r4, #24]
 8005864:	f7fd fb10 	bl	8002e88 <LCD_X_DisplayDriver>
 8005868:	4328      	orrs	r0, r5
 800586a:	bd38      	pop	{r3, r4, r5, pc}

0800586c <_SetVis>:
 800586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800586e:	2300      	movs	r3, #0
 8005870:	4604      	mov	r4, r0
 8005872:	3008      	adds	r0, #8
 8005874:	460d      	mov	r5, r1
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	f7ff ff54 	bl	8005724 <_InitOnce.isra.3>
 800587c:	68a3      	ldr	r3, [r4, #8]
 800587e:	b13b      	cbz	r3, 8005890 <_SetVis+0x24>
 8005880:	aa02      	add	r2, sp, #8
 8005882:	631d      	str	r5, [r3, #48]	; 0x30
 8005884:	2109      	movs	r1, #9
 8005886:	69a0      	ldr	r0, [r4, #24]
 8005888:	f842 5d04 	str.w	r5, [r2, #-4]!
 800588c:	f7fd fafc 	bl	8002e88 <LCD_X_DisplayDriver>
 8005890:	b003      	add	sp, #12
 8005892:	bd30      	pop	{r4, r5, pc}

08005894 <_SetAlpha>:
 8005894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005896:	2300      	movs	r3, #0
 8005898:	4604      	mov	r4, r0
 800589a:	3008      	adds	r0, #8
 800589c:	460d      	mov	r5, r1
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	f7ff ff40 	bl	8005724 <_InitOnce.isra.3>
 80058a4:	68a3      	ldr	r3, [r4, #8]
 80058a6:	b13b      	cbz	r3, 80058b8 <_SetAlpha+0x24>
 80058a8:	aa02      	add	r2, sp, #8
 80058aa:	62dd      	str	r5, [r3, #44]	; 0x2c
 80058ac:	210a      	movs	r1, #10
 80058ae:	69a0      	ldr	r0, [r4, #24]
 80058b0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80058b4:	f7fd fae8 	bl	8002e88 <LCD_X_DisplayDriver>
 80058b8:	b003      	add	sp, #12
 80058ba:	bd30      	pop	{r4, r5, pc}

080058bc <_SetVRAMAddr>:
 80058bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058be:	2300      	movs	r3, #0
 80058c0:	4604      	mov	r4, r0
 80058c2:	3008      	adds	r0, #8
 80058c4:	460d      	mov	r5, r1
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	f7ff ff2c 	bl	8005724 <_InitOnce.isra.3>
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	b143      	cbz	r3, 80058e2 <_SetVRAMAddr+0x26>
 80058d0:	aa02      	add	r2, sp, #8
 80058d2:	601d      	str	r5, [r3, #0]
 80058d4:	605d      	str	r5, [r3, #4]
 80058d6:	2102      	movs	r1, #2
 80058d8:	f842 5d04 	str.w	r5, [r2, #-4]!
 80058dc:	69a0      	ldr	r0, [r4, #24]
 80058de:	f7fd fad3 	bl	8002e88 <LCD_X_DisplayDriver>
 80058e2:	b003      	add	sp, #12
 80058e4:	bd30      	pop	{r4, r5, pc}

080058e6 <_SetPos>:
 80058e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	4606      	mov	r6, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	2100      	movs	r1, #0
 80058f4:	2218      	movs	r2, #24
 80058f6:	a802      	add	r0, sp, #8
 80058f8:	f002 fc1a 	bl	8008130 <memset>
 80058fc:	f106 0008 	add.w	r0, r6, #8
 8005900:	f7ff ff10 	bl	8005724 <_InitOnce.isra.3>
 8005904:	68b7      	ldr	r7, [r6, #8]
 8005906:	2f00      	cmp	r7, #0
 8005908:	d067      	beq.n	80059da <_SetPos+0xf4>
 800590a:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 800590e:	f1bb 0f00 	cmp.w	fp, #0
 8005912:	d004      	beq.n	800591e <_SetPos+0x38>
 8005914:	4622      	mov	r2, r4
 8005916:	4629      	mov	r1, r5
 8005918:	69b0      	ldr	r0, [r6, #24]
 800591a:	47d8      	blx	fp
 800591c:	e05d      	b.n	80059da <_SetPos+0xf4>
 800591e:	627d      	str	r5, [r7, #36]	; 0x24
 8005920:	62bc      	str	r4, [r7, #40]	; 0x28
 8005922:	f7ff f84d 	bl	80049c0 <LCD_GetXSizeDisplay>
 8005926:	4681      	mov	r9, r0
 8005928:	f7ff f850 	bl	80049cc <LCD_GetYSizeDisplay>
 800592c:	68f2      	ldr	r2, [r6, #12]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2108      	movs	r1, #8
 8005932:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005934:	4680      	mov	r8, r0
 8005936:	4630      	mov	r0, r6
 8005938:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	4790      	blx	r2
 8005940:	2208      	movs	r2, #8
 8005942:	3007      	adds	r0, #7
 8005944:	2d00      	cmp	r5, #0
 8005946:	eb05 010a 	add.w	r1, r5, sl
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	fb90 f0f2 	sdiv	r0, r0, r2
 8005950:	9006      	str	r0, [sp, #24]
 8005952:	da07      	bge.n	8005964 <_SetPos+0x7e>
 8005954:	9a07      	ldr	r2, [sp, #28]
 8005956:	f8cd b008 	str.w	fp, [sp, #8]
 800595a:	fb00 2015 	mls	r0, r0, r5, r2
 800595e:	9104      	str	r1, [sp, #16]
 8005960:	9007      	str	r0, [sp, #28]
 8005962:	e007      	b.n	8005974 <_SetPos+0x8e>
 8005964:	4589      	cmp	r9, r1
 8005966:	9502      	str	r5, [sp, #8]
 8005968:	bfb6      	itet	lt
 800596a:	ebc5 0509 	rsblt	r5, r5, r9
 800596e:	f8cd a010 	strge.w	sl, [sp, #16]
 8005972:	9504      	strlt	r5, [sp, #16]
 8005974:	2c00      	cmp	r4, #0
 8005976:	eb04 0203 	add.w	r2, r4, r3
 800597a:	da09      	bge.n	8005990 <_SetPos+0xaa>
 800597c:	9b06      	ldr	r3, [sp, #24]
 800597e:	9205      	str	r2, [sp, #20]
 8005980:	435c      	muls	r4, r3
 8005982:	9b07      	ldr	r3, [sp, #28]
 8005984:	fb0a 3414 	mls	r4, sl, r4, r3
 8005988:	2300      	movs	r3, #0
 800598a:	9407      	str	r4, [sp, #28]
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	e006      	b.n	800599e <_SetPos+0xb8>
 8005990:	4590      	cmp	r8, r2
 8005992:	9403      	str	r4, [sp, #12]
 8005994:	bfb6      	itet	lt
 8005996:	ebc4 0408 	rsblt	r4, r4, r8
 800599a:	9305      	strge	r3, [sp, #20]
 800599c:	9405      	strlt	r4, [sp, #20]
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	dd08      	ble.n	80059b8 <_SetPos+0xd2>
 80059a6:	9a05      	ldr	r2, [sp, #20]
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	dd05      	ble.n	80059b8 <_SetPos+0xd2>
 80059ac:	9a02      	ldr	r2, [sp, #8]
 80059ae:	4591      	cmp	r9, r2
 80059b0:	dd02      	ble.n	80059b8 <_SetPos+0xd2>
 80059b2:	9a03      	ldr	r2, [sp, #12]
 80059b4:	4590      	cmp	r8, r2
 80059b6:	dc06      	bgt.n	80059c6 <_SetPos+0xe0>
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10e      	bne.n	80059da <_SetPos+0xf4>
 80059bc:	2100      	movs	r1, #0
 80059be:	4630      	mov	r0, r6
 80059c0:	f7ff ff54 	bl	800586c <_SetVis>
 80059c4:	e009      	b.n	80059da <_SetPos+0xf4>
 80059c6:	b91b      	cbnz	r3, 80059d0 <_SetPos+0xea>
 80059c8:	2101      	movs	r1, #1
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ff4e 	bl	800586c <_SetVis>
 80059d0:	aa02      	add	r2, sp, #8
 80059d2:	2108      	movs	r1, #8
 80059d4:	69b0      	ldr	r0, [r6, #24]
 80059d6:	f7fd fa57 	bl	8002e88 <LCD_X_DisplayDriver>
 80059da:	b009      	add	sp, #36	; 0x24
 80059dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059e0 <_SetSize>:
 80059e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e2:	2300      	movs	r3, #0
 80059e4:	4605      	mov	r5, r0
 80059e6:	3008      	adds	r0, #8
 80059e8:	460f      	mov	r7, r1
 80059ea:	4616      	mov	r6, r2
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	f7ff fe98 	bl	8005724 <_InitOnce.isra.3>
 80059f4:	68ac      	ldr	r4, [r5, #8]
 80059f6:	b194      	cbz	r4, 8005a1e <_SetSize+0x3e>
 80059f8:	6a23      	ldr	r3, [r4, #32]
 80059fa:	b93b      	cbnz	r3, 8005a0c <_SetSize+0x2c>
 80059fc:	69a8      	ldr	r0, [r5, #24]
 80059fe:	f7fe ff89 	bl	8004914 <LCD_GetSwapXYEx>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	bf0c      	ite	eq
 8005a06:	4638      	moveq	r0, r7
 8005a08:	4630      	movne	r0, r6
 8005a0a:	6220      	str	r0, [r4, #32]
 8005a0c:	6127      	str	r7, [r4, #16]
 8005a0e:	466a      	mov	r2, sp
 8005a10:	6166      	str	r6, [r4, #20]
 8005a12:	2107      	movs	r1, #7
 8005a14:	69a8      	ldr	r0, [r5, #24]
 8005a16:	9700      	str	r7, [sp, #0]
 8005a18:	9601      	str	r6, [sp, #4]
 8005a1a:	f7fd fa35 	bl	8002e88 <LCD_X_DisplayDriver>
 8005a1e:	b003      	add	sp, #12
 8005a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a22 <_SetVSize>:
 8005a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a24:	4607      	mov	r7, r0
 8005a26:	3008      	adds	r0, #8
 8005a28:	460d      	mov	r5, r1
 8005a2a:	4616      	mov	r6, r2
 8005a2c:	f7ff fe7a 	bl	8005724 <_InitOnce.isra.3>
 8005a30:	68bc      	ldr	r4, [r7, #8]
 8005a32:	b144      	cbz	r4, 8005a46 <_SetVSize+0x24>
 8005a34:	69b8      	ldr	r0, [r7, #24]
 8005a36:	f7fe ff6d 	bl	8004914 <LCD_GetSwapXYEx>
 8005a3a:	61a5      	str	r5, [r4, #24]
 8005a3c:	61e6      	str	r6, [r4, #28]
 8005a3e:	b108      	cbz	r0, 8005a44 <_SetVSize+0x22>
 8005a40:	6226      	str	r6, [r4, #32]
 8005a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a44:	6225      	str	r5, [r4, #32]
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a48 <_GetDevData>:
 8005a48:	2901      	cmp	r1, #1
 8005a4a:	4802      	ldr	r0, [pc, #8]	; (8005a54 <_GetDevData+0xc>)
 8005a4c:	bf18      	it	ne
 8005a4e:	2000      	movne	r0, #0
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	0800c70c 	.word	0x0800c70c

08005a58 <_GetDevFunc>:
 8005a58:	2916      	cmp	r1, #22
 8005a5a:	4802      	ldr	r0, [pc, #8]	; (8005a64 <_GetDevFunc+0xc>)
 8005a5c:	bf18      	it	ne
 8005a5e:	2000      	movne	r0, #0
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	0800655d 	.word	0x0800655d

08005a68 <_SetOrg>:
 8005a68:	6800      	ldr	r0, [r0, #0]
 8005a6a:	b110      	cbz	r0, 8005a72 <_SetOrg+0xa>
 8005a6c:	68c3      	ldr	r3, [r0, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	4718      	bx	r3
 8005a72:	4770      	bx	lr

08005a74 <_GetRect>:
 8005a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a76:	6880      	ldr	r0, [r0, #8]
 8005a78:	460d      	mov	r5, r1
 8005a7a:	f7fd fc33 	bl	80032e4 <GUI_ALLOC_LockH>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	a802      	add	r0, sp, #8
 8005a82:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8005a86:	8914      	ldrh	r4, [r2, #8]
 8005a88:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8005a8c:	802b      	strh	r3, [r5, #0]
 8005a8e:	441c      	add	r4, r3
 8005a90:	8953      	ldrh	r3, [r2, #10]
 8005a92:	3c01      	subs	r4, #1
 8005a94:	f840 2d04 	str.w	r2, [r0, #-4]!
 8005a98:	440b      	add	r3, r1
 8005a9a:	8069      	strh	r1, [r5, #2]
 8005a9c:	80ac      	strh	r4, [r5, #4]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	80eb      	strh	r3, [r5, #6]
 8005aa2:	f7fd fc2d 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005aa6:	b003      	add	sp, #12
 8005aa8:	bd30      	pop	{r4, r5, pc}
	...

08005aac <_XY2PTR>:
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <_XY2PTR+0x3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	f7fd fc14 	bl	80032e4 <GUI_ALLOC_LockH>
 8005abc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8005ac0:	ab02      	add	r3, sp, #8
 8005ac2:	68c4      	ldr	r4, [r0, #12]
 8005ac4:	1a69      	subs	r1, r5, r1
 8005ac6:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8005aca:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005ace:	1b76      	subs	r6, r6, r5
 8005ad0:	0076      	lsls	r6, r6, #1
 8005ad2:	3618      	adds	r6, #24
 8005ad4:	fb04 6501 	mla	r5, r4, r1, r6
 8005ad8:	1944      	adds	r4, r0, r5
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd fc10 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	b002      	add	sp, #8
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
 8005ae6:	bf00      	nop
 8005ae8:	24000028 	.word	0x24000028

08005aec <_GetPixelIndex>:
 8005aec:	b508      	push	{r3, lr}
 8005aee:	4608      	mov	r0, r1
 8005af0:	4611      	mov	r1, r2
 8005af2:	f7ff ffdb 	bl	8005aac <_XY2PTR>
 8005af6:	8800      	ldrh	r0, [r0, #0]
 8005af8:	bd08      	pop	{r3, pc}
	...

08005afc <_XorPixel>:
 8005afc:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <_XorPixel+0x54>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	4616      	mov	r6, r2
 8005b04:	460d      	mov	r5, r1
 8005b06:	4607      	mov	r7, r0
 8005b08:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b0a:	f7fd fbeb 	bl	80032e4 <GUI_ALLOC_LockH>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	9000      	str	r0, [sp, #0]
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7ff ffca 	bl	8005aac <_XY2PTR>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4798      	blx	r3
 8005b20:	8823      	ldrh	r3, [r4, #0]
 8005b22:	4058      	eors	r0, r3
 8005b24:	9b00      	ldr	r3, [sp, #0]
 8005b26:	8020      	strh	r0, [r4, #0]
 8005b28:	6958      	ldr	r0, [r3, #20]
 8005b2a:	b160      	cbz	r0, 8005b46 <_XorPixel+0x4a>
 8005b2c:	f7fd fbda 	bl	80032e4 <GUI_ALLOC_LockH>
 8005b30:	ac02      	add	r4, sp, #8
 8005b32:	6883      	ldr	r3, [r0, #8]
 8005b34:	4632      	mov	r2, r6
 8005b36:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4798      	blx	r3
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7fd fbdd 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005b46:	4668      	mov	r0, sp
 8005b48:	f7fd fbda 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005b4c:	b003      	add	sp, #12
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	24000028 	.word	0x24000028

08005b54 <_SetPixelIndex>:
 8005b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b56:	461c      	mov	r4, r3
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <_SetPixelIndex+0x48>)
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	4616      	mov	r6, r2
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005b62:	f7fd fbbf 	bl	80032e4 <GUI_ALLOC_LockH>
 8005b66:	4631      	mov	r1, r6
 8005b68:	9000      	str	r0, [sp, #0]
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7ff ff9e 	bl	8005aac <_XY2PTR>
 8005b70:	9b00      	ldr	r3, [sp, #0]
 8005b72:	8004      	strh	r4, [r0, #0]
 8005b74:	6958      	ldr	r0, [r3, #20]
 8005b76:	b160      	cbz	r0, 8005b92 <_SetPixelIndex+0x3e>
 8005b78:	f7fd fbb4 	bl	80032e4 <GUI_ALLOC_LockH>
 8005b7c:	ac02      	add	r4, sp, #8
 8005b7e:	6883      	ldr	r3, [r0, #8]
 8005b80:	4632      	mov	r2, r6
 8005b82:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005b86:	4629      	mov	r1, r5
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4798      	blx	r3
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7fd fbb7 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005b92:	4668      	mov	r0, sp
 8005b94:	f7fd fbb4 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	24000028 	.word	0x24000028

08005ba0 <_DrawVLine>:
 8005ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	4c2c      	ldr	r4, [pc, #176]	; (8005c58 <_DrawVLine+0xb8>)
 8005ba6:	461e      	mov	r6, r3
 8005ba8:	4680      	mov	r8, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	4615      	mov	r5, r2
 8005bb0:	46a1      	mov	r9, r4
 8005bb2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005bb4:	f7fd fb96 	bl	80032e4 <GUI_ALLOC_LockH>
 8005bb8:	9000      	str	r0, [sp, #0]
 8005bba:	6940      	ldr	r0, [r0, #20]
 8005bbc:	b108      	cbz	r0, 8005bc2 <_DrawVLine+0x22>
 8005bbe:	f7fd fb91 	bl	80032e4 <GUI_ALLOC_LockH>
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ff70 	bl	8005aac <_XY2PTR>
 8005bcc:	f8d9 3000 	ldr.w	r3, [r9]
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	7c1a      	ldrb	r2, [r3, #16]
 8005bd4:	07d2      	lsls	r2, r2, #31
 8005bd6:	d51f      	bpl.n	8005c18 <_DrawVLine+0x78>
 8005bd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4798      	blx	r3
 8005be0:	fa1f f880 	uxth.w	r8, r0
 8005be4:	9801      	ldr	r0, [sp, #4]
 8005be6:	b120      	cbz	r0, 8005bf2 <_DrawVLine+0x52>
 8005be8:	6883      	ldr	r3, [r0, #8]
 8005bea:	462a      	mov	r2, r5
 8005bec:	4639      	mov	r1, r7
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4798      	blx	r3
 8005bf2:	8823      	ldrh	r3, [r4, #0]
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	ea88 0303 	eor.w	r3, r8, r3
 8005bfa:	42b5      	cmp	r5, r6
 8005bfc:	8023      	strh	r3, [r4, #0]
 8005bfe:	9b00      	ldr	r3, [sp, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	441c      	add	r4, r3
 8005c04:	ddee      	ble.n	8005be4 <_DrawVLine+0x44>
 8005c06:	4668      	mov	r0, sp
 8005c08:	f7fd fb7a 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	b303      	cbz	r3, 8005c52 <_DrawVLine+0xb2>
 8005c10:	a801      	add	r0, sp, #4
 8005c12:	f7fd fb75 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005c16:	e01c      	b.n	8005c52 <_DrawVLine+0xb2>
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	9a00      	ldr	r2, [sp, #0]
 8005c1c:	f8d3 9000 	ldr.w	r9, [r3]
 8005c20:	9b01      	ldr	r3, [sp, #4]
 8005c22:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8005c26:	b163      	cbz	r3, 8005c42 <_DrawVLine+0xa2>
 8005c28:	9801      	ldr	r0, [sp, #4]
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	4639      	mov	r1, r7
 8005c30:	6883      	ldr	r3, [r0, #8]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4798      	blx	r3
 8005c36:	42ae      	cmp	r6, r5
 8005c38:	f8a4 9000 	strh.w	r9, [r4]
 8005c3c:	4444      	add	r4, r8
 8005c3e:	daf3      	bge.n	8005c28 <_DrawVLine+0x88>
 8005c40:	e7e1      	b.n	8005c06 <_DrawVLine+0x66>
 8005c42:	1b75      	subs	r5, r6, r5
 8005c44:	3501      	adds	r5, #1
 8005c46:	3d01      	subs	r5, #1
 8005c48:	f8a4 9000 	strh.w	r9, [r4]
 8005c4c:	4444      	add	r4, r8
 8005c4e:	d1fa      	bne.n	8005c46 <_DrawVLine+0xa6>
 8005c50:	e7d9      	b.n	8005c06 <_DrawVLine+0x66>
 8005c52:	b003      	add	sp, #12
 8005c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c58:	24000028 	.word	0x24000028

08005c5c <_FillRect>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	4f2a      	ldr	r7, [pc, #168]	; (8005d0c <_FillRect+0xb0>)
 8005c62:	461d      	mov	r5, r3
 8005c64:	4614      	mov	r4, r2
 8005c66:	b087      	sub	sp, #28
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	4689      	mov	r9, r1
 8005c6c:	4683      	mov	fp, r0
 8005c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c70:	ebc9 0505 	rsb	r5, r9, r5
 8005c74:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	f105 0a01 	add.w	sl, r5, #1
 8005c7c:	9202      	str	r2, [sp, #8]
 8005c7e:	f7fd fb31 	bl	80032e4 <GUI_ALLOC_LockH>
 8005c82:	4621      	mov	r1, r4
 8005c84:	9004      	str	r0, [sp, #16]
 8005c86:	4648      	mov	r0, r9
 8005c88:	f7ff ff10 	bl	8005aac <_XY2PTR>
 8005c8c:	9a04      	ldr	r2, [sp, #16]
 8005c8e:	4606      	mov	r6, r0
 8005c90:	68d3      	ldr	r3, [r2, #12]
 8005c92:	6950      	ldr	r0, [r2, #20]
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	b188      	cbz	r0, 8005cbc <_FillRect+0x60>
 8005c98:	f7fd fb24 	bl	80032e4 <GUI_ALLOC_LockH>
 8005c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c9e:	f10d 0818 	add.w	r8, sp, #24
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	1b1b      	subs	r3, r3, r4
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	f848 0d04 	str.w	r0, [r8, #-4]!
 8005cac:	3301      	adds	r3, #1
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	4653      	mov	r3, sl
 8005cb2:	f000 fbff 	bl	80064b4 <GUI_USAGE_AddRect>
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	f7fd fb22 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005cbc:	006d      	lsls	r5, r5, #1
 8005cbe:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 8005cc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	dc1a      	bgt.n	8005cfe <_FillRect+0xa2>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	7c1b      	ldrb	r3, [r3, #16]
 8005ccc:	07db      	lsls	r3, r3, #31
 8005cce:	d50d      	bpl.n	8005cec <_FillRect+0x90>
 8005cd0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	4798      	blx	r3
 8005cd8:	1eb3      	subs	r3, r6, #2
 8005cda:	b280      	uxth	r0, r0
 8005cdc:	1971      	adds	r1, r6, r5
 8005cde:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005ce2:	4042      	eors	r2, r0
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	d1f9      	bne.n	8005cde <_FillRect+0x82>
 8005cea:	e004      	b.n	8005cf6 <_FillRect+0x9a>
 8005cec:	4652      	mov	r2, sl
 8005cee:	4641      	mov	r1, r8
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7fe f998 	bl	8004026 <GUI__memset16>
 8005cf6:	9b03      	ldr	r3, [sp, #12]
 8005cf8:	3401      	adds	r4, #1
 8005cfa:	441e      	add	r6, r3
 8005cfc:	e7e1      	b.n	8005cc2 <_FillRect+0x66>
 8005cfe:	a804      	add	r0, sp, #16
 8005d00:	f7fd fafe 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005d04:	b007      	add	sp, #28
 8005d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0a:	bf00      	nop
 8005d0c:	24000028 	.word	0x24000028

08005d10 <_DrawHLine>:
 8005d10:	b507      	push	{r0, r1, r2, lr}
 8005d12:	9200      	str	r2, [sp, #0]
 8005d14:	f7ff ffa2 	bl	8005c5c <_FillRect>
 8005d18:	b003      	add	sp, #12
 8005d1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005d20 <_DrawBitmap>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	4d99      	ldr	r5, [pc, #612]	; (8005f8c <_DrawBitmap+0x26c>)
 8005d26:	b091      	sub	sp, #68	; 0x44
 8005d28:	460e      	mov	r6, r1
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	900a      	str	r0, [sp, #40]	; 0x28
 8005d30:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005d32:	9205      	str	r2, [sp, #20]
 8005d34:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005d36:	f7fd fad5 	bl	80032e4 <GUI_ALLOC_LockH>
 8005d3a:	900e      	str	r0, [sp, #56]	; 0x38
 8005d3c:	6940      	ldr	r0, [r0, #20]
 8005d3e:	b108      	cbz	r0, 8005d44 <_DrawBitmap+0x24>
 8005d40:	f7fd fad0 	bl	80032e4 <GUI_ALLOC_LockH>
 8005d44:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d46:	a810      	add	r0, sp, #64	; 0x40
 8005d48:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	9306      	str	r3, [sp, #24]
 8005d50:	f7fd fad6 	bl	8003300 <GUI_ALLOC_UnlockH>
 8005d54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d58:	eb06 0b03 	add.w	fp, r6, r3
 8005d5c:	b150      	cbz	r0, 8005d74 <_DrawBitmap+0x54>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	7c1b      	ldrb	r3, [r3, #16]
 8005d62:	0799      	lsls	r1, r3, #30
 8005d64:	d106      	bne.n	8005d74 <_DrawBitmap+0x54>
 8005d66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d68:	4659      	mov	r1, fp
 8005d6a:	9a05      	ldr	r2, [sp, #20]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	9b02      	ldr	r3, [sp, #8]
 8005d70:	f000 fba0 	bl	80064b4 <GUI_USAGE_AddRect>
 8005d74:	9905      	ldr	r1, [sp, #20]
 8005d76:	4658      	mov	r0, fp
 8005d78:	f7ff fe98 	bl	8005aac <_XY2PTR>
 8005d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d7e:	4605      	mov	r5, r0
 8005d80:	2b10      	cmp	r3, #16
 8005d82:	d134      	bne.n	8005dee <_DrawBitmap+0xce>
 8005d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d86:	b133      	cbz	r3, 8005d96 <_DrawBitmap+0x76>
 8005d88:	9b02      	ldr	r3, [sp, #8]
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8005f94 <_DrawBitmap+0x274>
 8005d90:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005d94:	e012      	b.n	8005dbc <_DrawBitmap+0x9c>
 8005d96:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <_DrawBitmap+0x270>)
 8005d98:	681e      	ldr	r6, [r3, #0]
 8005d9a:	2e00      	cmp	r6, #0
 8005d9c:	d0f4      	beq.n	8005d88 <_DrawBitmap+0x68>
 8005d9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005da0:	4621      	mov	r1, r4
 8005da2:	9a02      	ldr	r2, [sp, #8]
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	9b06      	ldr	r3, [sp, #24]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005dac:	47b0      	blx	r6
 8005dae:	e35b      	b.n	8006468 <_DrawBitmap+0x748>
 8005db0:	b944      	cbnz	r4, 8005dc4 <_DrawBitmap+0xa4>
 8005db2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005db4:	3601      	adds	r6, #1
 8005db6:	441c      	add	r4, r3
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	441d      	add	r5, r3
 8005dbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005dbe:	429e      	cmp	r6, r3
 8005dc0:	dbf6      	blt.n	8005db0 <_DrawBitmap+0x90>
 8005dc2:	e34c      	b.n	800645e <_DrawBitmap+0x73e>
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d0f4      	beq.n	8005db2 <_DrawBitmap+0x92>
 8005dc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005dca:	4642      	mov	r2, r8
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f8d9 3000 	ldr.w	r3, [r9]
 8005dd4:	4798      	blx	r3
 8005dd6:	2f00      	cmp	r7, #0
 8005dd8:	d0eb      	beq.n	8005db2 <_DrawBitmap+0x92>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4659      	mov	r1, fp
 8005dde:	9a05      	ldr	r2, [sp, #20]
 8005de0:	4638      	mov	r0, r7
 8005de2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005de6:	4432      	add	r2, r6
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	47d0      	blx	sl
 8005dec:	e7e1      	b.n	8005db2 <_DrawBitmap+0x92>
 8005dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005df0:	2b17      	cmp	r3, #23
 8005df2:	dd44      	ble.n	8005e7e <_DrawBitmap+0x15e>
 8005df4:	f06f 0303 	mvn.w	r3, #3
 8005df8:	f04f 0800 	mov.w	r8, #0
 8005dfc:	fb03 f30b 	mul.w	r3, r3, fp
 8005e00:	9307      	str	r3, [sp, #28]
 8005e02:	f06f 0301 	mvn.w	r3, #1
 8005e06:	fb03 f30b 	mul.w	r3, r3, fp
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	445b      	add	r3, fp
 8005e10:	9308      	str	r3, [sp, #32]
 8005e12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005e14:	4598      	cmp	r8, r3
 8005e16:	f280 8322 	bge.w	800645e <_DrawBitmap+0x73e>
 8005e1a:	9b05      	ldr	r3, [sp, #20]
 8005e1c:	eb03 0908 	add.w	r9, r3, r8
 8005e20:	b934      	cbnz	r4, 8005e30 <_DrawBitmap+0x110>
 8005e22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005e24:	f108 0801 	add.w	r8, r8, #1
 8005e28:	441c      	add	r4, r3
 8005e2a:	9b06      	ldr	r3, [sp, #24]
 8005e2c:	441d      	add	r5, r3
 8005e2e:	e7f0      	b.n	8005e12 <_DrawBitmap+0xf2>
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	d0f6      	beq.n	8005e22 <_DrawBitmap+0x102>
 8005e34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005e36:	b137      	cbz	r7, 8005e46 <_DrawBitmap+0x126>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	4638      	mov	r0, r7
 8005e40:	685e      	ldr	r6, [r3, #4]
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	47b0      	blx	r6
 8005e46:	9b07      	ldr	r3, [sp, #28]
 8005e48:	465e      	mov	r6, fp
 8005e4a:	eb04 0a03 	add.w	sl, r4, r3
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	18eb      	adds	r3, r5, r3
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e56:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4798      	blx	r3
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8005e66:	b12f      	cbz	r7, 8005e74 <_DrawBitmap+0x154>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	464a      	mov	r2, r9
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4638      	mov	r0, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4798      	blx	r3
 8005e74:	3601      	adds	r6, #1
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	429e      	cmp	r6, r3
 8005e7a:	d1eb      	bne.n	8005e54 <_DrawBitmap+0x134>
 8005e7c:	e7d1      	b.n	8005e22 <_DrawBitmap+0x102>
 8005e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	f040 8089 	bne.w	8005f98 <_DrawBitmap+0x278>
 8005e86:	9b02      	ldr	r3, [sp, #8]
 8005e88:	3c01      	subs	r4, #1
 8005e8a:	9e05      	ldr	r6, [sp, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005f8c <_DrawBitmap+0x26c>
 8005e92:	9307      	str	r3, [sp, #28]
 8005e94:	f06f 0301 	mvn.w	r3, #1
 8005e98:	fb03 f30b 	mul.w	r3, r3, fp
 8005e9c:	9303      	str	r3, [sp, #12]
 8005e9e:	9b02      	ldr	r3, [sp, #8]
 8005ea0:	445b      	add	r3, fp
 8005ea2:	9304      	str	r3, [sp, #16]
 8005ea4:	9b05      	ldr	r3, [sp, #20]
 8005ea6:	1c61      	adds	r1, r4, #1
 8005ea8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005eaa:	1af3      	subs	r3, r6, r3
 8005eac:	429a      	cmp	r2, r3
 8005eae:	f340 82d6 	ble.w	800645e <_DrawBitmap+0x73e>
 8005eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d036      	beq.n	8005f26 <_DrawBitmap+0x206>
 8005eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8005ebc:	7c1b      	ldrb	r3, [r3, #16]
 8005ebe:	f013 0303 	ands.w	r3, r3, #3
 8005ec2:	d009      	beq.n	8005ed8 <_DrawBitmap+0x1b8>
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d15a      	bne.n	8005f7e <_DrawBitmap+0x25e>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	46a2      	mov	sl, r4
 8005ecc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8005ed0:	465f      	mov	r7, fp
 8005ed2:	18eb      	adds	r3, r5, r3
 8005ed4:	9308      	str	r3, [sp, #32]
 8005ed6:	e021      	b.n	8005f1c <_DrawBitmap+0x1fc>
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	4622      	mov	r2, r4
 8005edc:	18e9      	adds	r1, r5, r3
 8005ede:	462b      	mov	r3, r5
 8005ee0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005ee4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8005ee6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005eea:	f823 0b02 	strh.w	r0, [r3], #2
 8005eee:	428b      	cmp	r3, r1
 8005ef0:	d1f6      	bne.n	8005ee0 <_DrawBitmap+0x1c0>
 8005ef2:	e044      	b.n	8005f7e <_DrawBitmap+0x25e>
 8005ef4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efa:	9a08      	ldr	r2, [sp, #32]
 8005efc:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8005f00:	f1b8 0f00 	cmp.w	r8, #0
 8005f04:	d006      	beq.n	8005f14 <_DrawBitmap+0x1f4>
 8005f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f0a:	4632      	mov	r2, r6
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4640      	mov	r0, r8
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4798      	blx	r3
 8005f14:	3701      	adds	r7, #1
 8005f16:	9b04      	ldr	r3, [sp, #16]
 8005f18:	42bb      	cmp	r3, r7
 8005f1a:	d030      	beq.n	8005f7e <_DrawBitmap+0x25e>
 8005f1c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f7      	beq.n	8005f14 <_DrawBitmap+0x1f4>
 8005f24:	e7e6      	b.n	8005ef4 <_DrawBitmap+0x1d4>
 8005f26:	f8d9 3000 	ldr.w	r3, [r9]
 8005f2a:	7c1b      	ldrb	r3, [r3, #16]
 8005f2c:	f013 0303 	ands.w	r3, r3, #3
 8005f30:	d009      	beq.n	8005f46 <_DrawBitmap+0x226>
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d123      	bne.n	8005f7e <_DrawBitmap+0x25e>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	46a2      	mov	sl, r4
 8005f3a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8005f3e:	465f      	mov	r7, fp
 8005f40:	18eb      	adds	r3, r5, r3
 8005f42:	9308      	str	r3, [sp, #32]
 8005f44:	e016      	b.n	8005f74 <_DrawBitmap+0x254>
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <_DrawBitmap+0x274>)
 8005f48:	4628      	mov	r0, r5
 8005f4a:	9a02      	ldr	r2, [sp, #8]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4798      	blx	r3
 8005f50:	e015      	b.n	8005f7e <_DrawBitmap+0x25e>
 8005f52:	9a08      	ldr	r2, [sp, #32]
 8005f54:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8005f58:	f1b8 0f00 	cmp.w	r8, #0
 8005f5c:	d006      	beq.n	8005f6c <_DrawBitmap+0x24c>
 8005f5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f62:	4632      	mov	r2, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	4640      	mov	r0, r8
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4798      	blx	r3
 8005f6c:	3701      	adds	r7, #1
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	429f      	cmp	r7, r3
 8005f72:	d004      	beq.n	8005f7e <_DrawBitmap+0x25e>
 8005f74:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f7      	beq.n	8005f6c <_DrawBitmap+0x24c>
 8005f7c:	e7e9      	b.n	8005f52 <_DrawBitmap+0x232>
 8005f7e:	9b06      	ldr	r3, [sp, #24]
 8005f80:	3601      	adds	r6, #1
 8005f82:	441d      	add	r5, r3
 8005f84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005f86:	441c      	add	r4, r3
 8005f88:	e78c      	b.n	8005ea4 <_DrawBitmap+0x184>
 8005f8a:	bf00      	nop
 8005f8c:	24000028 	.word	0x24000028
 8005f90:	2402d404 	.word	0x2402d404
 8005f94:	2400002c 	.word	0x2400002c
 8005f98:	4baf      	ldr	r3, [pc, #700]	; (8006258 <_DrawBitmap+0x538>)
 8005f9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	bf08      	it	eq
 8005fa0:	461a      	moveq	r2, r3
 8005fa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	921f      	str	r2, [sp, #124]	; 0x7c
 8005fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005faa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb0:	1c63      	adds	r3, r4, #1
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	1c83      	adds	r3, r0, #2
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	9b05      	ldr	r3, [sp, #20]
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	9a05      	ldr	r2, [sp, #20]
 8005fc0:	1e9c      	subs	r4, r3, #2
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	f103 3aff 	add.w	sl, r3, #4294967295
 8005fc8:	9b04      	ldr	r3, [sp, #16]
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	f340 8245 	ble.w	800645e <_DrawBitmap+0x73e>
 8005fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	f000 80c7 	beq.w	800616a <_DrawBitmap+0x44a>
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	f000 8167 	beq.w	80062b0 <_DrawBitmap+0x590>
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	f040 822f 	bne.w	8006446 <_DrawBitmap+0x726>
 8005fe8:	4b9c      	ldr	r3, [pc, #624]	; (800625c <_DrawBitmap+0x53c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8005fee:	f7fd f979 	bl	80032e4 <GUI_ALLOC_LockH>
 8005ff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ff4:	4a9a      	ldr	r2, [pc, #616]	; (8006260 <_DrawBitmap+0x540>)
 8005ff6:	f1c3 0508 	rsb	r5, r3, #8
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	900e      	str	r0, [sp, #56]	; 0x38
 8005ffe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006002:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8006006:	5cd6      	ldrb	r6, [r2, r3]
 8006008:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800600a:	9f02      	ldr	r7, [sp, #8]
 800600c:	411e      	asrs	r6, r3
 800600e:	4b93      	ldr	r3, [pc, #588]	; (800625c <_DrawBitmap+0x53c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	7c1b      	ldrb	r3, [r3, #16]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d01f      	beq.n	800605c <_DrawBitmap+0x33c>
 800601c:	2b03      	cmp	r3, #3
 800601e:	d058      	beq.n	80060d2 <_DrawBitmap+0x3b2>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d056      	beq.n	80060d2 <_DrawBitmap+0x3b2>
 8006024:	42bd      	cmp	r5, r7
 8006026:	4622      	mov	r2, r4
 8006028:	bf28      	it	cs
 800602a:	463d      	movcs	r5, r7
 800602c:	1b7f      	subs	r7, r7, r5
 800602e:	462b      	mov	r3, r5
 8006030:	f006 0101 	and.w	r1, r6, #1
 8006034:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006036:	3b01      	subs	r3, #1
 8006038:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800603c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8006040:	f822 1b02 	strh.w	r1, [r2], #2
 8006044:	d1f4      	bne.n	8006030 <_DrawBitmap+0x310>
 8006046:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800604a:	2f00      	cmp	r7, #0
 800604c:	f000 8089 	beq.w	8006162 <_DrawBitmap+0x442>
 8006050:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8006054:	2508      	movs	r5, #8
 8006056:	4a82      	ldr	r2, [pc, #520]	; (8006260 <_DrawBitmap+0x540>)
 8006058:	5cd6      	ldrb	r6, [r2, r3]
 800605a:	e7e3      	b.n	8006024 <_DrawBitmap+0x304>
 800605c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800605e:	46d8      	mov	r8, fp
 8006060:	889b      	ldrh	r3, [r3, #4]
 8006062:	9308      	str	r3, [sp, #32]
 8006064:	42bd      	cmp	r5, r7
 8006066:	bf28      	it	cs
 8006068:	463d      	movcs	r5, r7
 800606a:	1b7f      	subs	r7, r7, r5
 800606c:	f1b9 0f00 	cmp.w	r9, #0
 8006070:	d023      	beq.n	80060ba <_DrawBitmap+0x39a>
 8006072:	b91e      	cbnz	r6, 800607c <_DrawBitmap+0x35c>
 8006074:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006078:	44a8      	add	r8, r5
 800607a:	e022      	b.n	80060c2 <_DrawBitmap+0x3a2>
 800607c:	07f2      	lsls	r2, r6, #31
 800607e:	d509      	bpl.n	8006094 <_DrawBitmap+0x374>
 8006080:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006084:	4641      	mov	r1, r8
 8006086:	9a04      	ldr	r2, [sp, #16]
 8006088:	4648      	mov	r0, r9
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4798      	blx	r3
 800608e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006092:	8023      	strh	r3, [r4, #0]
 8006094:	3d01      	subs	r5, #1
 8006096:	f108 0801 	add.w	r8, r8, #1
 800609a:	f104 0402 	add.w	r4, r4, #2
 800609e:	d010      	beq.n	80060c2 <_DrawBitmap+0x3a2>
 80060a0:	0876      	lsrs	r6, r6, #1
 80060a2:	e7e6      	b.n	8006072 <_DrawBitmap+0x352>
 80060a4:	07f3      	lsls	r3, r6, #31
 80060a6:	f104 0402 	add.w	r4, r4, #2
 80060aa:	bf44      	itt	mi
 80060ac:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 80060b0:	f824 3c02 	strhmi.w	r3, [r4, #-2]
 80060b4:	3d01      	subs	r5, #1
 80060b6:	d004      	beq.n	80060c2 <_DrawBitmap+0x3a2>
 80060b8:	0876      	lsrs	r6, r6, #1
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d1f2      	bne.n	80060a4 <_DrawBitmap+0x384>
 80060be:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80060c2:	2f00      	cmp	r7, #0
 80060c4:	d04d      	beq.n	8006162 <_DrawBitmap+0x442>
 80060c6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80060ca:	2508      	movs	r5, #8
 80060cc:	4a64      	ldr	r2, [pc, #400]	; (8006260 <_DrawBitmap+0x540>)
 80060ce:	5cd6      	ldrb	r6, [r2, r3]
 80060d0:	e7c8      	b.n	8006064 <_DrawBitmap+0x344>
 80060d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d4:	46d8      	mov	r8, fp
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4798      	blx	r3
 80060dc:	b283      	uxth	r3, r0
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	42bd      	cmp	r5, r7
 80060e6:	bf28      	it	cs
 80060e8:	463d      	movcs	r5, r7
 80060ea:	1b7f      	subs	r7, r7, r5
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	d01b      	beq.n	800612a <_DrawBitmap+0x40a>
 80060f2:	eb08 0305 	add.w	r3, r8, r5
 80060f6:	46a2      	mov	sl, r4
 80060f8:	930d      	str	r3, [sp, #52]	; 0x34
 80060fa:	07f0      	lsls	r0, r6, #31
 80060fc:	d50c      	bpl.n	8006118 <_DrawBitmap+0x3f8>
 80060fe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006102:	4641      	mov	r1, r8
 8006104:	9a04      	ldr	r2, [sp, #16]
 8006106:	4648      	mov	r0, r9
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4798      	blx	r3
 800610c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006112:	4053      	eors	r3, r2
 8006114:	f8aa 3000 	strh.w	r3, [sl]
 8006118:	f108 0801 	add.w	r8, r8, #1
 800611c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800611e:	f10a 0a02 	add.w	sl, sl, #2
 8006122:	0876      	lsrs	r6, r6, #1
 8006124:	4598      	cmp	r8, r3
 8006126:	d1e8      	bne.n	80060fa <_DrawBitmap+0x3da>
 8006128:	e00f      	b.n	800614a <_DrawBitmap+0x42a>
 800612a:	462a      	mov	r2, r5
 800612c:	4623      	mov	r3, r4
 800612e:	07f1      	lsls	r1, r6, #31
 8006130:	f103 0302 	add.w	r3, r3, #2
 8006134:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006138:	bf41      	itttt	mi
 800613a:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
 800613e:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 8006140:	4041      	eormi	r1, r0
 8006142:	f823 1c02 	strhmi.w	r1, [r3, #-2]
 8006146:	3a01      	subs	r2, #1
 8006148:	d1f1      	bne.n	800612e <_DrawBitmap+0x40e>
 800614a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800614e:	b147      	cbz	r7, 8006162 <_DrawBitmap+0x442>
 8006150:	9b08      	ldr	r3, [sp, #32]
 8006152:	2508      	movs	r5, #8
 8006154:	4a42      	ldr	r2, [pc, #264]	; (8006260 <_DrawBitmap+0x540>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	5cd6      	ldrb	r6, [r2, r3]
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	3301      	adds	r3, #1
 800615e:	9308      	str	r3, [sp, #32]
 8006160:	e7c0      	b.n	80060e4 <_DrawBitmap+0x3c4>
 8006162:	a80e      	add	r0, sp, #56	; 0x38
 8006164:	f7fd f8cc 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006168:	e16d      	b.n	8006446 <_DrawBitmap+0x726>
 800616a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800616c:	f1c3 0504 	rsb	r5, r3, #4
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8006176:	b2ed      	uxtb	r5, r5
 8006178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800617a:	409e      	lsls	r6, r3
 800617c:	4b37      	ldr	r3, [pc, #220]	; (800625c <_DrawBitmap+0x53c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	b2f6      	uxtb	r6, r6
 8006182:	7c1b      	ldrb	r3, [r3, #16]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d009      	beq.n	80061a0 <_DrawBitmap+0x480>
 800618c:	d30a      	bcc.n	80061a4 <_DrawBitmap+0x484>
 800618e:	2b02      	cmp	r3, #2
 8006190:	f040 8159 	bne.w	8006446 <_DrawBitmap+0x726>
 8006194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006196:	465f      	mov	r7, fp
 8006198:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800619c:	9308      	str	r3, [sp, #32]
 800619e:	e036      	b.n	800620e <_DrawBitmap+0x4ee>
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	e07e      	b.n	80062a2 <_DrawBitmap+0x582>
 80061a4:	9b02      	ldr	r3, [sp, #8]
 80061a6:	429d      	cmp	r5, r3
 80061a8:	4621      	mov	r1, r4
 80061aa:	bfc8      	it	gt
 80061ac:	b2dd      	uxtbgt	r5, r3
 80061ae:	1b5b      	subs	r3, r3, r5
 80061b0:	462a      	mov	r2, r5
 80061b2:	09b0      	lsrs	r0, r6, #6
 80061b4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80061b6:	3a01      	subs	r2, #1
 80061b8:	00b6      	lsls	r6, r6, #2
 80061ba:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80061be:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80061c2:	b2f6      	uxtb	r6, r6
 80061c4:	f821 0b02 	strh.w	r0, [r1], #2
 80061c8:	d1f3      	bne.n	80061b2 <_DrawBitmap+0x492>
 80061ca:	3d01      	subs	r5, #1
 80061cc:	b2ed      	uxtb	r5, r5
 80061ce:	3501      	adds	r5, #1
 80061d0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8136 	beq.w	8006446 <_DrawBitmap+0x726>
 80061da:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 80061de:	2504      	movs	r5, #4
 80061e0:	e7e1      	b.n	80061a6 <_DrawBitmap+0x486>
 80061e2:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80061e6:	d125      	bne.n	8006234 <_DrawBitmap+0x514>
 80061e8:	f109 0901 	add.w	r9, r9, #1
 80061ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ee:	00b6      	lsls	r6, r6, #2
 80061f0:	4599      	cmp	r9, r3
 80061f2:	b2f6      	uxtb	r6, r6
 80061f4:	d1f5      	bne.n	80061e2 <_DrawBitmap+0x4c2>
 80061f6:	1c6b      	adds	r3, r5, #1
 80061f8:	3701      	adds	r7, #1
 80061fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80061fe:	442f      	add	r7, r5
 8006200:	f1b8 0f00 	cmp.w	r8, #0
 8006204:	f000 811f 	beq.w	8006446 <_DrawBitmap+0x726>
 8006208:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800620c:	2504      	movs	r5, #4
 800620e:	4545      	cmp	r5, r8
 8006210:	f107 0301 	add.w	r3, r7, #1
 8006214:	46b9      	mov	r9, r7
 8006216:	bfc8      	it	gt
 8006218:	fa5f f588 	uxtbgt.w	r5, r8
 800621c:	ebc5 0808 	rsb	r8, r5, r8
 8006220:	3d01      	subs	r5, #1
 8006222:	b2ed      	uxtb	r5, r5
 8006224:	442b      	add	r3, r5
 8006226:	930d      	str	r3, [sp, #52]	; 0x34
 8006228:	f06f 0301 	mvn.w	r3, #1
 800622c:	fb03 4307 	mla	r3, r3, r7, r4
 8006230:	9309      	str	r3, [sp, #36]	; 0x24
 8006232:	e7d6      	b.n	80061e2 <_DrawBitmap+0x4c2>
 8006234:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006236:	09b3      	lsrs	r3, r6, #6
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800623e:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 8006242:	9b08      	ldr	r3, [sp, #32]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0cf      	beq.n	80061e8 <_DrawBitmap+0x4c8>
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	4649      	mov	r1, r9
 800624c:	9a04      	ldr	r2, [sp, #16]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	9808      	ldr	r0, [sp, #32]
 8006252:	4798      	blx	r3
 8006254:	e7c8      	b.n	80061e8 <_DrawBitmap+0x4c8>
 8006256:	bf00      	nop
 8006258:	0800c740 	.word	0x0800c740
 800625c:	24000028 	.word	0x24000028
 8006260:	0800c798 	.word	0x0800c798
 8006264:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8006268:	f102 32ff 	add.w	r2, r2, #4294967295
 800626c:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8006270:	f101 0102 	add.w	r1, r1, #2
 8006274:	bf18      	it	ne
 8006276:	f831 0c02 	ldrhne.w	r0, [r1, #-2]
 800627a:	b2f6      	uxtb	r6, r6
 800627c:	bf1c      	itt	ne
 800627e:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8006282:	f821 0c02 	strhne.w	r0, [r1, #-2]
 8006286:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800628a:	d1eb      	bne.n	8006264 <_DrawBitmap+0x544>
 800628c:	3d01      	subs	r5, #1
 800628e:	b2ed      	uxtb	r5, r5
 8006290:	3501      	adds	r5, #1
 8006292:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80d5 	beq.w	8006446 <_DrawBitmap+0x726>
 800629c:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 80062a0:	2504      	movs	r5, #4
 80062a2:	429d      	cmp	r5, r3
 80062a4:	4621      	mov	r1, r4
 80062a6:	bfc8      	it	gt
 80062a8:	b2dd      	uxtbgt	r5, r3
 80062aa:	1b5b      	subs	r3, r3, r5
 80062ac:	462a      	mov	r2, r5
 80062ae:	e7d9      	b.n	8006264 <_DrawBitmap+0x544>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80062b8:	4093      	lsls	r3, r2
 80062ba:	4a6d      	ldr	r2, [pc, #436]	; (8006470 <_DrawBitmap+0x750>)
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	b2dd      	uxtb	r5, r3
 80062c0:	7c12      	ldrb	r2, [r2, #16]
 80062c2:	f002 0203 	and.w	r2, r2, #3
 80062c6:	2a01      	cmp	r2, #1
 80062c8:	d003      	beq.n	80062d2 <_DrawBitmap+0x5b2>
 80062ca:	d308      	bcc.n	80062de <_DrawBitmap+0x5be>
 80062cc:	2a02      	cmp	r2, #2
 80062ce:	d03a      	beq.n	8006346 <_DrawBitmap+0x626>
 80062d0:	e0b9      	b.n	8006446 <_DrawBitmap+0x726>
 80062d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062d4:	9a02      	ldr	r2, [sp, #8]
 80062d6:	f1c3 0302 	rsb	r3, r3, #2
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	e0ac      	b.n	8006438 <_DrawBitmap+0x718>
 80062de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062e0:	b15b      	cbz	r3, 80062fa <_DrawBitmap+0x5da>
 80062e2:	092d      	lsrs	r5, r5, #4
 80062e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062e6:	9a03      	ldr	r2, [sp, #12]
 80062e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80062ec:	4692      	mov	sl, r2
 80062ee:	8023      	strh	r3, [r4, #0]
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	9c07      	ldr	r4, [sp, #28]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	7815      	ldrb	r5, [r2, #0]
 80062f8:	e000      	b.n	80062fc <_DrawBitmap+0x5dc>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	dd19      	ble.n	8006334 <_DrawBitmap+0x614>
 8006300:	1059      	asrs	r1, r3, #1
 8006302:	1d22      	adds	r2, r4, #4
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	eb0a 0001 	add.w	r0, sl, r1
 800630c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800630e:	092e      	lsrs	r6, r5, #4
 8006310:	f005 050f 	and.w	r5, r5, #15
 8006314:	3204      	adds	r2, #4
 8006316:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800631a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800631e:	f822 6c08 	strh.w	r6, [r2, #-8]
 8006322:	463e      	mov	r6, r7
 8006324:	f822 5c06 	strh.w	r5, [r2, #-6]
 8006328:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800632c:	4582      	cmp	sl, r0
 800632e:	d1ed      	bne.n	800630c <_DrawBitmap+0x5ec>
 8006330:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8086 	beq.w	8006446 <_DrawBitmap+0x726>
 800633a:	092d      	lsrs	r5, r5, #4
 800633c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800633e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006342:	8023      	strh	r3, [r4, #0]
 8006344:	e07f      	b.n	8006446 <_DrawBitmap+0x726>
 8006346:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006348:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800634a:	b1c2      	cbz	r2, 800637e <_DrawBitmap+0x65e>
 800634c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006350:	d00b      	beq.n	800636a <_DrawBitmap+0x64a>
 8006352:	092d      	lsrs	r5, r5, #4
 8006354:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006356:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800635a:	8023      	strh	r3, [r4, #0]
 800635c:	b12e      	cbz	r6, 800636a <_DrawBitmap+0x64a>
 800635e:	68b3      	ldr	r3, [r6, #8]
 8006360:	4659      	mov	r1, fp
 8006362:	9a04      	ldr	r2, [sp, #16]
 8006364:	4630      	mov	r0, r6
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4798      	blx	r3
 800636a:	9b02      	ldr	r3, [sp, #8]
 800636c:	f10b 0701 	add.w	r7, fp, #1
 8006370:	9c07      	ldr	r4, [sp, #28]
 8006372:	f103 38ff 	add.w	r8, r3, #4294967295
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	781d      	ldrb	r5, [r3, #0]
 800637a:	469a      	mov	sl, r3
 800637c:	e00f      	b.n	800639e <_DrawBitmap+0x67e>
 800637e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006382:	465f      	mov	r7, fp
 8006384:	e00b      	b.n	800639e <_DrawBitmap+0x67e>
 8006386:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800638a:	d10c      	bne.n	80063a6 <_DrawBitmap+0x686>
 800638c:	f015 050f 	ands.w	r5, r5, #15
 8006390:	d117      	bne.n	80063c2 <_DrawBitmap+0x6a2>
 8006392:	3404      	adds	r4, #4
 8006394:	3702      	adds	r7, #2
 8006396:	f1a8 0802 	sub.w	r8, r8, #2
 800639a:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800639e:	f1b8 0f01 	cmp.w	r8, #1
 80063a2:	dcf0      	bgt.n	8006386 <_DrawBitmap+0x666>
 80063a4:	e01a      	b.n	80063dc <_DrawBitmap+0x6bc>
 80063a6:	092b      	lsrs	r3, r5, #4
 80063a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80063aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ae:	8023      	strh	r3, [r4, #0]
 80063b0:	2e00      	cmp	r6, #0
 80063b2:	d0eb      	beq.n	800638c <_DrawBitmap+0x66c>
 80063b4:	68b3      	ldr	r3, [r6, #8]
 80063b6:	4639      	mov	r1, r7
 80063b8:	9a04      	ldr	r2, [sp, #16]
 80063ba:	4630      	mov	r0, r6
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4798      	blx	r3
 80063c0:	e7e4      	b.n	800638c <_DrawBitmap+0x66c>
 80063c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063c4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063c8:	8063      	strh	r3, [r4, #2]
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	d0e1      	beq.n	8006392 <_DrawBitmap+0x672>
 80063ce:	68b3      	ldr	r3, [r6, #8]
 80063d0:	1c79      	adds	r1, r7, #1
 80063d2:	9a04      	ldr	r2, [sp, #16]
 80063d4:	4630      	mov	r0, r6
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4798      	blx	r3
 80063da:	e7da      	b.n	8006392 <_DrawBitmap+0x672>
 80063dc:	f1b8 0f00 	cmp.w	r8, #0
 80063e0:	d031      	beq.n	8006446 <_DrawBitmap+0x726>
 80063e2:	092d      	lsrs	r5, r5, #4
 80063e4:	d02f      	beq.n	8006446 <_DrawBitmap+0x726>
 80063e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063ec:	8023      	strh	r3, [r4, #0]
 80063ee:	b356      	cbz	r6, 8006446 <_DrawBitmap+0x726>
 80063f0:	68b3      	ldr	r3, [r6, #8]
 80063f2:	4639      	mov	r1, r7
 80063f4:	9a04      	ldr	r2, [sp, #16]
 80063f6:	4630      	mov	r0, r6
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4798      	blx	r3
 80063fc:	e023      	b.n	8006446 <_DrawBitmap+0x726>
 80063fe:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8006402:	f101 31ff 	add.w	r1, r1, #4294967295
 8006406:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800640a:	f100 0002 	add.w	r0, r0, #2
 800640e:	bf18      	it	ne
 8006410:	f830 6c02 	ldrhne.w	r6, [r0, #-2]
 8006414:	b2ed      	uxtb	r5, r5
 8006416:	bf1c      	itt	ne
 8006418:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 800641c:	f820 6c02 	strhne.w	r6, [r0, #-2]
 8006420:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8006424:	d1eb      	bne.n	80063fe <_DrawBitmap+0x6de>
 8006426:	3b01      	subs	r3, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	3301      	adds	r3, #1
 800642c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8006430:	b14a      	cbz	r2, 8006446 <_DrawBitmap+0x726>
 8006432:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8006436:	2302      	movs	r3, #2
 8006438:	4293      	cmp	r3, r2
 800643a:	4620      	mov	r0, r4
 800643c:	bfc8      	it	gt
 800643e:	b2d3      	uxtbgt	r3, r2
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	4619      	mov	r1, r3
 8006444:	e7db      	b.n	80063fe <_DrawBitmap+0x6de>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800644a:	3301      	adds	r3, #1
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	4413      	add	r3, r2
 8006452:	9a06      	ldr	r2, [sp, #24]
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	9b07      	ldr	r3, [sp, #28]
 8006458:	4413      	add	r3, r2
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	e5ae      	b.n	8005fbc <_DrawBitmap+0x29c>
 800645e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006460:	b113      	cbz	r3, 8006468 <_DrawBitmap+0x748>
 8006462:	a80f      	add	r0, sp, #60	; 0x3c
 8006464:	f7fc ff4c 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006468:	b011      	add	sp, #68	; 0x44
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	bf00      	nop
 8006470:	24000028 	.word	0x24000028

08006474 <_GetDevProp>:
 8006474:	2908      	cmp	r1, #8
 8006476:	d004      	beq.n	8006482 <_GetDevProp+0xe>
 8006478:	6800      	ldr	r0, [r0, #0]
 800647a:	b120      	cbz	r0, 8006486 <_GetDevProp+0x12>
 800647c:	68c3      	ldr	r3, [r0, #12]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	4718      	bx	r3
 8006482:	2010      	movs	r0, #16
 8006484:	4770      	bx	lr
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	4770      	bx	lr

0800648c <GUI_USAGE_DecUseCnt>:
 800648c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800648e:	4605      	mov	r5, r0
 8006490:	f7fc ff28 	bl	80032e4 <GUI_ALLOC_LockH>
 8006494:	8984      	ldrh	r4, [r0, #12]
 8006496:	ab02      	add	r3, sp, #8
 8006498:	3c01      	subs	r4, #1
 800649a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800649e:	b224      	sxth	r4, r4
 80064a0:	8184      	strh	r4, [r0, #12]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fc ff2c 	bl	8003300 <GUI_ALLOC_UnlockH>
 80064a8:	b914      	cbnz	r4, 80064b0 <GUI_USAGE_DecUseCnt+0x24>
 80064aa:	4628      	mov	r0, r5
 80064ac:	f7fc ff48 	bl	8003340 <GUI_ALLOC_Free>
 80064b0:	b003      	add	sp, #12
 80064b2:	bd30      	pop	{r4, r5, pc}

080064b4 <GUI_USAGE_AddRect>:
 80064b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b8:	9c08      	ldr	r4, [sp, #32]
 80064ba:	4605      	mov	r5, r0
 80064bc:	4688      	mov	r8, r1
 80064be:	4699      	mov	r9, r3
 80064c0:	4414      	add	r4, r2
 80064c2:	68ab      	ldr	r3, [r5, #8]
 80064c4:	1c56      	adds	r6, r2, #1
 80064c6:	4641      	mov	r1, r8
 80064c8:	4628      	mov	r0, r5
 80064ca:	685f      	ldr	r7, [r3, #4]
 80064cc:	464b      	mov	r3, r9
 80064ce:	47b8      	blx	r7
 80064d0:	42b4      	cmp	r4, r6
 80064d2:	4632      	mov	r2, r6
 80064d4:	d1f5      	bne.n	80064c2 <GUI_USAGE_AddRect+0xe>
 80064d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080064da <_Convert16>:
 80064da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064de:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80064e2:	4681      	mov	r9, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	4616      	mov	r6, r2
 80064e8:	461f      	mov	r7, r3
 80064ea:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80064ee:	4614      	mov	r4, r2
 80064f0:	4688      	mov	r8, r1
 80064f2:	f839 0b02 	ldrh.w	r0, [r9], #2
 80064f6:	47d8      	blx	fp
 80064f8:	47d0      	blx	sl
 80064fa:	3c01      	subs	r4, #1
 80064fc:	f848 0b04 	str.w	r0, [r8], #4
 8006500:	d1f7      	bne.n	80064f2 <_Convert16+0x18>
 8006502:	2f1f      	cmp	r7, #31
 8006504:	d806      	bhi.n	8006514 <_Convert16+0x3a>
 8006506:	463a      	mov	r2, r7
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	f001 bcaf 	b.w	8007e72 <GUI__CompactPixelIndices>
 8006514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006518 <_Convert8>:
 8006518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006520:	4680      	mov	r8, r0
 8006522:	460d      	mov	r5, r1
 8006524:	4616      	mov	r6, r2
 8006526:	461f      	mov	r7, r3
 8006528:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800652c:	4689      	mov	r9, r1
 800652e:	4604      	mov	r4, r0
 8006530:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006534:	47d8      	blx	fp
 8006536:	47d0      	blx	sl
 8006538:	1b33      	subs	r3, r6, r4
 800653a:	f849 0b04 	str.w	r0, [r9], #4
 800653e:	eb18 0f03 	cmn.w	r8, r3
 8006542:	d1f5      	bne.n	8006530 <_Convert8+0x18>
 8006544:	2f1f      	cmp	r7, #31
 8006546:	d806      	bhi.n	8006556 <_Convert8+0x3e>
 8006548:	463a      	mov	r2, r7
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006552:	f001 bc8e 	b.w	8007e72 <GUI__CompactPixelIndices>
 8006556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800655c <GUI_MEMDEV__WriteToActiveOpaque>:
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	b09b      	sub	sp, #108	; 0x6c
 8006562:	4605      	mov	r5, r0
 8006564:	9108      	str	r1, [sp, #32]
 8006566:	9209      	str	r2, [sp, #36]	; 0x24
 8006568:	2800      	cmp	r0, #0
 800656a:	f000 8399 	beq.w	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800656e:	f7fc feb9 	bl	80032e4 <GUI_ALLOC_LockH>
 8006572:	ab1a      	add	r3, sp, #104	; 0x68
 8006574:	6944      	ldr	r4, [r0, #20]
 8006576:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800657a:	4618      	mov	r0, r3
 800657c:	f7fc fec0 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006580:	4628      	mov	r0, r5
 8006582:	f001 fd45 	bl	8008010 <GUI_MEMDEV_GetBitsPerPixel>
 8006586:	2808      	cmp	r0, #8
 8006588:	4607      	mov	r7, r0
 800658a:	4ea5      	ldr	r6, [pc, #660]	; (8006820 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 800658c:	dd02      	ble.n	8006594 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800658e:	2c00      	cmp	r4, #0
 8006590:	f000 81c9 	beq.w	8006926 <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 8006594:	2301      	movs	r3, #1
 8006596:	2700      	movs	r7, #0
 8006598:	4628      	mov	r0, r5
 800659a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800659e:	9319      	str	r3, [sp, #100]	; 0x64
 80065a0:	930d      	str	r3, [sp, #52]	; 0x34
 80065a2:	9718      	str	r7, [sp, #96]	; 0x60
 80065a4:	f7fc fe9e 	bl	80032e4 <GUI_ALLOC_LockH>
 80065a8:	6802      	ldr	r2, [r0, #0]
 80065aa:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80065ae:	6912      	ldr	r2, [r2, #16]
 80065b0:	930e      	str	r3, [sp, #56]	; 0x38
 80065b2:	6853      	ldr	r3, [r2, #4]
 80065b4:	6832      	ldr	r2, [r6, #0]
 80065b6:	f849 0d14 	str.w	r0, [r9, #-20]!
 80065ba:	6904      	ldr	r4, [r0, #16]
 80065bc:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80065c0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80065c4:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80065c8:	7c50      	ldrb	r0, [r2, #17]
 80065ca:	930c      	str	r3, [sp, #48]	; 0x30
 80065cc:	f7fe f9be 	bl	800494c <GUI_GetBitsPerPixelEx>
 80065d0:	6832      	ldr	r2, [r6, #0]
 80065d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80065d4:	7c50      	ldrb	r0, [r2, #17]
 80065d6:	f7fe f9d7 	bl	8004988 <GUI_GetpfIndex2ColorEx>
 80065da:	900a      	str	r0, [sp, #40]	; 0x28
 80065dc:	4648      	mov	r0, r9
 80065de:	f7fc fe8f 	bl	8003300 <GUI_ALLOC_UnlockH>
 80065e2:	2c08      	cmp	r4, #8
 80065e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e8:	d904      	bls.n	80065f4 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 80065ea:	2c10      	cmp	r4, #16
 80065ec:	bf8c      	ite	hi
 80065ee:	2304      	movhi	r3, #4
 80065f0:	2302      	movls	r3, #2
 80065f2:	e005      	b.n	8006600 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 80065f4:	2c01      	cmp	r4, #1
 80065f6:	d103      	bne.n	8006600 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 80065f8:	ab18      	add	r3, sp, #96	; 0x60
 80065fa:	940d      	str	r4, [sp, #52]	; 0x34
 80065fc:	930a      	str	r3, [sp, #40]	; 0x28
 80065fe:	e001      	b.n	8006604 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8006600:	930d      	str	r3, [sp, #52]	; 0x34
 8006602:	970a      	str	r7, [sp, #40]	; 0x28
 8006604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006606:	4293      	cmp	r3, r2
 8006608:	f000 80df 	beq.w	80067ca <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 800660c:	6833      	ldr	r3, [r6, #0]
 800660e:	7c58      	ldrb	r0, [r3, #17]
 8006610:	f7fe f9c2 	bl	8004998 <GUI_GetpfColor2IndexEx>
 8006614:	900f      	str	r0, [sp, #60]	; 0x3c
 8006616:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800661a:	f7fc fff1 	bl	8003600 <GUI_ALLOC_AllocNoInit>
 800661e:	9010      	str	r0, [sp, #64]	; 0x40
 8006620:	2800      	cmp	r0, #0
 8006622:	f000 833d 	beq.w	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006626:	4628      	mov	r0, r5
 8006628:	f001 fd2a 	bl	8008080 <GUI_MEMDEV_GetDataPtr>
 800662c:	4605      	mov	r5, r0
 800662e:	f1b8 0f00 	cmp.w	r8, #0
 8006632:	f000 80b9 	beq.w	80067a8 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 8006636:	4640      	mov	r0, r8
 8006638:	f7fc fe54 	bl	80032e4 <GUI_ALLOC_LockH>
 800663c:	eb05 030a 	add.w	r3, r5, sl
 8006640:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006644:	9311      	str	r3, [sp, #68]	; 0x44
 8006646:	2300      	movs	r3, #0
 8006648:	9016      	str	r0, [sp, #88]	; 0x58
 800664a:	9309      	str	r3, [sp, #36]	; 0x24
 800664c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800664e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006650:	ebca 0703 	rsb	r7, sl, r3
 8006654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006656:	4293      	cmp	r3, r2
 8006658:	f340 80a2 	ble.w	80067a0 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 800665c:	2300      	movs	r3, #0
 800665e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006660:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8006664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006666:	9317      	str	r3, [sp, #92]	; 0x5c
 8006668:	6883      	ldr	r3, [r0, #8]
 800666a:	4641      	mov	r1, r8
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	4798      	blx	r3
 8006670:	4583      	cmp	fp, r0
 8006672:	4605      	mov	r5, r0
 8006674:	d128      	bne.n	80066c8 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8006676:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006678:	f7fc fe34 	bl	80032e4 <GUI_ALLOC_LockH>
 800667c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800667e:	2c08      	cmp	r4, #8
 8006680:	4601      	mov	r1, r0
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	465a      	mov	r2, fp
 8006686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006688:	9014      	str	r0, [sp, #80]	; 0x50
 800668a:	4638      	mov	r0, r7
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006690:	d902      	bls.n	8006698 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 8006692:	f7ff ff22 	bl	80064da <_Convert16>
 8006696:	e001      	b.n	800669c <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 8006698:	f7ff ff3e 	bl	8006518 <_Convert8>
 800669c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669e:	ad1a      	add	r5, sp, #104	; 0x68
 80066a0:	9808      	ldr	r0, [sp, #32]
 80066a2:	465a      	mov	r2, fp
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	4649      	mov	r1, r9
 80066a8:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	2300      	movs	r3, #0
 80066b0:	9303      	str	r3, [sp, #12]
 80066b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b4:	9302      	str	r3, [sp, #8]
 80066b6:	2301      	movs	r3, #1
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	f7fd fe6e 	bl	800439c <LCD_DrawBitmap>
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7fc fe1d 	bl	8003300 <GUI_ALLOC_UnlockH>
 80066c6:	e062      	b.n	800678e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80066c8:	2c01      	cmp	r4, #1
 80066ca:	d002      	beq.n	80066d2 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 80066cc:	f04f 0801 	mov.w	r8, #1
 80066d0:	e057      	b.n	8006782 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	d05b      	beq.n	800678e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80066d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066d8:	462a      	mov	r2, r5
 80066da:	9e08      	ldr	r6, [sp, #32]
 80066dc:	4649      	mov	r1, r9
 80066de:	f000 0307 	and.w	r3, r0, #7
 80066e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80066e6:	9306      	str	r3, [sp, #24]
 80066e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	2308      	movs	r3, #8
 80066ee:	fb90 f3f3 	sdiv	r3, r0, r3
 80066f2:	443b      	add	r3, r7
 80066f4:	4430      	add	r0, r6
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	2301      	movs	r3, #1
 80066fa:	9302      	str	r3, [sp, #8]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	f7fd fd60 	bl	80041c4 <LCD__DrawBitmap_1bpp>
 8006704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006706:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006708:	4641      	mov	r1, r8
 800670a:	441d      	add	r5, r3
 800670c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800670e:	6883      	ldr	r3, [r0, #8]
 8006710:	9517      	str	r5, [sp, #92]	; 0x5c
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	4798      	blx	r3
 8006716:	4605      	mov	r5, r0
 8006718:	e7db      	b.n	80066d2 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800671a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800671c:	f7fc fde2 	bl	80032e4 <GUI_ALLOC_LockH>
 8006720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006722:	4601      	mov	r1, r0
 8006724:	9014      	str	r0, [sp, #80]	; 0x50
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	2c08      	cmp	r4, #8
 800672a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800672c:	462a      	mov	r2, r5
 800672e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006730:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	fb00 7006 	mla	r0, r0, r6, r7
 8006738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673a:	d925      	bls.n	8006788 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800673c:	f7ff fecd 	bl	80064da <_Convert16>
 8006740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006742:	462a      	mov	r2, r5
 8006744:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006746:	4649      	mov	r1, r9
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800674c:	9e08      	ldr	r6, [sp, #32]
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	2300      	movs	r3, #0
 8006752:	4430      	add	r0, r6
 8006754:	f8cd 8004 	str.w	r8, [sp, #4]
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675c:	f8cd 8000 	str.w	r8, [sp]
 8006760:	9302      	str	r3, [sp, #8]
 8006762:	2301      	movs	r3, #1
 8006764:	f7fd fe1a 	bl	800439c <LCD_DrawBitmap>
 8006768:	a814      	add	r0, sp, #80	; 0x50
 800676a:	f7fc fdc9 	bl	8003300 <GUI_ALLOC_UnlockH>
 800676e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006770:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006772:	a917      	add	r1, sp, #92	; 0x5c
 8006774:	441d      	add	r5, r3
 8006776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006778:	6883      	ldr	r3, [r0, #8]
 800677a:	9517      	str	r5, [sp, #92]	; 0x5c
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	4798      	blx	r3
 8006780:	4605      	mov	r5, r0
 8006782:	2d00      	cmp	r5, #0
 8006784:	d1c9      	bne.n	800671a <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 8006786:	e002      	b.n	800678e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8006788:	f7ff fec6 	bl	8006518 <_Convert8>
 800678c:	e7d8      	b.n	8006740 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	f109 0901 	add.w	r9, r9, #1
 8006794:	3301      	adds	r3, #1
 8006796:	9309      	str	r3, [sp, #36]	; 0x24
 8006798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800679a:	4453      	add	r3, sl
 800679c:	9311      	str	r3, [sp, #68]	; 0x44
 800679e:	e755      	b.n	800664c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 80067a0:	a816      	add	r0, sp, #88	; 0x58
 80067a2:	f7fc fdad 	bl	8003300 <GUI_ALLOC_UnlockH>
 80067a6:	e00e      	b.n	80067c6 <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 80067a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067aa:	465a      	mov	r2, fp
 80067ac:	9004      	str	r0, [sp, #16]
 80067ae:	9305      	str	r3, [sp, #20]
 80067b0:	2301      	movs	r3, #1
 80067b2:	f8cd a00c 	str.w	sl, [sp, #12]
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	9402      	str	r4, [sp, #8]
 80067bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c0:	9808      	ldr	r0, [sp, #32]
 80067c2:	f7fd fdeb 	bl	800439c <LCD_DrawBitmap>
 80067c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80067c8:	e268      	b.n	8006c9c <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 80067ca:	4628      	mov	r0, r5
 80067cc:	f001 fc58 	bl	8008080 <GUI_MEMDEV_GetDataPtr>
 80067d0:	4607      	mov	r7, r0
 80067d2:	f1b8 0f00 	cmp.w	r8, #0
 80067d6:	f000 809a 	beq.w	800690e <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 80067da:	2500      	movs	r5, #0
 80067dc:	4640      	mov	r0, r8
 80067de:	f7fc fd81 	bl	80032e4 <GUI_ALLOC_LockH>
 80067e2:	9016      	str	r0, [sp, #88]	; 0x58
 80067e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067e6:	42ab      	cmp	r3, r5
 80067e8:	f340 808d 	ble.w	8006906 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 80067ec:	2300      	movs	r3, #0
 80067ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 80067f0:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 80067f4:	462a      	mov	r2, r5
 80067f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80067f8:	6883      	ldr	r3, [r0, #8]
 80067fa:	4641      	mov	r1, r8
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	4798      	blx	r3
 8006800:	4583      	cmp	fp, r0
 8006802:	4606      	mov	r6, r0
 8006804:	d126      	bne.n	8006854 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 8006806:	462e      	mov	r6, r5
 8006808:	9816      	ldr	r0, [sp, #88]	; 0x58
 800680a:	f106 0901 	add.w	r9, r6, #1
 800680e:	4641      	mov	r1, r8
 8006810:	6883      	ldr	r3, [r0, #8]
 8006812:	464a      	mov	r2, r9
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	4798      	blx	r3
 8006818:	4583      	cmp	fp, r0
 800681a:	d103      	bne.n	8006824 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 800681c:	464e      	mov	r6, r9
 800681e:	e7f3      	b.n	8006808 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 8006820:	24000028 	.word	0x24000028
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	ebc5 0806 	rsb	r8, r5, r6
 800682a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800682c:	465a      	mov	r2, fp
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	9305      	str	r3, [sp, #20]
 8006834:	2301      	movs	r3, #1
 8006836:	9704      	str	r7, [sp, #16]
 8006838:	4429      	add	r1, r5
 800683a:	f8cd a00c 	str.w	sl, [sp, #12]
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	4635      	mov	r5, r6
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4643      	mov	r3, r8
 8006846:	9402      	str	r4, [sp, #8]
 8006848:	9808      	ldr	r0, [sp, #32]
 800684a:	fb0a 7708 	mla	r7, sl, r8, r7
 800684e:	f7fd fda5 	bl	800439c <LCD_DrawBitmap>
 8006852:	e056      	b.n	8006902 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8006854:	2c01      	cmp	r4, #1
 8006856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006858:	d004      	beq.n	8006864 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 800685a:	442b      	add	r3, r5
 800685c:	f04f 0901 	mov.w	r9, #1
 8006860:	930b      	str	r3, [sp, #44]	; 0x2c
 8006862:	e02b      	b.n	80068bc <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8006864:	eb03 0905 	add.w	r9, r3, r5
 8006868:	46a0      	mov	r8, r4
 800686a:	b32e      	cbz	r6, 80068b8 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800686c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8006870:	4632      	mov	r2, r6
 8006872:	9808      	ldr	r0, [sp, #32]
 8006874:	4649      	mov	r1, r9
 8006876:	f00e 0307 	and.w	r3, lr, #7
 800687a:	f8cd a00c 	str.w	sl, [sp, #12]
 800687e:	4470      	add	r0, lr
 8006880:	f8cd 8008 	str.w	r8, [sp, #8]
 8006884:	9306      	str	r3, [sp, #24]
 8006886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006888:	f8cd 8004 	str.w	r8, [sp, #4]
 800688c:	9305      	str	r3, [sp, #20]
 800688e:	2308      	movs	r3, #8
 8006890:	f8cd 8000 	str.w	r8, [sp]
 8006894:	fb9e f3f3 	sdiv	r3, lr, r3
 8006898:	443b      	add	r3, r7
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	2301      	movs	r3, #1
 800689e:	f7fd fc91 	bl	80041c4 <LCD__DrawBitmap_1bpp>
 80068a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80068a6:	462a      	mov	r2, r5
 80068a8:	441e      	add	r6, r3
 80068aa:	a917      	add	r1, sp, #92	; 0x5c
 80068ac:	6883      	ldr	r3, [r0, #8]
 80068ae:	9617      	str	r6, [sp, #92]	; 0x5c
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	4798      	blx	r3
 80068b4:	4606      	mov	r6, r0
 80068b6:	e7d8      	b.n	800686a <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 80068b8:	4457      	add	r7, sl
 80068ba:	e022      	b.n	8006902 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 80068bc:	2e00      	cmp	r6, #0
 80068be:	d0fb      	beq.n	80068b8 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 80068c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c2:	4632      	mov	r2, r6
 80068c4:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068cc:	9808      	ldr	r0, [sp, #32]
 80068ce:	fb03 730e 	mla	r3, r3, lr, r7
 80068d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068d4:	4470      	add	r0, lr
 80068d6:	f8cd a00c 	str.w	sl, [sp, #12]
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	2301      	movs	r3, #1
 80068de:	9402      	str	r4, [sp, #8]
 80068e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80068e4:	f8cd 9000 	str.w	r9, [sp]
 80068e8:	f7fd fd58 	bl	800439c <LCD_DrawBitmap>
 80068ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 80068f0:	462a      	mov	r2, r5
 80068f2:	441e      	add	r6, r3
 80068f4:	4641      	mov	r1, r8
 80068f6:	6883      	ldr	r3, [r0, #8]
 80068f8:	9617      	str	r6, [sp, #92]	; 0x5c
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	4798      	blx	r3
 80068fe:	4606      	mov	r6, r0
 8006900:	e7dc      	b.n	80068bc <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8006902:	3501      	adds	r5, #1
 8006904:	e76e      	b.n	80067e4 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 8006906:	a816      	add	r0, sp, #88	; 0x58
 8006908:	f7fc fcfa 	bl	8003300 <GUI_ALLOC_UnlockH>
 800690c:	e1c8      	b.n	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006910:	465a      	mov	r2, fp
 8006912:	9004      	str	r0, [sp, #16]
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	2301      	movs	r3, #1
 8006918:	f8cd a00c 	str.w	sl, [sp, #12]
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	9402      	str	r4, [sp, #8]
 8006922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006924:	e03a      	b.n	800699c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8006926:	4628      	mov	r0, r5
 8006928:	f7fc fcdc 	bl	80032e4 <GUI_ALLOC_LockH>
 800692c:	4683      	mov	fp, r0
 800692e:	a81a      	add	r0, sp, #104	; 0x68
 8006930:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8006934:	f840 bd10 	str.w	fp, [r0, #-16]!
 8006938:	930b      	str	r3, [sp, #44]	; 0x2c
 800693a:	f8db 2000 	ldr.w	r2, [fp]
 800693e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006942:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8006946:	930c      	str	r3, [sp, #48]	; 0x30
 8006948:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 800694c:	f7fc fcd8 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006950:	6832      	ldr	r2, [r6, #0]
 8006952:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8006956:	7c50      	ldrb	r0, [r2, #17]
 8006958:	4aa1      	ldr	r2, [pc, #644]	; (8006be0 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 800695a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800695e:	6916      	ldr	r6, [r2, #16]
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	930a      	str	r3, [sp, #40]	; 0x28
 8006964:	f7fd fff2 	bl	800494c <GUI_GetBitsPerPixelEx>
 8006968:	2808      	cmp	r0, #8
 800696a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696c:	d906      	bls.n	800697c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800696e:	2810      	cmp	r0, #16
 8006970:	bf8c      	ite	hi
 8006972:	f04f 0a04 	movhi.w	sl, #4
 8006976:	f04f 0a02 	movls.w	sl, #2
 800697a:	e001      	b.n	8006980 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 800697c:	f04f 0a01 	mov.w	sl, #1
 8006980:	45b0      	cmp	r8, r6
 8006982:	d110      	bne.n	80069a6 <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 8006984:	2200      	movs	r2, #0
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	2301      	movs	r3, #1
 800698a:	f10b 0018 	add.w	r0, fp, #24
 800698e:	9205      	str	r2, [sp, #20]
 8006990:	4622      	mov	r2, r4
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006998:	9004      	str	r0, [sp, #16]
 800699a:	9702      	str	r7, [sp, #8]
 800699c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800699e:	9808      	ldr	r0, [sp, #32]
 80069a0:	f7fd fcfc 	bl	800439c <LCD_DrawBitmap>
 80069a4:	e17c      	b.n	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80069a6:	2f20      	cmp	r7, #32
 80069a8:	f040 80a2 	bne.w	8006af0 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 80069ac:	fb0a f004 	mul.w	r0, sl, r4
 80069b0:	f7fc fe26 	bl	8003600 <GUI_ALLOC_AllocNoInit>
 80069b4:	900d      	str	r0, [sp, #52]	; 0x34
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f000 8172 	beq.w	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80069bc:	f7fc fc92 	bl	80032e4 <GUI_ALLOC_LockH>
 80069c0:	9018      	str	r0, [sp, #96]	; 0x60
 80069c2:	4628      	mov	r0, r5
 80069c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069c8:	f7fc fc8c 	bl	80032e4 <GUI_ALLOC_LockH>
 80069cc:	9016      	str	r0, [sp, #88]	; 0x58
 80069ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d2:	6933      	ldr	r3, [r6, #16]
 80069d4:	f100 0518 	add.w	r5, r0, #24
 80069d8:	920c      	str	r2, [sp, #48]	; 0x30
 80069da:	b373      	cbz	r3, 8006a3a <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80069dc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80069e0:	f04f 0901 	mov.w	r9, #1
 80069e4:	f1ba 0f02 	cmp.w	sl, #2
 80069e8:	d005      	beq.n	80069f6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80069ea:	f1ba 0f04 	cmp.w	sl, #4
 80069ee:	d002      	beq.n	80069f6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80069f0:	f1ba 0f01 	cmp.w	sl, #1
 80069f4:	d106      	bne.n	8006a04 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 80069f6:	4628      	mov	r0, r5
 80069f8:	445d      	add	r5, fp
 80069fa:	6937      	ldr	r7, [r6, #16]
 80069fc:	4653      	mov	r3, sl
 80069fe:	4622      	mov	r2, r4
 8006a00:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a02:	47b8      	blx	r7
 8006a04:	2300      	movs	r3, #0
 8006a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a08:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	f108 0701 	add.w	r7, r8, #1
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a18:	9204      	str	r2, [sp, #16]
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	9302      	str	r3, [sp, #8]
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f8cd 9000 	str.w	r9, [sp]
 8006a24:	9808      	ldr	r0, [sp, #32]
 8006a26:	f7fd fcb9 	bl	800439c <LCD_DrawBitmap>
 8006a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a2e:	4413      	add	r3, r2
 8006a30:	429f      	cmp	r7, r3
 8006a32:	f000 812c 	beq.w	8006c8e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006a36:	46b8      	mov	r8, r7
 8006a38:	e7d4      	b.n	80069e4 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 8006a3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a3c:	461e      	mov	r6, r3
 8006a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a40:	f04f 0901 	mov.w	r9, #1
 8006a44:	443b      	add	r3, r7
 8006a46:	9309      	str	r3, [sp, #36]	; 0x24
 8006a48:	f1ba 0f02 	cmp.w	sl, #2
 8006a4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a50:	d016      	beq.n	8006a80 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 8006a52:	f1ba 0f04 	cmp.w	sl, #4
 8006a56:	d024      	beq.n	8006aa2 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 8006a58:	f1ba 0f01 	cmp.w	sl, #1
 8006a5c:	d130      	bne.n	8006ac0 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 8006a5e:	4643      	mov	r3, r8
 8006a60:	462a      	mov	r2, r5
 8006a62:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a66:	930e      	str	r3, [sp, #56]	; 0x38
 8006a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a6c:	4798      	blx	r3
 8006a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a72:	f803 0b01 	strb.w	r0, [r3], #1
 8006a76:	1ae1      	subs	r1, r4, r3
 8006a78:	eb18 0f01 	cmn.w	r8, r1
 8006a7c:	d1f1      	bne.n	8006a62 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 8006a7e:	e01e      	b.n	8006abe <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8006a80:	4643      	mov	r3, r8
 8006a82:	462a      	mov	r2, r5
 8006a84:	46a0      	mov	r8, r4
 8006a86:	f852 0b04 	ldr.w	r0, [r2], #4
 8006a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a90:	4798      	blx	r3
 8006a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a94:	f1b8 0801 	subs.w	r8, r8, #1
 8006a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a9a:	f823 0b02 	strh.w	r0, [r3], #2
 8006a9e:	d1f2      	bne.n	8006a86 <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 8006aa0:	e00d      	b.n	8006abe <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	f852 0b04 	ldr.w	r0, [r2], #4
 8006aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ab0:	4798      	blx	r3
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab4:	f848 0b04 	str.w	r0, [r8], #4
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006abc:	d1f3      	bne.n	8006aa6 <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8006abe:	445d      	add	r5, fp
 8006ac0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	9605      	str	r6, [sp, #20]
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	f107 0801 	add.w	r8, r7, #1
 8006ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad0:	9603      	str	r6, [sp, #12]
 8006ad2:	9302      	str	r3, [sp, #8]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ada:	f8cd 9000 	str.w	r9, [sp]
 8006ade:	9808      	ldr	r0, [sp, #32]
 8006ae0:	f7fd fc5c 	bl	800439c <LCD_DrawBitmap>
 8006ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae6:	4543      	cmp	r3, r8
 8006ae8:	f000 80d1 	beq.w	8006c8e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006aec:	4647      	mov	r7, r8
 8006aee:	e7ab      	b.n	8006a48 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8006af0:	2f10      	cmp	r7, #16
 8006af2:	f040 80d5 	bne.w	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006af6:	fb04 f00a 	mul.w	r0, r4, sl
 8006afa:	f7fc fd81 	bl	8003600 <GUI_ALLOC_AllocNoInit>
 8006afe:	900d      	str	r0, [sp, #52]	; 0x34
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f000 80cd 	beq.w	8006ca0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8006b06:	f7fc fbed 	bl	80032e4 <GUI_ALLOC_LockH>
 8006b0a:	9018      	str	r0, [sp, #96]	; 0x60
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f7fc fbe9 	bl	80032e4 <GUI_ALLOC_LockH>
 8006b12:	9016      	str	r0, [sp, #88]	; 0x58
 8006b14:	6933      	ldr	r3, [r6, #16]
 8006b16:	f100 0718 	add.w	r7, r0, #24
 8006b1a:	b113      	cbz	r3, 8006b22 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8006b1c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006b20:	b953      	cbnz	r3, 8006b38 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 8006b22:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006b26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b28:	0066      	lsls	r6, r4, #1
 8006b2a:	f04f 0b00 	mov.w	fp, #0
 8006b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b32:	442b      	add	r3, r5
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	e083      	b.n	8006c40 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8006b38:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006b3c:	0080      	lsls	r0, r0, #2
 8006b3e:	f7fc fd5f 	bl	8003600 <GUI_ALLOC_AllocNoInit>
 8006b42:	900c      	str	r0, [sp, #48]	; 0x30
 8006b44:	b118      	cbz	r0, 8006b4e <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8006b46:	f7fc fbcd 	bl	80032e4 <GUI_ALLOC_LockH>
 8006b4a:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b4c:	e001      	b.n	8006b52 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8006b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b50:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 809a 	beq.w	8006c8e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006b5a:	0063      	lsls	r3, r4, #1
 8006b5c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006b60:	930a      	str	r3, [sp, #40]	; 0x28
 8006b62:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006b66:	930e      	str	r3, [sp, #56]	; 0x38
 8006b68:	f1ba 0f02 	cmp.w	sl, #2
 8006b6c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8006b70:	d006      	beq.n	8006b80 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 8006b72:	f1ba 0f04 	cmp.w	sl, #4
 8006b76:	d005      	beq.n	8006b84 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8006b78:	f1ba 0f01 	cmp.w	sl, #1
 8006b7c:	d111      	bne.n	8006ba2 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 8006b7e:	e001      	b.n	8006b84 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8006b80:	4653      	mov	r3, sl
 8006b82:	e000      	b.n	8006b86 <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 8006b84:	2302      	movs	r3, #2
 8006b86:	4638      	mov	r0, r7
 8006b88:	4622      	mov	r2, r4
 8006b8a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006b8c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8006b90:	47a8      	blx	r5
 8006b92:	4653      	mov	r3, sl
 8006b94:	4622      	mov	r2, r4
 8006b96:	4649      	mov	r1, r9
 8006b98:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006b9a:	6935      	ldr	r5, [r6, #16]
 8006b9c:	47a8      	blx	r5
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba0:	441f      	add	r7, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	9808      	ldr	r0, [sp, #32]
 8006baa:	9305      	str	r3, [sp, #20]
 8006bac:	f10b 0901 	add.w	r9, fp, #1
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bb4:	9204      	str	r2, [sp, #16]
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	9302      	str	r3, [sp, #8]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	f7fd fbec 	bl	800439c <LCD_DrawBitmap>
 8006bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc8:	4413      	add	r3, r2
 8006bca:	4599      	cmp	r9, r3
 8006bcc:	d001      	beq.n	8006bd2 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 8006bce:	46cb      	mov	fp, r9
 8006bd0:	e7ca      	b.n	8006b68 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 8006bd2:	a817      	add	r0, sp, #92	; 0x5c
 8006bd4:	f7fc fb94 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006bd8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006bda:	f7fc fbb1 	bl	8003340 <GUI_ALLOC_Free>
 8006bde:	e056      	b.n	8006c8e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006be0:	2402d630 	.word	0x2402d630
 8006be4:	f1ba 0f04 	cmp.w	sl, #4
 8006be8:	d041      	beq.n	8006c6e <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8006bea:	f1ba 0f01 	cmp.w	sl, #1
 8006bee:	d111      	bne.n	8006c14 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8006bf0:	4643      	mov	r3, r8
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8006bfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bfc:	47c8      	blx	r9
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	4798      	blx	r3
 8006c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c06:	f803 0b01 	strb.w	r0, [r3], #1
 8006c0a:	1ae1      	subs	r1, r4, r3
 8006c0c:	eb18 0f01 	cmn.w	r8, r1
 8006c10:	d1f0      	bne.n	8006bf4 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 8006c12:	4437      	add	r7, r6
 8006c14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c16:	4622      	mov	r2, r4
 8006c18:	f8cd b014 	str.w	fp, [sp, #20]
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	9304      	str	r3, [sp, #16]
 8006c20:	f105 0801 	add.w	r8, r5, #1
 8006c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c26:	f8cd b00c 	str.w	fp, [sp, #12]
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	9808      	ldr	r0, [sp, #32]
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	f7fd fbb2 	bl	800439c <LCD_DrawBitmap>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	4543      	cmp	r3, r8
 8006c3c:	d027      	beq.n	8006c8e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8006c3e:	4645      	mov	r5, r8
 8006c40:	f1ba 0f02 	cmp.w	sl, #2
 8006c44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c48:	d1cc      	bne.n	8006be4 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8006c4a:	4643      	mov	r3, r8
 8006c4c:	463a      	mov	r2, r7
 8006c4e:	46a0      	mov	r8, r4
 8006c50:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c54:	930e      	str	r3, [sp, #56]	; 0x38
 8006c56:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c58:	47c8      	blx	r9
 8006c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5c:	4798      	blx	r3
 8006c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c60:	f1b8 0801 	subs.w	r8, r8, #1
 8006c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c66:	f823 0b02 	strh.w	r0, [r3], #2
 8006c6a:	d1f1      	bne.n	8006c50 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 8006c6c:	e7d1      	b.n	8006c12 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8006c6e:	463a      	mov	r2, r7
 8006c70:	4623      	mov	r3, r4
 8006c72:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006c76:	930e      	str	r3, [sp, #56]	; 0x38
 8006c78:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c7a:	47c8      	blx	r9
 8006c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7e:	4798      	blx	r3
 8006c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c82:	f848 0b04 	str.w	r0, [r8], #4
 8006c86:	3b01      	subs	r3, #1
 8006c88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c8a:	d1f2      	bne.n	8006c72 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8006c8c:	e7c1      	b.n	8006c12 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8006c8e:	a816      	add	r0, sp, #88	; 0x58
 8006c90:	f7fc fb36 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006c94:	a818      	add	r0, sp, #96	; 0x60
 8006c96:	f7fc fb33 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006c9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c9c:	f7fc fb50 	bl	8003340 <GUI_ALLOC_Free>
 8006ca0:	b01b      	add	sp, #108	; 0x6c
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	bf00      	nop

08006ca8 <_OnExit>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <_OnExit+0x6c>)
 8006cac:	2400      	movs	r4, #0
 8006cae:	4d1a      	ldr	r5, [pc, #104]	; (8006d18 <_OnExit+0x70>)
 8006cb0:	601c      	str	r4, [r3, #0]
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <_OnExit+0x74>)
 8006cb6:	481a      	ldr	r0, [pc, #104]	; (8006d20 <_OnExit+0x78>)
 8006cb8:	601c      	str	r4, [r3, #0]
 8006cba:	605c      	str	r4, [r3, #4]
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <_OnExit+0x7c>)
 8006cc0:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <_OnExit+0x80>)
 8006cc2:	601c      	str	r4, [r3, #0]
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <_OnExit+0x84>)
 8006cc6:	f800 4c0c 	strb.w	r4, [r0, #-12]
 8006cca:	601c      	str	r4, [r3, #0]
 8006ccc:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <_OnExit+0x88>)
 8006cce:	f840 4c08 	str.w	r4, [r0, #-8]
 8006cd2:	601c      	str	r4, [r3, #0]
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <_OnExit+0x8c>)
 8006cd6:	6014      	str	r4, [r2, #0]
 8006cd8:	6054      	str	r4, [r2, #4]
 8006cda:	2218      	movs	r2, #24
 8006cdc:	601c      	str	r4, [r3, #0]
 8006cde:	f840 4c04 	str.w	r4, [r0, #-4]
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	4798      	blx	r3
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <_OnExit+0x90>)
 8006ce8:	4621      	mov	r1, r4
 8006cea:	2210      	movs	r2, #16
 8006cec:	601c      	str	r4, [r3, #0]
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <_OnExit+0x94>)
 8006cf0:	4813      	ldr	r0, [pc, #76]	; (8006d40 <_OnExit+0x98>)
 8006cf2:	601c      	str	r4, [r3, #0]
 8006cf4:	605c      	str	r4, [r3, #4]
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	4798      	blx	r3
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	2210      	movs	r2, #16
 8006d00:	4810      	ldr	r0, [pc, #64]	; (8006d44 <_OnExit+0x9c>)
 8006d02:	4798      	blx	r3
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	4621      	mov	r1, r4
 8006d08:	2210      	movs	r2, #16
 8006d0a:	480f      	ldr	r0, [pc, #60]	; (8006d48 <_OnExit+0xa0>)
 8006d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d10:	4718      	bx	r3
 8006d12:	bf00      	nop
 8006d14:	2402d688 	.word	0x2402d688
 8006d18:	24000030 	.word	0x24000030
 8006d1c:	2402d690 	.word	0x2402d690
 8006d20:	2402d408 	.word	0x2402d408
 8006d24:	2402d69c 	.word	0x2402d69c
 8006d28:	2402d65c 	.word	0x2402d65c
 8006d2c:	2402d648 	.word	0x2402d648
 8006d30:	2402d67c 	.word	0x2402d67c
 8006d34:	2402d68c 	.word	0x2402d68c
 8006d38:	2402d658 	.word	0x2402d658
 8006d3c:	2402d64c 	.word	0x2402d64c
 8006d40:	2402d6c0 	.word	0x2402d6c0
 8006d44:	2402d6b0 	.word	0x2402d6b0
 8006d48:	2402d6a0 	.word	0x2402d6a0

08006d4c <_Findy1>:
 8006d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	4607      	mov	r7, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	4616      	mov	r6, r2
 8006d56:	ad02      	add	r5, sp, #8
 8006d58:	2f00      	cmp	r7, #0
 8006d5a:	d048      	beq.n	8006dee <_Findy1+0xa2>
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7fc fac1 	bl	80032e4 <GUI_ALLOC_LockH>
 8006d62:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8006d64:	4601      	mov	r1, r0
 8006d66:	9001      	str	r0, [sp, #4]
 8006d68:	07bb      	lsls	r3, r7, #30
 8006d6a:	d53a      	bpl.n	8006de2 <_Findy1+0x96>
 8006d6c:	b126      	cbz	r6, 8006d78 <_Findy1+0x2c>
 8006d6e:	4632      	mov	r2, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	f7fd f8fe 	bl	8003f72 <GUI__IntersectRects>
 8006d76:	e002      	b.n	8006d7e <_Findy1+0x32>
 8006d78:	c803      	ldmia	r0, {r0, r1}
 8006d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4620      	mov	r0, r4
 8006d82:	f7fc fd8d 	bl	80038a0 <GUI_RectsIntersect>
 8006d86:	b360      	cbz	r0, 8006de2 <_Findy1+0x96>
 8006d88:	f017 0f01 	tst.w	r7, #1
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	d11c      	bne.n	8006dca <_Findy1+0x7e>
 8006d90:	b13e      	cbz	r6, 8006da2 <_Findy1+0x56>
 8006d92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006d96:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	bfb8      	it	lt
 8006d9e:	4613      	movlt	r3, r2
 8006da0:	e001      	b.n	8006da6 <_Findy1+0x5a>
 8006da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006da6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8006db0:	dd05      	ble.n	8006dbe <_Findy1+0x72>
 8006db2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	db13      	blt.n	8006de2 <_Findy1+0x96>
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	e003      	b.n	8006dc6 <_Findy1+0x7a>
 8006dbe:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	dd0d      	ble.n	8006de2 <_Findy1+0x96>
 8006dc6:	80e3      	strh	r3, [r4, #6]
 8006dc8:	e00b      	b.n	8006de2 <_Findy1+0x96>
 8006dca:	69df      	ldr	r7, [r3, #28]
 8006dcc:	b14f      	cbz	r7, 8006de2 <_Findy1+0x96>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	f7ff ffba 	bl	8006d4c <_Findy1>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7fc fa79 	bl	80032d0 <GUI_ALLOC_h2p>
 8006dde:	6a07      	ldr	r7, [r0, #32]
 8006de0:	e7f4      	b.n	8006dcc <_Findy1+0x80>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	a801      	add	r0, sp, #4
 8006de6:	6a1f      	ldr	r7, [r3, #32]
 8006de8:	f7fc fa8a 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006dec:	e7b4      	b.n	8006d58 <_Findy1+0xc>
 8006dee:	b005      	add	sp, #20
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006df2 <_Findx0>:
 8006df2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006df6:	4606      	mov	r6, r0
 8006df8:	460f      	mov	r7, r1
 8006dfa:	4690      	mov	r8, r2
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	ac02      	add	r4, sp, #8
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	d035      	beq.n	8006e70 <_Findx0+0x7e>
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7fc fa6d 	bl	80032e4 <GUI_ALLOC_LockH>
 8006e0a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006e0c:	4601      	mov	r1, r0
 8006e0e:	9001      	str	r0, [sp, #4]
 8006e10:	07b2      	lsls	r2, r6, #30
 8006e12:	d527      	bpl.n	8006e64 <_Findx0+0x72>
 8006e14:	f1b8 0f00 	cmp.w	r8, #0
 8006e18:	d004      	beq.n	8006e24 <_Findx0+0x32>
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7fd f8a8 	bl	8003f72 <GUI__IntersectRects>
 8006e22:	e002      	b.n	8006e2a <_Findx0+0x38>
 8006e24:	c803      	ldmia	r0, {r0, r1}
 8006e26:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7fc fd37 	bl	80038a0 <GUI_RectsIntersect>
 8006e32:	b1b8      	cbz	r0, 8006e64 <_Findx0+0x72>
 8006e34:	07f3      	lsls	r3, r6, #31
 8006e36:	d405      	bmi.n	8006e44 <_Findx0+0x52>
 8006e38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	3301      	adds	r3, #1
 8006e40:	803b      	strh	r3, [r7, #0]
 8006e42:	e00f      	b.n	8006e64 <_Findx0+0x72>
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	69de      	ldr	r6, [r3, #28]
 8006e48:	b166      	cbz	r6, 8006e64 <_Findx0+0x72>
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff ffcf 	bl	8006df2 <_Findx0>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	4630      	mov	r0, r6
 8006e58:	bf18      	it	ne
 8006e5a:	2501      	movne	r5, #1
 8006e5c:	f7fc fa38 	bl	80032d0 <GUI_ALLOC_h2p>
 8006e60:	6a06      	ldr	r6, [r0, #32]
 8006e62:	e7f1      	b.n	8006e48 <_Findx0+0x56>
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	a801      	add	r0, sp, #4
 8006e68:	6a1e      	ldr	r6, [r3, #32]
 8006e6a:	f7fc fa49 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006e6e:	e7c7      	b.n	8006e00 <_Findx0+0xe>
 8006e70:	4628      	mov	r0, r5
 8006e72:	b004      	add	sp, #16
 8006e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e78 <_Findx1>:
 8006e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	460e      	mov	r6, r1
 8006e80:	4617      	mov	r7, r2
 8006e82:	ac02      	add	r4, sp, #8
 8006e84:	b37d      	cbz	r5, 8006ee6 <_Findx1+0x6e>
 8006e86:	4628      	mov	r0, r5
 8006e88:	f7fc fa2c 	bl	80032e4 <GUI_ALLOC_LockH>
 8006e8c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8006e8e:	4601      	mov	r1, r0
 8006e90:	9001      	str	r0, [sp, #4]
 8006e92:	07aa      	lsls	r2, r5, #30
 8006e94:	d521      	bpl.n	8006eda <_Findx1+0x62>
 8006e96:	b127      	cbz	r7, 8006ea2 <_Findx1+0x2a>
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7fd f869 	bl	8003f72 <GUI__IntersectRects>
 8006ea0:	e002      	b.n	8006ea8 <_Findx1+0x30>
 8006ea2:	c803      	ldmia	r0, {r0, r1}
 8006ea4:	e884 0003 	stmia.w	r4, {r0, r1}
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7fc fcf8 	bl	80038a0 <GUI_RectsIntersect>
 8006eb0:	b198      	cbz	r0, 8006eda <_Findx1+0x62>
 8006eb2:	07eb      	lsls	r3, r5, #31
 8006eb4:	d404      	bmi.n	8006ec0 <_Findx1+0x48>
 8006eb6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	80b3      	strh	r3, [r6, #4]
 8006ebe:	e00c      	b.n	8006eda <_Findx1+0x62>
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	69dd      	ldr	r5, [r3, #28]
 8006ec4:	b14d      	cbz	r5, 8006eda <_Findx1+0x62>
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4631      	mov	r1, r6
 8006ecc:	f7ff ffd4 	bl	8006e78 <_Findx1>
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7fc f9fd 	bl	80032d0 <GUI_ALLOC_h2p>
 8006ed6:	6a05      	ldr	r5, [r0, #32]
 8006ed8:	e7f4      	b.n	8006ec4 <_Findx1+0x4c>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	a801      	add	r0, sp, #4
 8006ede:	6a1d      	ldr	r5, [r3, #32]
 8006ee0:	f7fc fa0e 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006ee4:	e7ce      	b.n	8006e84 <_Findx1+0xc>
 8006ee6:	b005      	add	sp, #20
 8006ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006eec <WM__ClipAtParentBorders>:
 8006eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f7fc f9f6 	bl	80032e4 <GUI_ALLOC_LockH>
 8006ef8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006efa:	4601      	mov	r1, r0
 8006efc:	9001      	str	r0, [sp, #4]
 8006efe:	f013 0402 	ands.w	r4, r3, #2
 8006f02:	d104      	bne.n	8006f0e <WM__ClipAtParentBorders+0x22>
 8006f04:	a801      	add	r0, sp, #4
 8006f06:	f7fc f9fb 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	e016      	b.n	8006f3c <WM__ClipAtParentBorders+0x50>
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7fd f812 	bl	8003f38 <GUI__IntersectRect>
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	a801      	add	r0, sp, #4
 8006f18:	699c      	ldr	r4, [r3, #24]
 8006f1a:	b954      	cbnz	r4, 8006f32 <WM__ClipAtParentBorders+0x46>
 8006f1c:	f7fc f9f0 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006f20:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <WM__ClipAtParentBorders+0x54>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4295      	cmp	r5, r2
 8006f26:	d008      	beq.n	8006f3a <WM__ClipAtParentBorders+0x4e>
 8006f28:	6858      	ldr	r0, [r3, #4]
 8006f2a:	1b43      	subs	r3, r0, r5
 8006f2c:	4258      	negs	r0, r3
 8006f2e:	4158      	adcs	r0, r3
 8006f30:	e004      	b.n	8006f3c <WM__ClipAtParentBorders+0x50>
 8006f32:	f7fc f9e5 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006f36:	4625      	mov	r5, r4
 8006f38:	e7db      	b.n	8006ef2 <WM__ClipAtParentBorders+0x6>
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	b002      	add	sp, #8
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	2402d64c 	.word	0x2402d64c

08006f44 <WM__InsertWindowIntoList>:
 8006f44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006f48:	4606      	mov	r6, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	d04c      	beq.n	8006fea <WM__InsertWindowIntoList+0xa6>
 8006f50:	f7fc f9c8 	bl	80032e4 <GUI_ALLOC_LockH>
 8006f54:	2300      	movs	r3, #0
 8006f56:	6184      	str	r4, [r0, #24]
 8006f58:	9001      	str	r0, [sp, #4]
 8006f5a:	6203      	str	r3, [r0, #32]
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7fc f9c1 	bl	80032e4 <GUI_ALLOC_LockH>
 8006f62:	ac04      	add	r4, sp, #16
 8006f64:	69c7      	ldr	r7, [r0, #28]
 8006f66:	f844 0d08 	str.w	r0, [r4, #-8]!
 8006f6a:	b92f      	cbnz	r7, 8006f78 <WM__InsertWindowIntoList+0x34>
 8006f6c:	61c6      	str	r6, [r0, #28]
 8006f6e:	a801      	add	r0, sp, #4
 8006f70:	f7fc f9c6 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006f74:	4620      	mov	r0, r4
 8006f76:	e036      	b.n	8006fe6 <WM__InsertWindowIntoList+0xa2>
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	f10d 0810 	add.w	r8, sp, #16
 8006f7e:	4638      	mov	r0, r7
 8006f80:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006f82:	f7fc f9af 	bl	80032e4 <GUI_ALLOC_LockH>
 8006f86:	f848 0d04 	str.w	r0, [r8, #-4]!
 8006f8a:	f005 0508 	and.w	r5, r5, #8
 8006f8e:	b975      	cbnz	r5, 8006fae <WM__InsertWindowIntoList+0x6a>
 8006f90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f92:	071a      	lsls	r2, r3, #28
 8006f94:	d50b      	bpl.n	8006fae <WM__InsertWindowIntoList+0x6a>
 8006f96:	9b01      	ldr	r3, [sp, #4]
 8006f98:	a801      	add	r0, sp, #4
 8006f9a:	621f      	str	r7, [r3, #32]
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	61de      	str	r6, [r3, #28]
 8006fa0:	f7fc f9ae 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7fc f9ab 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006faa:	4640      	mov	r0, r8
 8006fac:	e01b      	b.n	8006fe6 <WM__InsertWindowIntoList+0xa2>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f7fc f9a6 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	f7fc f9a3 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006fba:	4638      	mov	r0, r7
 8006fbc:	f7fc f988 	bl	80032d0 <GUI_ALLOC_h2p>
 8006fc0:	9003      	str	r0, [sp, #12]
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	6a1c      	ldr	r4, [r3, #32]
 8006fc6:	b90c      	cbnz	r4, 8006fcc <WM__InsertWindowIntoList+0x88>
 8006fc8:	621e      	str	r6, [r3, #32]
 8006fca:	e00b      	b.n	8006fe4 <WM__InsertWindowIntoList+0xa0>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f7fc f97f 	bl	80032d0 <GUI_ALLOC_h2p>
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	d1f4      	bne.n	8006fc0 <WM__InsertWindowIntoList+0x7c>
 8006fd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fd8:	071b      	lsls	r3, r3, #28
 8006fda:	d5f1      	bpl.n	8006fc0 <WM__InsertWindowIntoList+0x7c>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	621e      	str	r6, [r3, #32]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	621c      	str	r4, [r3, #32]
 8006fe4:	a801      	add	r0, sp, #4
 8006fe6:	f7fc f98b 	bl	8003300 <GUI_ALLOC_UnlockH>
 8006fea:	b004      	add	sp, #16
 8006fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ff0 <WM__Client2Screen>:
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006ff8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006ffc:	f7fc bc37 	b.w	800386e <GUI_MoveRect>

08007000 <_SetClipRectUserIntersect>:
 8007000:	4b11      	ldr	r3, [pc, #68]	; (8007048 <_SetClipRectUserIntersect+0x48>)
 8007002:	b530      	push	{r4, r5, lr}
 8007004:	681c      	ldr	r4, [r3, #0]
 8007006:	b085      	sub	sp, #20
 8007008:	4605      	mov	r5, r0
 800700a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800700c:	b1ba      	cbz	r2, 800703e <_SetClipRectUserIntersect+0x3e>
 800700e:	6810      	ldr	r0, [r2, #0]
 8007010:	ab02      	add	r3, sp, #8
 8007012:	6851      	ldr	r1, [r2, #4]
 8007014:	c303      	stmia	r3!, {r0, r1}
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <_SetClipRectUserIntersect+0x4c>)
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	b900      	cbnz	r0, 800701e <_SetClipRectUserIntersect+0x1e>
 800701c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800701e:	ac04      	add	r4, sp, #16
 8007020:	f7fc f960 	bl	80032e4 <GUI_ALLOC_LockH>
 8007024:	a902      	add	r1, sp, #8
 8007026:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800702a:	f7ff ffe1 	bl	8006ff0 <WM__Client2Screen>
 800702e:	4620      	mov	r0, r4
 8007030:	f7fc f966 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007034:	a802      	add	r0, sp, #8
 8007036:	4629      	mov	r1, r5
 8007038:	f7fc ff7e 	bl	8003f38 <GUI__IntersectRect>
 800703c:	a802      	add	r0, sp, #8
 800703e:	f000 ffcf 	bl	8007fe0 <LCD_SetClipRectEx>
 8007042:	b005      	add	sp, #20
 8007044:	bd30      	pop	{r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	24000028 	.word	0x24000028
 800704c:	2402d648 	.word	0x2402d648

08007050 <WM__ActivateClipRect>:
 8007050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007052:	4b0e      	ldr	r3, [pc, #56]	; (800708c <WM__ActivateClipRect+0x3c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800705a:	b10a      	cbz	r2, 8007060 <WM__ActivateClipRect+0x10>
 800705c:	480c      	ldr	r0, [pc, #48]	; (8007090 <WM__ActivateClipRect+0x40>)
 800705e:	e011      	b.n	8007084 <WM__ActivateClipRect+0x34>
 8007060:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007062:	ac02      	add	r4, sp, #8
 8007064:	f7fc f93e 	bl	80032e4 <GUI_ALLOC_LockH>
 8007068:	9001      	str	r0, [sp, #4]
 800706a:	c803      	ldmia	r0, {r0, r1}
 800706c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007070:	a801      	add	r0, sp, #4
 8007072:	f7fc f945 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007076:	4b07      	ldr	r3, [pc, #28]	; (8007094 <WM__ActivateClipRect+0x44>)
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	b111      	cbz	r1, 8007082 <WM__ActivateClipRect+0x32>
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff ff35 	bl	8006eec <WM__ClipAtParentBorders>
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff ffbc 	bl	8007000 <_SetClipRectUserIntersect>
 8007088:	b004      	add	sp, #16
 800708a:	bd10      	pop	{r4, pc}
 800708c:	24000028 	.word	0x24000028
 8007090:	2402d41c 	.word	0x2402d41c
 8007094:	2402d648 	.word	0x2402d648

08007098 <WM__InvalidateDrawAndDescs>:
 8007098:	b513      	push	{r0, r1, r4, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	b300      	cbz	r0, 80070e0 <WM__InvalidateDrawAndDescs+0x48>
 800709e:	f7fc f921 	bl	80032e4 <GUI_ALLOC_LockH>
 80070a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070a4:	9001      	str	r0, [sp, #4]
 80070a6:	079b      	lsls	r3, r3, #30
 80070a8:	d517      	bpl.n	80070da <WM__InvalidateDrawAndDescs+0x42>
 80070aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80070ac:	b140      	cbz	r0, 80070c0 <WM__InvalidateDrawAndDescs+0x28>
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <WM__InvalidateDrawAndDescs+0x4c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d004      	beq.n	80070c0 <WM__InvalidateDrawAndDescs+0x28>
 80070b6:	f000 ffc1 	bl	800803c <GUI_MEMDEV_Delete>
 80070ba:	2200      	movs	r2, #0
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	625a      	str	r2, [r3, #36]	; 0x24
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fc4f 	bl	8007964 <WM_GetFirstChild>
 80070c6:	4604      	mov	r4, r0
 80070c8:	b13c      	cbz	r4, 80070da <WM__InvalidateDrawAndDescs+0x42>
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff ffe4 	bl	8007098 <WM__InvalidateDrawAndDescs>
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7fc f8fd 	bl	80032d0 <GUI_ALLOC_h2p>
 80070d6:	6a04      	ldr	r4, [r0, #32]
 80070d8:	e7f6      	b.n	80070c8 <WM__InvalidateDrawAndDescs+0x30>
 80070da:	a801      	add	r0, sp, #4
 80070dc:	f7fc f910 	bl	8003300 <GUI_ALLOC_UnlockH>
 80070e0:	b002      	add	sp, #8
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	2402d698 	.word	0x2402d698

080070e8 <WM__RectIsNZ>:
 80070e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80070ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	dc08      	bgt.n	8007106 <WM__RectIsNZ+0x1e>
 80070f4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80070f8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80070fc:	4283      	cmp	r3, r0
 80070fe:	bfcc      	ite	gt
 8007100:	2000      	movgt	r0, #0
 8007102:	2001      	movle	r0, #1
 8007104:	4770      	bx	lr
 8007106:	2000      	movs	r0, #0
 8007108:	4770      	bx	lr

0800710a <WM__SendMsgNoData>:
 800710a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800710c:	ab04      	add	r3, sp, #16
 800710e:	9001      	str	r0, [sp, #4]
 8007110:	f843 1d10 	str.w	r1, [r3, #-16]!
 8007114:	4619      	mov	r1, r3
 8007116:	f000 fca3 	bl	8007a60 <WM__SendMessage>
 800711a:	b005      	add	sp, #20
 800711c:	f85d fb04 	ldr.w	pc, [sp], #4

08007120 <WM__GetClientRectWin>:
 8007120:	2300      	movs	r3, #0
 8007122:	804b      	strh	r3, [r1, #2]
 8007124:	800b      	strh	r3, [r1, #0]
 8007126:	8883      	ldrh	r3, [r0, #4]
 8007128:	8802      	ldrh	r2, [r0, #0]
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	8842      	ldrh	r2, [r0, #2]
 800712e:	808b      	strh	r3, [r1, #4]
 8007130:	88c3      	ldrh	r3, [r0, #6]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	80cb      	strh	r3, [r1, #6]
 8007136:	4770      	bx	lr

08007138 <WM__GetTopLevelLayer>:
 8007138:	b510      	push	{r4, lr}
 800713a:	4604      	mov	r4, r0
 800713c:	f7fc f8c8 	bl	80032d0 <GUI_ALLOC_h2p>
 8007140:	6980      	ldr	r0, [r0, #24]
 8007142:	2800      	cmp	r0, #0
 8007144:	d1f9      	bne.n	800713a <WM__GetTopLevelLayer+0x2>
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <WM__GetTopLevelLayer+0x24>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4294      	cmp	r4, r2
 800714c:	d005      	beq.n	800715a <WM__GetTopLevelLayer+0x22>
 800714e:	6858      	ldr	r0, [r3, #4]
 8007150:	4284      	cmp	r4, r0
 8007152:	bf0c      	ite	eq
 8007154:	2001      	moveq	r0, #1
 8007156:	f04f 30ff 	movne.w	r0, #4294967295
 800715a:	bd10      	pop	{r4, pc}
 800715c:	2402d64c 	.word	0x2402d64c

08007160 <_Invalidate1Abs>:
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	460d      	mov	r5, r1
 8007166:	4606      	mov	r6, r0
 8007168:	4617      	mov	r7, r2
 800716a:	f7fc f8b1 	bl	80032d0 <GUI_ALLOC_h2p>
 800716e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007170:	9001      	str	r0, [sp, #4]
 8007172:	078b      	lsls	r3, r1, #30
 8007174:	d53e      	bpl.n	80071f4 <_Invalidate1Abs+0x94>
 8007176:	4628      	mov	r0, r5
 8007178:	f7ff ffb6 	bl	80070e8 <WM__RectIsNZ>
 800717c:	2800      	cmp	r0, #0
 800717e:	d039      	beq.n	80071f4 <_Invalidate1Abs+0x94>
 8007180:	f640 0301 	movw	r3, #2049	; 0x801
 8007184:	400b      	ands	r3, r1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d034      	beq.n	80071f4 <_Invalidate1Abs+0x94>
 800718a:	ac02      	add	r4, sp, #8
 800718c:	4630      	mov	r0, r6
 800718e:	f7fc f8a9 	bl	80032e4 <GUI_ALLOC_LockH>
 8007192:	4629      	mov	r1, r5
 8007194:	4602      	mov	r2, r0
 8007196:	9001      	str	r0, [sp, #4]
 8007198:	4620      	mov	r0, r4
 800719a:	f7fc feea 	bl	8003f72 <GUI__IntersectRects>
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff ffa2 	bl	80070e8 <WM__RectIsNZ>
 80071a4:	b318      	cbz	r0, 80071ee <_Invalidate1Abs+0x8e>
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	f244 0120 	movw	r1, #16416	; 0x4020
 80071ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ae:	f103 0508 	add.w	r5, r3, #8
 80071b2:	4011      	ands	r1, r2
 80071b4:	b129      	cbz	r1, 80071c2 <_Invalidate1Abs+0x62>
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4628      	mov	r0, r5
 80071bc:	f7fc fb2c 	bl	8003818 <GUI_MergeRect>
 80071c0:	e015      	b.n	80071ee <_Invalidate1Abs+0x8e>
 80071c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071c6:	433a      	orrs	r2, r7
 80071c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
 80071ce:	4630      	mov	r0, r6
 80071d0:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <_Invalidate1Abs+0x98>)
 80071d2:	8813      	ldrh	r3, [r2, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	8013      	strh	r3, [r2, #0]
 80071d8:	f7ff ffae 	bl	8007138 <WM__GetTopLevelLayer>
 80071dc:	4a07      	ldr	r2, [pc, #28]	; (80071fc <_Invalidate1Abs+0x9c>)
 80071de:	2301      	movs	r3, #1
 80071e0:	fa03 f000 	lsl.w	r0, r3, r0
 80071e4:	6813      	ldr	r3, [r2, #0]
 80071e6:	4303      	orrs	r3, r0
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	f7fc fe9d 	bl	8003f28 <GUI_SignalEvent>
 80071ee:	a801      	add	r0, sp, #4
 80071f0:	f7fc f886 	bl	8003300 <GUI_ALLOC_UnlockH>
 80071f4:	b005      	add	sp, #20
 80071f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f8:	2402d664 	.word	0x2402d664
 80071fc:	2402d674 	.word	0x2402d674

08007200 <WM__Invalidate1Abs>:
 8007200:	2220      	movs	r2, #32
 8007202:	f7ff bfad 	b.w	8007160 <_Invalidate1Abs>

08007206 <WM_InvalidateWindowAndDescsEx>:
 8007206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007208:	460f      	mov	r7, r1
 800720a:	b085      	sub	sp, #20
 800720c:	4615      	mov	r5, r2
 800720e:	4606      	mov	r6, r0
 8007210:	b348      	cbz	r0, 8007266 <WM_InvalidateWindowAndDescsEx+0x60>
 8007212:	f7fc f867 	bl	80032e4 <GUI_ALLOC_LockH>
 8007216:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007218:	ac04      	add	r4, sp, #16
 800721a:	4602      	mov	r2, r0
 800721c:	079b      	lsls	r3, r3, #30
 800721e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007222:	d403      	bmi.n	800722c <WM_InvalidateWindowAndDescsEx+0x26>
 8007224:	4620      	mov	r0, r4
 8007226:	f7fc f86b 	bl	8003300 <GUI_ALLOC_UnlockH>
 800722a:	e01c      	b.n	8007266 <WM_InvalidateWindowAndDescsEx+0x60>
 800722c:	4639      	mov	r1, r7
 800722e:	a802      	add	r0, sp, #8
 8007230:	f7fc fe9f 	bl	8003f72 <GUI__IntersectRects>
 8007234:	2800      	cmp	r0, #0
 8007236:	d0f5      	beq.n	8007224 <WM_InvalidateWindowAndDescsEx+0x1e>
 8007238:	4620      	mov	r0, r4
 800723a:	f7fc f861 	bl	8003300 <GUI_ALLOC_UnlockH>
 800723e:	462a      	mov	r2, r5
 8007240:	a902      	add	r1, sp, #8
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ff8c 	bl	8007160 <_Invalidate1Abs>
 8007248:	4630      	mov	r0, r6
 800724a:	f000 fb8b 	bl	8007964 <WM_GetFirstChild>
 800724e:	4604      	mov	r4, r0
 8007250:	b14c      	cbz	r4, 8007266 <WM_InvalidateWindowAndDescsEx+0x60>
 8007252:	4620      	mov	r0, r4
 8007254:	462a      	mov	r2, r5
 8007256:	a902      	add	r1, sp, #8
 8007258:	f7ff ffd5 	bl	8007206 <WM_InvalidateWindowAndDescsEx>
 800725c:	4620      	mov	r0, r4
 800725e:	f7fc f837 	bl	80032d0 <GUI_ALLOC_h2p>
 8007262:	6a04      	ldr	r4, [r0, #32]
 8007264:	e7f4      	b.n	8007250 <WM_InvalidateWindowAndDescsEx+0x4a>
 8007266:	b005      	add	sp, #20
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800726a <WM__InvalidateRect>:
 800726a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800726e:	4680      	mov	r8, r0
 8007270:	4617      	mov	r7, r2
 8007272:	461d      	mov	r5, r3
 8007274:	460c      	mov	r4, r1
 8007276:	b381      	cbz	r1, 80072da <WM__InvalidateRect+0x70>
 8007278:	4608      	mov	r0, r1
 800727a:	f7fc f833 	bl	80032e4 <GUI_ALLOC_LockH>
 800727e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007280:	4602      	mov	r2, r0
 8007282:	9001      	str	r0, [sp, #4]
 8007284:	07b3      	lsls	r3, r6, #30
 8007286:	d525      	bpl.n	80072d4 <WM__InvalidateRect+0x6a>
 8007288:	4641      	mov	r1, r8
 800728a:	a802      	add	r0, sp, #8
 800728c:	f7fc fe71 	bl	8003f72 <GUI__IntersectRects>
 8007290:	b300      	cbz	r0, 80072d4 <WM__InvalidateRect+0x6a>
 8007292:	f640 0301 	movw	r3, #2049	; 0x801
 8007296:	4033      	ands	r3, r6
 8007298:	2b01      	cmp	r3, #1
 800729a:	d107      	bne.n	80072ac <WM__InvalidateRect+0x42>
 800729c:	9901      	ldr	r1, [sp, #4]
 800729e:	462b      	mov	r3, r5
 80072a0:	a802      	add	r0, sp, #8
 80072a2:	6a0a      	ldr	r2, [r1, #32]
 80072a4:	6989      	ldr	r1, [r1, #24]
 80072a6:	f7ff ffe0 	bl	800726a <WM__InvalidateRect>
 80072aa:	e004      	b.n	80072b6 <WM__InvalidateRect+0x4c>
 80072ac:	462a      	mov	r2, r5
 80072ae:	a902      	add	r1, sp, #8
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff ff55 	bl	8007160 <_Invalidate1Abs>
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	69dc      	ldr	r4, [r3, #28]
 80072ba:	b15c      	cbz	r4, 80072d4 <WM__InvalidateRect+0x6a>
 80072bc:	42bc      	cmp	r4, r7
 80072be:	d009      	beq.n	80072d4 <WM__InvalidateRect+0x6a>
 80072c0:	4620      	mov	r0, r4
 80072c2:	462a      	mov	r2, r5
 80072c4:	a902      	add	r1, sp, #8
 80072c6:	f7ff ff9e 	bl	8007206 <WM_InvalidateWindowAndDescsEx>
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7fc f800 	bl	80032d0 <GUI_ALLOC_h2p>
 80072d0:	6a04      	ldr	r4, [r0, #32]
 80072d2:	e7f2      	b.n	80072ba <WM__InvalidateRect+0x50>
 80072d4:	a801      	add	r0, sp, #4
 80072d6:	f7fc f813 	bl	8003300 <GUI_ALLOC_UnlockH>
 80072da:	b004      	add	sp, #16
 80072dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072e0 <WM__InvalidateRectEx>:
 80072e0:	2320      	movs	r3, #32
 80072e2:	f7ff bfc2 	b.w	800726a <WM__InvalidateRect>

080072e6 <WM_InvalidateRect>:
 80072e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e8:	460f      	mov	r7, r1
 80072ea:	b087      	sub	sp, #28
 80072ec:	4605      	mov	r5, r0
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d033      	beq.n	800735a <WM_InvalidateRect+0x74>
 80072f2:	f7fb fff7 	bl	80032e4 <GUI_ALLOC_LockH>
 80072f6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80072f8:	9001      	str	r0, [sp, #4]
 80072fa:	07b2      	lsls	r2, r6, #30
 80072fc:	d52a      	bpl.n	8007354 <WM_InvalidateRect+0x6e>
 80072fe:	ac04      	add	r4, sp, #16
 8007300:	03f3      	lsls	r3, r6, #15
 8007302:	c803      	ldmia	r0, {r0, r1}
 8007304:	e884 0003 	stmia.w	r4, {r0, r1}
 8007308:	d502      	bpl.n	8007310 <WM_InvalidateRect+0x2a>
 800730a:	4628      	mov	r0, r5
 800730c:	f7ff fec4 	bl	8007098 <WM__InvalidateDrawAndDescs>
 8007310:	b15f      	cbz	r7, 800732a <WM_InvalidateRect+0x44>
 8007312:	6838      	ldr	r0, [r7, #0]
 8007314:	ab02      	add	r3, sp, #8
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	c303      	stmia	r3!, {r0, r1}
 800731a:	a902      	add	r1, sp, #8
 800731c:	9801      	ldr	r0, [sp, #4]
 800731e:	f7ff fe67 	bl	8006ff0 <WM__Client2Screen>
 8007322:	a902      	add	r1, sp, #8
 8007324:	4620      	mov	r0, r4
 8007326:	f7fc fe07 	bl	8003f38 <GUI__IntersectRect>
 800732a:	4629      	mov	r1, r5
 800732c:	4620      	mov	r0, r4
 800732e:	f7ff fddd 	bl	8006eec <WM__ClipAtParentBorders>
 8007332:	b178      	cbz	r0, 8007354 <WM_InvalidateRect+0x6e>
 8007334:	f640 0301 	movw	r3, #2049	; 0x801
 8007338:	4033      	ands	r3, r6
 800733a:	2b01      	cmp	r3, #1
 800733c:	d106      	bne.n	800734c <WM_InvalidateRect+0x66>
 800733e:	9b01      	ldr	r3, [sp, #4]
 8007340:	4620      	mov	r0, r4
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	6999      	ldr	r1, [r3, #24]
 8007346:	f7ff ffcb 	bl	80072e0 <WM__InvalidateRectEx>
 800734a:	e003      	b.n	8007354 <WM_InvalidateRect+0x6e>
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff ff56 	bl	8007200 <WM__Invalidate1Abs>
 8007354:	a801      	add	r0, sp, #4
 8007356:	f7fb ffd3 	bl	8003300 <GUI_ALLOC_UnlockH>
 800735a:	b007      	add	sp, #28
 800735c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800735e <WM_InvalidateWindow>:
 800735e:	2100      	movs	r1, #0
 8007360:	f7ff bfc1 	b.w	80072e6 <WM_InvalidateRect>

08007364 <WM__SelectTopLevelLayer>:
 8007364:	b508      	push	{r3, lr}
 8007366:	f7ff fee7 	bl	8007138 <WM__GetTopLevelLayer>
 800736a:	2800      	cmp	r0, #0
 800736c:	db03      	blt.n	8007376 <WM__SelectTopLevelLayer+0x12>
 800736e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007372:	f7fc bdb7 	b.w	8003ee4 <GUI_SelectLayer>
 8007376:	bd08      	pop	{r3, pc}

08007378 <WM_SelectWindow>:
 8007378:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <WM_SelectWindow+0x38>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8007380:	4604      	mov	r4, r0
 8007382:	461d      	mov	r5, r3
 8007384:	b908      	cbnz	r0, 800738a <WM_SelectWindow+0x12>
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <WM_SelectWindow+0x3c>)
 8007388:	681c      	ldr	r4, [r3, #0]
 800738a:	6494      	str	r4, [r2, #72]	; 0x48
 800738c:	4620      	mov	r0, r4
 800738e:	f7ff ffe9 	bl	8007364 <WM__SelectTopLevelLayer>
 8007392:	f7fd f915 	bl	80045c0 <LCD_SetClipRectMax>
 8007396:	4620      	mov	r0, r4
 8007398:	f7fb ff9a 	bl	80032d0 <GUI_ALLOC_h2p>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	f9b0 2000 	ldrsh.w	r2, [r0]
 80073a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80073a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80073a8:	4630      	mov	r0, r6
 80073aa:	651a      	str	r2, [r3, #80]	; 0x50
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
 80073ae:	bf00      	nop
 80073b0:	24000028 	.word	0x24000028
 80073b4:	2402d668 	.word	0x2402d668

080073b8 <WM_CreateWindowAsChild>:
 80073b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073c0:	4698      	mov	r8, r3
 80073c2:	4b4e      	ldr	r3, [pc, #312]	; (80074fc <WM_CreateWindowAsChild+0x144>)
 80073c4:	4605      	mov	r5, r0
 80073c6:	460e      	mov	r6, r1
 80073c8:	4617      	mov	r7, r2
 80073ca:	f8d3 9000 	ldr.w	r9, [r3]
 80073ce:	f1ba 0f00 	cmp.w	sl, #0
 80073d2:	d128      	bne.n	8007426 <WM_CreateWindowAsChild+0x6e>
 80073d4:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <WM_CreateWindowAsChild+0x148>)
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b353      	cbz	r3, 8007430 <WM_CreateWindowAsChild+0x78>
 80073da:	4b4a      	ldr	r3, [pc, #296]	; (8007504 <WM_CreateWindowAsChild+0x14c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	7c5a      	ldrb	r2, [r3, #17]
 80073e0:	4b49      	ldr	r3, [pc, #292]	; (8007508 <WM_CreateWindowAsChild+0x150>)
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	2a01      	cmp	r2, #1
 80073ea:	d921      	bls.n	8007430 <WM_CreateWindowAsChild+0x78>
 80073ec:	469a      	mov	sl, r3
 80073ee:	4650      	mov	r0, sl
 80073f0:	f7fb ff78 	bl	80032e4 <GUI_ALLOC_LockH>
 80073f4:	f9b0 1000 	ldrsh.w	r1, [r0]
 80073f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80073fc:	9001      	str	r0, [sp, #4]
 80073fe:	440d      	add	r5, r1
 8007400:	4416      	add	r6, r2
 8007402:	b91f      	cbnz	r7, 800740c <WM_CreateWindowAsChild+0x54>
 8007404:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007408:	1a5f      	subs	r7, r3, r1
 800740a:	3701      	adds	r7, #1
 800740c:	f1b8 0f00 	cmp.w	r8, #0
 8007410:	d105      	bne.n	800741e <WM_CreateWindowAsChild+0x66>
 8007412:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007416:	ebc2 0803 	rsb	r8, r2, r3
 800741a:	f108 0801 	add.w	r8, r8, #1
 800741e:	a801      	add	r0, sp, #4
 8007420:	f7fb ff6e 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007424:	e004      	b.n	8007430 <WM_CreateWindowAsChild+0x78>
 8007426:	f1ba 3fff 	cmp.w	sl, #4294967295
 800742a:	d1e0      	bne.n	80073ee <WM_CreateWindowAsChild+0x36>
 800742c:	f04f 0a00 	mov.w	sl, #0
 8007430:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007432:	302c      	adds	r0, #44	; 0x2c
 8007434:	f7fc f8e8 	bl	8003608 <GUI_ALLOC_AllocZero>
 8007438:	4604      	mov	r4, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d059      	beq.n	80074f2 <WM_CreateWindowAsChild+0x13a>
 800743e:	4a30      	ldr	r2, [pc, #192]	; (8007500 <WM_CreateWindowAsChild+0x148>)
 8007440:	f10d 0b08 	add.w	fp, sp, #8
 8007444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007446:	ea49 0903 	orr.w	r9, r9, r3
 800744a:	8813      	ldrh	r3, [r2, #0]
 800744c:	3301      	adds	r3, #1
 800744e:	8013      	strh	r3, [r2, #0]
 8007450:	f7fb ff48 	bl	80032e4 <GUI_ALLOC_LockH>
 8007454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007456:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800745a:	6103      	str	r3, [r0, #16]
 800745c:	4b2b      	ldr	r3, [pc, #172]	; (800750c <WM_CreateWindowAsChild+0x154>)
 800745e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007460:	8005      	strh	r5, [r0, #0]
 8007462:	ea09 0303 	and.w	r3, r9, r3
 8007466:	8046      	strh	r6, [r0, #2]
 8007468:	443d      	add	r5, r7
 800746a:	4446      	add	r6, r8
 800746c:	4313      	orrs	r3, r2
 800746e:	3d01      	subs	r5, #1
 8007470:	3e01      	subs	r6, #1
 8007472:	6283      	str	r3, [r0, #40]	; 0x28
 8007474:	8085      	strh	r5, [r0, #4]
 8007476:	80c6      	strh	r6, [r0, #6]
 8007478:	4658      	mov	r0, fp
 800747a:	f7fb ff41 	bl	8003300 <GUI_ALLOC_UnlockH>
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <WM_CreateWindowAsChild+0x158>)
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	b148      	cbz	r0, 8007498 <WM_CreateWindowAsChild+0xe0>
 8007484:	f7fb ff24 	bl	80032d0 <GUI_ALLOC_h2p>
 8007488:	4605      	mov	r5, r0
 800748a:	4620      	mov	r0, r4
 800748c:	f7fb ff20 	bl	80032d0 <GUI_ALLOC_h2p>
 8007490:	696b      	ldr	r3, [r5, #20]
 8007492:	6143      	str	r3, [r0, #20]
 8007494:	616c      	str	r4, [r5, #20]
 8007496:	e000      	b.n	800749a <WM_CreateWindowAsChild+0xe2>
 8007498:	601c      	str	r4, [r3, #0]
 800749a:	4651      	mov	r1, sl
 800749c:	4620      	mov	r0, r4
 800749e:	f7ff fd51 	bl	8006f44 <WM__InsertWindowIntoList>
 80074a2:	f019 0f20 	tst.w	r9, #32
 80074a6:	d002      	beq.n	80074ae <WM_CreateWindowAsChild+0xf6>
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7ff ff65 	bl	8007378 <WM_SelectWindow>
 80074ae:	f019 0f01 	tst.w	r9, #1
 80074b2:	bf1f      	itttt	ne
 80074b4:	4a17      	ldrne	r2, [pc, #92]	; (8007514 <WM_CreateWindowAsChild+0x15c>)
 80074b6:	6813      	ldrne	r3, [r2, #0]
 80074b8:	3301      	addne	r3, #1
 80074ba:	6013      	strne	r3, [r2, #0]
 80074bc:	f019 0f40 	tst.w	r9, #64	; 0x40
 80074c0:	d002      	beq.n	80074c8 <WM_CreateWindowAsChild+0x110>
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fa5e 	bl	8007984 <WM_BringToBottom>
 80074c8:	f019 0f02 	tst.w	r9, #2
 80074cc:	d00d      	beq.n	80074ea <WM_CreateWindowAsChild+0x132>
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7fb ff08 	bl	80032e4 <GUI_ALLOC_LockH>
 80074d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80074d6:	9000      	str	r0, [sp, #0]
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	6283      	str	r3, [r0, #40]	; 0x28
 80074de:	4658      	mov	r0, fp
 80074e0:	f7fb ff0e 	bl	8003300 <GUI_ALLOC_UnlockH>
 80074e4:	4620      	mov	r0, r4
 80074e6:	f7ff ff3a 	bl	800735e <WM_InvalidateWindow>
 80074ea:	2101      	movs	r1, #1
 80074ec:	4620      	mov	r0, r4
 80074ee:	f7ff fe0c 	bl	800710a <WM__SendMsgNoData>
 80074f2:	4620      	mov	r0, r4
 80074f4:	b003      	add	sp, #12
 80074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fa:	bf00      	nop
 80074fc:	2402d67c 	.word	0x2402d67c
 8007500:	2402d644 	.word	0x2402d644
 8007504:	24000028 	.word	0x24000028
 8007508:	2402d64c 	.word	0x2402d64c
 800750c:	003f3f9f 	.word	0x003f3f9f
 8007510:	2402d668 	.word	0x2402d668
 8007514:	2402d69c 	.word	0x2402d69c

08007518 <WM__GetNextIVR>:
 8007518:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800751c:	4f5d      	ldr	r7, [pc, #372]	; (8007694 <WM__GetNextIVR+0x17c>)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8007524:	2800      	cmp	r0, #0
 8007526:	f000 80b1 	beq.w	800768c <WM__GetNextIVR+0x174>
 800752a:	4a5b      	ldr	r2, [pc, #364]	; (8007698 <WM__GetNextIVR+0x180>)
 800752c:	6a13      	ldr	r3, [r2, #32]
 800752e:	4614      	mov	r4, r2
 8007530:	2b01      	cmp	r3, #1
 8007532:	dd03      	ble.n	800753c <WM__GetNextIVR+0x24>
 8007534:	3b01      	subs	r3, #1
 8007536:	2000      	movs	r0, #0
 8007538:	6213      	str	r3, [r2, #32]
 800753a:	e0a7      	b.n	800768c <WM__GetNextIVR+0x174>
 800753c:	69d3      	ldr	r3, [r2, #28]
 800753e:	f102 0614 	add.w	r6, r2, #20
 8007542:	ad02      	add	r5, sp, #8
 8007544:	3301      	adds	r3, #1
 8007546:	e896 0003 	ldmia.w	r6, {r0, r1}
 800754a:	61d3      	str	r3, [r2, #28]
 800754c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007550:	b923      	cbnz	r3, 800755c <WM__GetNextIVR+0x44>
 8007552:	8993      	ldrh	r3, [r2, #12]
 8007554:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007558:	89d3      	ldrh	r3, [r2, #14]
 800755a:	e010      	b.n	800757e <WM__GetNextIVR+0x66>
 800755c:	8b13      	ldrh	r3, [r2, #24]
 800755e:	8ad2      	ldrh	r2, [r2, #22]
 8007560:	3301      	adds	r3, #1
 8007562:	f8ad 200a 	strh.w	r2, [sp, #10]
 8007566:	b21b      	sxth	r3, r3
 8007568:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800756c:	429a      	cmp	r2, r3
 800756e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007572:	da06      	bge.n	8007582 <WM__GetNextIVR+0x6a>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f8ad 3008 	strh.w	r3, [sp, #8]
 800757a:	8b63      	ldrh	r3, [r4, #26]
 800757c:	3301      	adds	r3, #1
 800757e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8007582:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8007586:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800758a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007698 <WM__GetNextIVR+0x180>
 800758e:	429a      	cmp	r2, r3
 8007590:	dd04      	ble.n	800759c <WM__GetNextIVR+0x84>
 8007592:	6a23      	ldr	r3, [r4, #32]
 8007594:	2000      	movs	r0, #0
 8007596:	3b01      	subs	r3, #1
 8007598:	6223      	str	r3, [r4, #32]
 800759a:	e077      	b.n	800768c <WM__GetNextIVR+0x174>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80075a0:	f7fb fea0 	bl	80032e4 <GUI_ALLOC_LockH>
 80075a4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80075a8:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80075ac:	9001      	str	r0, [sp, #4]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d11c      	bne.n	80075ec <WM__GetNextIVR+0xd4>
 80075b2:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80075b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80075ba:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 80075be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075c2:	4b34      	ldr	r3, [pc, #208]	; (8007694 <WM__GetNextIVR+0x17c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075c8:	b15a      	cbz	r2, 80075e2 <WM__GetNextIVR+0xca>
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fb fe80 	bl	80032d0 <GUI_ALLOC_h2p>
 80075d0:	4680      	mov	r8, r0
 80075d2:	2200      	movs	r2, #0
 80075d4:	4629      	mov	r1, r5
 80075d6:	6a00      	ldr	r0, [r0, #32]
 80075d8:	f7ff fbb8 	bl	8006d4c <_Findy1>
 80075dc:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80075e0:	e7f2      	b.n	80075c8 <WM__GetNextIVR+0xb0>
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	4629      	mov	r1, r5
 80075e6:	69d8      	ldr	r0, [r3, #28]
 80075e8:	f7ff fbb0 	bl	8006d4c <_Findy1>
 80075ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80075f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075f8:	b16a      	cbz	r2, 8007616 <WM__GetNextIVR+0xfe>
 80075fa:	4610      	mov	r0, r2
 80075fc:	f7fb fe68 	bl	80032d0 <GUI_ALLOC_h2p>
 8007600:	2200      	movs	r2, #0
 8007602:	4680      	mov	r8, r0
 8007604:	4629      	mov	r1, r5
 8007606:	6a00      	ldr	r0, [r0, #32]
 8007608:	f7ff fbf3 	bl	8006df2 <_Findx0>
 800760c:	2800      	cmp	r0, #0
 800760e:	d1ed      	bne.n	80075ec <WM__GetNextIVR+0xd4>
 8007610:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007614:	e7f0      	b.n	80075f8 <WM__GetNextIVR+0xe0>
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	4629      	mov	r1, r5
 800761a:	69d8      	ldr	r0, [r3, #28]
 800761c:	f7ff fbe9 	bl	8006df2 <_Findx0>
 8007620:	2800      	cmp	r0, #0
 8007622:	d1e3      	bne.n	80075ec <WM__GetNextIVR+0xd4>
 8007624:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8007628:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800762c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	dd07      	ble.n	8007644 <WM__GetNextIVR+0x12c>
 8007634:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007638:	e886 0003 	stmia.w	r6, {r0, r1}
 800763c:	a801      	add	r0, sp, #4
 800763e:	f7fb fe5f 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007642:	e797      	b.n	8007574 <WM__GetNextIVR+0x5c>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007648:	b152      	cbz	r2, 8007660 <WM__GetNextIVR+0x148>
 800764a:	4610      	mov	r0, r2
 800764c:	f7fb fe40 	bl	80032d0 <GUI_ALLOC_h2p>
 8007650:	4607      	mov	r7, r0
 8007652:	2200      	movs	r2, #0
 8007654:	4629      	mov	r1, r5
 8007656:	6a00      	ldr	r0, [r0, #32]
 8007658:	f7ff fc0e 	bl	8006e78 <_Findx1>
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	e7f3      	b.n	8007648 <WM__GetNextIVR+0x130>
 8007660:	af04      	add	r7, sp, #16
 8007662:	4629      	mov	r1, r5
 8007664:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8007668:	69d8      	ldr	r0, [r3, #28]
 800766a:	f7ff fc05 	bl	8006e78 <_Findx1>
 800766e:	4638      	mov	r0, r7
 8007670:	f7fb fe46 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007674:	69e2      	ldr	r2, [r4, #28]
 8007676:	f644 6320 	movw	r3, #20000	; 0x4e20
 800767a:	429a      	cmp	r2, r3
 800767c:	dc89      	bgt.n	8007592 <WM__GetNextIVR+0x7a>
 800767e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007682:	e886 0003 	stmia.w	r6, {r0, r1}
 8007686:	f7ff fce3 	bl	8007050 <WM__ActivateClipRect>
 800768a:	2001      	movs	r0, #1
 800768c:	b004      	add	sp, #16
 800768e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007692:	bf00      	nop
 8007694:	24000028 	.word	0x24000028
 8007698:	2402d408 	.word	0x2402d408

0800769c <WM__InitIVRSearch>:
 800769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a0:	4e39      	ldr	r6, [pc, #228]	; (8007788 <WM__InitIVRSearch+0xec>)
 80076a2:	b086      	sub	sp, #24
 80076a4:	4680      	mov	r8, r0
 80076a6:	6832      	ldr	r2, [r6, #0]
 80076a8:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 80076ac:	b913      	cbnz	r3, 80076b4 <WM__InitIVRSearch+0x18>
 80076ae:	f7ff fccf 	bl	8007050 <WM__ActivateClipRect>
 80076b2:	e064      	b.n	800777e <WM__InitIVRSearch+0xe2>
 80076b4:	4f35      	ldr	r7, [pc, #212]	; (800778c <WM__InitIVRSearch+0xf0>)
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	463d      	mov	r5, r7
 80076ba:	3301      	adds	r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	623b      	str	r3, [r7, #32]
 80076c0:	dc5d      	bgt.n	800777e <WM__InitIVRSearch+0xe2>
 80076c2:	6c90      	ldr	r0, [r2, #72]	; 0x48
 80076c4:	f7fb fe0e 	bl	80032e4 <GUI_ALLOC_LockH>
 80076c8:	f04f 33ff 	mov.w	r3, #4294967295
 80076cc:	9000      	str	r0, [sp, #0]
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <WM__InitIVRSearch+0xf4>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b113      	cbz	r3, 80076dc <WM__InitIVRSearch+0x40>
 80076d6:	ab02      	add	r3, sp, #8
 80076d8:	3008      	adds	r0, #8
 80076da:	e004      	b.n	80076e6 <WM__InitIVRSearch+0x4a>
 80076dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80076de:	f013 0402 	ands.w	r4, r3, #2
 80076e2:	d00c      	beq.n	80076fe <WM__InitIVRSearch+0x62>
 80076e4:	ab02      	add	r3, sp, #8
 80076e6:	ac02      	add	r4, sp, #8
 80076e8:	c803      	ldmia	r0, {r0, r1}
 80076ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80076ee:	f1b8 0f00 	cmp.w	r8, #0
 80076f2:	d00c      	beq.n	800770e <WM__InitIVRSearch+0x72>
 80076f4:	4641      	mov	r1, r8
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7fc fc1e 	bl	8003f38 <GUI__IntersectRect>
 80076fc:	e007      	b.n	800770e <WM__InitIVRSearch+0x72>
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	4668      	mov	r0, sp
 8007702:	3b01      	subs	r3, #1
 8007704:	623b      	str	r3, [r7, #32]
 8007706:	f7fb fdfb 	bl	8003300 <GUI_ALLOC_UnlockH>
 800770a:	4620      	mov	r0, r4
 800770c:	e038      	b.n	8007780 <WM__InitIVRSearch+0xe4>
 800770e:	6833      	ldr	r3, [r6, #0]
 8007710:	4f20      	ldr	r7, [pc, #128]	; (8007794 <WM__InitIVRSearch+0xf8>)
 8007712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007714:	b1c2      	cbz	r2, 8007748 <WM__InitIVRSearch+0xac>
 8007716:	9b00      	ldr	r3, [sp, #0]
 8007718:	6810      	ldr	r0, [r2, #0]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	ab04      	add	r3, sp, #16
 800771e:	6851      	ldr	r1, [r2, #4]
 8007720:	c303      	stmia	r3!, {r0, r1}
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	b133      	cbz	r3, 8007734 <WM__InitIVRSearch+0x98>
 8007726:	a801      	add	r0, sp, #4
 8007728:	f7fb fdea 	bl	8003300 <GUI_ALLOC_UnlockH>
 800772c:	6838      	ldr	r0, [r7, #0]
 800772e:	f7fb fdd9 	bl	80032e4 <GUI_ALLOC_LockH>
 8007732:	9001      	str	r0, [sp, #4]
 8007734:	a904      	add	r1, sp, #16
 8007736:	9801      	ldr	r0, [sp, #4]
 8007738:	f7ff fc5a 	bl	8006ff0 <WM__Client2Screen>
 800773c:	4620      	mov	r0, r4
 800773e:	a904      	add	r1, sp, #16
 8007740:	f7fc fbfa 	bl	8003f38 <GUI__IntersectRect>
 8007744:	a801      	add	r0, sp, #4
 8007746:	e000      	b.n	800774a <WM__InitIVRSearch+0xae>
 8007748:	4668      	mov	r0, sp
 800774a:	f7fb fdd9 	bl	8003300 <GUI_ALLOC_UnlockH>
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	b119      	cbz	r1, 800775a <WM__InitIVRSearch+0xbe>
 8007752:	4620      	mov	r0, r4
 8007754:	f7ff fbca 	bl	8006eec <WM__ClipAtParentBorders>
 8007758:	b128      	cbz	r0, 8007766 <WM__InitIVRSearch+0xca>
 800775a:	6833      	ldr	r3, [r6, #0]
 800775c:	4620      	mov	r0, r4
 800775e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007760:	f7ff fbc4 	bl	8006eec <WM__ClipAtParentBorders>
 8007764:	b918      	cbnz	r0, 800776e <WM__InitIVRSearch+0xd2>
 8007766:	6a2b      	ldr	r3, [r5, #32]
 8007768:	3b01      	subs	r3, #1
 800776a:	622b      	str	r3, [r5, #32]
 800776c:	e008      	b.n	8007780 <WM__InitIVRSearch+0xe4>
 800776e:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <WM__InitIVRSearch+0xfc>)
 8007770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007774:	e883 0003 	stmia.w	r3, {r0, r1}
 8007778:	f7ff fece 	bl	8007518 <WM__GetNextIVR>
 800777c:	e000      	b.n	8007780 <WM__InitIVRSearch+0xe4>
 800777e:	2001      	movs	r0, #1
 8007780:	b006      	add	sp, #24
 8007782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007786:	bf00      	nop
 8007788:	24000028 	.word	0x24000028
 800778c:	2402d408 	.word	0x2402d408
 8007790:	2402d678 	.word	0x2402d678
 8007794:	2402d648 	.word	0x2402d648
 8007798:	2402d414 	.word	0x2402d414

0800779c <WM_Activate>:
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <WM_Activate+0xc>)
 800779e:	2201      	movs	r2, #1
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80077a6:	4770      	bx	lr
 80077a8:	24000028 	.word	0x24000028

080077ac <WM_DefaultProc>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	6840      	ldr	r0, [r0, #4]
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	2b17      	cmp	r3, #23
 80077b6:	d010      	beq.n	80077da <WM_DefaultProc+0x2e>
 80077b8:	dc07      	bgt.n	80077ca <WM_DefaultProc+0x1e>
 80077ba:	2b0e      	cmp	r3, #14
 80077bc:	d00f      	beq.n	80077de <WM_DefaultProc+0x32>
 80077be:	2b14      	cmp	r3, #20
 80077c0:	d115      	bne.n	80077ee <WM_DefaultProc+0x42>
 80077c2:	68e1      	ldr	r1, [r4, #12]
 80077c4:	f000 f972 	bl	8007aac <WM__GetClientRectEx>
 80077c8:	e011      	b.n	80077ee <WM_DefaultProc+0x42>
 80077ca:	2b22      	cmp	r3, #34	; 0x22
 80077cc:	d00c      	beq.n	80077e8 <WM_DefaultProc+0x3c>
 80077ce:	2b28      	cmp	r3, #40	; 0x28
 80077d0:	d10d      	bne.n	80077ee <WM_DefaultProc+0x42>
 80077d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d6:	f7ff bdc2 	b.w	800735e <WM_InvalidateWindow>
 80077da:	60e0      	str	r0, [r4, #12]
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	4621      	mov	r1, r4
 80077e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e4:	f000 b911 	b.w	8007a0a <WM_SendToParent>
 80077e8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80077ec:	e000      	b.n	80077f0 <WM_DefaultProc+0x44>
 80077ee:	2300      	movs	r3, #0
 80077f0:	60e3      	str	r3, [r4, #12]
 80077f2:	bd10      	pop	{r4, pc}

080077f4 <_cbBackWin>:
 80077f4:	6803      	ldr	r3, [r0, #0]
 80077f6:	2b0e      	cmp	r3, #14
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	d002      	beq.n	8007804 <_cbBackWin+0x10>
 80077fe:	2b0f      	cmp	r3, #15
 8007800:	d009      	beq.n	8007816 <_cbBackWin+0x22>
 8007802:	e020      	b.n	8007846 <_cbBackWin+0x52>
 8007804:	68c3      	ldr	r3, [r0, #12]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	2a01      	cmp	r2, #1
 800780a:	d121      	bne.n	8007850 <_cbBackWin+0x5c>
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007812:	f7fc bb55 	b.w	8003ec0 <GUI_StoreKey>
 8007816:	4a0f      	ldr	r2, [pc, #60]	; (8007854 <_cbBackWin+0x60>)
 8007818:	6843      	ldr	r3, [r0, #4]
 800781a:	6811      	ldr	r1, [r2, #0]
 800781c:	428b      	cmp	r3, r1
 800781e:	d006      	beq.n	800782e <_cbBackWin+0x3a>
 8007820:	6852      	ldr	r2, [r2, #4]
 8007822:	4293      	cmp	r3, r2
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	f04f 33ff 	movne.w	r3, #4294967295
 800782c:	e000      	b.n	8007830 <_cbBackWin+0x3c>
 800782e:	2300      	movs	r3, #0
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <_cbBackWin+0x64>)
 8007832:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007836:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800783a:	4298      	cmp	r0, r3
 800783c:	d003      	beq.n	8007846 <_cbBackWin+0x52>
 800783e:	f7fc f855 	bl	80038ec <GUI_SetBkColor>
 8007842:	f7fc f911 	bl	8003a68 <GUI_Clear>
 8007846:	4620      	mov	r0, r4
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	f7ff bfae 	b.w	80077ac <WM_DefaultProc>
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	2402d64c 	.word	0x2402d64c
 8007858:	2402d680 	.word	0x2402d680

0800785c <WM_Init>:
 800785c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007860:	4d2a      	ldr	r5, [pc, #168]	; (800790c <WM_Init+0xb0>)
 8007862:	7828      	ldrb	r0, [r5, #0]
 8007864:	2800      	cmp	r0, #0
 8007866:	d14d      	bne.n	8007904 <WM_Init+0xa8>
 8007868:	4b29      	ldr	r3, [pc, #164]	; (8007910 <WM_Init+0xb4>)
 800786a:	4604      	mov	r4, r0
 800786c:	4e29      	ldr	r6, [pc, #164]	; (8007914 <WM_Init+0xb8>)
 800786e:	6018      	str	r0, [r3, #0]
 8007870:	4b29      	ldr	r3, [pc, #164]	; (8007918 <WM_Init+0xbc>)
 8007872:	4f2a      	ldr	r7, [pc, #168]	; (800791c <WM_Init+0xc0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007948 <WM_Init+0xec>
 800787a:	6458      	str	r0, [r3, #68]	; 0x44
 800787c:	4b28      	ldr	r3, [pc, #160]	; (8007920 <WM_Init+0xc4>)
 800787e:	60a8      	str	r0, [r5, #8]
 8007880:	8018      	strh	r0, [r3, #0]
 8007882:	4b28      	ldr	r3, [pc, #160]	; (8007924 <WM_Init+0xc8>)
 8007884:	8018      	strh	r0, [r3, #0]
 8007886:	4620      	mov	r0, r4
 8007888:	f7fc fa20 	bl	8003ccc <GUI_DEVICE__GetpDriver>
 800788c:	b1a8      	cbz	r0, 80078ba <WM_Init+0x5e>
 800788e:	f04f 32ff 	mov.w	r2, #4294967295
 8007892:	2302      	movs	r3, #2
 8007894:	2100      	movs	r1, #0
 8007896:	9602      	str	r6, [sp, #8]
 8007898:	e88d 000c 	stmia.w	sp, {r2, r3}
 800789c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80078a0:	9103      	str	r1, [sp, #12]
 80078a2:	4608      	mov	r0, r1
 80078a4:	461a      	mov	r2, r3
 80078a6:	f7ff fd87 	bl	80073b8 <WM_CreateWindowAsChild>
 80078aa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80078ae:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80078b2:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 80078b6:	f7ff fd52 	bl	800735e <WM_InvalidateWindow>
 80078ba:	3401      	adds	r4, #1
 80078bc:	2c02      	cmp	r4, #2
 80078be:	d1e2      	bne.n	8007886 <WM_Init+0x2a>
 80078c0:	4819      	ldr	r0, [pc, #100]	; (8007928 <WM_Init+0xcc>)
 80078c2:	f000 f8eb 	bl	8007a9c <WM__AddCriticalHandle>
 80078c6:	4819      	ldr	r0, [pc, #100]	; (800792c <WM_Init+0xd0>)
 80078c8:	f000 f8e8 	bl	8007a9c <WM__AddCriticalHandle>
 80078cc:	4818      	ldr	r0, [pc, #96]	; (8007930 <WM_Init+0xd4>)
 80078ce:	f000 f8e5 	bl	8007a9c <WM__AddCriticalHandle>
 80078d2:	4818      	ldr	r0, [pc, #96]	; (8007934 <WM_Init+0xd8>)
 80078d4:	f000 f8e2 	bl	8007a9c <WM__AddCriticalHandle>
 80078d8:	4817      	ldr	r0, [pc, #92]	; (8007938 <WM_Init+0xdc>)
 80078da:	f000 f8df 	bl	8007a9c <WM__AddCriticalHandle>
 80078de:	4817      	ldr	r0, [pc, #92]	; (800793c <WM_Init+0xe0>)
 80078e0:	f000 f8dc 	bl	8007a9c <WM__AddCriticalHandle>
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <WM_Init+0xc0>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	f7ff fd46 	bl	8007378 <WM_SelectWindow>
 80078ec:	f7ff ff56 	bl	800779c <WM_Activate>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4813      	ldr	r0, [pc, #76]	; (8007940 <WM_Init+0xe4>)
 80078f4:	702b      	strb	r3, [r5, #0]
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <WM_Init+0xe8>)
 80078f8:	626b      	str	r3, [r5, #36]	; 0x24
 80078fa:	b004      	add	sp, #16
 80078fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	f7fc b9d0 	b.w	8003ca4 <GUI__RegisterExit>
 8007904:	b004      	add	sp, #16
 8007906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790a:	bf00      	nop
 800790c:	2402d408 	.word	0x2402d408
 8007910:	2402d668 	.word	0x2402d668
 8007914:	080077f5 	.word	0x080077f5
 8007918:	24000028 	.word	0x24000028
 800791c:	2402d64c 	.word	0x2402d64c
 8007920:	2402d664 	.word	0x2402d664
 8007924:	2402d644 	.word	0x2402d644
 8007928:	2402d6c0 	.word	0x2402d6c0
 800792c:	2402d6b0 	.word	0x2402d6b0
 8007930:	2402d6a0 	.word	0x2402d6a0
 8007934:	2402d6c8 	.word	0x2402d6c8
 8007938:	2402d6b8 	.word	0x2402d6b8
 800793c:	2402d6a8 	.word	0x2402d6a8
 8007940:	2402d42c 	.word	0x2402d42c
 8007944:	08006ca9 	.word	0x08006ca9
 8007948:	2402d680 	.word	0x2402d680

0800794c <WM_GetDesktopWindow>:
 800794c:	4b03      	ldr	r3, [pc, #12]	; (800795c <WM_GetDesktopWindow+0x10>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	7c5a      	ldrb	r2, [r3, #17]
 8007952:	4b03      	ldr	r3, [pc, #12]	; (8007960 <WM_GetDesktopWindow+0x14>)
 8007954:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	24000028 	.word	0x24000028
 8007960:	2402d64c 	.word	0x2402d64c

08007964 <WM_GetFirstChild>:
 8007964:	b508      	push	{r3, lr}
 8007966:	4603      	mov	r3, r0
 8007968:	b110      	cbz	r0, 8007970 <WM_GetFirstChild+0xc>
 800796a:	f7fb fcb1 	bl	80032d0 <GUI_ALLOC_h2p>
 800796e:	69c3      	ldr	r3, [r0, #28]
 8007970:	4618      	mov	r0, r3
 8007972:	bd08      	pop	{r3, pc}

08007974 <WM_GetParent>:
 8007974:	b508      	push	{r3, lr}
 8007976:	4603      	mov	r3, r0
 8007978:	b110      	cbz	r0, 8007980 <WM_GetParent+0xc>
 800797a:	f7fb fca9 	bl	80032d0 <GUI_ALLOC_h2p>
 800797e:	6983      	ldr	r3, [r0, #24]
 8007980:	4618      	mov	r0, r3
 8007982:	bd08      	pop	{r3, pc}

08007984 <WM_BringToBottom>:
 8007984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007988:	4604      	mov	r4, r0
 800798a:	b087      	sub	sp, #28
 800798c:	2800      	cmp	r0, #0
 800798e:	d039      	beq.n	8007a04 <WM_BringToBottom+0x80>
 8007990:	f7fb fca8 	bl	80032e4 <GUI_ALLOC_LockH>
 8007994:	ad04      	add	r5, sp, #16
 8007996:	4603      	mov	r3, r0
 8007998:	9001      	str	r0, [sp, #4]
 800799a:	c803      	ldmia	r0, {r0, r1}
 800799c:	6a1e      	ldr	r6, [r3, #32]
 800799e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80079a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80079a6:	a801      	add	r0, sp, #4
 80079a8:	f7fb fcaa 	bl	8003300 <GUI_ALLOC_UnlockH>
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 f843 	bl	8007a38 <WM__GetPrevSibling>
 80079b2:	4607      	mov	r7, r0
 80079b4:	b330      	cbz	r0, 8007a04 <WM_BringToBottom+0x80>
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff ffdc 	bl	8007974 <WM_GetParent>
 80079bc:	f019 0f02 	tst.w	r9, #2
 80079c0:	4680      	mov	r8, r0
 80079c2:	d004      	beq.n	80079ce <WM_BringToBottom+0x4a>
 80079c4:	4601      	mov	r1, r0
 80079c6:	4632      	mov	r2, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	f7ff fc89 	bl	80072e0 <WM__InvalidateRectEx>
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7fb fc88 	bl	80032e4 <GUI_ALLOC_LockH>
 80079d4:	9001      	str	r0, [sp, #4]
 80079d6:	4640      	mov	r0, r8
 80079d8:	f7fb fc84 	bl	80032e4 <GUI_ALLOC_LockH>
 80079dc:	9003      	str	r0, [sp, #12]
 80079de:	4638      	mov	r0, r7
 80079e0:	f7fb fc80 	bl	80032e4 <GUI_ALLOC_LockH>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	9a01      	ldr	r2, [sp, #4]
 80079e8:	69d9      	ldr	r1, [r3, #28]
 80079ea:	6206      	str	r6, [r0, #32]
 80079ec:	9002      	str	r0, [sp, #8]
 80079ee:	a801      	add	r0, sp, #4
 80079f0:	6211      	str	r1, [r2, #32]
 80079f2:	61dc      	str	r4, [r3, #28]
 80079f4:	f7fb fc84 	bl	8003300 <GUI_ALLOC_UnlockH>
 80079f8:	a803      	add	r0, sp, #12
 80079fa:	f7fb fc81 	bl	8003300 <GUI_ALLOC_UnlockH>
 80079fe:	a802      	add	r0, sp, #8
 8007a00:	f7fb fc7e 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007a04:	b007      	add	sp, #28
 8007a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007a0a <WM_SendToParent>:
 8007a0a:	b538      	push	{r3, r4, r5, lr}
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	b141      	cbz	r1, 8007a24 <WM_SendToParent+0x1a>
 8007a12:	f7ff ffaf 	bl	8007974 <WM_GetParent>
 8007a16:	b128      	cbz	r0, 8007a24 <WM_SendToParent+0x1a>
 8007a18:	60a5      	str	r5, [r4, #8]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a20:	f000 b81e 	b.w	8007a60 <WM__SendMessage>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}

08007a26 <WM__GetFirstSibling>:
 8007a26:	b508      	push	{r3, lr}
 8007a28:	f7ff ffa4 	bl	8007974 <WM_GetParent>
 8007a2c:	b118      	cbz	r0, 8007a36 <WM__GetFirstSibling+0x10>
 8007a2e:	f7fb fc4f 	bl	80032d0 <GUI_ALLOC_h2p>
 8007a32:	69c0      	ldr	r0, [r0, #28]
 8007a34:	bd08      	pop	{r3, pc}
 8007a36:	bd08      	pop	{r3, pc}

08007a38 <WM__GetPrevSibling>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	f7ff fff3 	bl	8007a26 <WM__GetFirstSibling>
 8007a40:	4604      	mov	r4, r0
 8007a42:	b154      	cbz	r4, 8007a5a <WM__GetPrevSibling+0x22>
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	d007      	beq.n	8007a58 <WM__GetPrevSibling+0x20>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f7fb fc41 	bl	80032d0 <GUI_ALLOC_h2p>
 8007a4e:	6a03      	ldr	r3, [r0, #32]
 8007a50:	429d      	cmp	r5, r3
 8007a52:	d002      	beq.n	8007a5a <WM__GetPrevSibling+0x22>
 8007a54:	461c      	mov	r4, r3
 8007a56:	e7f4      	b.n	8007a42 <WM__GetPrevSibling+0xa>
 8007a58:	2400      	movs	r4, #0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a60 <WM__SendMessage>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4c0d      	ldr	r4, [pc, #52]	; (8007a98 <WM__SendMessage+0x38>)
 8007a64:	4606      	mov	r6, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	2b13      	cmp	r3, #19
 8007a6c:	dc12      	bgt.n	8007a94 <WM__SendMessage+0x34>
 8007a6e:	f7fb fc2f 	bl	80032d0 <GUI_ALLOC_h2p>
 8007a72:	6902      	ldr	r2, [r0, #16]
 8007a74:	606e      	str	r6, [r5, #4]
 8007a76:	b142      	cbz	r2, 8007a8a <WM__SendMessage+0x2a>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	4790      	blx	r2
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	bd70      	pop	{r4, r5, r6, pc}
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a90:	f7ff be8c 	b.w	80077ac <WM_DefaultProc>
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
 8007a96:	bf00      	nop
 8007a98:	2402d438 	.word	0x2402d438

08007a9c <WM__AddCriticalHandle>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <WM__AddCriticalHandle+0xc>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	6002      	str	r2, [r0, #0]
 8007aa2:	6018      	str	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2402d688 	.word	0x2402d688

08007aac <WM__GetClientRectEx>:
 8007aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aae:	460d      	mov	r5, r1
 8007ab0:	b158      	cbz	r0, 8007aca <WM__GetClientRectEx+0x1e>
 8007ab2:	b151      	cbz	r1, 8007aca <WM__GetClientRectEx+0x1e>
 8007ab4:	ac02      	add	r4, sp, #8
 8007ab6:	f7fb fc15 	bl	80032e4 <GUI_ALLOC_LockH>
 8007aba:	4629      	mov	r1, r5
 8007abc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007ac0:	f7ff fb2e 	bl	8007120 <WM__GetClientRectWin>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f7fb fc1b 	bl	8003300 <GUI_ALLOC_UnlockH>
 8007aca:	b003      	add	sp, #12
 8007acc:	bd30      	pop	{r4, r5, pc}

08007ace <_GetIndexMask_0>:
 8007ace:	b508      	push	{r3, lr}
 8007ad0:	f7fc ff34 	bl	800493c <LCD_GetNumColors>
 8007ad4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007ad8:	d010      	beq.n	8007afc <_GetIndexMask_0+0x2e>
 8007ada:	287f      	cmp	r0, #127	; 0x7f
 8007adc:	d810      	bhi.n	8007b00 <_GetIndexMask_0+0x32>
 8007ade:	283f      	cmp	r0, #63	; 0x3f
 8007ae0:	d810      	bhi.n	8007b04 <_GetIndexMask_0+0x36>
 8007ae2:	281f      	cmp	r0, #31
 8007ae4:	d810      	bhi.n	8007b08 <_GetIndexMask_0+0x3a>
 8007ae6:	280f      	cmp	r0, #15
 8007ae8:	d810      	bhi.n	8007b0c <_GetIndexMask_0+0x3e>
 8007aea:	2807      	cmp	r0, #7
 8007aec:	d810      	bhi.n	8007b10 <_GetIndexMask_0+0x42>
 8007aee:	2803      	cmp	r0, #3
 8007af0:	d810      	bhi.n	8007b14 <_GetIndexMask_0+0x46>
 8007af2:	2801      	cmp	r0, #1
 8007af4:	bf94      	ite	ls
 8007af6:	2000      	movls	r0, #0
 8007af8:	2001      	movhi	r0, #1
 8007afa:	e00c      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007afc:	2008      	movs	r0, #8
 8007afe:	e00a      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007b00:	2007      	movs	r0, #7
 8007b02:	e008      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007b04:	2006      	movs	r0, #6
 8007b06:	e006      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007b08:	2005      	movs	r0, #5
 8007b0a:	e004      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007b0c:	2004      	movs	r0, #4
 8007b0e:	e002      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007b10:	2003      	movs	r0, #3
 8007b12:	e000      	b.n	8007b16 <_GetIndexMask_0+0x48>
 8007b14:	2002      	movs	r0, #2
 8007b16:	2301      	movs	r3, #1
 8007b18:	fa03 f000 	lsl.w	r0, r3, r0
 8007b1c:	3801      	subs	r0, #1
 8007b1e:	bd08      	pop	{r3, pc}

08007b20 <_Index2Color_0>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4604      	mov	r4, r0
 8007b24:	f7fc ff0a 	bl	800493c <LCD_GetNumColors>
 8007b28:	4605      	mov	r5, r0
 8007b2a:	f7fc ff25 	bl	8004978 <LCD_GetPalette>
 8007b2e:	42a5      	cmp	r5, r4
 8007b30:	d903      	bls.n	8007b3a <_Index2Color_0+0x1a>
 8007b32:	b118      	cbz	r0, 8007b3c <_Index2Color_0+0x1c>
 8007b34:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	bd38      	pop	{r3, r4, r5, pc}

08007b3e <_Color2Index_0>:
 8007b3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b42:	4681      	mov	r9, r0
 8007b44:	f7fc fefa 	bl	800493c <LCD_GetNumColors>
 8007b48:	4607      	mov	r7, r0
 8007b4a:	f7fc ff15 	bl	8004978 <LCD_GetPalette>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	b1e0      	cbz	r0, 8007b8c <_Color2Index_0+0x4e>
 8007b52:	2000      	movs	r0, #0
 8007b54:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8007b58:	454b      	cmp	r3, r9
 8007b5a:	d017      	beq.n	8007b8c <_Color2Index_0+0x4e>
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	4287      	cmp	r7, r0
 8007b60:	dcf8      	bgt.n	8007b54 <_Color2Index_0+0x16>
 8007b62:	2400      	movs	r4, #0
 8007b64:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8007b68:	4625      	mov	r5, r4
 8007b6a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f7fb fe0a 	bl	8003788 <GUI_CalcColorDist>
 8007b74:	4580      	cmp	r8, r0
 8007b76:	bf88      	it	hi
 8007b78:	462c      	movhi	r4, r5
 8007b7a:	f105 0501 	add.w	r5, r5, #1
 8007b7e:	bf88      	it	hi
 8007b80:	4680      	movhi	r8, r0
 8007b82:	42af      	cmp	r7, r5
 8007b84:	dcf1      	bgt.n	8007b6a <_Color2Index_0+0x2c>
 8007b86:	4620      	mov	r0, r4
 8007b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007b90 <GUIMONO_DispChar>:
 8007b90:	4b4d      	ldr	r3, [pc, #308]	; (8007cc8 <GUIMONO_DispChar+0x138>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	69d1      	ldr	r1, [r2, #28]
 8007b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	69cc      	ldr	r4, [r1, #28]
 8007b9c:	b08b      	sub	sp, #44	; 0x2c
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	4283      	cmp	r3, r0
 8007ba2:	d808      	bhi.n	8007bb6 <GUIMONO_DispChar+0x26>
 8007ba4:	89e5      	ldrh	r5, [r4, #14]
 8007ba6:	4285      	cmp	r5, r0
 8007ba8:	d305      	bcc.n	8007bb6 <GUIMONO_DispChar+0x26>
 8007baa:	6825      	ldr	r5, [r4, #0]
 8007bac:	1ac3      	subs	r3, r0, r3
 8007bae:	f04f 36ff 	mov.w	r6, #4294967295
 8007bb2:	9506      	str	r5, [sp, #24]
 8007bb4:	e013      	b.n	8007bde <GUIMONO_DispChar+0x4e>
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d07c      	beq.n	8007cb6 <GUIMONO_DispChar+0x126>
 8007bbc:	881d      	ldrh	r5, [r3, #0]
 8007bbe:	42a8      	cmp	r0, r5
 8007bc0:	d379      	bcc.n	8007cb6 <GUIMONO_DispChar+0x126>
 8007bc2:	885e      	ldrh	r6, [r3, #2]
 8007bc4:	4286      	cmp	r6, r0
 8007bc6:	d376      	bcc.n	8007cb6 <GUIMONO_DispChar+0x126>
 8007bc8:	1b40      	subs	r0, r0, r5
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	6866      	ldr	r6, [r4, #4]
 8007bce:	b280      	uxth	r0, r0
 8007bd0:	9606      	str	r6, [sp, #24]
 8007bd2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8007bd6:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8007bda:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8007bde:	1c58      	adds	r0, r3, #1
 8007be0:	9309      	str	r3, [sp, #36]	; 0x24
 8007be2:	d068      	beq.n	8007cb6 <GUIMONO_DispChar+0x126>
 8007be4:	f891 b018 	ldrb.w	fp, [r1, #24]
 8007be8:	7ca1      	ldrb	r1, [r4, #18]
 8007bea:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8007bee:	fb1b f301 	smulbb	r3, fp, r1
 8007bf2:	4d35      	ldr	r5, [pc, #212]	; (8007cc8 <GUIMONO_DispChar+0x138>)
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8007bfa:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8007bfe:	9307      	str	r3, [sp, #28]
 8007c00:	f894 a010 	ldrb.w	sl, [r4, #16]
 8007c04:	f7fc fa54 	bl	80040b0 <LCD_SetDrawMode>
 8007c08:	6829      	ldr	r1, [r5, #0]
 8007c0a:	9b07      	ldr	r3, [sp, #28]
 8007c0c:	69ca      	ldr	r2, [r1, #28]
 8007c0e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8007c10:	9008      	str	r0, [sp, #32]
 8007c12:	4618      	mov	r0, r3
 8007c14:	9105      	str	r1, [sp, #20]
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	9906      	ldr	r1, [sp, #24]
 8007c1a:	fb00 1003 	mla	r0, r0, r3, r1
 8007c1e:	4641      	mov	r1, r8
 8007c20:	9004      	str	r0, [sp, #16]
 8007c22:	4638      	mov	r0, r7
 8007c24:	7ca3      	ldrb	r3, [r4, #18]
 8007c26:	9303      	str	r3, [sp, #12]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	9302      	str	r3, [sp, #8]
 8007c2c:	7ed3      	ldrb	r3, [r2, #27]
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	7e93      	ldrb	r3, [r2, #26]
 8007c32:	4652      	mov	r2, sl
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	465b      	mov	r3, fp
 8007c38:	f7fc fbb0 	bl	800439c <LCD_DrawBitmap>
 8007c3c:	1c73      	adds	r3, r6, #1
 8007c3e:	d01a      	beq.n	8007c76 <GUIMONO_DispChar+0xe6>
 8007c40:	f049 0002 	orr.w	r0, r9, #2
 8007c44:	f7fc fa34 	bl	80040b0 <LCD_SetDrawMode>
 8007c48:	682a      	ldr	r2, [r5, #0]
 8007c4a:	9906      	ldr	r1, [sp, #24]
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	69d3      	ldr	r3, [r2, #28]
 8007c50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c52:	9205      	str	r2, [sp, #20]
 8007c54:	9a07      	ldr	r2, [sp, #28]
 8007c56:	fb02 1606 	mla	r6, r2, r6, r1
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	9604      	str	r6, [sp, #16]
 8007c5e:	7ca2      	ldrb	r2, [r4, #18]
 8007c60:	9203      	str	r2, [sp, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	7eda      	ldrb	r2, [r3, #27]
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	7e9b      	ldrb	r3, [r3, #26]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	465b      	mov	r3, fp
 8007c72:	f7fc fb93 	bl	800439c <LCD_DrawBitmap>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	7e5a      	ldrb	r2, [r3, #25]
 8007c7c:	7e1b      	ldrb	r3, [r3, #24]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d915      	bls.n	8007cae <GUIMONO_DispChar+0x11e>
 8007c82:	f1b9 0f02 	cmp.w	r9, #2
 8007c86:	d012      	beq.n	8007cae <GUIMONO_DispChar+0x11e>
 8007c88:	f089 0004 	eor.w	r0, r9, #4
 8007c8c:	f7fc fa10 	bl	80040b0 <LCD_SetDrawMode>
 8007c90:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <GUIMONO_DispChar+0x138>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	7e18      	ldrb	r0, [r3, #24]
 8007c98:	7ed9      	ldrb	r1, [r3, #27]
 8007c9a:	7e9a      	ldrb	r2, [r3, #26]
 8007c9c:	7e5b      	ldrb	r3, [r3, #25]
 8007c9e:	fb00 8101 	mla	r1, r0, r1, r8
 8007ca2:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	4443      	add	r3, r8
 8007caa:	f7fc fa5f 	bl	800416c <LCD_FillRect>
 8007cae:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8007cb2:	f7fc f9fd 	bl	80040b0 <LCD_SetDrawMode>
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <GUIMONO_DispChar+0x138>)
 8007cb8:	7c61      	ldrb	r1, [r4, #17]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8007cbe:	440b      	add	r3, r1
 8007cc0:	8453      	strh	r3, [r2, #34]	; 0x22
 8007cc2:	b00b      	add	sp, #44	; 0x2c
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	24000028 	.word	0x24000028

08007ccc <GUIMONO_GetCharDistX>:
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <GUIMONO_GetCharDistX+0x14>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	b109      	cbz	r1, 8007cda <GUIMONO_GetCharDistX+0xe>
 8007cd6:	7c1a      	ldrb	r2, [r3, #16]
 8007cd8:	600a      	str	r2, [r1, #0]
 8007cda:	7c58      	ldrb	r0, [r3, #17]
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	24000028 	.word	0x24000028

08007ce4 <GUIMONO_GetFontInfo>:
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	800b      	strh	r3, [r1, #0]
 8007ce8:	4770      	bx	lr

08007cea <GUIMONO_IsInFont>:
 8007cea:	69c3      	ldr	r3, [r0, #28]
 8007cec:	899a      	ldrh	r2, [r3, #12]
 8007cee:	428a      	cmp	r2, r1
 8007cf0:	d802      	bhi.n	8007cf8 <GUIMONO_IsInFont+0xe>
 8007cf2:	89da      	ldrh	r2, [r3, #14]
 8007cf4:	428a      	cmp	r2, r1
 8007cf6:	d20f      	bcs.n	8007d18 <GUIMONO_IsInFont+0x2e>
 8007cf8:	6898      	ldr	r0, [r3, #8]
 8007cfa:	b180      	cbz	r0, 8007d1e <GUIMONO_IsInFont+0x34>
 8007cfc:	8803      	ldrh	r3, [r0, #0]
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	d30c      	bcc.n	8007d1c <GUIMONO_IsInFont+0x32>
 8007d02:	8842      	ldrh	r2, [r0, #2]
 8007d04:	428a      	cmp	r2, r1
 8007d06:	d309      	bcc.n	8007d1c <GUIMONO_IsInFont+0x32>
 8007d08:	1ac9      	subs	r1, r1, r3
 8007d0a:	6843      	ldr	r3, [r0, #4]
 8007d0c:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8007d10:	43c0      	mvns	r0, r0
 8007d12:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8007d16:	4770      	bx	lr
 8007d18:	2001      	movs	r0, #1
 8007d1a:	4770      	bx	lr
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	4770      	bx	lr

08007d20 <GUIPROP__FindChar>:
 8007d20:	b138      	cbz	r0, 8007d32 <GUIPROP__FindChar+0x12>
 8007d22:	8803      	ldrh	r3, [r0, #0]
 8007d24:	428b      	cmp	r3, r1
 8007d26:	d802      	bhi.n	8007d2e <GUIPROP__FindChar+0xe>
 8007d28:	8843      	ldrh	r3, [r0, #2]
 8007d2a:	428b      	cmp	r3, r1
 8007d2c:	d201      	bcs.n	8007d32 <GUIPROP__FindChar+0x12>
 8007d2e:	6880      	ldr	r0, [r0, #8]
 8007d30:	e7f6      	b.n	8007d20 <GUIPROP__FindChar>
 8007d32:	4770      	bx	lr

08007d34 <GUIPROP_DispChar>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	4c38      	ldr	r4, [pc, #224]	; (8007e1c <GUIPROP_DispChar+0xe8>)
 8007d3a:	b089      	sub	sp, #36	; 0x24
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	69d8      	ldr	r0, [r3, #28]
 8007d4a:	f7ff ffe9 	bl	8007d20 <GUIPROP__FindChar>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d060      	beq.n	8007e14 <GUIPROP_DispChar+0xe0>
 8007d52:	8805      	ldrh	r5, [r0, #0]
 8007d54:	6847      	ldr	r7, [r0, #4]
 8007d56:	4640      	mov	r0, r8
 8007d58:	1b75      	subs	r5, r6, r5
 8007d5a:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8007d5e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8007d62:	f7fc f9a5 	bl	80040b0 <LCD_SetDrawMode>
 8007d66:	f8d4 c000 	ldr.w	ip, [r4]
 8007d6a:	4681      	mov	r9, r0
 8007d6c:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8007d70:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8007d74:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8007d78:	f89e b018 	ldrb.w	fp, [lr, #24]
 8007d7c:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 8007d80:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 8007d84:	f04f 0c01 	mov.w	ip, #1
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	6873      	ldr	r3, [r6, #4]
 8007d8c:	f8cd a00c 	str.w	sl, [sp, #12]
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	465b      	mov	r3, fp
 8007d94:	f8cd c008 	str.w	ip, [sp, #8]
 8007d98:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8007d9c:	f8cd c004 	str.w	ip, [sp, #4]
 8007da0:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8007da4:	f8cd e000 	str.w	lr, [sp]
 8007da8:	f7fc faf8 	bl	800439c <LCD_DrawBitmap>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	7e59      	ldrb	r1, [r3, #25]
 8007db2:	f893 a018 	ldrb.w	sl, [r3, #24]
 8007db6:	9107      	str	r1, [sp, #28]
 8007db8:	4551      	cmp	r1, sl
 8007dba:	d920      	bls.n	8007dfe <GUIPROP_DispChar+0xca>
 8007dbc:	f1b8 0f02 	cmp.w	r8, #2
 8007dc0:	d01d      	beq.n	8007dfe <GUIPROP_DispChar+0xca>
 8007dc2:	f893 b01b 	ldrb.w	fp, [r3, #27]
 8007dc6:	f7fb fd0d 	bl	80037e4 <GUI_GetColor>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	f7fb fd03 	bl	80037d6 <GUI_GetBkColor>
 8007dd0:	f7fb fd8e 	bl	80038f0 <GUI_SetColor>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	9907      	ldr	r1, [sp, #28]
 8007dd8:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8007ddc:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 8007de6:	7eda      	ldrb	r2, [r3, #27]
 8007de8:	fb0b e301 	mla	r3, fp, r1, lr
 8007dec:	fb0b e10a 	mla	r1, fp, sl, lr
 8007df0:	fb05 0202 	mla	r2, r5, r2, r0
 8007df4:	f7fc f9ba 	bl	800416c <LCD_FillRect>
 8007df8:	4640      	mov	r0, r8
 8007dfa:	f7fb fd79 	bl	80038f0 <GUI_SetColor>
 8007dfe:	4648      	mov	r0, r9
 8007e00:	f7fc f956 	bl	80040b0 <LCD_SetDrawMode>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	7871      	ldrb	r1, [r6, #1]
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	7e90      	ldrb	r0, [r2, #26]
 8007e0c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8007e0e:	fb00 2201 	mla	r2, r0, r1, r2
 8007e12:	845a      	strh	r2, [r3, #34]	; 0x22
 8007e14:	b009      	add	sp, #36	; 0x24
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	bf00      	nop
 8007e1c:	24000028 	.word	0x24000028

08007e20 <GUIPROP_GetCharDistX>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <GUIPROP_GetCharDistX+0x38>)
 8007e24:	4602      	mov	r2, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	4601      	mov	r1, r0
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69dd      	ldr	r5, [r3, #28]
 8007e2e:	69e8      	ldr	r0, [r5, #28]
 8007e30:	f7ff ff76 	bl	8007d20 <GUIPROP__FindChar>
 8007e34:	b170      	cbz	r0, 8007e54 <GUIPROP_GetCharDistX+0x34>
 8007e36:	8803      	ldrh	r3, [r0, #0]
 8007e38:	1ad2      	subs	r2, r2, r3
 8007e3a:	6843      	ldr	r3, [r0, #4]
 8007e3c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8007e40:	7848      	ldrb	r0, [r1, #1]
 8007e42:	7ea9      	ldrb	r1, [r5, #26]
 8007e44:	fb10 f001 	smulbb	r0, r0, r1
 8007e48:	b124      	cbz	r4, 8007e54 <GUIPROP_GetCharDistX+0x34>
 8007e4a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8007e4e:	fb11 f303 	smulbb	r3, r1, r3
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	bf00      	nop
 8007e58:	24000028 	.word	0x24000028

08007e5c <GUIPROP_GetFontInfo>:
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	800b      	strh	r3, [r1, #0]
 8007e60:	4770      	bx	lr

08007e62 <GUIPROP_IsInFont>:
 8007e62:	b508      	push	{r3, lr}
 8007e64:	69c0      	ldr	r0, [r0, #28]
 8007e66:	f7ff ff5b 	bl	8007d20 <GUIPROP__FindChar>
 8007e6a:	3000      	adds	r0, #0
 8007e6c:	bf18      	it	ne
 8007e6e:	2001      	movne	r0, #1
 8007e70:	bd08      	pop	{r3, pc}

08007e72 <GUI__CompactPixelIndices>:
 8007e72:	2a08      	cmp	r2, #8
 8007e74:	b510      	push	{r4, lr}
 8007e76:	dd0e      	ble.n	8007e96 <GUI__CompactPixelIndices+0x24>
 8007e78:	2a10      	cmp	r2, #16
 8007e7a:	dc0a      	bgt.n	8007e92 <GUI__CompactPixelIndices+0x20>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007e82:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e86:	f823 2b02 	strh.w	r2, [r3], #2
 8007e8a:	428b      	cmp	r3, r1
 8007e8c:	d1f9      	bne.n	8007e82 <GUI__CompactPixelIndices+0x10>
 8007e8e:	2001      	movs	r0, #1
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	2000      	movs	r0, #0
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	2a02      	cmp	r2, #2
 8007e98:	d12a      	bne.n	8007ef0 <GUI__CompactPixelIndices+0x7e>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	6803      	ldr	r3, [r0, #0]
 8007e9e:	2901      	cmp	r1, #1
 8007ea0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	d020      	beq.n	8007eea <GUI__CompactPixelIndices+0x78>
 8007ea8:	6842      	ldr	r2, [r0, #4]
 8007eaa:	2902      	cmp	r1, #2
 8007eac:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8007eb0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007eb4:	ea43 0302 	orr.w	r3, r3, r2
 8007eb8:	d101      	bne.n	8007ebe <GUI__CompactPixelIndices+0x4c>
 8007eba:	3008      	adds	r0, #8
 8007ebc:	e016      	b.n	8007eec <GUI__CompactPixelIndices+0x7a>
 8007ebe:	6882      	ldr	r2, [r0, #8]
 8007ec0:	2903      	cmp	r1, #3
 8007ec2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007ec6:	f002 020c 	and.w	r2, r2, #12
 8007eca:	ea43 0302 	orr.w	r3, r3, r2
 8007ece:	d101      	bne.n	8007ed4 <GUI__CompactPixelIndices+0x62>
 8007ed0:	300c      	adds	r0, #12
 8007ed2:	e00b      	b.n	8007eec <GUI__CompactPixelIndices+0x7a>
 8007ed4:	68c2      	ldr	r2, [r0, #12]
 8007ed6:	3904      	subs	r1, #4
 8007ed8:	3010      	adds	r0, #16
 8007eda:	f002 0203 	and.w	r2, r2, #3
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f804 3b01 	strb.w	r3, [r4], #1
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d1d9      	bne.n	8007e9c <GUI__CompactPixelIndices+0x2a>
 8007ee8:	e7d1      	b.n	8007e8e <GUI__CompactPixelIndices+0x1c>
 8007eea:	3004      	adds	r0, #4
 8007eec:	2100      	movs	r1, #0
 8007eee:	e7f7      	b.n	8007ee0 <GUI__CompactPixelIndices+0x6e>
 8007ef0:	2a04      	cmp	r2, #4
 8007ef2:	d115      	bne.n	8007f20 <GUI__CompactPixelIndices+0xae>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	2901      	cmp	r1, #1
 8007ef8:	6803      	ldr	r3, [r0, #0]
 8007efa:	bf18      	it	ne
 8007efc:	6842      	ldrne	r2, [r0, #4]
 8007efe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007f02:	bf0c      	ite	eq
 8007f04:	2100      	moveq	r1, #0
 8007f06:	3902      	subne	r1, #2
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	bf17      	itett	ne
 8007f0c:	f002 020f 	andne.w	r2, r2, #15
 8007f10:	3004      	addeq	r0, #4
 8007f12:	3008      	addne	r0, #8
 8007f14:	4313      	orrne	r3, r2
 8007f16:	f804 3b01 	strb.w	r3, [r4], #1
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	d1eb      	bne.n	8007ef6 <GUI__CompactPixelIndices+0x84>
 8007f1e:	e7b6      	b.n	8007e8e <GUI__CompactPixelIndices+0x1c>
 8007f20:	2a01      	cmp	r2, #1
 8007f22:	4603      	mov	r3, r0
 8007f24:	d154      	bne.n	8007fd0 <GUI__CompactPixelIndices+0x15e>
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	2901      	cmp	r1, #1
 8007f2a:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	d04b      	beq.n	8007fca <GUI__CompactPixelIndices+0x158>
 8007f32:	685c      	ldr	r4, [r3, #4]
 8007f34:	2902      	cmp	r1, #2
 8007f36:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8007f3a:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8007f3e:	ea42 0204 	orr.w	r2, r2, r4
 8007f42:	d101      	bne.n	8007f48 <GUI__CompactPixelIndices+0xd6>
 8007f44:	3308      	adds	r3, #8
 8007f46:	e041      	b.n	8007fcc <GUI__CompactPixelIndices+0x15a>
 8007f48:	689c      	ldr	r4, [r3, #8]
 8007f4a:	2903      	cmp	r1, #3
 8007f4c:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8007f50:	f004 0420 	and.w	r4, r4, #32
 8007f54:	ea42 0204 	orr.w	r2, r2, r4
 8007f58:	d101      	bne.n	8007f5e <GUI__CompactPixelIndices+0xec>
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	e036      	b.n	8007fcc <GUI__CompactPixelIndices+0x15a>
 8007f5e:	68dc      	ldr	r4, [r3, #12]
 8007f60:	2904      	cmp	r1, #4
 8007f62:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8007f66:	f004 0410 	and.w	r4, r4, #16
 8007f6a:	ea42 0204 	orr.w	r2, r2, r4
 8007f6e:	d101      	bne.n	8007f74 <GUI__CompactPixelIndices+0x102>
 8007f70:	3310      	adds	r3, #16
 8007f72:	e02b      	b.n	8007fcc <GUI__CompactPixelIndices+0x15a>
 8007f74:	691c      	ldr	r4, [r3, #16]
 8007f76:	2905      	cmp	r1, #5
 8007f78:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8007f7c:	f004 0408 	and.w	r4, r4, #8
 8007f80:	ea42 0204 	orr.w	r2, r2, r4
 8007f84:	d101      	bne.n	8007f8a <GUI__CompactPixelIndices+0x118>
 8007f86:	3314      	adds	r3, #20
 8007f88:	e020      	b.n	8007fcc <GUI__CompactPixelIndices+0x15a>
 8007f8a:	695c      	ldr	r4, [r3, #20]
 8007f8c:	2906      	cmp	r1, #6
 8007f8e:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8007f92:	f004 0404 	and.w	r4, r4, #4
 8007f96:	ea42 0204 	orr.w	r2, r2, r4
 8007f9a:	d101      	bne.n	8007fa0 <GUI__CompactPixelIndices+0x12e>
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	e015      	b.n	8007fcc <GUI__CompactPixelIndices+0x15a>
 8007fa0:	699c      	ldr	r4, [r3, #24]
 8007fa2:	3907      	subs	r1, #7
 8007fa4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007fa8:	bf08      	it	eq
 8007faa:	331c      	addeq	r3, #28
 8007fac:	f004 0402 	and.w	r4, r4, #2
 8007fb0:	ea42 0204 	orr.w	r2, r2, r4
 8007fb4:	bf1f      	itttt	ne
 8007fb6:	69dc      	ldrne	r4, [r3, #28]
 8007fb8:	3320      	addne	r3, #32
 8007fba:	f004 0401 	andne.w	r4, r4, #1
 8007fbe:	4322      	orrne	r2, r4
 8007fc0:	f800 2b01 	strb.w	r2, [r0], #1
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	d1ae      	bne.n	8007f26 <GUI__CompactPixelIndices+0xb4>
 8007fc8:	e761      	b.n	8007e8e <GUI__CompactPixelIndices+0x1c>
 8007fca:	3304      	adds	r3, #4
 8007fcc:	2100      	movs	r1, #0
 8007fce:	e7f7      	b.n	8007fc0 <GUI__CompactPixelIndices+0x14e>
 8007fd0:	4401      	add	r1, r0
 8007fd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fd6:	f803 2b01 	strb.w	r2, [r3], #1
 8007fda:	4299      	cmp	r1, r3
 8007fdc:	d1f9      	bne.n	8007fd2 <GUI__CompactPixelIndices+0x160>
 8007fde:	e756      	b.n	8007e8e <GUI__CompactPixelIndices+0x1c>

08007fe0 <LCD_SetClipRectEx>:
 8007fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fe2:	4c09      	ldr	r4, [pc, #36]	; (8008008 <LCD_SetClipRectEx+0x28>)
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	4669      	mov	r1, sp
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	7c5a      	ldrb	r2, [r3, #17]
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <LCD_SetClipRectEx+0x2c>)
 8007fee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ff2:	68c3      	ldr	r3, [r0, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	4798      	blx	r3
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	466a      	mov	r2, sp
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	3008      	adds	r0, #8
 8008000:	f7fb ffb7 	bl	8003f72 <GUI__IntersectRects>
 8008004:	b003      	add	sp, #12
 8008006:	bd30      	pop	{r4, r5, pc}
 8008008:	24000028 	.word	0x24000028
 800800c:	2402d630 	.word	0x2402d630

08008010 <GUI_MEMDEV_GetBitsPerPixel>:
 8008010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008012:	4604      	mov	r4, r0
 8008014:	b170      	cbz	r0, 8008034 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8008016:	f7fb f965 	bl	80032e4 <GUI_ALLOC_LockH>
 800801a:	6803      	ldr	r3, [r0, #0]
 800801c:	ad02      	add	r5, sp, #8
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	4798      	blx	r3
 8008028:	f7fc fd15 	bl	8004a56 <LCD__GetBPPDevice>
 800802c:	4604      	mov	r4, r0
 800802e:	4628      	mov	r0, r5
 8008030:	f7fb f966 	bl	8003300 <GUI_ALLOC_UnlockH>
 8008034:	4620      	mov	r0, r4
 8008036:	b003      	add	sp, #12
 8008038:	bd30      	pop	{r4, r5, pc}
	...

0800803c <GUI_MEMDEV_Delete>:
 800803c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800803e:	4604      	mov	r4, r0
 8008040:	b1d0      	cbz	r0, 8008078 <GUI_MEMDEV_Delete+0x3c>
 8008042:	4b0e      	ldr	r3, [pc, #56]	; (800807c <GUI_MEMDEV_Delete+0x40>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	4298      	cmp	r0, r3
 800804a:	d101      	bne.n	8008050 <GUI_MEMDEV_Delete+0x14>
 800804c:	f7fb fc45 	bl	80038da <GUI_SelectLCD>
 8008050:	4620      	mov	r0, r4
 8008052:	f7fb f947 	bl	80032e4 <GUI_ALLOC_LockH>
 8008056:	9001      	str	r0, [sp, #4]
 8008058:	6940      	ldr	r0, [r0, #20]
 800805a:	b108      	cbz	r0, 8008060 <GUI_MEMDEV_Delete+0x24>
 800805c:	f7fe fa16 	bl	800648c <GUI_USAGE_DecUseCnt>
 8008060:	ad02      	add	r5, sp, #8
 8008062:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	f7fb fe40 	bl	8003cec <GUI_DEVICE_Delete>
 800806c:	4628      	mov	r0, r5
 800806e:	f7fb f947 	bl	8003300 <GUI_ALLOC_UnlockH>
 8008072:	4620      	mov	r0, r4
 8008074:	f7fb f964 	bl	8003340 <GUI_ALLOC_Free>
 8008078:	b003      	add	sp, #12
 800807a:	bd30      	pop	{r4, r5, pc}
 800807c:	24000028 	.word	0x24000028

08008080 <GUI_MEMDEV_GetDataPtr>:
 8008080:	b513      	push	{r0, r1, r4, lr}
 8008082:	b158      	cbz	r0, 800809c <GUI_MEMDEV_GetDataPtr+0x1c>
 8008084:	f7fb f92e 	bl	80032e4 <GUI_ALLOC_LockH>
 8008088:	ab02      	add	r3, sp, #8
 800808a:	f100 0418 	add.w	r4, r0, #24
 800808e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008092:	4618      	mov	r0, r3
 8008094:	f7fb f934 	bl	8003300 <GUI_ALLOC_UnlockH>
 8008098:	4620      	mov	r0, r4
 800809a:	e7ff      	b.n	800809c <GUI_MEMDEV_GetDataPtr+0x1c>
 800809c:	b002      	add	sp, #8
 800809e:	bd10      	pop	{r4, pc}

080080a0 <__libc_init_array>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	4e0d      	ldr	r6, [pc, #52]	; (80080d8 <__libc_init_array+0x38>)
 80080a4:	4c0d      	ldr	r4, [pc, #52]	; (80080dc <__libc_init_array+0x3c>)
 80080a6:	1ba4      	subs	r4, r4, r6
 80080a8:	10a4      	asrs	r4, r4, #2
 80080aa:	2500      	movs	r5, #0
 80080ac:	42a5      	cmp	r5, r4
 80080ae:	d109      	bne.n	80080c4 <__libc_init_array+0x24>
 80080b0:	4e0b      	ldr	r6, [pc, #44]	; (80080e0 <__libc_init_array+0x40>)
 80080b2:	4c0c      	ldr	r4, [pc, #48]	; (80080e4 <__libc_init_array+0x44>)
 80080b4:	f000 f844 	bl	8008140 <_init>
 80080b8:	1ba4      	subs	r4, r4, r6
 80080ba:	10a4      	asrs	r4, r4, #2
 80080bc:	2500      	movs	r5, #0
 80080be:	42a5      	cmp	r5, r4
 80080c0:	d105      	bne.n	80080ce <__libc_init_array+0x2e>
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
 80080c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080c8:	4798      	blx	r3
 80080ca:	3501      	adds	r5, #1
 80080cc:	e7ee      	b.n	80080ac <__libc_init_array+0xc>
 80080ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080d2:	4798      	blx	r3
 80080d4:	3501      	adds	r5, #1
 80080d6:	e7f2      	b.n	80080be <__libc_init_array+0x1e>
 80080d8:	0800c898 	.word	0x0800c898
 80080dc:	0800c898 	.word	0x0800c898
 80080e0:	0800c898 	.word	0x0800c898
 80080e4:	0800c89c 	.word	0x0800c89c

080080e8 <memcpy>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	1e43      	subs	r3, r0, #1
 80080ec:	440a      	add	r2, r1
 80080ee:	4291      	cmp	r1, r2
 80080f0:	d100      	bne.n	80080f4 <memcpy+0xc>
 80080f2:	bd10      	pop	{r4, pc}
 80080f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fc:	e7f7      	b.n	80080ee <memcpy+0x6>

080080fe <memmove>:
 80080fe:	4288      	cmp	r0, r1
 8008100:	b510      	push	{r4, lr}
 8008102:	eb01 0302 	add.w	r3, r1, r2
 8008106:	d807      	bhi.n	8008118 <memmove+0x1a>
 8008108:	1e42      	subs	r2, r0, #1
 800810a:	4299      	cmp	r1, r3
 800810c:	d00a      	beq.n	8008124 <memmove+0x26>
 800810e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008112:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008116:	e7f8      	b.n	800810a <memmove+0xc>
 8008118:	4283      	cmp	r3, r0
 800811a:	d9f5      	bls.n	8008108 <memmove+0xa>
 800811c:	1881      	adds	r1, r0, r2
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	42d3      	cmn	r3, r2
 8008122:	d100      	bne.n	8008126 <memmove+0x28>
 8008124:	bd10      	pop	{r4, pc}
 8008126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800812a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800812e:	e7f7      	b.n	8008120 <memmove+0x22>

08008130 <memset>:
 8008130:	4402      	add	r2, r0
 8008132:	4603      	mov	r3, r0
 8008134:	4293      	cmp	r3, r2
 8008136:	d100      	bne.n	800813a <memset+0xa>
 8008138:	4770      	bx	lr
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e7f9      	b.n	8008134 <memset+0x4>

08008140 <_init>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr

0800814c <_fini>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr
