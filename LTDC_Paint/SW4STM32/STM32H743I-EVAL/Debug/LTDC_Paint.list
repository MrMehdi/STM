
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a14  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08006cb0  08006cb0  00016cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000110  20000000  08006f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d58  20000110  08007050  00020110  2**3
                  ALLOC
  7 ._user_heap_stack 00000c00  20001e68  08007050  00021e68  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  9 .debug_line   0001c768  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000454a8  00000000  00000000  0003c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000723d  00000000  00000000  00081d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000019b8  00000000  00000000  00088f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0018711a  00000000  00000000  0008a948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000020a8  00000000  00000000  00211a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015b01  00000000  00000000  00213b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003e973  00000000  00000000  00229611  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00267f84  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b98  00000000  00000000  00268000  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0026cb98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000110 	.word	0x20000110
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006c94 	.word	0x08006c94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000114 	.word	0x20000114
 80002d4:	08006c94 	.word	0x08006c94

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002de:	e003      	b.n	80002e8 <LoopCopyDataInit>

080002e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002e6:	3104      	adds	r1, #4

080002e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f0:	d3f6      	bcc.n	80002e0 <CopyDataInit>
  ldr  r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002f4:	e002      	b.n	80002fc <LoopFillZerobss>

080002f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002f8:	f842 3b04 	str.w	r3, [r2], #4

080002fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000300:	d3f9      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000302:	f002 fc09 	bl	8002b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000306:	f005 fe79 	bl	8005ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 f845 	bl	8000398 <main>
  bx  lr    
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000314:	08006f40 	.word	0x08006f40
  ldr  r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800031c:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8000320:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8000324:	20001e68 	.word	0x20001e68

08000328 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>

0800032a <disegna_frame_barra_laterale>:
{
	  UTIL_LCD_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore, UTIL_LCD_COLOR_GREEN);
}

static void disegna_frame_barra_laterale(uint32_t pos_x, uint32_t pos_y, uint32_t dim_x, uint32_t dim_y, uint32_t spessore_bordo)
{
 800032a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_x, dim_y, UTIL_LCD_COLOR_GREEN);
 800032e:	f04f 2cff 	mov.w	ip, #4278255360	; 0xff00ff00
{
 8000332:	9c08      	ldr	r4, [sp, #32]
 8000334:	4617      	mov	r7, r2
 8000336:	4698      	mov	r8, r3
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_x, dim_y, UTIL_LCD_COLOR_GREEN);
 8000338:	f8cd c000 	str.w	ip, [sp]
{
 800033c:	4605      	mov	r5, r0
 800033e:	460e      	mov	r6, r1
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_x, dim_y, UTIL_LCD_COLOR_GREEN);
 8000340:	f005 fdc2 	bl	8005ec8 <UTIL_LCD_FillRect>
	  UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+spessore_bordo, dim_x-2*spessore_bordo, dim_y-2*spessore_bordo, COLORE_SFONDO);
 8000344:	0062      	lsls	r2, r4, #1
 8000346:	f04f 33ff 	mov.w	r3, #4294967295
 800034a:	1931      	adds	r1, r6, r4
 800034c:	1928      	adds	r0, r5, r4
 800034e:	9308      	str	r3, [sp, #32]
 8000350:	eba8 0302 	sub.w	r3, r8, r2
 8000354:	1aba      	subs	r2, r7, r2
}
 8000356:	b002      	add	sp, #8
 8000358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+spessore_bordo, dim_x-2*spessore_bordo, dim_y-2*spessore_bordo, COLORE_SFONDO);
 800035c:	f005 bdb4 	b.w	8005ec8 <UTIL_LCD_FillRect>

08000360 <disegna_contenuto_barra_laterale>:

static void disegna_contenuto_barra_laterale(uint32_t pos_x, uint32_t pos_y, uint32_t dim_x, uint32_t dim_y, uint32_t spessore_bordo, double percentuale)
{
 8000360:	b410      	push	{r4}
 8000362:	9c01      	ldr	r4, [sp, #4]
	//UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+spessore_bordo, dim_x-2*spessore_bordo, dim_y*percentuale-0.5*spessore_bordo, UTIL_LCD_COLOR_YELLOW);
	//UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+dim_y*percentuale+0.5*spessore_bordo, dim_x-2*spessore_bordo, dim_y*(1.0-percentuale)-1.5*spessore_bordo, UTIL_LCD_COLOR_RED);

	//TODO: Correggere. verificare per percentuale = 0 e 100
	UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+spessore_bordo, dim_x-2*spessore_bordo, dim_y*percentuale-spessore_bordo, UTIL_LCD_COLOR_YELLOW);
 8000364:	ee07 3a90 	vmov	s15, r3
 8000368:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800036c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000370:	ee07 4a90 	vmov	s15, r4
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800037a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800037e:	4421      	add	r1, r4
 8000380:	4420      	add	r0, r4
	//UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+dim_y*percentuale+spessore_bordo, dim_x-2*spessore_bordo, dim_y*(1.0-percentuale)-*spessore_bordo, UTIL_LCD_COLOR_RED);
}
 8000382:	f85d 4b04 	ldr.w	r4, [sp], #4
	UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+spessore_bordo, dim_x-2*spessore_bordo, dim_y*percentuale-spessore_bordo, UTIL_LCD_COLOR_YELLOW);
 8000386:	ee96 7b00 	vfnms.f64	d7, d6, d0
 800038a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800038e:	ee17 3a90 	vmov	r3, s15
 8000392:	f005 bd99 	b.w	8005ec8 <UTIL_LCD_FillRect>
	...

08000398 <main>:
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0a0      	sub	sp, #128	; 0x80
static void MPU_Config(void)
{
MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800039c:	f002 fcec 	bl	8002d78 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003a0:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80003a2:	f04f 4c50 	mov.w	ip, #3489660928	; 0xd0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80003a6:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80003ac:	4b4e      	ldr	r3, [pc, #312]	; (80004e8 <main+0x150>)
 80003ae:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80003b8:	f002 fd00 	bl	8002dbc <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80003bc:	2004      	movs	r0, #4
 80003be:	f002 fceb 	bl	8002d98 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003c6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ca:	4b48      	ldr	r3, [pc, #288]	; (80004ec <main+0x154>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003d6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80003e0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003e6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80003ea:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003f6:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fa:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003fe:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000402:	07a5      	lsls	r5, r4, #30
 8000404:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	ea02 0c06 	and.w	ip, r2, r6
 800040a:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800040c:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800040e:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000412:	3901      	subs	r1, #1
 8000414:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000418:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800041c:	1c4f      	adds	r7, r1, #1
 800041e:	d1f6      	bne.n	800040e <main+0x76>
 8000420:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000422:	f112 0f20 	cmn.w	r2, #32
 8000426:	d1ee      	bne.n	8000406 <main+0x6e>
 8000428:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000438:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800043c:	f002 fbd4 	bl	8002be8 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000440:	2002      	movs	r0, #2
 8000442:	f004 f82b 	bl	800449c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000446:	2300      	movs	r3, #0
 8000448:	9303      	str	r3, [sp, #12]
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <main+0x158>)
 800044c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800044e:	f022 0201 	bic.w	r2, r2, #1
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
 8000454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	9303      	str	r3, [sp, #12]
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <main+0x15c>)
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000464:	619a      	str	r2, [r3, #24]
 8000466:	699a      	ldr	r2, [r3, #24]
 8000468:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800046c:	9203      	str	r2, [sp, #12]
 800046e:	9a03      	ldr	r2, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	0492      	lsls	r2, r2, #18
 8000474:	d5fc      	bpl.n	8000470 <main+0xd8>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047a:	f04f 0901 	mov.w	r9, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000480:	f04f 0805 	mov.w	r8, #5
 8000484:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000486:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000488:	2608      	movs	r6, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800048a:	a80d      	add	r0, sp, #52	; 0x34
  RCC_OscInitStruct.PLL.PLLP = 2;
 800048c:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800048e:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000490:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000492:	961d      	str	r6, [sp, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000494:	e9cd 930d 	strd	r9, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000498:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800049e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80004a0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004a2:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004a4:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 160;
 80004a6:	e9cd 8218 	strd	r8, r2, [sp, #96]	; 0x60
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004aa:	f004 f81b 	bl	80044e4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80004ae:	b118      	cbz	r0, 80004b8 <main+0x120>
  BSP_LED_On(LED3);
 80004b0:	4620      	mov	r0, r4
 80004b2:	f001 fa31 	bl	8001918 <BSP_LED_On>
 80004b6:	e7fe      	b.n	80004b6 <main+0x11e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	233f      	movs	r3, #63	; 0x3f
 80004ba:	2703      	movs	r7, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004c0:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	e9cd 3705 	strd	r3, r7, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004c6:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004c8:	e9cd 0607 	strd	r0, r6, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004cc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ce:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004d2:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004d6:	f004 fb39 	bl	8004b4c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80004da:	4606      	mov	r6, r0
 80004dc:	b160      	cbz	r0, 80004f8 <main+0x160>
  BSP_LED_On(LED3);
 80004de:	4620      	mov	r0, r4
 80004e0:	f001 fa1a 	bl	8001918 <BSP_LED_On>
 80004e4:	e7fe      	b.n	80004e4 <main+0x14c>
 80004e6:	bf00      	nop
 80004e8:	03000018 	.word	0x03000018
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	58000400 	.word	0x58000400
 80004f4:	58024800 	.word	0x58024800
  __HAL_RCC_CSI_ENABLE() ;
 80004f8:	4b97      	ldr	r3, [pc, #604]	; (8000758 <main+0x3c0>)
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 80004fa:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
  BSP_LCD_GetXSize(0, &x_size);
 80004fe:	4d97      	ldr	r5, [pc, #604]	; (800075c <main+0x3c4>)
  __HAL_RCC_CSI_ENABLE() ;
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000506:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000508:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800050c:	f042 0202 	orr.w	r2, r2, #2
 8000510:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	9304      	str	r3, [sp, #16]
 800051e:	9b04      	ldr	r3, [sp, #16]
  HAL_EnableCompensationCell();  
 8000520:	f002 fbba 	bl	8002c98 <HAL_EnableCompensationCell>
  BSP_LED_Init(LED1);
 8000524:	4630      	mov	r0, r6
 8000526:	f001 f9a3 	bl	8001870 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800052a:	4620      	mov	r0, r4
 800052c:	f001 f9a0 	bl	8001870 <BSP_LED_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000530:	4649      	mov	r1, r9
 8000532:	4630      	mov	r0, r6
  d_int.spessore_bordo = 5;
 8000534:	4c8a      	ldr	r4, [pc, #552]	; (8000760 <main+0x3c8>)
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000536:	f002 f88f 	bl	8002658 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800053a:	488a      	ldr	r0, [pc, #552]	; (8000764 <main+0x3cc>)
 800053c:	f005 fbbe 	bl	8005cbc <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8000540:	4630      	mov	r0, r6
 8000542:	f005 fbe9 	bl	8005d18 <UTIL_LCD_SetLayer>
  BSP_LCD_DisplayOn(0);
 8000546:	4630      	mov	r0, r6
 8000548:	f002 f892 	bl	8002670 <BSP_LCD_DisplayOn>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f005 fcda 	bl	8005f08 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
 8000554:	4629      	mov	r1, r5
 8000556:	4630      	mov	r0, r6
 8000558:	f001 fcdc 	bl	8001f14 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800055c:	1d29      	adds	r1, r5, #4
 800055e:	4630      	mov	r0, r6
 8000560:	f001 fce2 	bl	8001f28 <BSP_LCD_GetYSize>
  hTS.Width = x_size;
 8000564:	4980      	ldr	r1, [pc, #512]	; (8000768 <main+0x3d0>)
 8000566:	682b      	ldr	r3, [r5, #0]
  BSP_TS_Init(0, &hTS);
 8000568:	4630      	mov	r0, r6
  hTS.Accuracy = 0;
 800056a:	60ce      	str	r6, [r1, #12]
  hTS.Width = x_size;
 800056c:	600b      	str	r3, [r1, #0]
  hTS.Height = y_size;
 800056e:	686b      	ldr	r3, [r5, #4]
  hTS.Orientation = TS_SWAP_NONE;
 8000570:	e9c1 3901 	strd	r3, r9, [r1, #4]
  BSP_TS_Init(0, &hTS);
 8000574:	f002 f9d0 	bl	8002918 <BSP_TS_Init>
  d_int.raggio_cerchio_centrale = (y_size/4);
 8000578:	686b      	ldr	r3, [r5, #4]
  d_int.spessore_bordo = 5;
 800057a:	f8c4 8000 	str.w	r8, [r4]
	  UTIL_LCD_FillRect(pos_x+dim_quadrato, pos_y, dim_riquadro_etichetta_x, dim_riquadro_etichetta_y, UTIL_LCD_COLOR_WHITE);
 800057e:	f04f 39ff 	mov.w	r9, #4294967295
  d_int.raggio_cerchio_centrale = (y_size/4);
 8000582:	089a      	lsrs	r2, r3, #2
 8000584:	6062      	str	r2, [r4, #4]
  d_int.centro_x_cerchio_centrale = (x_size/2);
 8000586:	682a      	ldr	r2, [r5, #0]
 8000588:	0851      	lsrs	r1, r2, #1
 800058a:	60a1      	str	r1, [r4, #8]
  d_int.centro_y_cerchio_centrale = (y_size/2);
 800058c:	0859      	lsrs	r1, r3, #1
  d_int.raggio_indicatore_cerchio = 5;
 800058e:	e9c4 1803 	strd	r1, r8, [r4, #12]
  d_int.angolo = (2*M_PI)/3;
 8000592:	a16d      	add	r1, pc, #436	; (adr r1, 8000748 <main+0x3b0>)
 8000594:	e9d1 0100 	ldrd	r0, r1, [r1]
	test_percentuale+=0.01;
 8000598:	ed9f ab6d 	vldr	d10, [pc, #436]	; 8000750 <main+0x3b8>
  d_int.angolo = (2*M_PI)/3;
 800059c:	e9c4 0106 	strd	r0, r1, [r4, #24]
  d_int.dim_barra_y =  2*(y_size/3);
 80005a0:	fbb3 f1f7 	udiv	r1, r3, r7
  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 80005a4:	fbb2 f7f7 	udiv	r7, r2, r7
  d_int.dim_barra_x = (x_size/8);
 80005a8:	08d0      	lsrs	r0, r2, #3
  d_int.dim_barra_y =  2*(y_size/3);
 80005aa:	0049      	lsls	r1, r1, #1
  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 80005ac:	1a3f      	subs	r7, r7, r0
  d_int.dim_quadrato_piu_meno=(x_size/16);
 80005ae:	0912      	lsrs	r2, r2, #4
  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 80005b0:	1a5b      	subs	r3, r3, r1
  d_int.dim_barra_x = (x_size/8);
 80005b2:	6220      	str	r0, [r4, #32]
  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 80005b4:	087f      	lsrs	r7, r7, #1
  d_int.dim_riquadro_etichetta_y=d_int.dim_quadrato_piu_meno;
 80005b6:	63a2      	str	r2, [r4, #56]	; 0x38
  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 80005b8:	085b      	lsrs	r3, r3, #1
  d_int.dim_barra_y =  2*(y_size/3);
 80005ba:	6261      	str	r1, [r4, #36]	; 0x24
  d_int.pan_barra_destra = ((x_size/3)-d_int.dim_barra_x)/2;
 80005bc:	62a7      	str	r7, [r4, #40]	; 0x28
  d_int.pan_barra_alto = (y_size-d_int.dim_barra_y)/2;
 80005be:	62e3      	str	r3, [r4, #44]	; 0x2c
  d_int.dim_riquadro_etichetta_x=(x_size/8);
 80005c0:	e9c4 200c 	strd	r2, r0, [r4, #48]	; 0x30
  UTIL_LCD_SetLayer(0);
 80005c4:	4630      	mov	r0, r6
 80005c6:	f005 fba7 	bl	8005d18 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(COLORE_SFONDO);
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295
 80005ce:	f005 fc9b 	bl	8005f08 <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
 80005d2:	4629      	mov	r1, r5
 80005d4:	4630      	mov	r0, r6
 80005d6:	f001 fc9d 	bl	8001f14 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80005da:	1d29      	adds	r1, r5, #4
 80005dc:	4630      	mov	r0, r6
 80005de:	f001 fca3 	bl	8001f28 <BSP_LCD_GetYSize>
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_RED);
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <main+0x3d4>)
  disegna_pulsante_controllo(0,0, d_int.dim_quadrato_piu_meno, d_int.dim_riquadro_etichetta_x, d_int.dim_riquadro_etichetta_y);
 80005e4:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_RED);
 80005e8:	4631      	mov	r1, r6
 80005ea:	4630      	mov	r0, r6
  disegna_pulsante_controllo(0,0, d_int.dim_quadrato_piu_meno, d_int.dim_riquadro_etichetta_x, d_int.dim_riquadro_etichetta_y);
 80005ec:	e9d4 780c 	ldrd	r7, r8, [r4, #48]	; 0x30
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_RED);
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	463a      	mov	r2, r7
 80005f4:	463b      	mov	r3, r7
 80005f6:	f005 fc67 	bl	8005ec8 <UTIL_LCD_FillRect>
	  UTIL_LCD_FillRect(pos_x+dim_quadrato, pos_y, dim_riquadro_etichetta_x, dim_riquadro_etichetta_y, UTIL_LCD_COLOR_WHITE);
 80005fa:	4653      	mov	r3, sl
 80005fc:	4642      	mov	r2, r8
 80005fe:	4631      	mov	r1, r6
 8000600:	4638      	mov	r0, r7
 8000602:	f8cd 9000 	str.w	r9, [sp]
 8000606:	f005 fc5f 	bl	8005ec8 <UTIL_LCD_FillRect>
	  UTIL_LCD_FillRect(pos_x+dim_quadrato+dim_riquadro_etichetta_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_BLUE);
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <main+0x3d8>)
 800060c:	eb07 0008 	add.w	r0, r7, r8
 8000610:	463a      	mov	r2, r7
 8000612:	4631      	mov	r1, r6
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	463b      	mov	r3, r7
 8000618:	f005 fc56 	bl	8005ec8 <UTIL_LCD_FillRect>
	UTIL_LCD_FillCircle(pos_x, pos_y, raggio, UTIL_LCD_COLOR_GREEN);
 800061c:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
  disegna_cerchio_centrale(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.raggio_cerchio_centrale, d_int.spessore_bordo);
 8000620:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8000624:	e9d4 a800 	ldrd	sl, r8, [r4]
	UTIL_LCD_FillCircle(pos_x, pos_y, raggio, UTIL_LCD_COLOR_GREEN);
 8000628:	4630      	mov	r0, r6
 800062a:	4639      	mov	r1, r7
 800062c:	4642      	mov	r2, r8
 800062e:	f005 fc79 	bl	8005f24 <UTIL_LCD_FillCircle>
	UTIL_LCD_FillCircle(pos_x, pos_y, raggio-spessore_bordo, COLORE_SFONDO);
 8000632:	4630      	mov	r0, r6
 8000634:	464b      	mov	r3, r9
 8000636:	eba8 020a 	sub.w	r2, r8, sl
 800063a:	4639      	mov	r1, r7
  BSP_TS_GetState(0,&TS_State); 
 800063c:	f105 0610 	add.w	r6, r5, #16
	UTIL_LCD_FillCircle(pos_x, pos_y, raggio-spessore_bordo, COLORE_SFONDO);
 8000640:	f005 fc70 	bl	8005f24 <UTIL_LCD_FillCircle>
  disegna_frame_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, d_int.spessore_bordo);
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800064c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8000650:	f7ff fe6b 	bl	800032a <disegna_frame_barra_laterale>
  disegna_frame_barra_laterale(x_size-d_int.pan_barra_destra-d_int.dim_barra_x,d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, d_int.spessore_bordo);
 8000654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000656:	6828      	ldr	r0, [r5, #0]
 8000658:	1ac0      	subs	r0, r0, r3
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000660:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	f7ff fe60 	bl	800032a <disegna_frame_barra_laterale>
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 800066a:	6823      	ldr	r3, [r4, #0]
	test_percentuale+=0.01;
 800066c:	ed95 0b02 	vldr	d0, [r5, #8]
 8000670:	ee30 0b0a 	vadd.f64	d0, d0, d10
 8000674:	ed85 0b02 	vstr	d0, [r5, #8]
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	ee38 0b40 	vsub.f64	d0, d8, d0
 800067e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000682:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8000686:	f7ff fe6b 	bl	8000360 <disegna_contenuto_barra_laterale>
	disegna_contenuto_barra_laterale(x_size-d_int.pan_barra_destra-d_int.dim_barra_x, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 800068a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800068c:	6828      	ldr	r0, [r5, #0]
 800068e:	1ac0      	subs	r0, r0, r3
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	ed95 0b02 	vldr	d0, [r5, #8]
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800069a:	ee38 0b40 	vsub.f64	d0, d8, d0
 800069e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80006a2:	1a80      	subs	r0, r0, r2
 80006a4:	f7ff fe5c 	bl	8000360 <disegna_contenuto_barra_laterale>
	  UTIL_LCD_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore, UTIL_LCD_COLOR_GREEN);
 80006a8:	edd4 7a01 	vldr	s15, [r4, #4]
  disegna_indicatore_cerchio(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.angolo, d_int.raggio_cerchio_centrale, d_int.raggio_indicatore_cerchio);
 80006ac:	ed94 bb06 	vldr	d11, [r4, #24]
	  UTIL_LCD_FillCircle(pos_x+raggio_dal_centro*cos(alfa), pos_y+raggio_dal_centro*(-sin(alfa)), raggio_dimensione_indicatore, UTIL_LCD_COLOR_GREEN);
 80006b0:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 80006b4:	eeb0 0b4b 	vmov.f64	d0, d11
 80006b8:	f005 fcc6 	bl	8006048 <cos>
 80006bc:	eeb0 cb40 	vmov.f64	d12, d0
 80006c0:	eeb0 0b4b 	vmov.f64	d0, d11
 80006c4:	f005 fcfc 	bl	80060c0 <sin>
 80006c8:	edd4 7a03 	vldr	s15, [r4, #12]
 80006cc:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 80006d0:	6922      	ldr	r2, [r4, #16]
 80006d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006d6:	edd4 7a02 	vldr	s15, [r4, #8]
 80006da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006de:	eea0 6b49 	vfms.f64	d6, d0, d9
 80006e2:	eea9 7b0c 	vfma.f64	d7, d9, d12
 80006e6:	eefc 6bc6 	vcvt.u32.f64	s13, d6
 80006ea:	ee16 1a90 	vmov	r1, s13
 80006ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006f2:	ee17 0a90 	vmov	r0, s15
 80006f6:	f005 fc15 	bl	8005f24 <UTIL_LCD_FillCircle>
  BSP_TS_GetState(0,&TS_State); 
 80006fa:	4631      	mov	r1, r6
 80006fc:	2000      	movs	r0, #0
 80006fe:	f002 f9b1 	bl	8002a64 <BSP_TS_GetState>
  if ((TS_State.TouchDetected))
 8000702:	692b      	ldr	r3, [r5, #16]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f8      	beq.n	80006fa <main+0x362>
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 8000708:	6823      	ldr	r3, [r4, #0]
	test_percentuale+=0.01;
 800070a:	ed95 0b02 	vldr	d0, [r5, #8]
 800070e:	ee30 0b0a 	vadd.f64	d0, d0, d10
 8000712:	ed85 0b02 	vstr	d0, [r5, #8]
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	ee38 0b40 	vsub.f64	d0, d8, d0
 800071c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000720:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8000724:	f7ff fe1c 	bl	8000360 <disegna_contenuto_barra_laterale>
	disegna_contenuto_barra_laterale(x_size-d_int.pan_barra_destra-d_int.dim_barra_x, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y,  d_int.spessore_bordo, (1.0-test_percentuale));
 8000728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800072a:	6828      	ldr	r0, [r5, #0]
 800072c:	1ac0      	subs	r0, r0, r3
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	ed95 0b02 	vldr	d0, [r5, #8]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000738:	ee38 0b40 	vsub.f64	d0, d8, d0
 800073c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000740:	1a80      	subs	r0, r0, r2
 8000742:	f7ff fe0d 	bl	8000360 <disegna_contenuto_barra_laterale>
 8000746:	e7d8      	b.n	80006fa <main+0x362>
 8000748:	382d7365 	.word	0x382d7365
 800074c:	4000c152 	.word	0x4000c152
 8000750:	47ae147b 	.word	0x47ae147b
 8000754:	3f847ae1 	.word	0x3f847ae1
 8000758:	58024400 	.word	0x58024400
 800075c:	20000130 	.word	0x20000130
 8000760:	20000e30 	.word	0x20000e30
 8000764:	08006d24 	.word	0x08006d24
 8000768:	200012a4 	.word	0x200012a4
 800076c:	ffff0000 	.word	0xffff0000
 8000770:	ff0000ff 	.word	0xff0000ff

08000774 <MX_LTDC_ClockConfig>:
    periph_clk_init_struct.PLL3.PLL3R = 16;
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_LTDC_ClockConfig+0x34>)
 8000776:	2310      	movs	r3, #16
    periph_clk_init_struct.PLL3.PLL3Q = 7;
 8000778:	2207      	movs	r2, #7
    periph_clk_init_struct.PLL3.PLL3N = 336;
 800077a:	f04f 0c19 	mov.w	ip, #25
    periph_clk_init_struct.PLL3.PLL3R = 16;
 800077e:	6503      	str	r3, [r0, #80]	; 0x50
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000780:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    periph_clk_init_struct.PLL3.PLL3Q = 7;
 8000784:	2102      	movs	r1, #2
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000786:	61c3      	str	r3, [r0, #28]
    periph_clk_init_struct.PLL3.PLL3N = 336;
 8000788:	f44f 73a8 	mov.w	r3, #336	; 0x150
    periph_clk_init_struct.PLL3.PLL3Q = 7;
 800078c:	e9c0 1212 	strd	r1, r2, [r0, #72]	; 0x48
    periph_clk_init_struct.PLL3.PLL3N = 336;
 8000790:	e9c0 c310 	strd	ip, r3, [r0, #64]	; 0x40
    periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
    periph_clk_init_struct.PLL3.PLL3FRACN = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	65c3      	str	r3, [r0, #92]	; 0x5c
    periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800079c:	e9c0 3215 	strd	r3, r2, [r0, #84]	; 0x54
   return  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80007a0:	301c      	adds	r0, #28
 80007a2:	f004 bc1d 	b.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	bf00      	nop
 80007a8:	20000130 	.word	0x20000130

080007ac <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80007ac:	4770      	bx	lr

080007ae <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler>

080007b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler>

080007b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler>

080007b4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler>

080007b6 <SVC_Handler>:
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:
 80007ba:	4770      	bx	lr

080007bc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80007bc:	f002 ba42 	b.w	8002c44 <HAL_IncTick>

080007c0 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <OTG_HS_IRQHandler+0x8>)
 80007c2:	f002 be47 	b.w	8003454 <HAL_HCD_IRQHandler>
 80007c6:	bf00      	nop
 80007c8:	200019c8 	.word	0x200019c8

080007cc <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 80007cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80007d0:	f005 ba32 	b.w	8005c38 <USBH_LL_IncTimer>

080007d4 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80007d4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80007d8:	f005 ba44 	b.w	8005c64 <USBH_LL_Connect>

080007dc <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80007dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80007e0:	f005 ba4a 	b.w	8005c78 <USBH_LL_Disconnect>

080007e4 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80007e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80007e8:	f005 ba34 	b.w	8005c54 <USBH_LL_PortEnabled>

080007ec <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80007ec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80007f0:	f005 ba34 	b.w	8005c5c <USBH_LL_PortDisabled>

080007f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 80007f4:	4770      	bx	lr

080007f6 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80007f6:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 80007f8:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80007fc:	f003 f92c 	bl	8003a58 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8000800:	2000      	movs	r0, #0
 8000802:	bd08      	pop	{r3, pc}

08000804 <EXC7200_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
  Capabilities->Gesture    = 0;
 8000804:	2301      	movs	r3, #1
  Capabilities->MultiTouch = 0;
 8000806:	2000      	movs	r0, #0
  Capabilities->Gesture    = 0;
 8000808:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxTouch   = EXC7200_MAX_NB_TOUCH;
  Capabilities->MaxXl      = EXC7200_MAX_X_LENGTH;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Capabilities->MultiTouch = 0;
 800080e:	8008      	strh	r0, [r1, #0]
  Capabilities->MaxYl      = EXC7200_MAX_Y_LENGTH;
 8000810:	e9c1 3301 	strd	r3, r3, [r1, #4]
  
  return EXC7200_OK;
}
 8000814:	4770      	bx	lr

08000816 <EXC7200_Init>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_Init(EXC7200_Object_t *pObj)
{
 8000816:	b510      	push	{r4, lr}
  int32_t ret = EXC7200_OK;
  
  if(pObj->IsInitialized == 0U)
 8000818:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800081c:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800081e:	b933      	cbnz	r3, 800082e <EXC7200_Init+0x18>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != EXC7200_OK)
 8000820:	6803      	ldr	r3, [r0, #0]
 8000822:	4798      	blx	r3
 8000824:	b928      	cbnz	r0, 8000832 <EXC7200_Init+0x1c>
    {
      ret = EXC7200_ERROR;
    }
    else
    {
      pObj->IsInitialized = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 800082c:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_OK;
 800082e:	2000      	movs	r0, #0
 8000830:	e7fc      	b.n	800082c <EXC7200_Init+0x16>
      ret = EXC7200_ERROR;
 8000832:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000836:	e7f9      	b.n	800082c <EXC7200_Init+0x16>

08000838 <EXC7200_DeInit>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_DeInit(EXC7200_Object_t *pObj)
{
 8000838:	b510      	push	{r4, lr}
  int32_t ret = EXC7200_OK;
  
  if(pObj->IsInitialized == 1U)
 800083a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800083e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 1U)
 8000840:	2b01      	cmp	r3, #1
 8000842:	d105      	bne.n	8000850 <EXC7200_DeInit+0x18>
  {
    if(pObj->IO.DeInit() != EXC7200_OK)
 8000844:	6843      	ldr	r3, [r0, #4]
 8000846:	4798      	blx	r3
 8000848:	b920      	cbnz	r0, 8000854 <EXC7200_DeInit+0x1c>
    {
      ret = EXC7200_ERROR;
    }
    else
    {
      pObj->IsInitialized = 0;
 800084a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 800084e:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_OK;
 8000850:	2000      	movs	r0, #0
 8000852:	e7fc      	b.n	800084e <EXC7200_DeInit+0x16>
      ret = EXC7200_ERROR;
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000858:	e7f9      	b.n	800084e <EXC7200_DeInit+0x16>

0800085a <EXC7200_GestureConfig>:
  */
int32_t EXC7200_GestureConfig(EXC7200_Object_t *pObj, EXC7200_Gesture_Init_t *GestureInit)
{
  /* Feature not supported */
  return EXC7200_ERROR;  
}
 800085a:	f04f 30ff 	mov.w	r0, #4294967295
 800085e:	4770      	bx	lr

08000860 <EXC7200_EnableIT>:
  */
int32_t EXC7200_EnableIT(EXC7200_Object_t *pObj)
{
  /* Feature not supported */
  return EXC7200_ERROR;
}
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	4770      	bx	lr

08000866 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000866:	b410      	push	{r4}
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000868:	6904      	ldr	r4, [r0, #16]
 800086a:	8900      	ldrh	r0, [r0, #8]
 800086c:	46a4      	mov	ip, r4
}
 800086e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000872:	4760      	bx	ip

08000874 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000874:	b410      	push	{r4}
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000876:	68c4      	ldr	r4, [r0, #12]
 8000878:	8900      	ldrh	r0, [r0, #8]
 800087a:	46a4      	mov	ip, r4
}
 800087c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000880:	4760      	bx	ip

08000882 <EXC7200_ReadID>:
{
 8000882:	b513      	push	{r0, r1, r4, lr}
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 8000884:	2301      	movs	r3, #1
{
 8000886:	460c      	mov	r4, r1
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 8000888:	f10d 0207 	add.w	r2, sp, #7
 800088c:	2109      	movs	r1, #9
 800088e:	3018      	adds	r0, #24
 8000890:	f000 f866 	bl	8000960 <exc7200_read_reg>
 8000894:	b920      	cbnz	r0, 80008a0 <EXC7200_ReadID+0x1e>
    *Id = EXC7200_ID; 
 8000896:	f44f 43e4 	mov.w	r3, #29184	; 0x7200
 800089a:	6023      	str	r3, [r4, #0]
}
 800089c:	b002      	add	sp, #8
 800089e:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_ERROR;
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80008a4:	e7fa      	b.n	800089c <EXC7200_ReadID+0x1a>

080008a6 <EXC7200_ClearIT>:
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
 80008aa:	4770      	bx	lr

080008ac <EXC7200_GetMultiTouchState>:
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	4770      	bx	lr

080008b2 <EXC7200_GetGesture>:
 80008b2:	f04f 30ff 	mov.w	r0, #4294967295
 80008b6:	4770      	bx	lr

080008b8 <EXC7200_DisableIT>:
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	4770      	bx	lr

080008be <EXC7200_ITStatus>:
 80008be:	f04f 30ff 	mov.w	r0, #4294967295
 80008c2:	4770      	bx	lr

080008c4 <EXC7200_GetState>:
{
 80008c4:	b530      	push	{r4, r5, lr}
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80008c6:	f100 0518 	add.w	r5, r0, #24
{
 80008ca:	b085      	sub	sp, #20
 80008cc:	460c      	mov	r4, r1
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80008ce:	230a      	movs	r3, #10
 80008d0:	aa01      	add	r2, sp, #4
 80008d2:	2109      	movs	r1, #9
 80008d4:	4628      	mov	r0, r5
 80008d6:	f000 f843 	bl	8000960 <exc7200_read_reg>
 80008da:	bb08      	cbnz	r0, 8000920 <EXC7200_GetState+0x5c>
    if(pData[1] == 0x83U)
 80008dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80008e0:	f1a3 0283 	sub.w	r2, r3, #131	; 0x83
 80008e4:	4253      	negs	r3, r2
 80008e6:	4153      	adcs	r3, r2
  State->TouchDetected = (uint32_t)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 80008e8:	6023      	str	r3, [r4, #0]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80008ea:	2109      	movs	r1, #9
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80008ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80008f0:	4628      	mov	r0, r5
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80008f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80008fc:	f89d 2009 	ldrb.w	r2, [sp, #9]
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	6063      	str	r3, [r4, #4]
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 8000904:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000908:	091b      	lsrs	r3, r3, #4
 800090a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 800090e:	aa01      	add	r2, sp, #4
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	60a3      	str	r3, [r4, #8]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 8000914:	230a      	movs	r3, #10
 8000916:	f000 f823 	bl	8000960 <exc7200_read_reg>
}
 800091a:	2000      	movs	r0, #0
 800091c:	b005      	add	sp, #20
 800091e:	bd30      	pop	{r4, r5, pc}
    ret = EXC7200_ERROR;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	e7e0      	b.n	80008e8 <EXC7200_GetState+0x24>
	...

08000928 <EXC7200_RegisterBusIO>:
  if (pObj == NULL)
 8000928:	b190      	cbz	r0, 8000950 <EXC7200_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800092a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800092c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800092e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8000930:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8000932:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8000934:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000936:	68ca      	ldr	r2, [r1, #12]
 8000938:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800093a:	690a      	ldr	r2, [r1, #16]
 800093c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800093e:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8000940:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8000942:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <EXC7200_RegisterBusIO+0x30>)
 8000946:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <EXC7200_RegisterBusIO+0x34>)
 800094a:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800094c:	b103      	cbz	r3, 8000950 <EXC7200_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800094e:	4718      	bx	r3
}
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	08000867 	.word	0x08000867
 800095c:	08000875 	.word	0x08000875

08000960 <exc7200_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t exc7200_read_reg(exc7200_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8000960:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000962:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000966:	46a4      	mov	ip, r4
}
 8000968:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800096c:	4760      	bx	ip
	...

08000970 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000970:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8000972:	2201      	movs	r2, #1
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <IS42S32800G_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8000976:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800097a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800097c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800097e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8000980:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000986:	f004 ffb3 	bl	80058f0 <HAL_SDRAM_SendCommand>
 800098a:	3000      	adds	r0, #0
 800098c:	bf18      	it	ne
 800098e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000990:	4240      	negs	r0, r0
 8000992:	bd08      	pop	{r3, pc}
 8000994:	20000210 	.word	0x20000210

08000998 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000998:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 800099a:	2202      	movs	r2, #2
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <IS42S32800G_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800099e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80009a2:	2101      	movs	r1, #1
 80009a4:	2200      	movs	r2, #0
 80009a6:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80009aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ae:	4619      	mov	r1, r3
 80009b0:	f004 ff9e 	bl	80058f0 <HAL_SDRAM_SendCommand>
 80009b4:	3000      	adds	r0, #0
 80009b6:	bf18      	it	ne
 80009b8:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80009ba:	4240      	negs	r0, r0
 80009bc:	bd08      	pop	{r3, pc}
 80009be:	bf00      	nop
 80009c0:	20000210 	.word	0x20000210

080009c4 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80009c4:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009c6:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80009ca:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009cc:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80009ce:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80009d0:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80009d2:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80009d4:	6991      	ldr	r1, [r2, #24]
 80009d6:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009d8:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80009da:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009dc:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80009de:	4907      	ldr	r1, [pc, #28]	; (80009fc <IS42S32800G_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80009e0:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80009e2:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80009e4:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80009e6:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80009ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ee:	f004 ff7f 	bl	80058f0 <HAL_SDRAM_SendCommand>
 80009f2:	3000      	adds	r0, #0
 80009f4:	bf18      	it	ne
 80009f6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80009f8:	4240      	negs	r0, r0
 80009fa:	bd10      	pop	{r4, pc}
 80009fc:	20000210 	.word	0x20000210

08000a00 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8000a00:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <IS42S32800G_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8000a04:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8000a08:	2108      	movs	r1, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a14:	4619      	mov	r1, r3
 8000a16:	f004 ff6b 	bl	80058f0 <HAL_SDRAM_SendCommand>
 8000a1a:	3000      	adds	r0, #0
 8000a1c:	bf18      	it	ne
 8000a1e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000a20:	4240      	negs	r0, r0
 8000a22:	bd08      	pop	{r3, pc}
 8000a24:	20000210 	.word	0x20000210

08000a28 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8000a28:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000a2a:	f004 ff80 	bl	800592e <HAL_SDRAM_ProgramRefreshRate>
 8000a2e:	3000      	adds	r0, #0
 8000a30:	bf18      	it	ne
 8000a32:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000a34:	4240      	negs	r0, r0
 8000a36:	bd08      	pop	{r3, pc}

08000a38 <IS42S32800G_Init>:
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	460c      	mov	r4, r1
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000a3c:	6809      	ldr	r1, [r1, #0]
{
 8000a3e:	4605      	mov	r5, r0
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000a40:	f7ff ff96 	bl	8000970 <IS42S32800G_ClockEnable>
 8000a44:	b110      	cbz	r0, 8000a4c <IS42S32800G_Init+0x14>
  int32_t ret = IS42S32800G_ERROR;
 8000a46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000a4c:	f002 f906 	bl	8002c5c <HAL_GetTick>
 8000a50:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000a52:	f002 f903 	bl	8002c5c <HAL_GetTick>
 8000a56:	4286      	cmp	r6, r0
 8000a58:	d0fb      	beq.n	8000a52 <IS42S32800G_Init+0x1a>
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 8000a5a:	6821      	ldr	r1, [r4, #0]
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	f7ff ff9b 	bl	8000998 <IS42S32800G_Precharge>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d1ef      	bne.n	8000a46 <IS42S32800G_Init+0xe>
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8000a66:	4628      	mov	r0, r5
 8000a68:	e9d4 1200 	ldrd	r1, r2, [r4]
 8000a6c:	f7ff ffc8 	bl	8000a00 <IS42S32800G_RefreshMode>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d1e8      	bne.n	8000a46 <IS42S32800G_Init+0xe>
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8000a74:	4621      	mov	r1, r4
 8000a76:	4628      	mov	r0, r5
 8000a78:	f7ff ffa4 	bl	80009c4 <IS42S32800G_ModeRegConfig>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d1e2      	bne.n	8000a46 <IS42S32800G_Init+0xe>
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8000a80:	68a1      	ldr	r1, [r4, #8]
 8000a82:	4628      	mov	r0, r5
 8000a84:	f7ff ffd0 	bl	8000a28 <IS42S32800G_RefreshRate>
 8000a88:	3000      	adds	r0, #0
 8000a8a:	bf18      	it	ne
 8000a8c:	2001      	movne	r0, #1
 8000a8e:	4240      	negs	r0, r0
  return ret;
 8000a90:	e7db      	b.n	8000a4a <IS42S32800G_Init+0x12>

08000a92 <MFXSTM32L152_DeInit>:
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8000a92:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000a96:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0U;
 8000a98:	bf04      	itt	eq
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
}
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <MFXSTM32L152_WakeUp>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  return MFXSTM32L152_OK;
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	4770      	bx	lr

08000aa8 <MFXSTM32L152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
int32_t MFXSTM32L152_IDD_GetValue(MFXSTM32L152_Object_t *pObj, uint32_t *ReadValue)
{
 8000aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t  data[3];

  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data));
 8000aaa:	2303      	movs	r3, #3
{
 8000aac:	460c      	mov	r4, r1
  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data));
 8000aae:	6905      	ldr	r5, [r0, #16]
 8000ab0:	aa01      	add	r2, sp, #4
 8000ab2:	2114      	movs	r1, #20
 8000ab4:	8900      	ldrh	r0, [r0, #8]
 8000ab6:	47a8      	blx	r5

  /* Recompose Idd current value */
  *ReadValue = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
 8000ab8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000abc:	f89d 2004 	ldrb.w	r2, [sp, #4]

  return MFXSTM32L152_OK;
}
 8000ac0:	2000      	movs	r0, #0
  *ReadValue = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ac8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6023      	str	r3, [r4, #0]
}
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd30      	pop	{r4, r5, pc}

08000ad4 <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000ad4:	b410      	push	{r4}
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000ad6:	6904      	ldr	r4, [r0, #16]
 8000ad8:	8900      	ldrh	r0, [r0, #8]
 8000ada:	46a4      	mov	ip, r4
}
 8000adc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000ae0:	4760      	bx	ip

08000ae2 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000ae2:	b410      	push	{r4}
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000ae4:	68c4      	ldr	r4, [r0, #12]
 8000ae6:	8900      	ldrh	r0, [r0, #8]
 8000ae8:	46a4      	mov	ip, r4
}
 8000aea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000aee:	4760      	bx	ip

08000af0 <MFXSTM32L152_Reset>:
{
 8000af0:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = MFXSTM32L152_SWRST;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	aa02      	add	r2, sp, #8
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	3018      	adds	r0, #24
  uint8_t tmp = MFXSTM32L152_SWRST;
 8000afa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8000afe:	2301      	movs	r3, #1
 8000b00:	f000 fdb3 	bl	800166a <mfxstm32l152_write_reg>
 8000b04:	3000      	adds	r0, #0
 8000b06:	bf18      	it	ne
 8000b08:	2001      	movne	r0, #1
}
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	b003      	add	sp, #12
 8000b0e:	f85d fb04 	ldr.w	pc, [sp], #4

08000b12 <MFXSTM32L152_LowPower>:
{
 8000b12:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = MFXSTM32L152_STANDBY;
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	aa02      	add	r2, sp, #8
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8000b18:	2301      	movs	r3, #1
 8000b1a:	3018      	adds	r0, #24
  uint8_t tmp = MFXSTM32L152_STANDBY;
 8000b1c:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8000b20:	f000 fda3 	bl	800166a <mfxstm32l152_write_reg>
 8000b24:	3000      	adds	r0, #0
 8000b26:	bf18      	it	ne
 8000b28:	2001      	movne	r0, #1
}
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	b003      	add	sp, #12
 8000b2e:	f85d fb04 	ldr.w	pc, [sp], #4

08000b32 <MFXSTM32L152_IO_ClearIT>:
{
 8000b32:	b513      	push	{r0, r1, r4, lr}
  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8000b34:	b2cb      	uxtb	r3, r1
{
 8000b36:	4604      	mov	r4, r0
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8000b38:	0a0a      	lsrs	r2, r1, #8
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 8000b3a:	0c09      	lsrs	r1, r1, #16
  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 8000b3c:	f88d 3005 	strb.w	r3, [sp, #5]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8000b40:	f88d 2006 	strb.w	r2, [sp, #6]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 8000b44:	f88d 1007 	strb.w	r1, [sp, #7]
  if (pin_0_7 != 0U)
 8000b48:	b9db      	cbnz	r3, 8000b82 <MFXSTM32L152_IO_ClearIT+0x50>
  if (pin_8_15 != 0U)
 8000b4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000b4e:	b143      	cbz	r3, 8000b62 <MFXSTM32L152_IO_ClearIT+0x30>
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 8000b50:	2301      	movs	r3, #1
 8000b52:	f10d 0206 	add.w	r2, sp, #6
 8000b56:	2155      	movs	r1, #85	; 0x55
 8000b58:	f104 0018 	add.w	r0, r4, #24
 8000b5c:	f000 fd85 	bl	800166a <mfxstm32l152_write_reg>
 8000b60:	b9c0      	cbnz	r0, 8000b94 <MFXSTM32L152_IO_ClearIT+0x62>
  if (pin_16_23 != 0U)
 8000b62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b66:	b1b8      	cbz	r0, 8000b98 <MFXSTM32L152_IO_ClearIT+0x66>
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f10d 0207 	add.w	r2, sp, #7
 8000b6e:	2156      	movs	r1, #86	; 0x56
 8000b70:	f104 0018 	add.w	r0, r4, #24
 8000b74:	f000 fd79 	bl	800166a <mfxstm32l152_write_reg>
 8000b78:	3000      	adds	r0, #0
 8000b7a:	bf18      	it	ne
 8000b7c:	2001      	movne	r0, #1
 8000b7e:	4240      	negs	r0, r0
 8000b80:	e00a      	b.n	8000b98 <MFXSTM32L152_IO_ClearIT+0x66>
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 8000b82:	2301      	movs	r3, #1
 8000b84:	f10d 0205 	add.w	r2, sp, #5
 8000b88:	2154      	movs	r1, #84	; 0x54
 8000b8a:	3018      	adds	r0, #24
 8000b8c:	f000 fd6d 	bl	800166a <mfxstm32l152_write_reg>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d0da      	beq.n	8000b4a <MFXSTM32L152_IO_ClearIT+0x18>
      return MFXSTM32L152_ERROR;
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <MFXSTM32L152_TS_GetXY>:
{
 8000b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy));
 8000b9e:	2303      	movs	r3, #3
{
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	460e      	mov	r6, r1
 8000ba4:	4615      	mov	r5, r2
  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy));
 8000ba6:	6907      	ldr	r7, [r0, #16]
 8000ba8:	aa01      	add	r2, sp, #4
 8000baa:	2124      	movs	r1, #36	; 0x24
 8000bac:	8900      	ldrh	r0, [r0, #8]
 8000bae:	47b8      	blx	r7
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000bb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000bb4:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1) != MFXSTM32L152_OK)
 8000bb8:	f104 0018 	add.w	r0, r4, #24
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000bbc:	091a      	lsrs	r2, r3, #4
  *Y = ((uint16_t)data_xy[2]<<4U) + ((uint16_t)data_xy[0]& 4U);
 8000bbe:	f003 0304 	and.w	r3, r3, #4
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000bc2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1) != MFXSTM32L152_OK)
 8000bc6:	21a4      	movs	r1, #164	; 0xa4
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000bc8:	8032      	strh	r2, [r6, #0]
  *Y = ((uint16_t)data_xy[2]<<4U) + ((uint16_t)data_xy[0]& 4U);
 8000bca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000bce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000bd2:	aa02      	add	r2, sp, #8
  *Y = ((uint16_t)data_xy[2]<<4U) + ((uint16_t)data_xy[0]& 4U);
 8000bd4:	802b      	strh	r3, [r5, #0]
  tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	f802 3d05 	strb.w	r3, [r2, #-5]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1) != MFXSTM32L152_OK)
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f000 fd44 	bl	800166a <mfxstm32l152_write_reg>
 8000be2:	3000      	adds	r0, #0
 8000be4:	bf18      	it	ne
 8000be6:	2001      	movne	r0, #1
}
 8000be8:	4240      	negs	r0, r0
 8000bea:	b003      	add	sp, #12
 8000bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bee <MFXSTM32L152_ReadID>:
{
 8000bee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pObj->IO.Init();
 8000bf0:	4604      	mov	r4, r0
{
 8000bf2:	460d      	mov	r5, r1
  pObj->IO.Init();
 8000bf4:	f854 3b18 	ldr.w	r3, [r4], #24
 8000bf8:	4798      	blx	r3
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f10d 0207 	add.w	r2, sp, #7
 8000c00:	2100      	movs	r1, #0
 8000c02:	4620      	mov	r0, r4
 8000c04:	f000 fd2a 	bl	800165c <mfxstm32l152_read_reg>
 8000c08:	b920      	cbnz	r0, 8000c14 <MFXSTM32L152_ReadID+0x26>
  *Id = id;
 8000c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c0e:	602b      	str	r3, [r5, #0]
}
 8000c10:	b003      	add	sp, #12
 8000c12:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000c18:	e7fa      	b.n	8000c10 <MFXSTM32L152_ReadID+0x22>

08000c1a <MFXSTM32L152_IO_Start>:
{
 8000c1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000c1c:	f100 0418 	add.w	r4, r0, #24
{
 8000c20:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000c22:	2301      	movs	r3, #1
 8000c24:	f10d 0207 	add.w	r2, sp, #7
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f000 fd16 	bl	800165c <mfxstm32l152_read_reg>
 8000c30:	b9d8      	cbnz	r0, 8000c6a <MFXSTM32L152_IO_Start+0x50>
    mode |= MFXSTM32L152_GPIO_EN;
 8000c32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (IO_Pin > 0xFFFFU)
 8000c36:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000c3a:	f10d 0207 	add.w	r2, sp, #7
 8000c3e:	f04f 0140 	mov.w	r1, #64	; 0x40
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000c42:	bf34      	ite	cc
 8000c44:	f023 0308 	biccc.w	r3, r3, #8
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000c48:	f043 0309 	orrcs.w	r3, r3, #9
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000c4c:	4620      	mov	r0, r4
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000c4e:	bf38      	it	cc
 8000c50:	f043 0301 	orrcc.w	r3, r3, #1
 8000c54:	f88d 3007 	strb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f000 fd06 	bl	800166a <mfxstm32l152_write_reg>
 8000c5e:	3000      	adds	r0, #0
 8000c60:	bf18      	it	ne
 8000c62:	2001      	movne	r0, #1
 8000c64:	4240      	negs	r0, r0
}
 8000c66:	b003      	add	sp, #12
 8000c68:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8000c6a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000c6e:	e7fa      	b.n	8000c66 <MFXSTM32L152_IO_Start+0x4c>

08000c70 <MFXSTM32L152_reg24_setPinValue>:
{
 8000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c74:	4698      	mov	r8, r3
 8000c76:	b087      	sub	sp, #28
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000c78:	0a13      	lsrs	r3, r2, #8
  if (pin_0_7 != 0U)
 8000c7a:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8000c7e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
{
 8000c82:	4605      	mov	r5, r0
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000c84:	9300      	str	r3, [sp, #0]
{
 8000c86:	460e      	mov	r6, r1
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000c88:	f89d 3000 	ldrb.w	r3, [sp]
{
 8000c8c:	4617      	mov	r7, r2
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000c8e:	9301      	str	r3, [sp, #4]
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8000c90:	fa5f f38b 	uxtb.w	r3, fp
 8000c94:	9302      	str	r3, [sp, #8]
  if (pin_0_7 != 0U)
 8000c96:	d01d      	beq.n	8000cd4 <MFXSTM32L152_reg24_setPinValue+0x64>
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8000c98:	f100 0918 	add.w	r9, r0, #24
 8000c9c:	fa1f fa81 	uxth.w	sl, r1
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f10d 0217 	add.w	r2, sp, #23
 8000ca6:	4651      	mov	r1, sl
 8000ca8:	4648      	mov	r0, r9
 8000caa:	f000 fcd7 	bl	800165c <mfxstm32l152_read_reg>
 8000cae:	9003      	str	r0, [sp, #12]
 8000cb0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    if (PinValue != 0U)
 8000cb4:	f1b8 0f00 	cmp.w	r8, #0
 8000cb8:	d051      	beq.n	8000d5e <MFXSTM32L152_reg24_setPinValue+0xee>
      tmp |= (uint8_t)pin_0_7;
 8000cba:	4304      	orrs	r4, r0
 8000cbc:	f88d 4017 	strb.w	r4, [sp, #23]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f10d 0217 	add.w	r2, sp, #23
 8000cc6:	4651      	mov	r1, sl
 8000cc8:	4648      	mov	r0, r9
 8000cca:	f000 fcce 	bl	800166a <mfxstm32l152_write_reg>
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	4403      	add	r3, r0
 8000cd2:	461c      	mov	r4, r3
  if (pin_8_15 != 0U)
 8000cd4:	9b01      	ldr	r3, [sp, #4]
 8000cd6:	b1eb      	cbz	r3, 8000d14 <MFXSTM32L152_reg24_setPinValue+0xa4>
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8000cd8:	f105 0718 	add.w	r7, r5, #24
 8000cdc:	f106 0901 	add.w	r9, r6, #1
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f10d 0217 	add.w	r2, sp, #23
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	4638      	mov	r0, r7
 8000cea:	f000 fcb7 	bl	800165c <mfxstm32l152_read_reg>
 8000cee:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000cf2:	4404      	add	r4, r0
    if (PinValue != 0U)
 8000cf4:	f1b8 0f00 	cmp.w	r8, #0
 8000cf8:	d036      	beq.n	8000d68 <MFXSTM32L152_reg24_setPinValue+0xf8>
      tmp |= (uint8_t)pin_8_15;
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	4613      	mov	r3, r2
      tmp &= ~(uint8_t)pin_8_15;
 8000d00:	f88d 3017 	strb.w	r3, [sp, #23]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8000d04:	f10d 0217 	add.w	r2, sp, #23
 8000d08:	2301      	movs	r3, #1
 8000d0a:	4649      	mov	r1, r9
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	f000 fcac 	bl	800166a <mfxstm32l152_write_reg>
 8000d12:	4404      	add	r4, r0
  if (pin_16_23 != 0U)
 8000d14:	9b02      	ldr	r3, [sp, #8]
 8000d16:	b1db      	cbz	r3, 8000d50 <MFXSTM32L152_reg24_setPinValue+0xe0>
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8000d18:	3518      	adds	r5, #24
 8000d1a:	3602      	adds	r6, #2
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f10d 0217 	add.w	r2, sp, #23
 8000d22:	4631      	mov	r1, r6
 8000d24:	4628      	mov	r0, r5
 8000d26:	f000 fc99 	bl	800165c <mfxstm32l152_read_reg>
 8000d2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000d2e:	4404      	add	r4, r0
    if (PinValue != 0U)
 8000d30:	f1b8 0f00 	cmp.w	r8, #0
 8000d34:	d01c      	beq.n	8000d70 <MFXSTM32L152_reg24_setPinValue+0x100>
      tmp |= (uint8_t)pin_16_23;
 8000d36:	9a02      	ldr	r2, [sp, #8]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	4613      	mov	r3, r2
      tmp &= ~(uint8_t)pin_16_23;
 8000d3c:	f88d 3017 	strb.w	r3, [sp, #23]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8000d40:	f10d 0217 	add.w	r2, sp, #23
 8000d44:	2301      	movs	r3, #1
 8000d46:	4631      	mov	r1, r6
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f000 fc8e 	bl	800166a <mfxstm32l152_write_reg>
 8000d4e:	4404      	add	r4, r0
  if(ret != MFXSTM32L152_OK)
 8000d50:	3400      	adds	r4, #0
 8000d52:	bf18      	it	ne
 8000d54:	2401      	movne	r4, #1
}
 8000d56:	4260      	negs	r0, r4
 8000d58:	b007      	add	sp, #28
 8000d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp &= ~(uint8_t)pin_0_7;
 8000d5e:	ea20 0707 	bic.w	r7, r0, r7
 8000d62:	f88d 7017 	strb.w	r7, [sp, #23]
 8000d66:	e7ab      	b.n	8000cc0 <MFXSTM32L152_reg24_setPinValue+0x50>
      tmp &= ~(uint8_t)pin_8_15;
 8000d68:	9a00      	ldr	r2, [sp, #0]
 8000d6a:	ea23 0302 	bic.w	r3, r3, r2
 8000d6e:	e7c7      	b.n	8000d00 <MFXSTM32L152_reg24_setPinValue+0x90>
      tmp &= ~(uint8_t)pin_16_23;
 8000d70:	ea23 030b 	bic.w	r3, r3, fp
 8000d74:	e7e2      	b.n	8000d3c <MFXSTM32L152_reg24_setPinValue+0xcc>

08000d76 <MFXSTM32L152_IO_ReadPin>:
{
 8000d76:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000d78:	f100 0418 	add.w	r4, r0, #24
{
 8000d7c:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000d7e:	2301      	movs	r3, #1
 8000d80:	aa01      	add	r2, sp, #4
 8000d82:	2110      	movs	r1, #16
 8000d84:	4620      	mov	r0, r4
 8000d86:	f000 fc69 	bl	800165c <mfxstm32l152_read_reg>
 8000d8a:	b118      	cbz	r0, 8000d94 <MFXSTM32L152_IO_ReadPin+0x1e>
    return MFXSTM32L152_ERROR;
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d90:	b003      	add	sp, #12
 8000d92:	bd30      	pop	{r4, r5, pc}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8000d94:	2301      	movs	r3, #1
 8000d96:	f10d 0205 	add.w	r2, sp, #5
 8000d9a:	2111      	movs	r1, #17
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f000 fc5d 	bl	800165c <mfxstm32l152_read_reg>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d1f2      	bne.n	8000d8c <MFXSTM32L152_IO_ReadPin+0x16>
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8000da6:	2301      	movs	r3, #1
 8000da8:	f10d 0206 	add.w	r2, sp, #6
 8000dac:	2112      	movs	r1, #18
 8000dae:	4620      	mov	r0, r4
 8000db0:	f000 fc54 	bl	800165c <mfxstm32l152_read_reg>
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d1e9      	bne.n	8000d8c <MFXSTM32L152_IO_ReadPin+0x16>
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8000db8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000dbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000dc0:	0400      	lsls	r0, r0, #16
 8000dc2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8000dc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000dca:	4418      	add	r0, r3
  tmp &= IO_Pin;
 8000dcc:	4028      	ands	r0, r5
  return(int32_t)(tmp);
 8000dce:	e7df      	b.n	8000d90 <MFXSTM32L152_IO_ReadPin+0x1a>

08000dd0 <MFXSTM32L152_IO_ITStatus>:
{
 8000dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000dd2:	f100 0418 	add.w	r4, r0, #24
{
 8000dd6:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000dd8:	2301      	movs	r3, #1
 8000dda:	aa01      	add	r2, sp, #4
 8000ddc:	210c      	movs	r1, #12
 8000dde:	4620      	mov	r0, r4
 8000de0:	f000 fc3c 	bl	800165c <mfxstm32l152_read_reg>
 8000de4:	b118      	cbz	r0, 8000dee <MFXSTM32L152_IO_ITStatus+0x1e>
    return MFXSTM32L152_ERROR;
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000dea:	b003      	add	sp, #12
 8000dec:	bd30      	pop	{r4, r5, pc}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8000dee:	2301      	movs	r3, #1
 8000df0:	f10d 0205 	add.w	r2, sp, #5
 8000df4:	210d      	movs	r1, #13
 8000df6:	4620      	mov	r0, r4
 8000df8:	f000 fc30 	bl	800165c <mfxstm32l152_read_reg>
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d1f2      	bne.n	8000de6 <MFXSTM32L152_IO_ITStatus+0x16>
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8000e00:	2301      	movs	r3, #1
 8000e02:	f10d 0206 	add.w	r2, sp, #6
 8000e06:	210e      	movs	r1, #14
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc27 	bl	800165c <mfxstm32l152_read_reg>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d1e9      	bne.n	8000de6 <MFXSTM32L152_IO_ITStatus+0x16>
  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8000e12:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000e16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000e1a:	0400      	lsls	r0, r0, #16
 8000e1c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8000e20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e24:	4418      	add	r0, r3
  tmp &= IO_Pin;
 8000e26:	4028      	ands	r0, r5
  return(int32_t)tmp;
 8000e28:	e7df      	b.n	8000dea <MFXSTM32L152_IO_ITStatus+0x1a>

08000e2a <MFXSTM32L152_TS_Start>:
{
 8000e2a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000e2e:	f100 0518 	add.w	r5, r0, #24
{
 8000e32:	4607      	mov	r7, r0
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000e34:	2301      	movs	r3, #1
 8000e36:	f10d 0206 	add.w	r2, sp, #6
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	f000 fc0d 	bl	800165c <mfxstm32l152_read_reg>
 8000e42:	4680      	mov	r8, r0
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d157      	bne.n	8000ef8 <MFXSTM32L152_TS_Start+0xce>
    mode |= MFXSTM32L152_TS_EN;
 8000e48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ret = mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e4c:	f10d 0206 	add.w	r2, sp, #6
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	4628      	mov	r0, r5
    mode |= MFXSTM32L152_TS_EN;
 8000e54:	f043 0302 	orr.w	r3, r3, #2
    tmp = 0x32;
 8000e58:	ae02      	add	r6, sp, #8
    tmp = 0x01;
 8000e5a:	f04f 0901 	mov.w	r9, #1
    mode |= MFXSTM32L152_TS_EN;
 8000e5e:	f88d 3006 	strb.w	r3, [sp, #6]
    ret = mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 fc01 	bl	800166a <mfxstm32l152_write_reg>
    tmp = 0x32;
 8000e68:	2332      	movs	r3, #50	; 0x32
    ret = mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e6a:	4604      	mov	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_SETTLING, &tmp, 1);
 8000e6c:	21a0      	movs	r1, #160	; 0xa0
    tmp = 0x32;
 8000e6e:	f806 3d01 	strb.w	r3, [r6, #-1]!
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_SETTLING, &tmp, 1);
 8000e72:	4628      	mov	r0, r5
 8000e74:	2301      	movs	r3, #1
 8000e76:	4632      	mov	r2, r6
 8000e78:	f000 fbf7 	bl	800166a <mfxstm32l152_write_reg>
    tmp = 0x05;
 8000e7c:	2305      	movs	r3, #5
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_SETTLING, &tmp, 1);
 8000e7e:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TOUCH_DET_DELAY, &tmp, 1);
 8000e80:	4632      	mov	r2, r6
    tmp = 0x05;
 8000e82:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TOUCH_DET_DELAY, &tmp, 1);
 8000e86:	21a1      	movs	r1, #161	; 0xa1
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f000 fbed 	bl	800166a <mfxstm32l152_write_reg>
    tmp = 0x04;
 8000e90:	2304      	movs	r3, #4
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TOUCH_DET_DELAY, &tmp, 1);
 8000e92:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_AVE, &tmp, 1);
 8000e94:	4632      	mov	r2, r6
    tmp = 0x04;
 8000e96:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_AVE, &tmp, 1);
 8000e9a:	21a2      	movs	r1, #162	; 0xa2
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	f000 fbe3 	bl	800166a <mfxstm32l152_write_reg>
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000ea4:	464b      	mov	r3, r9
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_AVE, &tmp, 1);
 8000ea6:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000ea8:	4632      	mov	r2, r6
 8000eaa:	21a4      	movs	r1, #164	; 0xa4
 8000eac:	4628      	mov	r0, r5
    tmp = 0x01;
 8000eae:	f88d 9007 	strb.w	r9, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000eb2:	f000 fbda 	bl	800166a <mfxstm32l152_write_reg>
    tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000eb6:	2380      	movs	r3, #128	; 0x80
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000eb8:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000eba:	4632      	mov	r2, r6
 8000ebc:	21a4      	movs	r1, #164	; 0xa4
    tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000ebe:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	f000 fbd0 	bl	800166a <mfxstm32l152_write_reg>
 8000eca:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TRACK, &tmp, 1);
 8000ecc:	464b      	mov	r3, r9
 8000ece:	4632      	mov	r2, r6
 8000ed0:	21a3      	movs	r1, #163	; 0xa3
 8000ed2:	4628      	mov	r0, r5
    tmp = 0x00;
 8000ed4:	f88d 8007 	strb.w	r8, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TRACK, &tmp, 1);
 8000ed8:	f000 fbc7 	bl	800166a <mfxstm32l152_write_reg>
 8000edc:	4404      	add	r4, r0
    ret += MFXSTM32L152_IO_ClearIT(pObj, 0xFFFFFF);
 8000ede:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000ee2:	4638      	mov	r0, r7
 8000ee4:	f7ff fe25 	bl	8000b32 <MFXSTM32L152_IO_ClearIT>
  if(ret != MFXSTM32L152_OK)
 8000ee8:	42c4      	cmn	r4, r0
 8000eea:	bf14      	ite	ne
 8000eec:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef0:	2000      	moveq	r0, #0
}
 8000ef2:	b003      	add	sp, #12
 8000ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = MFXSTM32L152_ERROR;
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000efc:	e7f9      	b.n	8000ef2 <MFXSTM32L152_TS_Start+0xc8>

08000efe <MFXSTM32L152_TS_DetectTouch>:
{
 8000efe:	b513      	push	{r0, r1, r4, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_STA, &state, 1) != MFXSTM32L152_OK)
 8000f00:	f100 0418 	add.w	r4, r0, #24
 8000f04:	2301      	movs	r3, #1
 8000f06:	f10d 0206 	add.w	r2, sp, #6
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f000 fba5 	bl	800165c <mfxstm32l152_read_reg>
 8000f12:	b118      	cbz	r0, 8000f1c <MFXSTM32L152_TS_DetectTouch+0x1e>
    ret = MFXSTM32L152_ERROR;
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd10      	pop	{r4, pc}
    if(((state & MFXSTM32L152_TS_CTRL_STATUS) == MFXSTM32L152_TS_CTRL_STATUS) != 0U)
 8000f1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000f20:	071b      	lsls	r3, r3, #28
 8000f22:	d5f9      	bpl.n	8000f18 <MFXSTM32L152_TS_DetectTouch+0x1a>
      if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_LEVEL, &fifo_level, 1) != MFXSTM32L152_OK)
 8000f24:	2301      	movs	r3, #1
 8000f26:	f10d 0207 	add.w	r2, sp, #7
 8000f2a:	2121      	movs	r1, #33	; 0x21
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f000 fb95 	bl	800165c <mfxstm32l152_read_reg>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d1ee      	bne.n	8000f14 <MFXSTM32L152_TS_DetectTouch+0x16>
        if(fifo_level > 0U)
 8000f36:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000f3a:	3000      	adds	r0, #0
 8000f3c:	bf18      	it	ne
 8000f3e:	2001      	movne	r0, #1
  return ret;
 8000f40:	e7ea      	b.n	8000f18 <MFXSTM32L152_TS_DetectTouch+0x1a>

08000f42 <MFXSTM32L152_IDD_Start>:
{
 8000f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t mode = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	ac02      	add	r4, sp, #8
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000f48:	f100 0518 	add.w	r5, r0, #24
 8000f4c:	2180      	movs	r1, #128	; 0x80
  uint8_t mode = 0;
 8000f4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000f52:	2301      	movs	r3, #1
 8000f54:	4622      	mov	r2, r4
 8000f56:	4628      	mov	r0, r5
 8000f58:	f000 fb80 	bl	800165c <mfxstm32l152_read_reg>
 8000f5c:	b988      	cbnz	r0, 8000f82 <MFXSTM32L152_IDD_Start+0x40>
    mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8000f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000f62:	4622      	mov	r2, r4
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	4628      	mov	r0, r5
    mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000f70:	2301      	movs	r3, #1
 8000f72:	f000 fb7a 	bl	800166a <mfxstm32l152_write_reg>
 8000f76:	3000      	adds	r0, #0
 8000f78:	bf18      	it	ne
 8000f7a:	2001      	movne	r0, #1
 8000f7c:	4240      	negs	r0, r0
}
 8000f7e:	b003      	add	sp, #12
 8000f80:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000f86:	e7fa      	b.n	8000f7e <MFXSTM32L152_IDD_Start+0x3c>

08000f88 <MFXSTM32L152_IDD_Config>:
{
 8000f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t mode = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	af02      	add	r7, sp, #8
  ret = mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000f8e:	f100 0618 	add.w	r6, r0, #24
{
 8000f92:	460d      	mov	r5, r1
  uint8_t mode = 0;
 8000f94:	f807 3d01 	strb.w	r3, [r7, #-1]!
  ret = mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	463a      	mov	r2, r7
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f000 fb5c 	bl	800165c <mfxstm32l152_read_reg>
  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8000fa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  ret = mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000fa8:	4604      	mov	r4, r0
  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8000faa:	075a      	lsls	r2, r3, #29
 8000fac:	d40a      	bmi.n	8000fc4 <MFXSTM32L152_IDD_Config+0x3c>
    mode |= MFXSTM32L152_IDD_EN;
 8000fae:	f043 0304 	orr.w	r3, r3, #4
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000fb2:	463a      	mov	r2, r7
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4630      	mov	r0, r6
    mode |= MFXSTM32L152_IDD_EN;
 8000fb8:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f000 fb54 	bl	800166a <mfxstm32l152_write_reg>
 8000fc2:	4404      	add	r4, r0
  value |= (MfxIddConfig->VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8000fc4:	7eab      	ldrb	r3, [r5, #26]
  value |= (MfxIddConfig->Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000fc6:	af02      	add	r7, sp, #8
 8000fc8:	7eea      	ldrb	r2, [r5, #27]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000fca:	2180      	movs	r1, #128	; 0x80
  value |= (MfxIddConfig->VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8000fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000fd0:	4630      	mov	r0, r6
  value |= (MfxIddConfig->Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000fd2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000fd6:	4313      	orrs	r3, r2
  value =  ((MfxIddConfig->ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8000fd8:	7e6a      	ldrb	r2, [r5, #25]
 8000fda:	0052      	lsls	r2, r2, #1
 8000fdc:	f002 020e 	and.w	r2, r2, #14
  value |= (MfxIddConfig->Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	f807 3d02 	strb.w	r3, [r7, #-2]!
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	463a      	mov	r2, r7
 8000fea:	f000 fb3e 	bl	800166a <mfxstm32l152_write_reg>
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000fee:	7f2b      	ldrb	r3, [r5, #28]
          (MfxIddConfig->PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000ff0:	7f6a      	ldrb	r2, [r5, #29]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000ff2:	4404      	add	r4, r0
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000ff4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000ff8:	2181      	movs	r1, #129	; 0x81
          (MfxIddConfig->PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000ffa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000ffe:	4630      	mov	r0, r6
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001000:	4313      	orrs	r3, r2
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8001002:	463a      	mov	r2, r7
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001004:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8001008:	2301      	movs	r3, #1
 800100a:	f000 fb2e 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt0Value >> 8);
 800100e:	88ab      	ldrh	r3, [r5, #4]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8001010:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8001012:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt0Value >> 8);
 8001014:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8001016:	2182      	movs	r1, #130	; 0x82
 8001018:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt0Value >> 8);
 800101a:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 800101e:	2301      	movs	r3, #1
 8001020:	f000 fb23 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt0Value);
 8001024:	88ab      	ldrh	r3, [r5, #4]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, &value, 1);
 8001026:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8001028:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt0Value);
 800102a:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, &value, 1);
 800102e:	2183      	movs	r1, #131	; 0x83
 8001030:	2301      	movs	r3, #1
 8001032:	4630      	mov	r0, r6
 8001034:	f000 fb19 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt1Value >> 8);
 8001038:	88eb      	ldrh	r3, [r5, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 800103a:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, &value, 1);
 800103c:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt1Value >> 8);
 800103e:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8001040:	2184      	movs	r1, #132	; 0x84
 8001042:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt1Value >> 8);
 8001044:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8001048:	2301      	movs	r3, #1
 800104a:	f000 fb0e 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt1Value);
 800104e:	88eb      	ldrh	r3, [r5, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, &value, 1);
 8001050:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8001052:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt1Value);
 8001054:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, &value, 1);
 8001058:	2185      	movs	r1, #133	; 0x85
 800105a:	2301      	movs	r3, #1
 800105c:	4630      	mov	r0, r6
 800105e:	f000 fb04 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt2Value >> 8);
 8001062:	892b      	ldrh	r3, [r5, #8]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 8001064:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, &value, 1);
 8001066:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt2Value >> 8);
 8001068:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 800106a:	2186      	movs	r1, #134	; 0x86
 800106c:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt2Value >> 8);
 800106e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 8001072:	2301      	movs	r3, #1
 8001074:	f000 faf9 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt2Value);
 8001078:	892b      	ldrh	r3, [r5, #8]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, &value, 1);
 800107a:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 800107c:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt2Value);
 800107e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, &value, 1);
 8001082:	2187      	movs	r1, #135	; 0x87
 8001084:	2301      	movs	r3, #1
 8001086:	4630      	mov	r0, r6
 8001088:	f000 faef 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt3Value >> 8);
 800108c:	896b      	ldrh	r3, [r5, #10]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 800108e:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, &value, 1);
 8001090:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt3Value >> 8);
 8001092:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 8001094:	2188      	movs	r1, #136	; 0x88
 8001096:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt3Value >> 8);
 8001098:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 800109c:	2301      	movs	r3, #1
 800109e:	f000 fae4 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt3Value);
 80010a2:	896b      	ldrh	r3, [r5, #10]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, &value, 1);
 80010a4:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 80010a6:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt3Value);
 80010a8:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, &value, 1);
 80010ac:	2189      	movs	r1, #137	; 0x89
 80010ae:	2301      	movs	r3, #1
 80010b0:	4630      	mov	r0, r6
 80010b2:	f000 fada 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt4Value >> 8);
 80010b6:	89ab      	ldrh	r3, [r5, #12]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 80010b8:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, &value, 1);
 80010ba:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt4Value >> 8);
 80010bc:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 80010be:	218a      	movs	r1, #138	; 0x8a
 80010c0:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt4Value >> 8);
 80010c2:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 80010c6:	2301      	movs	r3, #1
 80010c8:	f000 facf 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt4Value);
 80010cc:	89ab      	ldrh	r3, [r5, #12]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, &value, 1);
 80010ce:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 80010d0:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt4Value);
 80010d2:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, &value, 1);
 80010d6:	218b      	movs	r1, #139	; 0x8b
 80010d8:	2301      	movs	r3, #1
 80010da:	4630      	mov	r0, r6
 80010dc:	f000 fac5 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt0StabDelay;
 80010e0:	89eb      	ldrh	r3, [r5, #14]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, &value, 1);
 80010e2:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, &value, 1);
 80010e4:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt0StabDelay;
 80010e6:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, &value, 1);
 80010ea:	2190      	movs	r1, #144	; 0x90
 80010ec:	2301      	movs	r3, #1
 80010ee:	4630      	mov	r0, r6
 80010f0:	f000 fabb 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt1StabDelay;
 80010f4:	8a2b      	ldrh	r3, [r5, #16]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, &value, 1);
 80010f6:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, &value, 1);
 80010f8:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt1StabDelay;
 80010fa:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, &value, 1);
 80010fe:	2191      	movs	r1, #145	; 0x91
 8001100:	2301      	movs	r3, #1
 8001102:	4630      	mov	r0, r6
 8001104:	f000 fab1 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt2StabDelay;
 8001108:	8a6b      	ldrh	r3, [r5, #18]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, &value, 1);
 800110a:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, &value, 1);
 800110c:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt2StabDelay;
 800110e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, &value, 1);
 8001112:	2192      	movs	r1, #146	; 0x92
 8001114:	2301      	movs	r3, #1
 8001116:	4630      	mov	r0, r6
 8001118:	f000 faa7 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt3StabDelay;
 800111c:	8aab      	ldrh	r3, [r5, #20]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, &value, 1);
 800111e:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, &value, 1);
 8001120:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt3StabDelay;
 8001122:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, &value, 1);
 8001126:	2193      	movs	r1, #147	; 0x93
 8001128:	2301      	movs	r3, #1
 800112a:	4630      	mov	r0, r6
 800112c:	f000 fa9d 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt4StabDelay;
 8001130:	8aeb      	ldrh	r3, [r5, #22]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, &value, 1);
 8001132:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, &value, 1);
 8001134:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt4StabDelay;
 8001136:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, &value, 1);
 800113a:	2194      	movs	r1, #148	; 0x94
 800113c:	2301      	movs	r3, #1
 800113e:	4630      	mov	r0, r6
 8001140:	f000 fa93 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->AmpliGain >> 8);
 8001144:	882b      	ldrh	r3, [r5, #0]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 8001146:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, &value, 1);
 8001148:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->AmpliGain >> 8);
 800114a:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 800114c:	218c      	movs	r1, #140	; 0x8c
 800114e:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->AmpliGain >> 8);
 8001150:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 8001154:	2301      	movs	r3, #1
 8001156:	f000 fa88 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->AmpliGain);
 800115a:	882b      	ldrh	r3, [r5, #0]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, &value, 1);
 800115c:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 800115e:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->AmpliGain);
 8001160:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, &value, 1);
 8001164:	218d      	movs	r1, #141	; 0x8d
 8001166:	2301      	movs	r3, #1
 8001168:	4630      	mov	r0, r6
 800116a:	f000 fa7e 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->VddMin >> 8);
 800116e:	886b      	ldrh	r3, [r5, #2]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 8001170:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, &value, 1);
 8001172:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->VddMin >> 8);
 8001174:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 8001176:	218e      	movs	r1, #142	; 0x8e
 8001178:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->VddMin >> 8);
 800117a:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 800117e:	2301      	movs	r3, #1
 8001180:	f000 fa73 	bl	800166a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->VddMin);
 8001184:	886b      	ldrh	r3, [r5, #2]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, &value, 1);
 8001186:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 8001188:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->VddMin);
 800118a:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, &value, 1);
 800118e:	218f      	movs	r1, #143	; 0x8f
 8001190:	2301      	movs	r3, #1
 8001192:	4630      	mov	r0, r6
 8001194:	f000 fa69 	bl	800166a <mfxstm32l152_write_reg>
  value = MfxIddConfig->MeasureNb;
 8001198:	7fab      	ldrb	r3, [r5, #30]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, &value, 1);
 800119a:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, &value, 1);
 800119c:	4404      	add	r4, r0
  value = MfxIddConfig->MeasureNb;
 800119e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, &value, 1);
 80011a2:	2196      	movs	r1, #150	; 0x96
 80011a4:	2301      	movs	r3, #1
 80011a6:	4630      	mov	r0, r6
 80011a8:	f000 fa5f 	bl	800166a <mfxstm32l152_write_reg>
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80011ac:	7feb      	ldrb	r3, [r5, #31]
          (MfxIddConfig->DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 80011ae:	f895 2020 	ldrb.w	r2, [r5, #32]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, &value, 1);
 80011b2:	4404      	add	r4, r0
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80011b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 80011b8:	2197      	movs	r1, #151	; 0x97
          (MfxIddConfig->DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 80011ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 80011be:	4630      	mov	r0, r6
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80011c0:	4313      	orrs	r3, r2
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 80011c2:	463a      	mov	r2, r7
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80011c4:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 80011c8:	2301      	movs	r3, #1
 80011ca:	f000 fa4e 	bl	800166a <mfxstm32l152_write_reg>
  value = MfxIddConfig->ShuntNbOnBoard;
 80011ce:	7e2b      	ldrb	r3, [r5, #24]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 80011d0:	4404      	add	r4, r0
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, &value, 1);
 80011d2:	463a      	mov	r2, r7
  value = MfxIddConfig->ShuntNbOnBoard;
 80011d4:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, &value, 1);
 80011d8:	2198      	movs	r1, #152	; 0x98
 80011da:	2301      	movs	r3, #1
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 fa44 	bl	800166a <mfxstm32l152_write_reg>
  if(ret != MFXSTM32L152_OK)
 80011e2:	42c4      	cmn	r4, r0
}
 80011e4:	bf14      	ite	ne
 80011e6:	f04f 30ff 	movne.w	r0, #4294967295
 80011ea:	2000      	moveq	r0, #0
 80011ec:	b003      	add	sp, #12
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011f0 <MFXSTM32L152_Error_ReadSrc>:
{
 80011f0:	b507      	push	{r0, r1, r2, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ERROR_SRC, &tmp, 1) != MFXSTM32L152_OK)
 80011f2:	2301      	movs	r3, #1
 80011f4:	f10d 0207 	add.w	r2, sp, #7
 80011f8:	2103      	movs	r1, #3
 80011fa:	3018      	adds	r0, #24
 80011fc:	f000 fa2e 	bl	800165c <mfxstm32l152_read_reg>
 8001200:	b920      	cbnz	r0, 800120c <MFXSTM32L152_Error_ReadSrc+0x1c>
    ret = (int32_t)tmp;
 8001202:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001206:	b003      	add	sp, #12
 8001208:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MFXSTM32L152_ERROR;
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001210:	e7f9      	b.n	8001206 <MFXSTM32L152_Error_ReadSrc+0x16>

08001212 <MFXSTM32L152_Error_ReadMsg>:
{
 8001212:	b507      	push	{r0, r1, r2, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ERROR_MSG, &tmp, 1) != MFXSTM32L152_OK)
 8001214:	2301      	movs	r3, #1
 8001216:	f10d 0207 	add.w	r2, sp, #7
 800121a:	2104      	movs	r1, #4
 800121c:	3018      	adds	r0, #24
 800121e:	f000 fa1d 	bl	800165c <mfxstm32l152_read_reg>
 8001222:	b920      	cbnz	r0, 800122e <MFXSTM32L152_Error_ReadMsg+0x1c>
    ret = (int32_t)tmp;
 8001224:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001228:	b003      	add	sp, #12
 800122a:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MFXSTM32L152_ERROR;
 800122e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001232:	e7f9      	b.n	8001228 <MFXSTM32L152_Error_ReadMsg+0x16>

08001234 <MFXSTM32L152_IO_WritePin>:
{
 8001234:	b508      	push	{r3, lr}
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001236:	2301      	movs	r3, #1
  if (PinState != 0U)
 8001238:	b142      	cbz	r2, 800124c <MFXSTM32L152_IO_WritePin+0x18>
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 800123a:	460a      	mov	r2, r1
 800123c:	216c      	movs	r1, #108	; 0x6c
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 800123e:	f7ff fd17 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 8001242:	3000      	adds	r0, #0
 8001244:	bf18      	it	ne
 8001246:	2001      	movne	r0, #1
 8001248:	4240      	negs	r0, r0
}
 800124a:	bd08      	pop	{r3, pc}
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 800124c:	460a      	mov	r2, r1
 800124e:	2170      	movs	r1, #112	; 0x70
 8001250:	e7f5      	b.n	800123e <MFXSTM32L152_IO_WritePin+0xa>

08001252 <MFXSTM32L152_EnableITSource>:
{
 8001252:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001254:	f100 0518 	add.w	r5, r0, #24
{
 8001258:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800125a:	2301      	movs	r3, #1
 800125c:	f10d 0207 	add.w	r2, sp, #7
 8001260:	2142      	movs	r1, #66	; 0x42
 8001262:	4628      	mov	r0, r5
 8001264:	f000 f9fa 	bl	800165c <mfxstm32l152_read_reg>
 8001268:	b988      	cbnz	r0, 800128e <MFXSTM32L152_EnableITSource+0x3c>
    tmp |= Source;
 800126a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800126e:	f10d 0207 	add.w	r2, sp, #7
 8001272:	2142      	movs	r1, #66	; 0x42
 8001274:	4628      	mov	r0, r5
    tmp |= Source;
 8001276:	431c      	orrs	r4, r3
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001278:	2301      	movs	r3, #1
    tmp |= Source;
 800127a:	f88d 4007 	strb.w	r4, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800127e:	f000 f9f4 	bl	800166a <mfxstm32l152_write_reg>
 8001282:	3000      	adds	r0, #0
 8001284:	bf18      	it	ne
 8001286:	2001      	movne	r0, #1
 8001288:	4240      	negs	r0, r0
}
 800128a:	b003      	add	sp, #12
 800128c:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001292:	e7fa      	b.n	800128a <MFXSTM32L152_EnableITSource+0x38>

08001294 <MFXSTM32L152_IO_EnableIT>:
{
 8001294:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001296:	2101      	movs	r1, #1
 8001298:	f7ff ffdb 	bl	8001252 <MFXSTM32L152_EnableITSource>
 800129c:	3000      	adds	r0, #0
 800129e:	bf18      	it	ne
 80012a0:	2001      	movne	r0, #1
}
 80012a2:	4240      	negs	r0, r0
 80012a4:	bd08      	pop	{r3, pc}

080012a6 <MFXSTM32L152_TS_EnableIT>:
{
 80012a6:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_TS_DET) != MFXSTM32L152_OK)
 80012a8:	2108      	movs	r1, #8
 80012aa:	f7ff ffd2 	bl	8001252 <MFXSTM32L152_EnableITSource>
 80012ae:	3000      	adds	r0, #0
 80012b0:	bf18      	it	ne
 80012b2:	2001      	movne	r0, #1
}
 80012b4:	4240      	negs	r0, r0
 80012b6:	bd08      	pop	{r3, pc}

080012b8 <MFXSTM32L152_IDD_EnableIT>:
{
 80012b8:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_IDD) != MFXSTM32L152_OK)
 80012ba:	2102      	movs	r1, #2
 80012bc:	f7ff ffc9 	bl	8001252 <MFXSTM32L152_EnableITSource>
 80012c0:	3000      	adds	r0, #0
 80012c2:	bf18      	it	ne
 80012c4:	2001      	movne	r0, #1
}
 80012c6:	4240      	negs	r0, r0
 80012c8:	bd08      	pop	{r3, pc}

080012ca <MFXSTM32L152_Error_EnableIT>:
{
 80012ca:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_ERROR) != MFXSTM32L152_OK)
 80012cc:	2104      	movs	r1, #4
 80012ce:	f7ff ffc0 	bl	8001252 <MFXSTM32L152_EnableITSource>
 80012d2:	3000      	adds	r0, #0
 80012d4:	bf18      	it	ne
 80012d6:	2001      	movne	r0, #1
}
 80012d8:	4240      	negs	r0, r0
 80012da:	bd08      	pop	{r3, pc}

080012dc <MFXSTM32L152_DisableITSource>:
{
 80012dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80012de:	f100 0418 	add.w	r4, r0, #24
{
 80012e2:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80012e4:	2301      	movs	r3, #1
 80012e6:	f10d 0207 	add.w	r2, sp, #7
 80012ea:	2142      	movs	r1, #66	; 0x42
 80012ec:	4620      	mov	r0, r4
 80012ee:	f000 f9b5 	bl	800165c <mfxstm32l152_read_reg>
 80012f2:	b990      	cbnz	r0, 800131a <MFXSTM32L152_DisableITSource+0x3e>
    tmp &= ~Source;
 80012f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80012f8:	2301      	movs	r3, #1
 80012fa:	f10d 0207 	add.w	r2, sp, #7
 80012fe:	4620      	mov	r0, r4
    tmp &= ~Source;
 8001300:	ea21 0105 	bic.w	r1, r1, r5
 8001304:	f88d 1007 	strb.w	r1, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001308:	2142      	movs	r1, #66	; 0x42
 800130a:	f000 f9ae 	bl	800166a <mfxstm32l152_write_reg>
 800130e:	3000      	adds	r0, #0
 8001310:	bf18      	it	ne
 8001312:	2001      	movne	r0, #1
 8001314:	4240      	negs	r0, r0
}
 8001316:	b003      	add	sp, #12
 8001318:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 800131a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800131e:	e7fa      	b.n	8001316 <MFXSTM32L152_DisableITSource+0x3a>

08001320 <MFXSTM32L152_IO_DisableIT>:
{
 8001320:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001322:	2101      	movs	r1, #1
 8001324:	f7ff ffda 	bl	80012dc <MFXSTM32L152_DisableITSource>
 8001328:	3000      	adds	r0, #0
 800132a:	bf18      	it	ne
 800132c:	2001      	movne	r0, #1
}
 800132e:	4240      	negs	r0, r0
 8001330:	bd08      	pop	{r3, pc}

08001332 <MFXSTM32L152_TS_DisableIT>:
{
 8001332:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_TS_DET) != MFXSTM32L152_OK)
 8001334:	2108      	movs	r1, #8
 8001336:	f7ff ffd1 	bl	80012dc <MFXSTM32L152_DisableITSource>
 800133a:	3000      	adds	r0, #0
 800133c:	bf18      	it	ne
 800133e:	2001      	movne	r0, #1
}
 8001340:	4240      	negs	r0, r0
 8001342:	bd08      	pop	{r3, pc}

08001344 <MFXSTM32L152_IDD_DisableIT>:
{
 8001344:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_IDD) != MFXSTM32L152_OK)
 8001346:	2102      	movs	r1, #2
 8001348:	f7ff ffc8 	bl	80012dc <MFXSTM32L152_DisableITSource>
 800134c:	3000      	adds	r0, #0
 800134e:	bf18      	it	ne
 8001350:	2001      	movne	r0, #1
}
 8001352:	4240      	negs	r0, r0
 8001354:	bd08      	pop	{r3, pc}

08001356 <MFXSTM32L152_Error_DisableIT>:
{
 8001356:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_ERROR) != MFXSTM32L152_OK)
 8001358:	2104      	movs	r1, #4
 800135a:	f7ff ffbf 	bl	80012dc <MFXSTM32L152_DisableITSource>
 800135e:	3000      	adds	r0, #0
 8001360:	bf18      	it	ne
 8001362:	2001      	movne	r0, #1
}
 8001364:	4240      	negs	r0, r0
 8001366:	bd08      	pop	{r3, pc}

08001368 <MFXSTM32L152_GlobalITStatus>:
{
 8001368:	b513      	push	{r0, r1, r4, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_PENDING, &tmp, 1) != MFXSTM32L152_OK)
 800136a:	2301      	movs	r3, #1
{
 800136c:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_PENDING, &tmp, 1) != MFXSTM32L152_OK)
 800136e:	f10d 0207 	add.w	r2, sp, #7
 8001372:	2108      	movs	r1, #8
 8001374:	3018      	adds	r0, #24
 8001376:	f000 f971 	bl	800165c <mfxstm32l152_read_reg>
 800137a:	b920      	cbnz	r0, 8001386 <MFXSTM32L152_GlobalITStatus+0x1e>
    tmp1 = tmp & Source;
 800137c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ret = (int32_t)tmp1;
 8001380:	4020      	ands	r0, r4
}
 8001382:	b002      	add	sp, #8
 8001384:	bd10      	pop	{r4, pc}
    ret = MFXSTM32L152_ERROR;
 8001386:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800138a:	e7fa      	b.n	8001382 <MFXSTM32L152_GlobalITStatus+0x1a>

0800138c <MFXSTM32L152_TS_ITStatus>:
  return(MFXSTM32L152_GlobalITStatus(pObj, MFXSTM32L152_IRQ_TS));
 800138c:	21f8      	movs	r1, #248	; 0xf8
 800138e:	f7ff bfeb 	b.w	8001368 <MFXSTM32L152_GlobalITStatus>

08001392 <MFXSTM32L152_IDD_GetITStatus>:
  return(MFXSTM32L152_GlobalITStatus(pObj, MFXSTM32L152_IRQ_IDD));
 8001392:	2102      	movs	r1, #2
 8001394:	f7ff bfe8 	b.w	8001368 <MFXSTM32L152_GlobalITStatus>

08001398 <MFXSTM32L152_Error_GetITStatus>:
  return(MFXSTM32L152_GlobalITStatus(pObj, MFXSTM32L152_IRQ_ERROR));
 8001398:	2104      	movs	r1, #4
 800139a:	f7ff bfe5 	b.w	8001368 <MFXSTM32L152_GlobalITStatus>

0800139e <MFXSTM32L152_ClearGlobalIT>:
{
 800139e:	b507      	push	{r0, r1, r2, lr}
 80013a0:	aa02      	add	r2, sp, #8
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_ACK, &Source, 1) != MFXSTM32L152_OK)
 80013a2:	2301      	movs	r3, #1
 80013a4:	3018      	adds	r0, #24
{
 80013a6:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_ACK, &Source, 1) != MFXSTM32L152_OK)
 80013aa:	2144      	movs	r1, #68	; 0x44
 80013ac:	f000 f95d 	bl	800166a <mfxstm32l152_write_reg>
 80013b0:	3000      	adds	r0, #0
 80013b2:	bf18      	it	ne
 80013b4:	2001      	movne	r0, #1
}
 80013b6:	4240      	negs	r0, r0
 80013b8:	b003      	add	sp, #12
 80013ba:	f85d fb04 	ldr.w	pc, [sp], #4

080013be <MFXSTM32L152_TS_ClearIT>:
{
 80013be:	b508      	push	{r3, lr}
  if(MFXSTM32L152_ClearGlobalIT(pObj, MFXSTM32L152_IRQ_TS) != MFXSTM32L152_OK)
 80013c0:	21f8      	movs	r1, #248	; 0xf8
 80013c2:	f7ff ffec 	bl	800139e <MFXSTM32L152_ClearGlobalIT>
 80013c6:	3000      	adds	r0, #0
 80013c8:	bf18      	it	ne
 80013ca:	2001      	movne	r0, #1
}
 80013cc:	4240      	negs	r0, r0
 80013ce:	bd08      	pop	{r3, pc}

080013d0 <MFXSTM32L152_IDD_ClearIT>:
{
 80013d0:	b508      	push	{r3, lr}
  if(MFXSTM32L152_ClearGlobalIT(pObj, MFXSTM32L152_IRQ_IDD) != MFXSTM32L152_OK)
 80013d2:	2102      	movs	r1, #2
 80013d4:	f7ff ffe3 	bl	800139e <MFXSTM32L152_ClearGlobalIT>
 80013d8:	3000      	adds	r0, #0
 80013da:	bf18      	it	ne
 80013dc:	2001      	movne	r0, #1
}
 80013de:	4240      	negs	r0, r0
 80013e0:	bd08      	pop	{r3, pc}

080013e2 <MFXSTM32L152_Error_ClearIT>:
{
 80013e2:	b508      	push	{r3, lr}
  if(MFXSTM32L152_ClearGlobalIT(pObj, MFXSTM32L152_IRQ_ERROR) != MFXSTM32L152_OK)
 80013e4:	2104      	movs	r1, #4
 80013e6:	f7ff ffda 	bl	800139e <MFXSTM32L152_ClearGlobalIT>
 80013ea:	3000      	adds	r0, #0
 80013ec:	bf18      	it	ne
 80013ee:	2001      	movne	r0, #1
}
 80013f0:	4240      	negs	r0, r0
 80013f2:	bd08      	pop	{r3, pc}

080013f4 <MFXSTM32L152_SetIrqOutPinPolarity>:
{
 80013f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80013f6:	f100 0518 	add.w	r5, r0, #24
{
 80013fa:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80013fc:	2301      	movs	r3, #1
 80013fe:	f10d 0207 	add.w	r2, sp, #7
 8001402:	2141      	movs	r1, #65	; 0x41
 8001404:	4628      	mov	r0, r5
 8001406:	f000 f929 	bl	800165c <mfxstm32l152_read_reg>
 800140a:	b998      	cbnz	r0, 8001434 <MFXSTM32L152_SetIrqOutPinPolarity+0x40>
  tmp &= ~(uint8_t)0x02;
 800140c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001410:	f10d 0207 	add.w	r2, sp, #7
 8001414:	2141      	movs	r1, #65	; 0x41
 8001416:	4628      	mov	r0, r5
  tmp &= ~(uint8_t)0x02;
 8001418:	f023 0302 	bic.w	r3, r3, #2
  tmp |= Polarity;
 800141c:	431c      	orrs	r4, r3
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800141e:	2301      	movs	r3, #1
  tmp |= Polarity;
 8001420:	f88d 4007 	strb.w	r4, [sp, #7]
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001424:	f000 f921 	bl	800166a <mfxstm32l152_write_reg>
 8001428:	3000      	adds	r0, #0
 800142a:	bf18      	it	ne
 800142c:	2001      	movne	r0, #1
 800142e:	4240      	negs	r0, r0
}
 8001430:	b003      	add	sp, #12
 8001432:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001438:	e7fa      	b.n	8001430 <MFXSTM32L152_SetIrqOutPinPolarity+0x3c>

0800143a <MFXSTM32L152_SetIrqOutPinType>:
{
 800143a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800143c:	f100 0518 	add.w	r5, r0, #24
{
 8001440:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001442:	2301      	movs	r3, #1
 8001444:	f10d 0207 	add.w	r2, sp, #7
 8001448:	2141      	movs	r1, #65	; 0x41
 800144a:	4628      	mov	r0, r5
 800144c:	f000 f906 	bl	800165c <mfxstm32l152_read_reg>
 8001450:	b998      	cbnz	r0, 800147a <MFXSTM32L152_SetIrqOutPinType+0x40>
    tmp &= ~(uint8_t)0x01;
 8001452:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001456:	f10d 0207 	add.w	r2, sp, #7
 800145a:	2141      	movs	r1, #65	; 0x41
 800145c:	4628      	mov	r0, r5
    tmp &= ~(uint8_t)0x01;
 800145e:	f023 0301 	bic.w	r3, r3, #1
    tmp |= Type;
 8001462:	431c      	orrs	r4, r3
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001464:	2301      	movs	r3, #1
    tmp |= Type;
 8001466:	f88d 4007 	strb.w	r4, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800146a:	f000 f8fe 	bl	800166a <mfxstm32l152_write_reg>
 800146e:	3000      	adds	r0, #0
 8001470:	bf18      	it	ne
 8001472:	2001      	movne	r0, #1
 8001474:	4240      	negs	r0, r0
}
 8001476:	b003      	add	sp, #12
 8001478:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800147e:	e7fa      	b.n	8001476 <MFXSTM32L152_SetIrqOutPinType+0x3c>

08001480 <MFXSTM32L152_Init>:
{
 8001480:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8001482:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001486:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8001488:	b99b      	cbnz	r3, 80014b2 <MFXSTM32L152_Init+0x32>
    pObj->IO.Init();
 800148a:	6803      	ldr	r3, [r0, #0]
 800148c:	4798      	blx	r3
    if(MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 800148e:	2102      	movs	r1, #2
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff ffaf 	bl	80013f4 <MFXSTM32L152_SetIrqOutPinPolarity>
 8001496:	b110      	cbz	r0, 800149e <MFXSTM32L152_Init+0x1e>
      ret = MFXSTM32L152_ERROR;
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
}
 800149c:	bd10      	pop	{r4, pc}
    else if(MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 800149e:	2101      	movs	r1, #1
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff ffca 	bl	800143a <MFXSTM32L152_SetIrqOutPinType>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d1f6      	bne.n	8001498 <MFXSTM32L152_Init+0x18>
      pObj->IsInitialized = 1U;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80014b0:	e7f4      	b.n	800149c <MFXSTM32L152_Init+0x1c>
  int32_t ret = MFXSTM32L152_OK;
 80014b2:	2000      	movs	r0, #0
  return ret;
 80014b4:	e7f2      	b.n	800149c <MFXSTM32L152_Init+0x1c>

080014b6 <MFXSTM32L152_IO_InitPin>:
{
 80014b6:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 80014b8:	4613      	mov	r3, r2
 80014ba:	460a      	mov	r2, r1
 80014bc:	2160      	movs	r1, #96	; 0x60
 80014be:	f7ff fbd7 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 80014c2:	3000      	adds	r0, #0
 80014c4:	bf18      	it	ne
 80014c6:	2001      	movne	r0, #1
}
 80014c8:	4240      	negs	r0, r0
 80014ca:	bd08      	pop	{r3, pc}

080014cc <MFXSTM32L152_IO_SetIrqEvtMode>:
{
 80014cc:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 80014ce:	4613      	mov	r3, r2
 80014d0:	460a      	mov	r2, r1
 80014d2:	214c      	movs	r1, #76	; 0x4c
 80014d4:	f7ff fbcc 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 80014d8:	3000      	adds	r0, #0
 80014da:	bf18      	it	ne
 80014dc:	2001      	movne	r0, #1
}
 80014de:	4240      	negs	r0, r0
 80014e0:	bd08      	pop	{r3, pc}

080014e2 <MFXSTM32L152_IO_SetIrqTypeMode>:
{
 80014e2:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 80014e4:	4613      	mov	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	2150      	movs	r1, #80	; 0x50
 80014ea:	f7ff fbc1 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 80014ee:	3000      	adds	r0, #0
 80014f0:	bf18      	it	ne
 80014f2:	2001      	movne	r0, #1
}
 80014f4:	4240      	negs	r0, r0
 80014f6:	bd08      	pop	{r3, pc}

080014f8 <MFXSTM32L152_IO_EnablePinIT>:
{
 80014f8:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 80014fa:	460a      	mov	r2, r1
 80014fc:	2301      	movs	r3, #1
 80014fe:	2148      	movs	r1, #72	; 0x48
 8001500:	f7ff fbb6 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 8001504:	3000      	adds	r0, #0
 8001506:	bf18      	it	ne
 8001508:	2001      	movne	r0, #1
}
 800150a:	4240      	negs	r0, r0
 800150c:	bd08      	pop	{r3, pc}

0800150e <MFXSTM32L152_IO_DisablePinIT>:
{
 800150e:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 8001510:	460a      	mov	r2, r1
 8001512:	2300      	movs	r3, #0
 8001514:	2148      	movs	r1, #72	; 0x48
 8001516:	f7ff fbab 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 800151a:	3000      	adds	r0, #0
 800151c:	bf18      	it	ne
 800151e:	2001      	movne	r0, #1
}
 8001520:	4240      	negs	r0, r0
 8001522:	bd08      	pop	{r3, pc}

08001524 <MFXSTM32L152_IO_Init>:
  switch(IoInit->Mode)
 8001524:	684b      	ldr	r3, [r1, #4]
{
 8001526:	b570      	push	{r4, r5, r6, lr}
 8001528:	4606      	mov	r6, r0
 800152a:	460d      	mov	r5, r1
  switch(IoInit->Mode)
 800152c:	2b08      	cmp	r3, #8
 800152e:	d845      	bhi.n	80015bc <MFXSTM32L152_IO_Init+0x98>
 8001530:	e8df f003 	tbb	[pc, r3]
 8001534:	05050505 	.word	0x05050505
 8001538:	41414105 	.word	0x41414105
 800153c:	41          	.byte	0x41
 800153d:	00          	.byte	0x00
    ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 800153e:	6809      	ldr	r1, [r1, #0]
 8001540:	f7ff ffe5 	bl	800150e <MFXSTM32L152_IO_DisablePinIT>
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 8001544:	4604      	mov	r4, r0
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001546:	4630      	mov	r0, r6
  if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 8001548:	e9d5 1300 	ldrd	r1, r3, [r5]
 800154c:	3b03      	subs	r3, #3
 800154e:	2b01      	cmp	r3, #1
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001550:	bf94      	ite	ls
 8001552:	2201      	movls	r2, #1
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001554:	2200      	movhi	r2, #0
 8001556:	f7ff ffae 	bl	80014b6 <MFXSTM32L152_IO_InitPin>
  switch(IoInit->Pull)
 800155a:	68ab      	ldr	r3, [r5, #8]
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 800155c:	4404      	add	r4, r0
  switch(IoInit->Pull)
 800155e:	b113      	cbz	r3, 8001566 <MFXSTM32L152_IO_Init+0x42>
 8001560:	2b02      	cmp	r3, #2
 8001562:	d806      	bhi.n	8001572 <MFXSTM32L152_IO_Init+0x4e>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001564:	2301      	movs	r3, #1
 8001566:	682a      	ldr	r2, [r5, #0]
 8001568:	2164      	movs	r1, #100	; 0x64
 800156a:	4630      	mov	r0, r6
 800156c:	f7ff fb80 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 8001570:	4404      	add	r4, r0
  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 8001572:	686b      	ldr	r3, [r5, #4]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d106      	bne.n	8001586 <MFXSTM32L152_IO_Init+0x62>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001578:	2300      	movs	r3, #0
 800157a:	682a      	ldr	r2, [r5, #0]
 800157c:	2164      	movs	r1, #100	; 0x64
 800157e:	4630      	mov	r0, r6
 8001580:	f7ff fb76 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 8001584:	4404      	add	r4, r0
  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 8001586:	686b      	ldr	r3, [r5, #4]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d106      	bne.n	800159a <MFXSTM32L152_IO_Init+0x76>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800158c:	2301      	movs	r3, #1
 800158e:	682a      	ldr	r2, [r5, #0]
 8001590:	2164      	movs	r1, #100	; 0x64
 8001592:	4630      	mov	r0, r6
 8001594:	f7ff fb6c 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 8001598:	4404      	add	r4, r0
  switch(IoInit->Pull)
 800159a:	68ab      	ldr	r3, [r5, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d01d      	beq.n	80015dc <MFXSTM32L152_IO_Init+0xb8>
 80015a0:	d30e      	bcc.n	80015c0 <MFXSTM32L152_IO_Init+0x9c>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d019      	beq.n	80015da <MFXSTM32L152_IO_Init+0xb6>
  switch(IoInit->Mode)
 80015a6:	686b      	ldr	r3, [r5, #4]
 80015a8:	3b05      	subs	r3, #5
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d829      	bhi.n	8001602 <MFXSTM32L152_IO_Init+0xde>
 80015ae:	e8df f003 	tbb	[pc, r3]
 80015b2:	2d17      	.short	0x2d17
 80015b4:	3537      	.short	0x3537
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 80015b6:	f7ff fe6d 	bl	8001294 <MFXSTM32L152_IO_EnableIT>
 80015ba:	e7c3      	b.n	8001544 <MFXSTM32L152_IO_Init+0x20>
  int32_t ret = MFXSTM32L152_OK;
 80015bc:	2400      	movs	r4, #0
 80015be:	e7c2      	b.n	8001546 <MFXSTM32L152_IO_Init+0x22>
    if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 80015c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	2b01      	cmp	r3, #1
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80015c8:	bf94      	ite	ls
 80015ca:	2300      	movls	r3, #0
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 80015cc:	2301      	movhi	r3, #1
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80015ce:	2168      	movs	r1, #104	; 0x68
 80015d0:	4630      	mov	r0, r6
 80015d2:	f7ff fb4d 	bl	8000c70 <MFXSTM32L152_reg24_setPinValue>
 80015d6:	4404      	add	r4, r0
    break;
 80015d8:	e7e5      	b.n	80015a6 <MFXSTM32L152_IO_Init+0x82>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80015da:	2300      	movs	r3, #0
 80015dc:	682a      	ldr	r2, [r5, #0]
 80015de:	e7f6      	b.n	80015ce <MFXSTM32L152_IO_Init+0xaa>
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80015e0:	2201      	movs	r2, #1
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80015e2:	6829      	ldr	r1, [r5, #0]
 80015e4:	4630      	mov	r0, r6
 80015e6:	f7ff ff71 	bl	80014cc <MFXSTM32L152_IO_SetIrqEvtMode>
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80015ea:	2201      	movs	r2, #1
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80015ec:	4404      	add	r4, r0
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80015ee:	6829      	ldr	r1, [r5, #0]
 80015f0:	4630      	mov	r0, r6
 80015f2:	f7ff ff76 	bl	80014e2 <MFXSTM32L152_IO_SetIrqTypeMode>
 80015f6:	4404      	add	r4, r0
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80015f8:	6829      	ldr	r1, [r5, #0]
 80015fa:	4630      	mov	r0, r6
 80015fc:	f7ff ff7c 	bl	80014f8 <MFXSTM32L152_IO_EnablePinIT>
 8001600:	4404      	add	r4, r0
  if(ret != MFXSTM32L152_OK)
 8001602:	1c20      	adds	r0, r4, #0
 8001604:	bf18      	it	ne
 8001606:	2001      	movne	r0, #1
}
 8001608:	4240      	negs	r0, r0
 800160a:	bd70      	pop	{r4, r5, r6, pc}
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800160c:	2201      	movs	r2, #1
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800160e:	6829      	ldr	r1, [r5, #0]
 8001610:	4630      	mov	r0, r6
 8001612:	f7ff ff5b 	bl	80014cc <MFXSTM32L152_IO_SetIrqEvtMode>
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001616:	2200      	movs	r2, #0
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001618:	4404      	add	r4, r0
 800161a:	e7e8      	b.n	80015ee <MFXSTM32L152_IO_Init+0xca>
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800161c:	2200      	movs	r2, #0
 800161e:	e7e0      	b.n	80015e2 <MFXSTM32L152_IO_Init+0xbe>
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001620:	2200      	movs	r2, #0
 8001622:	e7f4      	b.n	800160e <MFXSTM32L152_IO_Init+0xea>

08001624 <MFXSTM32L152_RegisterBusIO>:
  if (pObj == NULL)
 8001624:	b190      	cbz	r0, 800164c <MFXSTM32L152_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8001626:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001628:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800162a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 800162c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800162e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8001630:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001632:	68ca      	ldr	r2, [r1, #12]
 8001634:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001636:	690a      	ldr	r2, [r1, #16]
 8001638:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800163a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800163c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800163e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <MFXSTM32L152_RegisterBusIO+0x30>)
 8001642:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <MFXSTM32L152_RegisterBusIO+0x34>)
 8001646:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8001648:	b103      	cbz	r3, 800164c <MFXSTM32L152_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800164a:	4718      	bx	r3
}
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	08000ad5 	.word	0x08000ad5
 8001658:	08000ae3 	.word	0x08000ae3

0800165c <mfxstm32l152_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 800165c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, data, length);
 800165e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001662:	46a4      	mov	ip, r4
}
 8001664:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8001668:	4760      	bx	ip

0800166a <mfxstm32l152_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 800166a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800166c:	6804      	ldr	r4, [r0, #0]
 800166e:	6880      	ldr	r0, [r0, #8]
 8001670:	46a4      	mov	ip, r4
}
 8001672:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001676:	4760      	bx	ip

08001678 <TS3510_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
  Capabilities->Gesture    = 0;
 8001678:	2301      	movs	r3, #1
  Capabilities->MultiTouch = 0;
 800167a:	2000      	movs	r0, #0
  Capabilities->Gesture    = 0;
 800167c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxTouch   = TS3510_MAX_NB_TOUCH;
  Capabilities->MaxXl      = TS3510_MAX_X_LENGTH;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Capabilities->MultiTouch = 0;
 8001682:	8008      	strh	r0, [r1, #0]
  Capabilities->MaxYl      = TS3510_MAX_Y_LENGTH;
 8001684:	e9c1 3301 	strd	r3, r3, [r1, #4]
  
  return TS3510_OK;
}
 8001688:	4770      	bx	lr

0800168a <TS3510_Init>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_Init(TS3510_Object_t *pObj)
{
 800168a:	b510      	push	{r4, lr}
  int32_t ret = TS3510_OK;
  
  if(pObj->IsInitialized == 0U)
 800168c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001690:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8001692:	b933      	cbnz	r3, 80016a2 <TS3510_Init+0x18>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != TS3510_OK)
 8001694:	6803      	ldr	r3, [r0, #0]
 8001696:	4798      	blx	r3
 8001698:	b928      	cbnz	r0, 80016a6 <TS3510_Init+0x1c>
    {
      ret = TS3510_ERROR;
    }
    else
    {
      pObj->IsInitialized = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 80016a0:	bd10      	pop	{r4, pc}
  int32_t ret = TS3510_OK;
 80016a2:	2000      	movs	r0, #0
 80016a4:	e7fc      	b.n	80016a0 <TS3510_Init+0x16>
      ret = TS3510_ERROR;
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80016aa:	e7f9      	b.n	80016a0 <TS3510_Init+0x16>

080016ac <TS3510_DeInit>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_DeInit(TS3510_Object_t *pObj)
{
 80016ac:	b510      	push	{r4, lr}
  int32_t ret = TS3510_OK;
  
  if(pObj->IsInitialized == 1U)
 80016ae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80016b2:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 1U)
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <TS3510_DeInit+0x18>
  {
    if(pObj->IO.DeInit() != TS3510_OK)
 80016b8:	6843      	ldr	r3, [r0, #4]
 80016ba:	4798      	blx	r3
 80016bc:	b920      	cbnz	r0, 80016c8 <TS3510_DeInit+0x1c>
    {
      ret = TS3510_ERROR;
    }
    else
    {
      pObj->IsInitialized = 0;
 80016be:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 80016c2:	bd10      	pop	{r4, pc}
  int32_t ret = TS3510_OK;
 80016c4:	2000      	movs	r0, #0
 80016c6:	e7fc      	b.n	80016c2 <TS3510_DeInit+0x16>
      ret = TS3510_ERROR;
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80016cc:	e7f9      	b.n	80016c2 <TS3510_DeInit+0x16>

080016ce <TS3510_GestureConfig>:
  */
int32_t TS3510_GestureConfig(TS3510_Object_t *pObj, TS3510_Gesture_Init_t *GestureInit)
{
  /* Feature not supported */
  return TS3510_ERROR;  
}
 80016ce:	f04f 30ff 	mov.w	r0, #4294967295
 80016d2:	4770      	bx	lr

080016d4 <TS3510_EnableIT>:
  */
int32_t TS3510_EnableIT(TS3510_Object_t *pObj)
{
  /* Feature not supported */
  return TS3510_ERROR;
}
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	4770      	bx	lr

080016da <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80016da:	b410      	push	{r4}
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80016dc:	6904      	ldr	r4, [r0, #16]
 80016de:	8900      	ldrh	r0, [r0, #8]
 80016e0:	46a4      	mov	ip, r4
}
 80016e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80016e6:	4760      	bx	ip

080016e8 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80016e8:	b410      	push	{r4}
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80016ea:	68c4      	ldr	r4, [r0, #12]
 80016ec:	8900      	ldrh	r0, [r0, #8]
 80016ee:	46a4      	mov	ip, r4
}
 80016f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80016f4:	4760      	bx	ip
	...

080016f8 <TS3510_ReadID>:
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <TS3510_ReadID+0x40>)
{
 80016fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80016fc:	881b      	ldrh	r3, [r3, #0]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 80016fe:	f100 0418 	add.w	r4, r0, #24
{
 8001702:	460d      	mov	r5, r1
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 8001704:	aa01      	add	r2, sp, #4
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001706:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 800170a:	218a      	movs	r1, #138	; 0x8a
 800170c:	2302      	movs	r3, #2
 800170e:	4620      	mov	r0, r4
 8001710:	f000 f8a7 	bl	8001862 <ts3510_write_reg>
 8001714:	b118      	cbz	r0, 800171e <TS3510_ReadID+0x26>
    ret = TS3510_ERROR;
 8001716:	f04f 30ff 	mov.w	r0, #4294967295
}
 800171a:	b003      	add	sp, #12
 800171c:	bd30      	pop	{r4, r5, pc}
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, &data, 1) != TS3510_OK)
 800171e:	2301      	movs	r3, #1
 8001720:	f10d 0203 	add.w	r2, sp, #3
 8001724:	218a      	movs	r1, #138	; 0x8a
 8001726:	4620      	mov	r0, r4
 8001728:	f000 f894 	bl	8001854 <ts3510_read_reg>
 800172c:	2800      	cmp	r0, #0
 800172e:	d1f2      	bne.n	8001716 <TS3510_ReadID+0x1e>
    *Id = TS3510_ID;
 8001730:	f243 5310 	movw	r3, #13584	; 0x3510
 8001734:	602b      	str	r3, [r5, #0]
  return ret;     
 8001736:	e7f0      	b.n	800171a <TS3510_ReadID+0x22>
 8001738:	08006cb0 	.word	0x08006cb0

0800173c <TS3510_GetState>:
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <TS3510_GetState+0xbc>)
{
 800173e:	b530      	push	{r4, r5, lr}
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001740:	881b      	ldrh	r3, [r3, #0]
{
 8001742:	b087      	sub	sp, #28
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001744:	f100 0518 	add.w	r5, r0, #24
{
 8001748:	460c      	mov	r4, r1
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 800174a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 800174e:	aa02      	add	r2, sp, #8
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001750:	f8ad 3008 	strh.w	r3, [sp, #8]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	2302      	movs	r3, #2
 8001758:	4628      	mov	r0, r5
 800175a:	f000 f882 	bl	8001862 <ts3510_write_reg>
 800175e:	b178      	cbz	r0, 8001780 <TS3510_GetState+0x44>
    ret = TS3510_ERROR;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
  if(State->TouchDetected == 1U)
 8001764:	2b01      	cmp	r3, #1
  State->TouchDetected = (uint32_t)TS3510_DetectTouch(pObj);
 8001766:	6023      	str	r3, [r4, #0]
  if(State->TouchDetected == 1U)
 8001768:	d143      	bne.n	80017f2 <TS3510_GetState+0xb6>
    if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 800176a:	2302      	movs	r3, #2
 800176c:	aa01      	add	r2, sp, #4
 800176e:	2100      	movs	r1, #0
 8001770:	4628      	mov	r0, r5
 8001772:	f000 f876 	bl	8001862 <ts3510_write_reg>
 8001776:	b1f8      	cbz	r0, 80017b8 <TS3510_GetState+0x7c>
      ret = TS3510_ERROR;
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
}
 800177c:	b007      	add	sp, #28
 800177e:	bd30      	pop	{r4, r5, pc}
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8001780:	230b      	movs	r3, #11
 8001782:	aa03      	add	r2, sp, #12
 8001784:	218a      	movs	r1, #138	; 0x8a
 8001786:	4628      	mov	r0, r5
 8001788:	f000 f864 	bl	8001854 <ts3510_read_reg>
 800178c:	2800      	cmp	r0, #0
 800178e:	d1e7      	bne.n	8001760 <TS3510_GetState+0x24>
    if((pData[1] == 0xFF) && (pData[2] == 0xFF) && (pData[3] == 0xFF) && (pData[4] == 0xFF))
 8001790:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d10d      	bne.n	80017b4 <TS3510_GetState+0x78>
 8001798:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800179c:	2bff      	cmp	r3, #255	; 0xff
 800179e:	d109      	bne.n	80017b4 <TS3510_GetState+0x78>
 80017a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d105      	bne.n	80017b4 <TS3510_GetState+0x78>
 80017a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80017ac:	3bff      	subs	r3, #255	; 0xff
 80017ae:	bf18      	it	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	e7d7      	b.n	8001764 <TS3510_GetState+0x28>
      ret = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e7d5      	b.n	8001764 <TS3510_GetState+0x28>
    else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 80017b8:	230b      	movs	r3, #11
 80017ba:	aa03      	add	r2, sp, #12
 80017bc:	218a      	movs	r1, #138	; 0x8a
 80017be:	4628      	mov	r0, r5
 80017c0:	f000 f848 	bl	8001854 <ts3510_read_reg>
 80017c4:	2800      	cmp	r0, #0
 80017c6:	d1d7      	bne.n	8001778 <TS3510_GetState+0x3c>
      State->TouchX = (((pData[1] << 8) | pData[2]) << 12) / 640;
 80017c8:	f8bd 300d 	ldrh.w	r3, [sp, #13]
 80017cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80017d0:	ba5b      	rev16	r3, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	031b      	lsls	r3, r3, #12
 80017d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017da:	6063      	str	r3, [r4, #4]
      State->TouchY = (((pData[3] << 8) | pData[4]) << 12) / 480;
 80017dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017e0:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 80017e4:	ba5b      	rev16	r3, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	031b      	lsls	r3, r3, #12
 80017ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80017ee:	60a3      	str	r3, [r4, #8]
 80017f0:	e7c4      	b.n	800177c <TS3510_GetState+0x40>
  int32_t ret = TS3510_OK;
 80017f2:	2000      	movs	r0, #0
  return ret;
 80017f4:	e7c2      	b.n	800177c <TS3510_GetState+0x40>
 80017f6:	bf00      	nop
 80017f8:	08006cb0 	.word	0x08006cb0

080017fc <TS3510_ClearIT>:
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	4770      	bx	lr

08001802 <TS3510_GetMultiTouchState>:
 8001802:	f04f 30ff 	mov.w	r0, #4294967295
 8001806:	4770      	bx	lr

08001808 <TS3510_GetGesture>:
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	4770      	bx	lr

0800180e <TS3510_DisableIT>:
 800180e:	f04f 30ff 	mov.w	r0, #4294967295
 8001812:	4770      	bx	lr

08001814 <TS3510_ITStatus>:
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	4770      	bx	lr
	...

0800181c <TS3510_RegisterBusIO>:
  if (pObj == NULL)
 800181c:	b190      	cbz	r0, 8001844 <TS3510_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800181e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001820:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001822:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8001824:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8001826:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8001828:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800182a:	68ca      	ldr	r2, [r1, #12]
 800182c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800182e:	690a      	ldr	r2, [r1, #16]
 8001830:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001832:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8001834:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8001836:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <TS3510_RegisterBusIO+0x30>)
 800183a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <TS3510_RegisterBusIO+0x34>)
 800183e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8001840:	b103      	cbz	r3, 8001844 <TS3510_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8001842:	4718      	bx	r3
}
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	080016db 	.word	0x080016db
 8001850:	080016e9 	.word	0x080016e9

08001854 <ts3510_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t ts3510_read_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001854:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001856:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800185a:	46a4      	mov	ip, r4
}
 800185c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001860:	4760      	bx	ip

08001862 <ts3510_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ts3510_write_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001862:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001864:	6804      	ldr	r4, [r0, #0]
 8001866:	6880      	ldr	r0, [r0, #8]
 8001868:	46a4      	mov	ip, r4
}
 800186a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800186e:	4760      	bx	ip

08001870 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001870:	4927      	ldr	r1, [pc, #156]	; (8001910 <BSP_LED_Init+0xa0>)
 8001872:	b570      	push	{r4, r5, r6, lr}
 8001874:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8001878:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led == LED1) || (Led == LED3))
 800187a:	b1a8      	cbz	r0, 80018a8 <BSP_LED_Init+0x38>
 800187c:	2802      	cmp	r0, #2
 800187e:	d035      	beq.n	80018ec <BSP_LED_Init+0x7c>
#if (USE_BSP_IO_CLASS > 0)
    BSP_IO_Init_t io_init_structure;

    io_init_structure.Pin  = LED_PIN[Led];
    io_init_structure.Pull = IO_PULLUP;
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 8001880:	2304      	movs	r3, #4
 8001882:	2401      	movs	r4, #1
    /* Initialize MFX   */
    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8001884:	a903      	add	r1, sp, #12
 8001886:	2000      	movs	r0, #0
    io_init_structure.Pin  = LED_PIN[Led];
 8001888:	9503      	str	r5, [sp, #12]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 800188a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 800188e:	f000 faf7 	bl	8001e80 <BSP_IO_Init>
 8001892:	2800      	cmp	r0, #0
 8001894:	d138      	bne.n	8001908 <BSP_LED_Init+0x98>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      if(BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_SET) != BSP_ERROR_NONE)
 8001896:	4622      	mov	r2, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f000 fa8b 	bl	8001db4 <BSP_IO_WritePin>
 800189e:	3000      	adds	r0, #0
 80018a0:	bf18      	it	ne
 80018a2:	2001      	movne	r0, #1
 80018a4:	4240      	negs	r0, r0
 80018a6:	e01f      	b.n	80018e8 <BSP_LED_Init+0x78>
      LED1_GPIO_CLK_ENABLE();
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <BSP_LED_Init+0xa4>)
 80018aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2302      	movs	r3, #2
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2401      	movs	r4, #1
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018ca:	a903      	add	r1, sp, #12
 80018cc:	6906      	ldr	r6, [r0, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018d0:	4630      	mov	r0, r6
    gpio_init_structure.Pin = LED_PIN [Led];
 80018d2:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80018d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80018d8:	f001 fc28 	bl	800312c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 80018dc:	4630      	mov	r0, r6
 80018de:	4622      	mov	r2, r4
 80018e0:	b2a9      	uxth	r1, r5
 80018e2:	f001 fdb1 	bl	8003448 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80018e6:	2000      	movs	r0, #0
    }
#endif /* (USE_BSP_IO_CLASS > 0)   */
  }

  return ret;
}
 80018e8:	b008      	add	sp, #32
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
      LED3_GPIO_CLK_ENABLE();
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <BSP_LED_Init+0xa4>)
 80018ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	e7dc      	b.n	80018c2 <BSP_LED_Init+0x52>
      ret = BSP_ERROR_NO_INIT;
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800190c:	e7ec      	b.n	80018e8 <BSP_LED_Init+0x78>
 800190e:	bf00      	nop
 8001910:	08006cb4 	.word	0x08006cb4
 8001914:	58024400 	.word	0x58024400

08001918 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001918:	b510      	push	{r4, lr}
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <BSP_LED_On+0x2c>)
int32_t ret = BSP_ERROR_NONE;

if((Led == LED1)||(Led == LED3))
 800191c:	f010 04fd 	ands.w	r4, r0, #253	; 0xfd
 8001920:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8001924:	d005      	beq.n	8001932 <BSP_LED_On+0x1a>
HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
}
else
{
#if (USE_BSP_IO_CLASS > 0)
ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
#endif /* (USE_BSP_IO_CLASS > 0)   */
}
return ret;
}
 8001928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 800192c:	4610      	mov	r0, r2
 800192e:	f000 ba41 	b.w	8001db4 <BSP_IO_WritePin>
HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001932:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001936:	4622      	mov	r2, r4
 8001938:	b289      	uxth	r1, r1
 800193a:	6918      	ldr	r0, [r3, #16]
 800193c:	f001 fd84 	bl	8003448 <HAL_GPIO_WritePin>
}
 8001940:	4620      	mov	r0, r4
 8001942:	bd10      	pop	{r4, pc}
 8001944:	08006cb4 	.word	0x08006cb4

08001948 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning   */
  UNUSED(Button);
  /* This function should be implemented by the user application.
  It is called into this driver when an event on Button is triggered.   */
}
 8001948:	4770      	bx	lr

0800194a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800194a:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff fffb 	bl	8001948 <BSP_PB_Callback>
}
 8001952:	bd08      	pop	{r3, pc}

08001954 <BUTTON_TAMPER_EXTI_Callback>:
{
 8001954:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_TAMPER);
 8001956:	2001      	movs	r0, #1
 8001958:	f7ff fff6 	bl	8001948 <BSP_PB_Callback>
}
 800195c:	bd08      	pop	{r3, pc}

0800195e <BUTTON_WAKEUP_EXTI_Callback>:
{
 800195e:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fff1 	bl	8001948 <BSP_PB_Callback>
}
 8001966:	bd08      	pop	{r3, pc}

08001968 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c1InitCounter--;
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <BSP_I2C1_DeInit+0x40>)
{
 800196a:	b508      	push	{r3, lr}

  if (--I2c1InitCounter == 0U)
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	3b02      	subs	r3, #2
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	b10b      	cbz	r3, 8001978 <BSP_I2C1_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8001974:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8001976:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	480c      	ldr	r0, [pc, #48]	; (80019ac <BSP_I2C1_DeInit+0x44>)
 800197c:	f001 fcc0 	bl	8003300 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <BSP_I2C1_DeInit+0x44>)
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	f001 fcbc 	bl	8003300 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8001988:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <BSP_I2C1_DeInit+0x48>)
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <BSP_I2C1_DeInit+0x4c>)
  BUS_I2C1_CLK_DISABLE();
 800198c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001994:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8001998:	f002 f9fd 	bl	8003d96 <HAL_I2C_DeInit>
 800199c:	2800      	cmp	r0, #0
 800199e:	d0e9      	beq.n	8001974 <BSP_I2C1_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80019a0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80019a4:	e7e7      	b.n	8001976 <BSP_I2C1_DeInit+0xe>
 80019a6:	bf00      	nop
 80019a8:	20000220 	.word	0x20000220
 80019ac:	58020400 	.word	0x58020400
 80019b0:	58024400 	.word	0x58024400
 80019b4:	20001c8c 	.word	0x20001c8c

080019b8 <MX_I2C1_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	2201      	movs	r2, #1
{
 80019bc:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80019be:	6041      	str	r1, [r0, #4]
{
 80019c0:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80019c2:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80019c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80019cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80019d0:	f002 f98f 	bl	8003cf2 <HAL_I2C_Init>
 80019d4:	4601      	mov	r1, r0
 80019d6:	b108      	cbz	r0, 80019dc <MX_I2C1_Init+0x24>
    status = HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
}
 80019da:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80019dc:	4620      	mov	r0, r4
 80019de:	f002 fb66 	bl	80040ae <HAL_I2CEx_ConfigAnalogFilter>
 80019e2:	4601      	mov	r1, r0
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d1f7      	bne.n	80019d8 <MX_I2C1_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80019e8:	4620      	mov	r0, r4
 80019ea:	f002 fb86 	bl	80040fa <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80019ee:	3000      	adds	r0, #0
 80019f0:	bf18      	it	ne
 80019f2:	2001      	movne	r0, #1
 80019f4:	e7f1      	b.n	80019da <MX_I2C1_Init+0x22>
	...

080019f8 <BSP_I2C1_Init>:
  hbus_i2c1.Instance = BUS_I2C1;
 80019f8:	4b9c      	ldr	r3, [pc, #624]	; (8001c6c <BSP_I2C1_Init+0x274>)
 80019fa:	489d      	ldr	r0, [pc, #628]	; (8001c70 <BSP_I2C1_Init+0x278>)
{
 80019fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c1.Instance = BUS_I2C1;
 8001a00:	6003      	str	r3, [r0, #0]
{
 8001a02:	b091      	sub	sp, #68	; 0x44
  if (I2c1InitCounter == 0U)
 8001a04:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <BSP_I2C1_Init+0x27c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	469a      	mov	sl, r3
 8001a0a:	9201      	str	r2, [sp, #4]
 8001a0c:	b11a      	cbz	r2, 8001a16 <BSP_I2C1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8001a0e:	2000      	movs	r0, #0
}
 8001a10:	b011      	add	sp, #68	; 0x44
 8001a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c1InitCounter++;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f8ca 3000 	str.w	r3, [sl]
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8001a1c:	f002 fb42 	bl	80040a4 <HAL_I2C_GetState>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1f4      	bne.n	8001a0e <BSP_I2C1_Init+0x16>
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8001a24:	4d94      	ldr	r5, [pc, #592]	; (8001c78 <BSP_I2C1_Init+0x280>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001a26:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 8001a2a:	2702      	movs	r7, #2
 8001a2c:	2604      	movs	r6, #4
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8001a2e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8001a32:	a90b      	add	r1, sp, #44	; 0x2c
 8001a34:	4891      	ldr	r0, [pc, #580]	; (8001c7c <BSP_I2C1_Init+0x284>)
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001a3e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	9308      	str	r3, [sp, #32]
 8001a48:	9b08      	ldr	r3, [sp, #32]
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 8001a4a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001a56:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001a68:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 8001a6a:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001a6e:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8001a70:	f001 fb5c 	bl	800312c <HAL_GPIO_Init>
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 8001a74:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8001a76:	a90b      	add	r1, sp, #44	; 0x2c
 8001a78:	4880      	ldr	r0, [pc, #512]	; (8001c7c <BSP_I2C1_Init+0x284>)
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 8001a7a:	960f      	str	r6, [sp, #60]	; 0x3c
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 8001a7c:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 8001a80:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a82:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8001a86:	f001 fb51 	bl	800312c <HAL_GPIO_Init>
  BUS_I2C1_CLK_ENABLE();
 8001a8a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8001a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a92:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
 8001a96:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8001aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C1_FORCE_RESET();
 8001aa2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aaa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  BUS_I2C1_RELEASE_RESET();
 8001aae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ab6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8001aba:	f003 f98f 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f000 80ca 	beq.w	8001c58 <BSP_I2C1_Init+0x260>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ac4:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <BSP_I2C1_Init+0x288>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001ac6:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001aca:	46d1      	mov	r9, sl
 8001acc:	f04f 0b14 	mov.w	fp, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ad0:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8001ad4:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001ad8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001adc:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ae0:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001ae2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001ae6:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001aea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8001aee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001af2:	32e2      	adds	r2, #226	; 0xe2
 8001af4:	9305      	str	r3, [sp, #20]
 8001af6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001afa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001afe:	9202      	str	r2, [sp, #8]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001b00:	9a01      	ldr	r2, [sp, #4]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001b02:	4696      	mov	lr, r2
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001b04:	1c54      	adds	r4, r2, #1
 8001b06:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001b08:	2600      	movs	r6, #0
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001b0a:	9404      	str	r4, [sp, #16]
      if (tscldel >= (uint32_t)tscldel_min)
 8001b0c:	f240 3479 	movw	r4, #889	; 0x379
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001b10:	1c75      	adds	r5, r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8001b12:	45a4      	cmp	ip, r4
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001b14:	9503      	str	r5, [sp, #12]
      if (tscldel >= (uint32_t)tscldel_min)
 8001b16:	d92c      	bls.n	8001b72 <BSP_I2C1_Init+0x17a>
 8001b18:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001b1a:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8001b1c:	9c02      	ldr	r4, [sp, #8]
 8001b1e:	42a5      	cmp	r5, r4
 8001b20:	d323      	bcc.n	8001b6a <BSP_I2C1_Init+0x172>
 8001b22:	9c05      	ldr	r4, [sp, #20]
 8001b24:	42a5      	cmp	r5, r4
 8001b26:	d820      	bhi.n	8001b6a <BSP_I2C1_Init+0x172>
            if(presc != prev_presc)
 8001b28:	4542      	cmp	r2, r8
 8001b2a:	d01e      	beq.n	8001b6a <BSP_I2C1_Init+0x172>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001b2c:	fb0b 9e03 	mla	lr, fp, r3, r9
              I2c_valid_timing_nbr ++;
 8001b30:	3301      	adds	r3, #1
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001b32:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001b34:	f8ce 7010 	str.w	r7, [lr, #16]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001b38:	e9ce 2602 	strd	r2, r6, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001b3c:	d912      	bls.n	8001b64 <BSP_I2C1_Init+0x16c>
 8001b3e:	f8c9 3004 	str.w	r3, [r9, #4]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001b42:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <BSP_I2C1_Init+0x27c>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001b44:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8001b48:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001b4a:	6853      	ldr	r3, [r2, #4]
 8001b4c:	f5ab 59ec 	sub.w	r9, fp, #7552	; 0x1d80
 8001b50:	3208      	adds	r2, #8
 8001b52:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001b54:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b58:	f1a9 0915 	sub.w	r9, r9, #21
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e05e      	b.n	8001c22 <BSP_I2C1_Init+0x22a>
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001b64:	4690      	mov	r8, r2
 8001b66:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001b6a:	3701      	adds	r7, #1
 8001b6c:	440d      	add	r5, r1
 8001b6e:	2f10      	cmp	r7, #16
 8001b70:	d1d4      	bne.n	8001b1c <BSP_I2C1_Init+0x124>
 8001b72:	9e03      	ldr	r6, [sp, #12]
 8001b74:	448c      	add	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001b76:	2e10      	cmp	r6, #16
 8001b78:	d1c8      	bne.n	8001b0c <BSP_I2C1_Init+0x114>
 8001b7a:	9a04      	ldr	r2, [sp, #16]
 8001b7c:	4401      	add	r1, r0
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001b7e:	2a10      	cmp	r2, #16
 8001b80:	d1c0      	bne.n	8001b04 <BSP_I2C1_Init+0x10c>
 8001b82:	f1be 0f00 	cmp.w	lr, #0
 8001b86:	d0dc      	beq.n	8001b42 <BSP_I2C1_Init+0x14a>
 8001b88:	4a3a      	ldr	r2, [pc, #232]	; (8001c74 <BSP_I2C1_Init+0x27c>)
 8001b8a:	6053      	str	r3, [r2, #4]
 8001b8c:	e7d9      	b.n	8001b42 <BSP_I2C1_Init+0x14a>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001b8e:	6815      	ldr	r5, [r2, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001b90:	f04f 0c00 	mov.w	ip, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001b94:	fb05 0500 	mla	r5, r5, r0, r0
 8001b98:	eb09 0405 	add.w	r4, r9, r5
 8001b9c:	eb05 010b 	add.w	r1, r5, fp
 8001ba0:	9407      	str	r4, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001ba2:	f10c 0401 	add.w	r4, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001ba6:	f101 0632 	add.w	r6, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001baa:	9403      	str	r4, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001bac:	f241 245c 	movw	r4, #4700	; 0x125c
 8001bb0:	42a6      	cmp	r6, r4
 8001bb2:	d92e      	bls.n	8001c12 <BSP_I2C1_Init+0x21a>
 8001bb4:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8001bb8:	d22b      	bcs.n	8001c12 <BSP_I2C1_Init+0x21a>
 8001bba:	9c07      	ldr	r4, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001bbc:	f04f 0e00 	mov.w	lr, #0
 8001bc0:	1866      	adds	r6, r4, r1
 8001bc2:	f5c1 54ee 	rsb	r4, r1, #7616	; 0x1dc0
 8001bc6:	3407      	adds	r4, #7
 8001bc8:	9406      	str	r4, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001bca:	f10e 0401 	add.w	r4, lr, #1
 8001bce:	9404      	str	r4, [sp, #16]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001bd0:	f241 0447 	movw	r4, #4167	; 0x1047
 8001bd4:	42a6      	cmp	r6, r4
 8001bd6:	d816      	bhi.n	8001c06 <BSP_I2C1_Init+0x20e>
 8001bd8:	9c06      	ldr	r4, [sp, #24]
 8001bda:	eb04 0806 	add.w	r8, r4, r6
 8001bde:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8001be2:	d310      	bcc.n	8001c06 <BSP_I2C1_Init+0x20e>
 8001be4:	4540      	cmp	r0, r8
 8001be6:	d20e      	bcs.n	8001c06 <BSP_I2C1_Init+0x20e>
            if ((uint32_t)error < prev_error)
 8001be8:	f2a6 6883 	subw	r8, r6, #1667	; 0x683
 8001bec:	9c02      	ldr	r4, [sp, #8]
 8001bee:	f1b8 0f00 	cmp.w	r8, #0
 8001bf2:	bfb8      	it	lt
 8001bf4:	f1c8 0800 	rsblt	r8, r8, #0
 8001bf8:	4544      	cmp	r4, r8
              I2c_valid_timing[count].sclh = sclh;
 8001bfa:	bf82      	ittt	hi
 8001bfc:	463b      	movhi	r3, r7
 8001bfe:	f8cd 8008 	strhi.w	r8, [sp, #8]
 8001c02:	e9c2 ec03 	strdhi	lr, ip, [r2, #12]
 8001c06:	f8dd e010 	ldr.w	lr, [sp, #16]
 8001c0a:	442e      	add	r6, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001c0c:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8001c10:	d1db      	bne.n	8001bca <BSP_I2C1_Init+0x1d2>
 8001c12:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8001c16:	4429      	add	r1, r5
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001c18:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001c1c:	d1c1      	bne.n	8001ba2 <BSP_I2C1_Init+0x1aa>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001c1e:	3701      	adds	r7, #1
 8001c20:	3214      	adds	r2, #20
 8001c22:	9905      	ldr	r1, [sp, #20]
 8001c24:	428f      	cmp	r7, r1
 8001c26:	d1b2      	bne.n	8001b8e <BSP_I2C1_Init+0x196>
        if (idx < I2C_VALID_TIMING_NBR)
 8001c28:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2a:	d815      	bhi.n	8001c58 <BSP_I2C1_Init+0x260>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001c2c:	2214      	movs	r2, #20
 8001c2e:	fb02 a303 	mla	r3, r2, r3, sl
 8001c32:	689a      	ldr	r2, [r3, #8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001c34:	7e1c      	ldrb	r4, [r3, #24]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001c36:	ea44 7402 	orr.w	r4, r4, r2, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	0512      	lsls	r2, r2, #20
 8001c3e:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001c42:	4314      	orrs	r4, r2
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001c44:	691a      	ldr	r2, [r3, #16]
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001c46:	695b      	ldr	r3, [r3, #20]
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001c48:	0412      	lsls	r2, r2, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001c4a:	021b      	lsls	r3, r3, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001c4c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001c50:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001c52:	4314      	orrs	r4, r2
 8001c54:	4323      	orrs	r3, r4
 8001c56:	9301      	str	r3, [sp, #4]
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8001c58:	9901      	ldr	r1, [sp, #4]
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <BSP_I2C1_Init+0x278>)
 8001c5c:	f7ff feac 	bl	80019b8 <MX_I2C1_Init>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	f43f aed4 	beq.w	8001a0e <BSP_I2C1_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 8001c66:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001c6a:	e6d1      	b.n	8001a10 <BSP_I2C1_Init+0x18>
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	20001c8c 	.word	0x20001c8c
 8001c74:	20000220 	.word	0x20000220
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020400 	.word	0x58020400
 8001c80:	3b9aca00 	.word	0x3b9aca00

08001c84 <BSP_I2C1_WriteReg>:
{
 8001c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001c86:	f242 7410 	movw	r4, #10000	; 0x2710
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	4601      	mov	r1, r0
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <BSP_I2C1_WriteReg+0x30>)
 8001c92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c96:	2301      	movs	r3, #1
 8001c98:	f002 f896 	bl	8003dc8 <HAL_I2C_Mem_Write>
 8001c9c:	b140      	cbz	r0, 8001cb0 <BSP_I2C1_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <BSP_I2C1_WriteReg+0x30>)
 8001ca0:	f002 fa03 	bl	80040aa <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ca4:	2804      	cmp	r0, #4
 8001ca6:	bf0c      	ite	eq
 8001ca8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8001cac:	f06f 0003 	mvnne.w	r0, #3
}
 8001cb0:	b004      	add	sp, #16
 8001cb2:	bd10      	pop	{r4, pc}
 8001cb4:	20001c8c 	.word	0x20001c8c

08001cb8 <BSP_I2C1_ReadReg>:
{
 8001cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001cba:	f242 7410 	movw	r4, #10000	; 0x2710
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <BSP_I2C1_ReadReg+0x30>)
 8001cc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f002 f930 	bl	8003f30 <HAL_I2C_Mem_Read>
 8001cd0:	b140      	cbz	r0, 8001ce4 <BSP_I2C1_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <BSP_I2C1_ReadReg+0x30>)
 8001cd4:	f002 f9e9 	bl	80040aa <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001cd8:	2804      	cmp	r0, #4
 8001cda:	bf0c      	ite	eq
 8001cdc:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8001ce0:	f06f 0003 	mvnne.w	r0, #3
}
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	20001c8c 	.word	0x20001c8c

08001cec <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8001cec:	f000 bfb6 	b.w	8002c5c <HAL_GetTick>

08001cf0 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32H743I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b089      	sub	sp, #36	; 0x24
  int32_t ret = BSP_ERROR_NONE;

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d149      	bne.n	8001d8c <BSP_IOEXPANDER_Init+0x9c>
 8001cf8:	2901      	cmp	r1, #1
 8001cfa:	d147      	bne.n	8001d8c <BSP_IOEXPANDER_Init+0x9c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8001cfc:	4d25      	ldr	r5, [pc, #148]	; (8001d94 <BSP_IOEXPANDER_Init+0xa4>)
 8001cfe:	682e      	ldr	r6, [r5, #0]
 8001d00:	2e00      	cmp	r6, #0
 8001d02:	d141      	bne.n	8001d88 <BSP_IOEXPANDER_Init+0x98>
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
  int32_t              ret = BSP_ERROR_NONE;
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id, i;
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8001d04:	f248 6384 	movw	r3, #34436	; 0x8684
  int32_t              ret = BSP_ERROR_NONE;
 8001d08:	4634      	mov	r4, r6
  IOCtx.GetTick     = BSP_GetTick;

  for(i = 0U; i < 2U; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001d0a:	4f23      	ldr	r7, [pc, #140]	; (8001d98 <BSP_IOEXPANDER_Init+0xa8>)
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8001d0c:	f8ad 3000 	strh.w	r3, [sp]
  IOCtx.Init        = BSP_I2C1_Init;
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <BSP_IOEXPANDER_Init+0xac>)
 8001d12:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <BSP_IOEXPANDER_Init+0xb0>)
 8001d16:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <BSP_IOEXPANDER_Init+0xb4>)
 8001d1a:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <BSP_IOEXPANDER_Init+0xb8>)
 8001d1e:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <BSP_IOEXPANDER_Init+0xbc>)
 8001d22:	9307      	str	r3, [sp, #28]
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8001d24:	f81d 3006 	ldrb.w	r3, [sp, r6]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001d28:	a902      	add	r1, sp, #8
 8001d2a:	4638      	mov	r0, r7
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8001d2c:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001d30:	f7ff fc78 	bl	8001624 <MFXSTM32L152_RegisterBusIO>
 8001d34:	b980      	cbnz	r0, 8001d58 <BSP_IOEXPANDER_Init+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 8001d36:	a901      	add	r1, sp, #4
 8001d38:	4638      	mov	r0, r7
 8001d3a:	f7fe ff58 	bl	8000bee <MFXSTM32L152_ReadID>
 8001d3e:	b988      	cbnz	r0, 8001d64 <BSP_IOEXPANDER_Init+0x74>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
    }
    else
    {
      if((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8001d40:	9b01      	ldr	r3, [sp, #4]
 8001d42:	f023 0302 	bic.w	r3, r3, #2
 8001d46:	2b79      	cmp	r3, #121	; 0x79
 8001d48:	d10f      	bne.n	8001d6a <BSP_IOEXPANDER_Init+0x7a>
      {
        if(MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8001d4a:	4813      	ldr	r0, [pc, #76]	; (8001d98 <BSP_IOEXPANDER_Init+0xa8>)
 8001d4c:	f7ff fb98 	bl	8001480 <MFXSTM32L152_Init>
 8001d50:	b170      	cbz	r0, 8001d70 <BSP_IOEXPANDER_Init+0x80>
        ret = BSP_ERROR_NO_INIT;
 8001d52:	f04f 34ff 	mov.w	r4, #4294967295
 8001d56:	e00f      	b.n	8001d78 <BSP_IOEXPANDER_Init+0x88>
      ret = BSP_ERROR_BUS_FAILURE;
 8001d58:	f06f 0407 	mvn.w	r4, #7
  for(i = 0U; i < 2U; i++)
 8001d5c:	2e01      	cmp	r6, #1
 8001d5e:	d0f8      	beq.n	8001d52 <BSP_IOEXPANDER_Init+0x62>
 8001d60:	2601      	movs	r6, #1
 8001d62:	e7df      	b.n	8001d24 <BSP_IOEXPANDER_Init+0x34>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d64:	f06f 0403 	mvn.w	r4, #3
 8001d68:	e7f8      	b.n	8001d5c <BSP_IOEXPANDER_Init+0x6c>
        }
        break;
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001d6a:	f06f 0406 	mvn.w	r4, #6
 8001d6e:	e7f5      	b.n	8001d5c <BSP_IOEXPANDER_Init+0x6c>
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d1ee      	bne.n	8001d52 <BSP_IOEXPANDER_Init+0x62>
        IO_Ctx[Instance].IsInitialized = 1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	602b      	str	r3, [r5, #0]
    if (IO_Ctx[Instance].IsInitialized == 1U)
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <BSP_IOEXPANDER_Init+0x92>
        Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <BSP_IOEXPANDER_Init+0xc0>)
 8001d80:	60ab      	str	r3, [r5, #8]
}
 8001d82:	4620      	mov	r0, r4
 8001d84:	b009      	add	sp, #36	; 0x24
 8001d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = BSP_ERROR_NONE;
 8001d88:	4604      	mov	r4, r0
 8001d8a:	e7f5      	b.n	8001d78 <BSP_IOEXPANDER_Init+0x88>
    ret = BSP_ERROR_WRONG_PARAM;
 8001d8c:	f06f 0401 	mvn.w	r4, #1
  return ret;
 8001d90:	e7f7      	b.n	8001d82 <BSP_IOEXPANDER_Init+0x92>
 8001d92:	bf00      	nop
 8001d94:	20000c28 	.word	0x20000c28
 8001d98:	20001ce0 	.word	0x20001ce0
 8001d9c:	080019f9 	.word	0x080019f9
 8001da0:	08001969 	.word	0x08001969
 8001da4:	08001cb9 	.word	0x08001cb9
 8001da8:	08001c85 	.word	0x08001c85
 8001dac:	08001ced 	.word	0x08001ced
 8001db0:	2000007c 	.word	0x2000007c

08001db4 <BSP_IO_WritePin>:
{
 8001db4:	b508      	push	{r3, lr}
  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8001db6:	b970      	cbnz	r0, 8001dd6 <BSP_IO_WritePin+0x22>
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <BSP_IO_WritePin+0x28>)
 8001dba:	6858      	ldr	r0, [r3, #4]
 8001dbc:	07c0      	lsls	r0, r0, #31
 8001dbe:	d50a      	bpl.n	8001dd6 <BSP_IO_WritePin+0x22>
    if(Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4806      	ldr	r0, [pc, #24]	; (8001de0 <BSP_IO_WritePin+0x2c>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	4798      	blx	r3
 8001dca:	2800      	cmp	r0, #0
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001dcc:	bfac      	ite	ge
 8001dce:	2000      	movge	r0, #0
 8001dd0:	f06f 0004 	mvnlt.w	r0, #4
}
 8001dd4:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001dd6:	f06f 0001 	mvn.w	r0, #1
 8001dda:	e7fb      	b.n	8001dd4 <BSP_IO_WritePin+0x20>
 8001ddc:	20000c28 	.word	0x20000c28
 8001de0:	20001ce0 	.word	0x20001ce0

08001de4 <BSP_IOEXPANDER_ITConfig>:
  if(mfx_io_it_enabled == 0U)
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <BSP_IOEXPANDER_ITConfig+0x80>)
{
 8001de6:	b510      	push	{r4, lr}
  if(mfx_io_it_enabled == 0U)
 8001de8:	68dc      	ldr	r4, [r3, #12]
{
 8001dea:	b088      	sub	sp, #32
  if(mfx_io_it_enabled == 0U)
 8001dec:	2c00      	cmp	r4, #0
 8001dee:	d136      	bne.n	8001e5e <BSP_IOEXPANDER_ITConfig+0x7a>
    mfx_io_it_enabled = 1U;
 8001df0:	2201      	movs	r2, #1
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8001df2:	a903      	add	r1, sp, #12
 8001df4:	481c      	ldr	r0, [pc, #112]	; (8001e68 <BSP_IOEXPANDER_ITConfig+0x84>)
    mfx_io_it_enabled = 1U;
 8001df6:	60da      	str	r2, [r3, #12]
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <BSP_IOEXPANDER_ITConfig+0x88>)
 8001dfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001e06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001e0a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001e16:	f042 0202 	orr.w	r2, r2, #2
 8001e1a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	9b02      	ldr	r3, [sp, #8]
    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <BSP_IOEXPANDER_ITConfig+0x8c>)
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	e9cd 4405 	strd	r4, r4, [sp, #20]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8001e36:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8001e38:	f001 f978 	bl	800312c <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hio_exti, IO_EXTI_LINE);
 8001e3c:	490d      	ldr	r1, [pc, #52]	; (8001e74 <BSP_IOEXPANDER_ITConfig+0x90>)
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <BSP_IOEXPANDER_ITConfig+0x94>)
 8001e40:	f001 f96d 	bl	800311e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hio_exti,  HAL_EXTI_COMMON_CB_ID, IO_EXTI_Callback);
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <BSP_IOEXPANDER_ITConfig+0x98>)
 8001e46:	4621      	mov	r1, r4
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <BSP_IOEXPANDER_ITConfig+0x94>)
 8001e4a:	f001 f961 	bl	8003110 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn), BSP_IOEXPANDER_IT_PRIORITY, 0x0F);
 8001e4e:	220f      	movs	r2, #15
 8001e50:	2017      	movs	r0, #23
 8001e52:	4611      	mov	r1, r2
 8001e54:	f000 ff3a 	bl	8002ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn));
 8001e58:	2017      	movs	r0, #23
 8001e5a:	f000 ff69 	bl	8002d30 <HAL_NVIC_EnableIRQ>
}
 8001e5e:	b008      	add	sp, #32
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	bf00      	nop
 8001e64:	20000c28 	.word	0x20000c28
 8001e68:	58022000 	.word	0x58022000
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	11110000 	.word	0x11110000
 8001e74:	16300008 	.word	0x16300008
 8001e78:	20001cd8 	.word	0x20001cd8
 8001e7c:	08001ee3 	.word	0x08001ee3

08001e80 <BSP_IO_Init>:
{
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	460d      	mov	r5, r1
  if((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 8001e84:	bb18      	cbnz	r0, 8001ece <BSP_IO_Init+0x4e>
 8001e86:	b311      	cbz	r1, 8001ece <BSP_IO_Init+0x4e>
    if((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 8001e88:	4c13      	ldr	r4, [pc, #76]	; (8001ed8 <BSP_IO_Init+0x58>)
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	07db      	lsls	r3, r3, #31
 8001e8e:	d40f      	bmi.n	8001eb0 <BSP_IO_Init+0x30>
      if(BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 8001e90:	2101      	movs	r1, #1
 8001e92:	f7ff ff2d 	bl	8001cf0 <BSP_IOEXPANDER_Init>
 8001e96:	b9b8      	cbnz	r0, 8001ec8 <BSP_IO_Init+0x48>
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 8001e98:	68a3      	ldr	r3, [r4, #8]
 8001e9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001e9e:	480f      	ldr	r0, [pc, #60]	; (8001edc <BSP_IO_Init+0x5c>)
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	4798      	blx	r3
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	db0f      	blt.n	8001ec8 <BSP_IO_Init+0x48>
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 8001ea8:	6863      	ldr	r3, [r4, #4]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6063      	str	r3, [r4, #4]
      if(Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8001eb0:	686b      	ldr	r3, [r5, #4]
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d901      	bls.n	8001eba <BSP_IO_Init+0x3a>
        BSP_IOEXPANDER_ITConfig();
 8001eb6:	f7ff ff95 	bl	8001de4 <BSP_IOEXPANDER_ITConfig>
      if(Io_Drv->Init(&Io_CompObj, Init) < 0)
 8001eba:	68a3      	ldr	r3, [r4, #8]
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <BSP_IO_Init+0x5c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4798      	blx	r3
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	da05      	bge.n	8001ed4 <BSP_IO_Init+0x54>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ec8:	f06f 0004 	mvn.w	r0, #4
}
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001ece:	f06f 0001 	mvn.w	r0, #1
 8001ed2:	e7fb      	b.n	8001ecc <BSP_IO_Init+0x4c>
 8001ed4:	2000      	movs	r0, #0
  return ret;
 8001ed6:	e7f9      	b.n	8001ecc <BSP_IO_Init+0x4c>
 8001ed8:	20000c28 	.word	0x20000c28
 8001edc:	20001ce0 	.word	0x20001ce0

08001ee0 <BSP_IO_Callback>:
}
 8001ee0:	4770      	bx	lr

08001ee2 <IO_EXTI_Callback>:
/**
  * @brief  IO EXTI touch detection callbacks.
  * @retval None
  */
static void IO_EXTI_Callback(void)
{
 8001ee2:	b508      	push	{r3, lr}
  BSP_IO_Callback(0);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fffb 	bl	8001ee0 <BSP_IO_Callback>
}
 8001eea:	bd08      	pop	{r3, pc}

08001eec <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001eec:	b918      	cbnz	r0, 8001ef6 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8001eee:	4b03      	ldr	r3, [pc, #12]	; (8001efc <BSP_LCD_GetPixelFormat+0x10>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001ef6:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001efa:	4770      	bx	lr
 8001efc:	20001db0 	.word	0x20001db0

08001f00 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001f00:	b910      	cbnz	r0, 8001f08 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <BSP_LCD_SetActiveLayer+0x10>)
 8001f04:	6099      	str	r1, [r3, #8]
 8001f06:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001f08:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20001db0 	.word	0x20001db0

08001f14 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001f14:	b918      	cbnz	r0, 8001f1e <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8001f16:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <BSP_LCD_GetXSize+0x10>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001f1e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001f22:	4770      	bx	lr
 8001f24:	20001db0 	.word	0x20001db0

08001f28 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001f28:	b918      	cbnz	r0, 8001f32 <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8001f2a:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <BSP_LCD_GetYSize+0x10>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001f32:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001f36:	4770      	bx	lr
 8001f38:	20001db0 	.word	0x20001db0

08001f3c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f3e:	2418      	movs	r4, #24
 8001f40:	4e0a      	ldr	r6, [pc, #40]	; (8001f6c <BSP_LCD_ReadPixel+0x30>)
 8001f42:	4d0b      	ldr	r5, [pc, #44]	; (8001f70 <BSP_LCD_ReadPixel+0x34>)
 8001f44:	2734      	movs	r7, #52	; 0x34
 8001f46:	4360      	muls	r0, r4
 8001f48:	1834      	adds	r4, r6, r0
 8001f4a:	5830      	ldr	r0, [r6, r0]
 8001f4c:	68a4      	ldr	r4, [r4, #8]
 8001f4e:	fb00 1202 	mla	r2, r0, r2, r1
 8001f52:	fb07 5404 	mla	r4, r7, r4, r5
 8001f56:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001f58:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8001f5a:	b921      	cbnz	r1, 8001f66 <BSP_LCD_ReadPixel+0x2a>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001f5c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001f60:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
}
 8001f62:	2000      	movs	r0, #0
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001f66:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8001f6a:	e7f9      	b.n	8001f60 <BSP_LCD_ReadPixel+0x24>
 8001f6c:	20001db0 	.word	0x20001db0
 8001f70:	20001d08 	.word	0x20001d08

08001f74 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001f76:	2418      	movs	r4, #24
 8001f78:	4e0a      	ldr	r6, [pc, #40]	; (8001fa4 <BSP_LCD_WritePixel+0x30>)
 8001f7a:	4d0b      	ldr	r5, [pc, #44]	; (8001fa8 <BSP_LCD_WritePixel+0x34>)
 8001f7c:	2734      	movs	r7, #52	; 0x34
 8001f7e:	4360      	muls	r0, r4
 8001f80:	1834      	adds	r4, r6, r0
 8001f82:	5830      	ldr	r0, [r6, r0]
 8001f84:	68a4      	ldr	r4, [r4, #8]
 8001f86:	fb00 1202 	mla	r2, r0, r2, r1
 8001f8a:	fb07 5404 	mla	r4, r7, r4, r5
 8001f8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001f90:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8001f92:	b919      	cbnz	r1, 8001f9c <BSP_LCD_WritePixel+0x28>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001f94:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 8001f98:	2000      	movs	r0, #0
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8001fa2:	e7f9      	b.n	8001f98 <BSP_LCD_WritePixel+0x24>
 8001fa4:	20001db0 	.word	0x20001db0
 8001fa8:	20001d08 	.word	0x20001d08

08001fac <BSP_LCD_FillRGBRect>:
{
 8001fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001fb2:	461f      	mov	r7, r3
 8001fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fb6:	4682      	mov	sl, r0
 8001fb8:	4689      	mov	r9, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	4416      	add	r6, r2
 8001fbe:	eb03 0801 	add.w	r8, r3, r1
      pData += PixelFormatFactor;
 8001fc2:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8001ff0 <BSP_LCD_FillRGBRect+0x44>
  for(i = 0; i < Height; i++)
 8001fc6:	42b4      	cmp	r4, r6
 8001fc8:	d00f      	beq.n	8001fea <BSP_LCD_FillRGBRect+0x3e>
 8001fca:	464d      	mov	r5, r9
 8001fcc:	e009      	b.n	8001fe2 <BSP_LCD_FillRGBRect+0x36>
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	4650      	mov	r0, sl
 8001fd6:	f7ff ffcd 	bl	8001f74 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8001fda:	f8db 3000 	ldr.w	r3, [fp]
 8001fde:	3501      	adds	r5, #1
 8001fe0:	441f      	add	r7, r3
    for(j = 0; j < Width; j++)
 8001fe2:	4545      	cmp	r5, r8
 8001fe4:	d1f3      	bne.n	8001fce <BSP_LCD_FillRGBRect+0x22>
 8001fe6:	3401      	adds	r4, #1
 8001fe8:	e7ed      	b.n	8001fc6 <BSP_LCD_FillRGBRect+0x1a>
}
 8001fea:	2000      	movs	r0, #0
 8001fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff0:	20000c38 	.word	0x20000c38

08001ff4 <BSP_LCD_DrawBitmap>:
{
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001ff8:	7b1c      	ldrb	r4, [r3, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8001ffa:	f04f 0e34 	mov.w	lr, #52	; 0x34
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001ffe:	7add      	ldrb	r5, [r3, #11]
{
 8002000:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002002:	0424      	lsls	r4, r4, #16
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002004:	7d1e      	ldrb	r6, [r3, #20]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002006:	7ddf      	ldrb	r7, [r3, #23]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002008:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800200c:	7a9d      	ldrb	r5, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800200e:	0436      	lsls	r6, r6, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8002010:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002128 <BSP_LCD_DrawBitmap+0x134>
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002014:	442c      	add	r4, r5
 8002016:	7b5d      	ldrb	r5, [r3, #13]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8002018:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800212c <BSP_LCD_DrawBitmap+0x138>
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800201c:	eb04 6405 	add.w	r4, r4, r5, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002020:	7cdd      	ldrb	r5, [r3, #19]
 8002022:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8002026:	7c9d      	ldrb	r5, [r3, #18]
 8002028:	442e      	add	r6, r5
 800202a:	7d5d      	ldrb	r5, [r3, #21]
 800202c:	eb06 6605 	add.w	r6, r6, r5, lsl #24
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002030:	7e1d      	ldrb	r5, [r3, #24]
 8002032:	042d      	lsls	r5, r5, #16
 8002034:	eb05 2507 	add.w	r5, r5, r7, lsl #8
 8002038:	7d9f      	ldrb	r7, [r3, #22]
 800203a:	443d      	add	r5, r7
 800203c:	7e5f      	ldrb	r7, [r3, #25]
 800203e:	eb05 6b07 	add.w	fp, r5, r7, lsl #24
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002042:	7f5f      	ldrb	r7, [r3, #29]
 8002044:	7f1d      	ldrb	r5, [r3, #28]
 8002046:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 800204a:	2718      	movs	r7, #24
 800204c:	4347      	muls	r7, r0
 800204e:	eb08 0c07 	add.w	ip, r8, r7
 8002052:	f858 7007 	ldr.w	r7, [r8, r7]
 8002056:	fb07 1202 	mla	r2, r7, r2, r1
 800205a:	4f30      	ldr	r7, [pc, #192]	; (800211c <BSP_LCD_DrawBitmap+0x128>)
 800205c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8002060:	fb0e 7101 	mla	r1, lr, r1, r7
 8002064:	f8d9 7000 	ldr.w	r7, [r9]
 8002068:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 800206a:	fb07 1702 	mla	r7, r7, r2, r1
  if ((bit_pixel/8U) == 4U)
 800206e:	f1a5 0220 	sub.w	r2, r5, #32
 8002072:	2a07      	cmp	r2, #7
 8002074:	d91a      	bls.n	80020ac <BSP_LCD_DrawBitmap+0xb8>
  else if ((bit_pixel/8U) == 2U)
 8002076:	f1a5 0210 	sub.w	r2, r5, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 800207a:	2a07      	cmp	r2, #7
 800207c:	bf8c      	ite	hi
 800207e:	2201      	movhi	r2, #1
 8002080:	2202      	movls	r2, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002082:	08ed      	lsrs	r5, r5, #3
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002084:	9202      	str	r2, [sp, #8]
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002086:	f10b 32ff 	add.w	r2, fp, #4294967295
  for(index=0; index < height; index++)
 800208a:	f04f 0a00 	mov.w	sl, #0
 800208e:	4375      	muls	r5, r6
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002090:	fb05 4402 	mla	r4, r5, r2, r4
 8002094:	441c      	add	r4, r3
    pbmp -= width*(bit_pixel/8U);
 8002096:	426b      	negs	r3, r5
 8002098:	9303      	str	r3, [sp, #12]
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800209a:	2318      	movs	r3, #24
 800209c:	fb03 8800 	mla	r8, r3, r0, r8
  for(index=0; index < height; index++)
 80020a0:	45da      	cmp	sl, fp
 80020a2:	d105      	bne.n	80020b0 <BSP_LCD_DrawBitmap+0xbc>
}
 80020a4:	2000      	movs	r0, #0
 80020a6:	b005      	add	sp, #20
 80020a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80020ac:	2200      	movs	r2, #0
 80020ae:	e7e8      	b.n	8002082 <BSP_LCD_DrawBitmap+0x8e>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80020b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
    break;
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80020b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020b8:	4d19      	ldr	r5, [pc, #100]	; (8002120 <BSP_LCD_DrawBitmap+0x12c>)
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80020ba:	2b02      	cmp	r3, #2
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80020bc:	4628      	mov	r0, r5
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80020be:	bf18      	it	ne
 80020c0:	2300      	movne	r3, #0
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80020c2:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80020c6:	22ff      	movs	r2, #255	; 0xff
  hlcd_dma2d.Init.OutputOffset = 0;
 80020c8:	2300      	movs	r3, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80020ca:	652a      	str	r2, [r5, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80020cc:	9a02      	ldr	r2, [sp, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80020ce:	60eb      	str	r3, [r5, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80020d0:	64eb      	str	r3, [r5, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80020d2:	e9c5 3211 	strd	r3, r2, [r5, #68]	; 0x44
  hlcd_dma2d.Instance = DMA2D;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <BSP_LCD_DrawBitmap+0x130>)
 80020d8:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80020da:	f000 fedf 	bl	8002e9c <HAL_DMA2D_Init>
 80020de:	b988      	cbnz	r0, 8002104 <BSP_LCD_DrawBitmap+0x110>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80020e0:	2101      	movs	r1, #1
 80020e2:	4628      	mov	r0, r5
 80020e4:	f000 ffb2 	bl	800304c <HAL_DMA2D_ConfigLayer>
 80020e8:	b960      	cbnz	r0, 8002104 <BSP_LCD_DrawBitmap+0x110>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80020ea:	2301      	movs	r3, #1
 80020ec:	463a      	mov	r2, r7
 80020ee:	4621      	mov	r1, r4
 80020f0:	4628      	mov	r0, r5
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4633      	mov	r3, r6
 80020f6:	f000 ff0e 	bl	8002f16 <HAL_DMA2D_Start>
 80020fa:	b918      	cbnz	r0, 8002104 <BSP_LCD_DrawBitmap+0x110>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80020fc:	2119      	movs	r1, #25
 80020fe:	4628      	mov	r0, r5
 8002100:	f000 ff23 	bl	8002f4a <HAL_DMA2D_PollForTransfer>
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8002104:	f8d8 3000 	ldr.w	r3, [r8]
  for(index=0; index < height; index++)
 8002108:	f10a 0a01 	add.w	sl, sl, #1
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 800210c:	f8d9 2000 	ldr.w	r2, [r9]
 8002110:	fb02 7703 	mla	r7, r2, r3, r7
    pbmp -= width*(bit_pixel/8U);
 8002114:	9b03      	ldr	r3, [sp, #12]
 8002116:	441c      	add	r4, r3
 8002118:	e7c2      	b.n	80020a0 <BSP_LCD_DrawBitmap+0xac>
 800211a:	bf00      	nop
 800211c:	20001d08 	.word	0x20001d08
 8002120:	20001dc8 	.word	0x20001dc8
 8002124:	52001000 	.word	0x52001000
 8002128:	20001db0 	.word	0x20001db0
 800212c:	20000c38 	.word	0x20000c38

08002130 <LL_FillBuffer.isra.0>:
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8002130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002134:	460d      	mov	r5, r1
 8002136:	461f      	mov	r7, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
 8002138:	4925      	ldr	r1, [pc, #148]	; (80021d0 <LL_FillBuffer.isra.0+0xa0>)
 800213a:	2318      	movs	r3, #24
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 800213c:	4616      	mov	r6, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 800213e:	fb03 1000 	mla	r0, r3, r0, r1
 8002142:	68c1      	ldr	r1, [r0, #12]
 8002144:	2902      	cmp	r1, #2
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8002146:	e9dd 2408 	ldrd	r2, r4, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800214a:	d13c      	bne.n	80021c6 <LL_FillBuffer.isra.0+0x96>
    input_color = CONVERTRGB5652ARGB8888(Color);
 800214c:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8002150:	f240 230f 	movw	r3, #527	; 0x20f
 8002154:	f004 0c1f 	and.w	ip, r4, #31
 8002158:	4358      	muls	r0, r3
 800215a:	fb03 f30c 	mul.w	r3, r3, ip
 800215e:	3017      	adds	r0, #23
 8002160:	3317      	adds	r3, #23
 8002162:	0980      	lsrs	r0, r0, #6
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800216e:	f3c4 1045 	ubfx	r0, r4, #5, #6
 8002172:	f240 1403 	movw	r4, #259	; 0x103
 8002176:	4344      	muls	r4, r0
 8002178:	3421      	adds	r4, #33	; 0x21
 800217a:	09a4      	lsrs	r4, r4, #6
 800217c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002180:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80021d8 <LL_FillBuffer.isra.0+0xa8>
 8002184:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002188:	e9c8 3101 	strd	r3, r1, [r8, #4]
  hlcd_dma2d.Instance = DMA2D;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <LL_FillBuffer.isra.0+0xa4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800218e:	4640      	mov	r0, r8
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002190:	f8c8 200c 	str.w	r2, [r8, #12]
  hlcd_dma2d.Instance = DMA2D;
 8002194:	f8c8 3000 	str.w	r3, [r8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002198:	f000 fe80 	bl	8002e9c <HAL_DMA2D_Init>
 800219c:	b9a8      	cbnz	r0, 80021ca <LL_FillBuffer.isra.0+0x9a>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800219e:	2101      	movs	r1, #1
 80021a0:	4640      	mov	r0, r8
 80021a2:	f000 ff53 	bl	800304c <HAL_DMA2D_ConfigLayer>
 80021a6:	b980      	cbnz	r0, 80021ca <LL_FillBuffer.isra.0+0x9a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80021a8:	9700      	str	r7, [sp, #0]
 80021aa:	4633      	mov	r3, r6
 80021ac:	462a      	mov	r2, r5
 80021ae:	4621      	mov	r1, r4
 80021b0:	4640      	mov	r0, r8
 80021b2:	f000 feb0 	bl	8002f16 <HAL_DMA2D_Start>
 80021b6:	b940      	cbnz	r0, 80021ca <LL_FillBuffer.isra.0+0x9a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80021b8:	2119      	movs	r1, #25
 80021ba:	4640      	mov	r0, r8
}
 80021bc:	b002      	add	sp, #8
 80021be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80021c2:	f000 bec2 	b.w	8002f4a <HAL_DMA2D_PollForTransfer>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80021c6:	2100      	movs	r1, #0
 80021c8:	e7da      	b.n	8002180 <LL_FillBuffer.isra.0+0x50>
}
 80021ca:	b002      	add	sp, #8
 80021cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d0:	20001db0 	.word	0x20001db0
 80021d4:	52001000 	.word	0x52001000
 80021d8:	20001dc8 	.word	0x20001dc8

080021dc <BSP_LCD_DrawHLine>:
{
 80021dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021de:	461f      	mov	r7, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80021e0:	2318      	movs	r3, #24
 80021e2:	4c0d      	ldr	r4, [pc, #52]	; (8002218 <BSP_LCD_DrawHLine+0x3c>)
 80021e4:	4343      	muls	r3, r0
 80021e6:	18e5      	adds	r5, r4, r3
 80021e8:	58e3      	ldr	r3, [r4, r3]
 80021ea:	2434      	movs	r4, #52	; 0x34
 80021ec:	fb03 1102 	mla	r1, r3, r2, r1
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <BSP_LCD_DrawHLine+0x40>)
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <BSP_LCD_DrawHLine+0x44>)
 80021f4:	681e      	ldr	r6, [r3, #0]
 80021f6:	68ab      	ldr	r3, [r5, #8]
 80021f8:	fb04 2303 	mla	r3, r4, r3, r2
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80021fc:	2400      	movs	r4, #0
 80021fe:	463a      	mov	r2, r7
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002200:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002202:	9b08      	ldr	r3, [sp, #32]
 8002204:	9400      	str	r4, [sp, #0]
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	2301      	movs	r3, #1
 800220a:	fb06 5101 	mla	r1, r6, r1, r5
 800220e:	f7ff ff8f 	bl	8002130 <LL_FillBuffer.isra.0>
}
 8002212:	4620      	mov	r0, r4
 8002214:	b003      	add	sp, #12
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002218:	20001db0 	.word	0x20001db0
 800221c:	20000c38 	.word	0x20000c38
 8002220:	20001d08 	.word	0x20001d08

08002224 <BSP_LCD_DrawVLine>:
{
 8002224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002226:	2418      	movs	r4, #24
 8002228:	4d0c      	ldr	r5, [pc, #48]	; (800225c <BSP_LCD_DrawVLine+0x38>)
 800222a:	4344      	muls	r4, r0
 800222c:	192f      	adds	r7, r5, r4
 800222e:	592c      	ldr	r4, [r5, r4]
 8002230:	4d0b      	ldr	r5, [pc, #44]	; (8002260 <BSP_LCD_DrawVLine+0x3c>)
 8002232:	fb02 1104 	mla	r1, r2, r4, r1
 8002236:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <BSP_LCD_DrawVLine+0x40>)
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002238:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800223a:	6816      	ldr	r6, [r2, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	2734      	movs	r7, #52	; 0x34
 8002240:	fb07 5202 	mla	r2, r7, r2, r5
 8002244:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002246:	9a08      	ldr	r2, [sp, #32]
 8002248:	9400      	str	r4, [sp, #0]
 800224a:	9201      	str	r2, [sp, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	fb06 5101 	mla	r1, r6, r1, r5
 8002252:	f7ff ff6d 	bl	8002130 <LL_FillBuffer.isra.0>
}
 8002256:	2000      	movs	r0, #0
 8002258:	b003      	add	sp, #12
 800225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225c:	20001db0 	.word	0x20001db0
 8002260:	20001d08 	.word	0x20001d08
 8002264:	20000c38 	.word	0x20000c38

08002268 <BSP_LCD_FillRect>:
{
 8002268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800226a:	461c      	mov	r4, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800226c:	2318      	movs	r3, #24
 800226e:	4d0d      	ldr	r5, [pc, #52]	; (80022a4 <BSP_LCD_FillRect+0x3c>)
 8002270:	4343      	muls	r3, r0
 8002272:	18ef      	adds	r7, r5, r3
 8002274:	58eb      	ldr	r3, [r5, r3]
 8002276:	4d0c      	ldr	r5, [pc, #48]	; (80022a8 <BSP_LCD_FillRect+0x40>)
 8002278:	fb02 1103 	mla	r1, r2, r3, r1
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <BSP_LCD_FillRect+0x44>)
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800227e:	1b1b      	subs	r3, r3, r4
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002280:	6816      	ldr	r6, [r2, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	2734      	movs	r7, #52	; 0x34
 8002286:	fb07 5202 	mla	r2, r7, r2, r5
 800228a:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800228c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	4622      	mov	r2, r4
 8002294:	9b08      	ldr	r3, [sp, #32]
 8002296:	fb06 5101 	mla	r1, r6, r1, r5
 800229a:	f7ff ff49 	bl	8002130 <LL_FillBuffer.isra.0>
}
 800229e:	2000      	movs	r0, #0
 80022a0:	b003      	add	sp, #12
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	20001db0 	.word	0x20001db0
 80022a8:	20001d08 	.word	0x20001d08
 80022ac:	20000c38 	.word	0x20000c38

080022b0 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <BSP_LCD_Reset+0x60>)
 80022b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022b6:	f042 0201 	orr.w	r2, r2, #1
{
 80022ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 80022bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80022c0:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80022c6:	2504      	movs	r5, #4
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80022c8:	4c12      	ldr	r4, [pc, #72]	; (8002314 <BSP_LCD_Reset+0x64>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80022ca:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 80022cc:	f003 0301 	and.w	r3, r3, #1
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2700      	movs	r7, #0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80022d2:	eb0d 0105 	add.w	r1, sp, r5
 80022d6:	4620      	mov	r0, r4
  LCD_RESET_GPIO_CLK_ENABLE();
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80022de:	e9cd 5601 	strd	r5, r6, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80022e6:	f000 ff21 	bl	800312c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80022ea:	463a      	mov	r2, r7
 80022ec:	4629      	mov	r1, r5
 80022ee:	4620      	mov	r0, r4
 80022f0:	f001 f8aa 	bl	8003448 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80022f4:	2014      	movs	r0, #20
 80022f6:	f000 fcb7 	bl	8002c68 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80022fa:	4632      	mov	r2, r6
 80022fc:	4629      	mov	r1, r5
 80022fe:	4620      	mov	r0, r4
 8002300:	f001 f8a2 	bl	8003448 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8002304:	200a      	movs	r0, #10
 8002306:	f000 fcaf 	bl	8002c68 <HAL_Delay>
}
 800230a:	b007      	add	sp, #28
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800230e:	bf00      	nop
 8002310:	58024400 	.word	0x58024400
 8002314:	58020000 	.word	0x58020000

08002318 <MX_LTDC_Init>:
  hltdc->Instance                = LTDC;
 8002318:	2200      	movs	r2, #0
 800231a:	4911      	ldr	r1, [pc, #68]	; (8002360 <MX_LTDC_Init+0x48>)
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 800231c:	f04f 0c1d 	mov.w	ip, #29
  hltdc->Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 8002320:	6102      	str	r2, [r0, #16]
  hltdc->Instance                = LTDC;
 8002322:	e9c0 1200 	strd	r1, r2, [r0]
  hltdc->Init.VSPolarity         = LTDC_VSPOLARITY_AL;
 8002326:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 800232a:	2202      	movs	r2, #2
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 800232c:	218f      	movs	r1, #143	; 0x8f
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 800232e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002332:	2222      	movs	r2, #34	; 0x22
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002334:	f240 3c0f 	movw	ip, #783	; 0x30f
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002338:	e9c0 1207 	strd	r1, r2, [r0, #28]
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 800233c:	f240 2202 	movw	r2, #514	; 0x202
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 8002340:	f240 311f 	movw	r1, #799	; 0x31f
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002344:	e9c0 c209 	strd	ip, r2, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 8002348:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800234c:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 8002350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002354:	8682      	strh	r2, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002356:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
  return HAL_LTDC_Init(hltdc);
 800235a:	f001 bf7b 	b.w	8004254 <HAL_LTDC_Init>
 800235e:	bf00      	nop
 8002360:	50001000 	.word	0x50001000

08002364 <MX_LTDC_ConfigLayer>:
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002366:	6915      	ldr	r5, [r2, #16]
{
 8002368:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.WindowX0 = Config->X0;
 800236a:	6817      	ldr	r7, [r2, #0]
  pLayerCfg.Alpha0 = 0;
 800236c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  pLayerCfg.WindowY0 = Config->Y0;
 8002370:	6896      	ldr	r6, [r2, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002372:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
  pLayerCfg.WindowX1 = Config->X1;
 8002376:	6854      	ldr	r4, [r2, #4]
  pLayerCfg.WindowY1 = Config->Y1;
 8002378:	68d3      	ldr	r3, [r2, #12]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800237a:	9505      	str	r5, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 800237c:	2500      	movs	r5, #0
  pLayerCfg.FBStartAdress = Config->Address;
 800237e:	6952      	ldr	r2, [r2, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002380:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002382:	1be4      	subs	r4, r4, r7
  pLayerCfg.WindowY1 = Config->Y1;
 8002384:	9304      	str	r3, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002386:	1b9b      	subs	r3, r3, r6
  pLayerCfg.FBStartAdress = Config->Address;
 8002388:	920a      	str	r2, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800238a:	460a      	mov	r2, r1
 800238c:	a901      	add	r1, sp, #4
  pLayerCfg.WindowX0 = Config->X0;
 800238e:	9701      	str	r7, [sp, #4]
  pLayerCfg.WindowY0 = Config->Y0;
 8002390:	9603      	str	r6, [sp, #12]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002392:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002394:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002396:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800239a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.Alpha0 = 0;
 800239e:	e9cd c506 	strd	ip, r5, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023a2:	f04f 0c07 	mov.w	ip, #7
 80023a6:	e9cd ec08 	strd	lr, ip, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80023aa:	f001 ffbf 	bl	800432c <HAL_LTDC_ConfigLayer>
}
 80023ae:	b00f      	add	sp, #60	; 0x3c
 80023b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023b4 <BSP_LCD_InitEx>:
{
 80023b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80023b8:	2901      	cmp	r1, #1
{
 80023ba:	b0ab      	sub	sp, #172	; 0xac
 80023bc:	4607      	mov	r7, r0
 80023be:	4699      	mov	r9, r3
 80023c0:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80023c4:	f200 812a 	bhi.w	800261c <BSP_LCD_InitEx+0x268>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	f040 8127 	bne.w	800261c <BSP_LCD_InitEx+0x268>
    switch(PixelFormat)
 80023ce:	2a02      	cmp	r2, #2
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80023d0:	4c94      	ldr	r4, [pc, #592]	; (8002624 <BSP_LCD_InitEx+0x270>)
 80023d2:	4b95      	ldr	r3, [pc, #596]	; (8002628 <BSP_LCD_InitEx+0x274>)
    BSP_LCD_Reset(Instance);
 80023d4:	f04f 0000 	mov.w	r0, #0
      PixelFormatFactor = 4U;
 80023d8:	bf18      	it	ne
 80023da:	2104      	movne	r1, #4
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80023dc:	4d93      	ldr	r5, [pc, #588]	; (800262c <BSP_LCD_InitEx+0x278>)
      PixelFormatFactor = 2U;
 80023de:	bf06      	itte	eq
 80023e0:	601a      	streq	r2, [r3, #0]
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80023e2:	4617      	moveq	r7, r2
      PixelFormatFactor = 4U;
 80023e4:	6019      	strne	r1, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023e6:	f04f 0b80 	mov.w	fp, #128	; 0x80
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80023ea:	60ea      	str	r2, [r5, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023ec:	f04f 0a01 	mov.w	sl, #1
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80023f0:	2602      	movs	r6, #2
    Lcd_Ctx[Instance].YSize  = Height;
 80023f2:	e9c5 9800 	strd	r9, r8, [r5]
    BSP_LCD_Reset(Instance);
 80023f6:	f7ff ff5b 	bl	80022b0 <BSP_LCD_Reset>
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80023fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 80023fe:	eb0d 010b 	add.w	r1, sp, fp
 8002402:	488b      	ldr	r0, [pc, #556]	; (8002630 <BSP_LCD_InitEx+0x27c>)
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8002404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002408:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800240c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002410:	9623      	str	r6, [sp, #140]	; 0x8c
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	9308      	str	r3, [sp, #32]
 8002418:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800241a:	e9cd ba20 	strd	fp, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 800241e:	f000 fe85 	bl	800312c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 8002422:	4652      	mov	r2, sl
 8002424:	4659      	mov	r1, fp
 8002426:	4882      	ldr	r0, [pc, #520]	; (8002630 <BSP_LCD_InitEx+0x27c>)
 8002428:	f001 f80e 	bl	8003448 <HAL_GPIO_WritePin>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800242c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8002430:	f04f 0b40 	mov.w	fp, #64	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002434:	a920      	add	r1, sp, #128	; 0x80
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002436:	ea43 030a 	orr.w	r3, r3, sl
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800243a:	487e      	ldr	r0, [pc, #504]	; (8002634 <BSP_LCD_InitEx+0x280>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800243c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002440:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002444:	9623      	str	r6, [sp, #140]	; 0x8c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002446:	ea03 030a 	and.w	r3, r3, sl
 800244a:	9309      	str	r3, [sp, #36]	; 0x24
 800244c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800244e:	e9cd ba20 	strd	fp, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002452:	f000 fe6b 	bl	800312c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002456:	4652      	mov	r2, sl
 8002458:	4659      	mov	r1, fp
 800245a:	4876      	ldr	r0, [pc, #472]	; (8002634 <BSP_LCD_InitEx+0x280>)
 800245c:	f000 fff4 	bl	8003448 <HAL_GPIO_WritePin>
    hlcd_ltdc.Instance = LTDC;
 8002460:	4a75      	ldr	r2, [pc, #468]	; (8002638 <BSP_LCD_InitEx+0x284>)
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <BSP_LCD_InitEx+0x288>)
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002464:	a920      	add	r1, sp, #128	; 0x80
    hlcd_dma2d.Instance = DMA2D;
 8002466:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8002650 <BSP_LCD_InitEx+0x29c>
    hlcd_ltdc.Instance = LTDC;
 800246a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800246c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    hlcd_dma2d.Instance = DMA2D;
 8002470:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8002654 <BSP_LCD_InitEx+0x2a0>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002474:	f043 0308 	orr.w	r3, r3, #8
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002478:	4871      	ldr	r0, [pc, #452]	; (8002640 <BSP_LCD_InitEx+0x28c>)
    hlcd_dma2d.Instance = DMA2D;
 800247a:	f8cb a000 	str.w	sl, [fp]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800247e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8002482:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	9304      	str	r3, [sp, #16]
 800248c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800248e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800249a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024a6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80024aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80024b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80024b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ba:	9306      	str	r3, [sp, #24]
 80024bc:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80024be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80024ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	9307      	str	r3, [sp, #28]
 80024d4:	9b07      	ldr	r3, [sp, #28]
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80024d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024da:	e9cd 3620 	strd	r3, r6, [sp, #128]	; 0x80
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80024e0:	e9cd 3622 	strd	r3, r6, [sp, #136]	; 0x88
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80024e4:	260e      	movs	r6, #14
 80024e6:	9624      	str	r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80024e8:	f000 fe20 	bl	800312c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80024ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80024f0:	a920      	add	r1, sp, #128	; 0x80
 80024f2:	4854      	ldr	r0, [pc, #336]	; (8002644 <BSP_LCD_InitEx+0x290>)
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80024f4:	9320      	str	r3, [sp, #128]	; 0x80
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80024f6:	9624      	str	r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80024f8:	f000 fe18 	bl	800312c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80024fc:	23ff      	movs	r3, #255	; 0xff
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80024fe:	a920      	add	r1, sp, #128	; 0x80
 8002500:	484b      	ldr	r0, [pc, #300]	; (8002630 <BSP_LCD_InitEx+0x27c>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002502:	9320      	str	r3, [sp, #128]	; 0x80
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002504:	9624      	str	r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002506:	f000 fe11 	bl	800312c <HAL_GPIO_Init>


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 800250a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8002516:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800251a:	f023 0308 	bic.w	r3, r3, #8
 800251e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
 8002522:	f8db 3000 	ldr.w	r3, [fp]
 8002526:	4553      	cmp	r3, sl
 8002528:	d113      	bne.n	8002552 <BSP_LCD_InitEx+0x19e>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800252a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800252e:	f043 0310 	orr.w	r3, r3, #16
 8002532:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8002536:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	9303      	str	r3, [sp, #12]
 8002540:	9b03      	ldr	r3, [sp, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002542:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800254a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800254c:	f023 0310 	bic.w	r3, r3, #16
 8002550:	67e3      	str	r3, [r4, #124]	; 0x7c
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 8002552:	4e3d      	ldr	r6, [pc, #244]	; (8002648 <BSP_LCD_InitEx+0x294>)
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 8002554:	2308      	movs	r3, #8
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 8002556:	4c3d      	ldr	r4, [pc, #244]	; (800264c <BSP_LCD_InitEx+0x298>)
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 8002558:	a910      	add	r1, sp, #64	; 0x40
 800255a:	a820      	add	r0, sp, #128	; 0x80
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 800255c:	9610      	str	r6, [sp, #64]	; 0x40
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 800255e:	9414      	str	r4, [sp, #80]	; 0x50
 8002560:	46b2      	mov	sl, r6
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 8002562:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 8002566:	f7fe f9df 	bl	8000928 <EXC7200_RegisterBusIO>
 800256a:	2800      	cmp	r0, #0
 800256c:	4626      	mov	r6, r4
 800256e:	db13      	blt.n	8002598 <BSP_LCD_InitEx+0x1e4>
      else if(EXC7200_ReadID(&ts_comp_obj_2, &exc7200_id) < 0)
 8002570:	a902      	add	r1, sp, #8
 8002572:	a820      	add	r0, sp, #128	; 0x80
 8002574:	f7fe f985 	bl	8000882 <EXC7200_ReadID>
 8002578:	2800      	cmp	r0, #0
 800257a:	db0d      	blt.n	8002598 <BSP_LCD_InitEx+0x1e4>
        if(exc7200_id != EXC7200_ID)
 800257c:	9b02      	ldr	r3, [sp, #8]
 800257e:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 8002582:	d11a      	bne.n	80025ba <BSP_LCD_InitEx+0x206>
        if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8002584:	482d      	ldr	r0, [pc, #180]	; (800263c <BSP_LCD_InitEx+0x288>)
 8002586:	f7fe f8f5 	bl	8000774 <MX_LTDC_ClockConfig>
 800258a:	b338      	cbz	r0, 80025dc <BSP_LCD_InitEx+0x228>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800258c:	f06f 0403 	mvn.w	r4, #3
}
 8002590:	4620      	mov	r0, r4
 8002592:	b02b      	add	sp, #172	; 0xac
 8002594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002598:	f06f 0404 	mvn.w	r4, #4
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 800259c:	2380      	movs	r3, #128	; 0x80
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800259e:	a90a      	add	r1, sp, #40	; 0x28
 80025a0:	a816      	add	r0, sp, #88	; 0x58
        io_comp_ctx.Init    = BSP_I2C1_Init;
 80025a2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
        io_comp_ctx.ReadReg = BSP_I2C1_ReadReg;
 80025a6:	960e      	str	r6, [sp, #56]	; 0x38
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 80025a8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80025ac:	f7ff f936 	bl	800181c <TS3510_RegisterBusIO>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	da05      	bge.n	80025c0 <BSP_LCD_InitEx+0x20c>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80025b4:	f06f 0404 	mvn.w	r4, #4
 80025b8:	e7ea      	b.n	8002590 <BSP_LCD_InitEx+0x1dc>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025ba:	f06f 0406 	mvn.w	r4, #6
 80025be:	e7ed      	b.n	800259c <BSP_LCD_InitEx+0x1e8>
        else if(TS3510_ReadID(&ts_comp_obj, &ts3510_id) < 0)
 80025c0:	a901      	add	r1, sp, #4
 80025c2:	a816      	add	r0, sp, #88	; 0x58
 80025c4:	f7ff f898 	bl	80016f8 <TS3510_ReadID>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	dbf3      	blt.n	80025b4 <BSP_LCD_InitEx+0x200>
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025cc:	9a01      	ldr	r2, [sp, #4]
 80025ce:	f243 5310 	movw	r3, #13584	; 0x3510
 80025d2:	429a      	cmp	r2, r3
 80025d4:	bf18      	it	ne
 80025d6:	f06f 0406 	mvnne.w	r4, #6
 80025da:	e7d9      	b.n	8002590 <BSP_LCD_InitEx+0x1dc>
        else if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 80025dc:	4642      	mov	r2, r8
 80025de:	4649      	mov	r1, r9
 80025e0:	4816      	ldr	r0, [pc, #88]	; (800263c <BSP_LCD_InitEx+0x288>)
 80025e2:	f7ff fe99 	bl	8002318 <MX_LTDC_Init>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d1d0      	bne.n	800258c <BSP_LCD_InitEx+0x1d8>
          if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80025ea:	f000 f88b 	bl	8002704 <BSP_SDRAM_Init>
 80025ee:	4604      	mov	r4, r0
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d1cb      	bne.n	800258c <BSP_LCD_InitEx+0x1d8>
            config.Address     = LCD_FB_START_ADDRESS;
 80025f4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80025f8:	4601      	mov	r1, r0
 80025fa:	aa16      	add	r2, sp, #88	; 0x58
            config.PixelFormat = ltdc_pixel_format;
 80025fc:	971a      	str	r7, [sp, #104]	; 0x68
            config.Address     = LCD_FB_START_ADDRESS;
 80025fe:	931b      	str	r3, [sp, #108]	; 0x6c
            config.X1          = Width;
 8002600:	e9cd 0916 	strd	r0, r9, [sp, #88]	; 0x58
            config.Y1          = Height;
 8002604:	e9cd 0818 	strd	r0, r8, [sp, #96]	; 0x60
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <BSP_LCD_InitEx+0x288>)
 800260a:	f7ff feab 	bl	8002364 <MX_LTDC_ConfigLayer>
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 800260e:	2301      	movs	r3, #1
              ret = BSP_ERROR_PERIPH_FAILURE;
 8002610:	2800      	cmp	r0, #0
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002612:	616b      	str	r3, [r5, #20]
              ret = BSP_ERROR_PERIPH_FAILURE;
 8002614:	bf18      	it	ne
 8002616:	f06f 0403 	mvnne.w	r4, #3
 800261a:	e7b9      	b.n	8002590 <BSP_LCD_InitEx+0x1dc>
    ret = BSP_ERROR_WRONG_PARAM;
 800261c:	f06f 0401 	mvn.w	r4, #1
 8002620:	e7b6      	b.n	8002590 <BSP_LCD_InitEx+0x1dc>
 8002622:	bf00      	nop
 8002624:	58024400 	.word	0x58024400
 8002628:	20000c38 	.word	0x20000c38
 800262c:	20001db0 	.word	0x20001db0
 8002630:	58022800 	.word	0x58022800
 8002634:	58020000 	.word	0x58020000
 8002638:	50001000 	.word	0x50001000
 800263c:	20001d08 	.word	0x20001d08
 8002640:	58022000 	.word	0x58022000
 8002644:	58022400 	.word	0x58022400
 8002648:	080019f9 	.word	0x080019f9
 800264c:	08001cb9 	.word	0x08001cb9
 8002650:	20001dc8 	.word	0x20001dc8
 8002654:	52001000 	.word	0x52001000

08002658 <BSP_LCD_Init>:
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002658:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
{
 800265c:	b507      	push	{r0, r1, r2, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800265e:	2200      	movs	r2, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002666:	f7ff fea5 	bl	80023b4 <BSP_LCD_InitEx>
}
 800266a:	b003      	add	sp, #12
 800266c:	f85d fb04 	ldr.w	pc, [sp], #4

08002670 <BSP_LCD_DisplayOn>:
{
 8002670:	b510      	push	{r4, lr}
  if(Instance >= LCD_INSTANCES_NBR)
 8002672:	4604      	mov	r4, r0
 8002674:	b988      	cbnz	r0, 800269a <BSP_LCD_DisplayOn+0x2a>
    __HAL_LTDC_ENABLE(&hlcd_ltdc);
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <BSP_LCD_DisplayOn+0x30>)
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	480a      	ldr	r0, [pc, #40]	; (80026a4 <BSP_LCD_DisplayOn+0x34>)
    __HAL_LTDC_ENABLE(&hlcd_ltdc);
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	6993      	ldr	r3, [r2, #24]
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6193      	str	r3, [r2, #24]
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 8002686:	2201      	movs	r2, #1
 8002688:	f000 fede 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800268c:	4806      	ldr	r0, [pc, #24]	; (80026a8 <BSP_LCD_DisplayOn+0x38>)
 800268e:	2201      	movs	r2, #1
 8002690:	2140      	movs	r1, #64	; 0x40
 8002692:	f000 fed9 	bl	8003448 <HAL_GPIO_WritePin>
    ret = BSP_ERROR_NONE;
 8002696:	4620      	mov	r0, r4
}
 8002698:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800269a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800269e:	e7fb      	b.n	8002698 <BSP_LCD_DisplayOn+0x28>
 80026a0:	20001d08 	.word	0x20001d08
 80026a4:	58022800 	.word	0x58022800
 80026a8:	58020000 	.word	0x58020000

080026ac <MX_SDRAM_BANK2_Init>:

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80026ac:	2201      	movs	r2, #1
 80026ae:	4914      	ldr	r1, [pc, #80]	; (8002700 <MX_SDRAM_BANK2_Init+0x54>)
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 80026b0:	2302      	movs	r3, #2
{
 80026b2:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80026b4:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80026b8:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80026ba:	2104      	movs	r1, #4
 80026bc:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80026be:	2440      	movs	r4, #64	; 0x40
{
 80026c0:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80026c2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80026c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80026ca:	9307      	str	r3, [sp, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80026cc:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80026d6:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80026da:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80026de:	e9c0 4209 	strd	r4, r2, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80026e2:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 80026e4:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80026e8:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 80026ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80026ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80026f2:	f003 f8d5 	bl	80058a0 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
}
 80026f6:	3000      	adds	r0, #0
 80026f8:	bf18      	it	ne
 80026fa:	2001      	movne	r0, #1
 80026fc:	b008      	add	sp, #32
 80026fe:	bd10      	pop	{r4, pc}
 8002700:	52004140 	.word	0x52004140

08002704 <BSP_SDRAM_Init>:
{
 8002704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(Instance >= SDRAM_INSTANCES_NBR)
 8002708:	4605      	mov	r5, r0
{
 800270a:	b08e      	sub	sp, #56	; 0x38
  if(Instance >= SDRAM_INSTANCES_NBR)
 800270c:	2800      	cmp	r0, #0
 800270e:	f040 80e9 	bne.w	80028e4 <BSP_SDRAM_Init+0x1e0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002712:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <BSP_SDRAM_Init+0x1ec>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002714:	f04f 0803 	mov.w	r8, #3

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002718:	ac0e      	add	r4, sp, #56	; 0x38
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800271a:	4876      	ldr	r0, [pc, #472]	; (80028f4 <BSP_SDRAM_Init+0x1f0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800271c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002720:	4f75      	ldr	r7, [pc, #468]	; (80028f8 <BSP_SDRAM_Init+0x1f4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002726:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800272a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800272e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002732:	9201      	str	r2, [sp, #4]
 8002734:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8002736:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002742:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002746:	f002 0201 	and.w	r2, r2, #1
 800274a:	9202      	str	r2, [sp, #8]
 800274c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002752:	f042 0208 	orr.w	r2, r2, #8
 8002756:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800275a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800275e:	f002 0208 	and.w	r2, r2, #8
 8002762:	9203      	str	r2, [sp, #12]
 8002764:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800276a:	f042 0210 	orr.w	r2, r2, #16
 800276e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002772:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002776:	f002 0210 	and.w	r2, r2, #16
 800277a:	9204      	str	r2, [sp, #16]
 800277c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800277e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800278a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800278e:	f002 0220 	and.w	r2, r2, #32
 8002792:	9205      	str	r2, [sp, #20]
 8002794:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800279a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80027a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80027a6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80027aa:	9206      	str	r2, [sp, #24]
 80027ac:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80027b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80027ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80027be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80027c2:	9207      	str	r2, [sp, #28]
 80027c4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80027ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80027d2:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	9308      	str	r3, [sp, #32]
 80027de:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80027e6:	230c      	movs	r3, #12
 80027e8:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80027ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027f0:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80027f4:	4621      	mov	r1, r4
 80027f6:	f000 fc99 	bl	800312c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80027fa:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80027fe:	4621      	mov	r1, r4
 8002800:	483e      	ldr	r0, [pc, #248]	; (80028fc <BSP_SDRAM_Init+0x1f8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002802:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002804:	f000 fc92 	bl	800312c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002808:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800280c:	4621      	mov	r1, r4
 800280e:	483c      	ldr	r0, [pc, #240]	; (8002900 <BSP_SDRAM_Init+0x1fc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002810:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002812:	f000 fc8b 	bl	800312c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 8002816:	f248 133f 	movw	r3, #33087	; 0x813f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800281a:	4621      	mov	r1, r4
 800281c:	4839      	ldr	r0, [pc, #228]	; (8002904 <BSP_SDRAM_Init+0x200>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002820:	f000 fc84 	bl	800312c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002824:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002828:	4621      	mov	r1, r4
 800282a:	4837      	ldr	r0, [pc, #220]	; (8002908 <BSP_SDRAM_Init+0x204>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800282c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800282e:	f000 fc7d 	bl	800312c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002832:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002836:	4621      	mov	r1, r4
 8002838:	4834      	ldr	r0, [pc, #208]	; (800290c <BSP_SDRAM_Init+0x208>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800283a:	4c35      	ldr	r4, [pc, #212]	; (8002910 <BSP_SDRAM_Init+0x20c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800283c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800283e:	f000 fc75 	bl	800312c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002842:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002846:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800284a:	f240 2002 	movw	r0, #514	; 0x202
 800284e:	f640 0208 	movw	r2, #2056	; 0x808
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002852:	4626      	mov	r6, r4
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002854:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002858:	e9c4 131c 	strd	r1, r3, [r4, #112]	; 0x70
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800285c:	e9c4 0220 	strd	r0, r2, [r4, #128]	; 0x80
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002860:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002862:	2220      	movs	r2, #32
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002864:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8002868:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
  mdma_handle.Init.BufferTransferLength     = 128;
 800286c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <BSP_SDRAM_Init+0x210>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002876:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800287a:	f846 3f6c 	str.w	r3, [r6, #108]!

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800287e:	4630      	mov	r0, r6
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002880:	633e      	str	r6, [r7, #48]	; 0x30
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8002882:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8002886:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
  HAL_MDMA_DeInit(&mdma_handle);
 800288a:	f001 fde7 	bl	800445c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 800288e:	4630      	mov	r0, r6
 8002890:	f001 fd75 	bl	800437e <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8002894:	462a      	mov	r2, r5
 8002896:	210f      	movs	r1, #15
 8002898:	207a      	movs	r0, #122	; 0x7a
 800289a:	f000 fa17 	bl	8002ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800289e:	207a      	movs	r0, #122	; 0x7a
 80028a0:	f000 fa46 	bl	8002d30 <HAL_NVIC_EnableIRQ>
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 80028a4:	4638      	mov	r0, r7
 80028a6:	f7ff ff01 	bl	80026ac <MX_SDRAM_BANK2_Init>
 80028aa:	b9f0      	cbnz	r0, 80028ea <BSP_SDRAM_Init+0x1e6>
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80028ac:	2308      	movs	r3, #8
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 80028ae:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80028b2:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 80028b6:	e9c4 3836 	strd	r3, r8, [r4, #216]	; 0xd8
        pRegMode.RefreshRate     = REFRESH_COUNT;
 80028ba:	f240 6303 	movw	r3, #1539	; 0x603
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 80028be:	e9c4 3038 	strd	r3, r0, [r4, #224]	; 0xe0
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 80028c2:	2330      	movs	r3, #48	; 0x30
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 80028c4:	e9c4 303b 	strd	r3, r0, [r4, #236]	; 0xec
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80028c8:	f44f 7300 	mov.w	r3, #512	; 0x200
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80028cc:	4638      	mov	r0, r7
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 80028ce:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 80028d2:	f7fe f8b1 	bl	8000a38 <IS42S32800G_Init>
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 80028d6:	2800      	cmp	r0, #0
 80028d8:	bf18      	it	ne
 80028da:	f06f 0004 	mvnne.w	r0, #4
}
 80028de:	b00e      	add	sp, #56	; 0x38
 80028e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80028e4:	f06f 0001 	mvn.w	r0, #1
 80028e8:	e7f9      	b.n	80028de <BSP_SDRAM_Init+0x1da>
        ret = BSP_ERROR_NO_INIT;
 80028ea:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80028ee:	e7f6      	b.n	80028de <BSP_SDRAM_Init+0x1da>
 80028f0:	58024400 	.word	0x58024400
 80028f4:	58020c00 	.word	0x58020c00
 80028f8:	20001e30 	.word	0x20001e30
 80028fc:	58021000 	.word	0x58021000
 8002900:	58021400 	.word	0x58021400
 8002904:	58021800 	.word	0x58021800
 8002908:	58021c00 	.word	0x58021c00
 800290c:	58022000 	.word	0x58022000
 8002910:	20000c3c 	.word	0x20000c3c
 8002914:	52000040 	.word	0x52000040

08002918 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8002918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800291c:	460d      	mov	r5, r1
 800291e:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8002920:	2800      	cmp	r0, #0
 8002922:	f040 808a 	bne.w	8002a3a <BSP_TS_Init+0x122>
 8002926:	680b      	ldr	r3, [r1, #0]
 8002928:	1e5a      	subs	r2, r3, #1
 800292a:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800292e:	f080 8084 	bcs.w	8002a3a <BSP_TS_Init+0x122>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8002932:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8002934:	1e51      	subs	r1, r2, #1
 8002936:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800293a:	d27e      	bcs.n	8002a3a <BSP_TS_Init+0x122>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800293c:	4293      	cmp	r3, r2
 800293e:	bf28      	it	cs
 8002940:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8002942:	68ea      	ldr	r2, [r5, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d878      	bhi.n	8002a3a <BSP_TS_Init+0x122>
  EXC7200_IO_t              IOCtx;
  static EXC7200_Object_t   EXC7200Obj;
  uint32_t exc7200_id       = 0U;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 8002948:	2308      	movs	r3, #8
  IOCtx.DeInit      = BSP_I2C1_DeInit;
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 800294a:	4c3d      	ldr	r4, [pc, #244]	; (8002a40 <BSP_TS_Init+0x128>)
  IOCtx.Init        = BSP_I2C1_Init;
 800294c:	4e3d      	ldr	r6, [pc, #244]	; (8002a44 <BSP_TS_Init+0x12c>)
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 800294e:	4f3e      	ldr	r7, [pc, #248]	; (8002a48 <BSP_TS_Init+0x130>)
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002950:	eb0d 0103 	add.w	r1, sp, r3
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8002954:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8002a58 <BSP_TS_Init+0x140>
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002958:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8002a5c <BSP_TS_Init+0x144>
  IOCtx.GetTick     = BSP_GetTick;
 800295c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8002a60 <BSP_TS_Init+0x148>
  uint32_t exc7200_id       = 0U;
 8002960:	9001      	str	r0, [sp, #4]
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002962:	4620      	mov	r0, r4
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 8002964:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C1_Init;
 8002968:	9602      	str	r6, [sp, #8]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 800296a:	9703      	str	r7, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 800296c:	f8cd 8018 	str.w	r8, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002970:	f8cd 9014 	str.w	r9, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8002974:	f8cd a01c 	str.w	sl, [sp, #28]
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002978:	f7fd ffd6 	bl	8000928 <EXC7200_RegisterBusIO>
 800297c:	b1b0      	cbz	r0, 80029ac <BSP_TS_Init+0x94>
static int32_t TS3510_Probe(uint32_t Instance)
{
  int32_t ret              = BSP_ERROR_NONE;
  TS3510_IO_t              IOCtx;
  static TS3510_Object_t   TS3510Obj;
  uint32_t ts3510_id       = 0U;
 800297e:	2300      	movs	r3, #0
  IOCtx.DeInit      = BSP_I2C1_DeInit;
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002980:	a902      	add	r1, sp, #8
  IOCtx.GetTick     = BSP_GetTick;
 8002982:	f8cd a01c 	str.w	sl, [sp, #28]
  uint32_t ts3510_id       = 0U;
 8002986:	9301      	str	r3, [sp, #4]
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8002988:	2380      	movs	r3, #128	; 0x80
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 800298a:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 800298e:	4e2f      	ldr	r6, [pc, #188]	; (8002a4c <BSP_TS_Init+0x134>)
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8002990:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002994:	4630      	mov	r0, r6
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002996:	e9cd 9805 	strd	r9, r8, [sp, #20]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 800299a:	f7fe ff3f 	bl	800181c <TS3510_RegisterBusIO>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d034      	beq.n	8002a0c <BSP_TS_Init+0xf4>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80029a2:	f06f 0006 	mvn.w	r0, #6
}
 80029a6:	b008      	add	sp, #32
 80029a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if(EXC7200_ReadID(&EXC7200Obj, &exc7200_id) != EXC7200_OK)
 80029ac:	a901      	add	r1, sp, #4
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fd ff67 	bl	8000882 <EXC7200_ReadID>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d1e2      	bne.n	800297e <BSP_TS_Init+0x66>
  else if(exc7200_id != EXC7200_ID)
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 80029be:	d1de      	bne.n	800297e <BSP_TS_Init+0x66>
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <BSP_TS_Init+0x138>)
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 80029c2:	4620      	mov	r0, r4
    Ts_CompObj[Instance] = &EXC7200Obj;
 80029c4:	6524      	str	r4, [r4, #80]	; 0x50
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 80029c6:	6563      	str	r3, [r4, #84]	; 0x54
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4798      	blx	r3
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d1d6      	bne.n	800297e <BSP_TS_Init+0x66>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80029d0:	682b      	ldr	r3, [r5, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80029d2:	a902      	add	r1, sp, #8
 80029d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80029d6:	65a3      	str	r3, [r4, #88]	; 0x58
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80029d8:	686b      	ldr	r3, [r5, #4]
 80029da:	65e3      	str	r3, [r4, #92]	; 0x5c
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80029dc:	68ab      	ldr	r3, [r5, #8]
 80029de:	6623      	str	r3, [r4, #96]	; 0x60
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80029e0:	68eb      	ldr	r3, [r5, #12]
 80029e2:	6663      	str	r3, [r4, #100]	; 0x64
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80029e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4798      	blx	r3
 80029ea:	2800      	cmp	r0, #0
 80029ec:	db22      	blt.n	8002a34 <BSP_TS_Init+0x11c>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80029ee:	9b03      	ldr	r3, [sp, #12]
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80029f0:	2000      	movs	r0, #0
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80029f2:	682a      	ldr	r2, [r5, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80029f4:	66a3      	str	r3, [r4, #104]	; 0x68
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80029f6:	9b04      	ldr	r3, [sp, #16]
 80029f8:	66e3      	str	r3, [r4, #108]	; 0x6c
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80029fa:	68eb      	ldr	r3, [r5, #12]
 80029fc:	441a      	add	r2, r3
 80029fe:	3201      	adds	r2, #1
 8002a00:	6722      	str	r2, [r4, #112]	; 0x70
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8002a02:	686a      	ldr	r2, [r5, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	3301      	adds	r3, #1
 8002a08:	6763      	str	r3, [r4, #116]	; 0x74
 8002a0a:	e7cc      	b.n	80029a6 <BSP_TS_Init+0x8e>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(TS3510_ReadID(&TS3510Obj, &ts3510_id) != TS3510_OK)
 8002a0c:	a901      	add	r1, sp, #4
 8002a0e:	4630      	mov	r0, r6
 8002a10:	f7fe fe72 	bl	80016f8 <TS3510_ReadID>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d1c4      	bne.n	80029a2 <BSP_TS_Init+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ts3510_id != TS3510_ID)
 8002a18:	9a01      	ldr	r2, [sp, #4]
 8002a1a:	f243 5310 	movw	r3, #13584	; 0x3510
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d1bf      	bne.n	80029a2 <BSP_TS_Init+0x8a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &TS3510Obj;
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <BSP_TS_Init+0x13c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 8002a24:	4630      	mov	r0, r6
    Ts_CompObj[Instance] = &TS3510Obj;
 8002a26:	6526      	str	r6, [r4, #80]	; 0x50
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 8002a28:	6563      	str	r3, [r4, #84]	; 0x54
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4798      	blx	r3
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d0ce      	beq.n	80029d0 <BSP_TS_Init+0xb8>
 8002a32:	e7b6      	b.n	80029a2 <BSP_TS_Init+0x8a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a34:	f06f 0004 	mvn.w	r0, #4
 8002a38:	e7b5      	b.n	80029a6 <BSP_TS_Init+0x8e>
    ret = BSP_ERROR_WRONG_PARAM;
 8002a3a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002a3e:	e7b2      	b.n	80029a6 <BSP_TS_Init+0x8e>
 8002a40:	20000d34 	.word	0x20000d34
 8002a44:	080019f9 	.word	0x080019f9
 8002a48:	08001969 	.word	0x08001969
 8002a4c:	20000d5c 	.word	0x20000d5c
 8002a50:	20000000 	.word	0x20000000
 8002a54:	200000d0 	.word	0x200000d0
 8002a58:	08001cb9 	.word	0x08001cb9
 8002a5c:	08001c85 	.word	0x08001c85
 8002a60:	08001ced 	.word	0x08001ced

08002a64 <BSP_TS_GetState>:
{
 8002a64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002a68:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d14f      	bne.n	8002b0e <BSP_TS_GetState+0xaa>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8002a6e:	4c29      	ldr	r4, [pc, #164]	; (8002b14 <BSP_TS_GetState+0xb0>)
 8002a70:	a901      	add	r1, sp, #4
 8002a72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a74:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	4798      	blx	r3
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	db43      	blt.n	8002b08 <BSP_TS_GetState+0xa4>
    else if(state.TouchDetected != 0U)
 8002a80:	9801      	ldr	r0, [sp, #4]
 8002a82:	e9d4 c71c 	ldrd	ip, r7, [r4, #112]	; 0x70
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d03a      	beq.n	8002b00 <BSP_TS_GetState+0x9c>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8002a8a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002a8c:	f8d3 8068 	ldr.w	r8, [r3, #104]	; 0x68
 8002a90:	072a      	lsls	r2, r5, #28
      y_oriented = state.TouchY;
 8002a92:	e9dd e102 	ldrd	lr, r1, [sp, #8]
      x_oriented = state.TouchX;
 8002a96:	bf53      	iteet	pl
 8002a98:	4674      	movpl	r4, lr
        x_oriented = state.TouchY;
 8002a9a:	460c      	movmi	r4, r1
        y_oriented = state.TouchX;
 8002a9c:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 8002a9e:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8002aa0:	f015 0f02 	tst.w	r5, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8002aa4:	bf1c      	itt	ne
 8002aa6:	f108 34ff 	addne.w	r4, r8, #4294967295
 8002aaa:	eba4 040e 	subne.w	r4, r4, lr
 8002aae:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8002ab2:	076d      	lsls	r5, r5, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002ab4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8002ab6:	bf48      	it	mi
 8002ab8:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002abc:	436c      	muls	r4, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002abe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
      TS_State->TouchDetected = state.TouchDetected;
 8002ac0:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002ac2:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8002ac4:	6e58      	ldr	r0, [r3, #100]	; 0x64
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002ac6:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002aca:	fbb2 f2fe 	udiv	r2, r2, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8002ace:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002ad0:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002ad2:	60b2      	str	r2, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8002ad4:	bf8c      	ite	hi
 8002ad6:	eba4 050c 	subhi.w	r5, r4, ip
 8002ada:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8002ade:	42ba      	cmp	r2, r7
 8002ae0:	bf8c      	ite	hi
 8002ae2:	1bd1      	subhi	r1, r2, r7
 8002ae4:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8002ae6:	42a8      	cmp	r0, r5
 8002ae8:	d301      	bcc.n	8002aee <BSP_TS_GetState+0x8a>
 8002aea:	4288      	cmp	r0, r1
 8002aec:	d205      	bcs.n	8002afa <BSP_TS_GetState+0x96>
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8002aee:	e9c3 421c 	strd	r4, r2, [r3, #112]	; 0x70
  int32_t ret = BSP_ERROR_NONE;
 8002af2:	2000      	movs	r0, #0
}
 8002af4:	b004      	add	sp, #16
 8002af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8002afa:	e9c6 c701 	strd	ip, r7, [r6, #4]
 8002afe:	e7f8      	b.n	8002af2 <BSP_TS_GetState+0x8e>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8002b00:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8002b04:	60b7      	str	r7, [r6, #8]
 8002b06:	e7f5      	b.n	8002af4 <BSP_TS_GetState+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b08:	f06f 0004 	mvn.w	r0, #4
 8002b0c:	e7f2      	b.n	8002af4 <BSP_TS_GetState+0x90>
    ret = BSP_ERROR_WRONG_PARAM;
 8002b0e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8002b12:	e7ef      	b.n	8002af4 <BSP_TS_GetState+0x90>
 8002b14:	20000d34 	.word	0x20000d34

08002b18 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b18:	491a      	ldr	r1, [pc, #104]	; (8002b84 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b1a:	481b      	ldr	r0, [pc, #108]	; (8002b88 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002b24:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <SystemInit+0x74>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8002b38:	681c      	ldr	r4, [r3, #0]
 8002b3a:	4020      	ands	r0, r4
 8002b3c:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b40:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b42:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002b5a:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <SystemInit+0x78>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6a:	d202      	bcs.n	8002b72 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <SystemInit+0x7c>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <SystemInit+0x80>)
 8002b74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b78:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002b7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b7e:	608b      	str	r3, [r1, #8]
#endif  


}
 8002b80:	bd10      	pop	{r4, pc}
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00
 8002b88:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	5c001000 	.word	0x5c001000
 8002b94:	51008108 	.word	0x51008108
 8002b98:	52004000 	.word	0x52004000

08002b9c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ba2:	4e0f      	ldr	r6, [pc, #60]	; (8002be0 <HAL_InitTick+0x40>)
{
 8002ba4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8002ba6:	7830      	ldrb	r0, [r6, #0]
 8002ba8:	b908      	cbnz	r0, 8002bae <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <HAL_InitTick+0x44>)
 8002bb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8002bb8:	6810      	ldr	r0, [r2, #0]
 8002bba:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bbe:	f000 f8c5 	bl	8002d4c <HAL_SYSTICK_Config>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc8:	2d0f      	cmp	r5, #15
 8002bca:	d8ee      	bhi.n	8002baa <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f000 f87a 	bl	8002ccc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	6075      	str	r5, [r6, #4]
 8002bda:	4620      	mov	r0, r4
 8002bdc:	e7e6      	b.n	8002bac <HAL_InitTick+0xc>
 8002bde:	bf00      	nop
 8002be0:	20000108 	.word	0x20000108
 8002be4:	20000100 	.word	0x20000100

08002be8 <HAL_Init>:
{
 8002be8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bea:	2003      	movs	r0, #3
 8002bec:	f000 f85c 	bl	8002ca8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf0:	f001 ff10 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8002bf4:	490f      	ldr	r1, [pc, #60]	; (8002c34 <HAL_Init+0x4c>)
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_Init+0x50>)
 8002bf8:	698b      	ldr	r3, [r1, #24]
 8002bfa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c06:	698b      	ldr	r3, [r1, #24]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	5cd3      	ldrb	r3, [r2, r3]
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_Init+0x54>)
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa20 f303 	lsr.w	r3, r0, r3
 8002c18:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_Init+0x58>)
 8002c1c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f7ff ffbe 	bl	8002ba0 <HAL_InitTick>
 8002c24:	4604      	mov	r4, r0
 8002c26:	b918      	cbnz	r0, 8002c30 <HAL_Init+0x48>
  HAL_MspInit();
 8002c28:	f7ff ffb8 	bl	8002b9c <HAL_MspInit>
}
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c30:	2401      	movs	r4, #1
 8002c32:	e7fb      	b.n	8002c2c <HAL_Init+0x44>
 8002c34:	58024400 	.word	0x58024400
 8002c38:	08006d50 	.word	0x08006d50
 8002c3c:	20000104 	.word	0x20000104
 8002c40:	20000100 	.word	0x20000100

08002c44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002c44:	4a03      	ldr	r2, [pc, #12]	; (8002c54 <HAL_IncTick+0x10>)
 8002c46:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_IncTick+0x14>)
 8002c48:	6811      	ldr	r1, [r2, #0]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	440b      	add	r3, r1
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20001e64 	.word	0x20001e64
 8002c58:	20000108 	.word	0x20000108

08002c5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c5c:	4b01      	ldr	r3, [pc, #4]	; (8002c64 <HAL_GetTick+0x8>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20001e64 	.word	0x20001e64

08002c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff fff6 	bl	8002c5c <HAL_GetTick>
 8002c70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002c74:	bf1e      	ittt	ne
 8002c76:	4b04      	ldrne	r3, [pc, #16]	; (8002c88 <HAL_Delay+0x20>)
 8002c78:	781b      	ldrbne	r3, [r3, #0]
 8002c7a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c7c:	f7ff ffee 	bl	8002c5c <HAL_GetTick>
 8002c80:	1b40      	subs	r0, r0, r5
 8002c82:	42a0      	cmp	r0, r4
 8002c84:	d3fa      	bcc.n	8002c7c <HAL_Delay+0x14>
  {
  }
}
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	20000108 	.word	0x20000108

08002c8c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002c8c:	4b01      	ldr	r3, [pc, #4]	; (8002c94 <HAL_GetREVID+0x8>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
}
 8002c90:	0c00      	lsrs	r0, r0, #16
 8002c92:	4770      	bx	lr
 8002c94:	5c001000 	.word	0x5c001000

08002c98 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8002c98:	4a02      	ldr	r2, [pc, #8]	; (8002ca4 <HAL_EnableCompensationCell+0xc>)
 8002c9a:	6a13      	ldr	r3, [r2, #32]
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6213      	str	r3, [r2, #32]
}
 8002ca2:	4770      	bx	lr
 8002ca4:	58000400 	.word	0x58000400

08002ca8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002caa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002cc2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002cc4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cce:	b570      	push	{r4, r5, r6, lr}
 8002cd0:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd2:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cda:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	2d04      	cmp	r5, #4
 8002ce2:	bf28      	it	cs
 8002ce4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cec:	bf8c      	ite	hi
 8002cee:	3c03      	subhi	r4, #3
 8002cf0:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	ea21 0303 	bic.w	r3, r1, r3
 8002cf8:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	fa06 f404 	lsl.w	r4, r6, r4
 8002d00:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	ea43 0304 	orr.w	r3, r3, r4
 8002d08:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002d0c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	db06      	blt.n	8002d1e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d14:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d18:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	f000 000f 	and.w	r0, r0, #15
 8002d22:	4a02      	ldr	r2, [pc, #8]	; (8002d2c <HAL_NVIC_SetPriority+0x60>)
 8002d24:	5413      	strb	r3, [r2, r0]
 8002d26:	e7f9      	b.n	8002d1c <HAL_NVIC_SetPriority+0x50>
 8002d28:	e000ed00 	.word	0xe000ed00
 8002d2c:	e000ed14 	.word	0xe000ed14

08002d30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d30:	2800      	cmp	r0, #0
 8002d32:	db08      	blt.n	8002d46 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d34:	0942      	lsrs	r2, r0, #5
 8002d36:	2301      	movs	r3, #1
 8002d38:	f000 001f 	and.w	r0, r0, #31
 8002d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8002d40:	4b01      	ldr	r3, [pc, #4]	; (8002d48 <HAL_NVIC_EnableIRQ+0x18>)
 8002d42:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	3801      	subs	r0, #1
 8002d4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002d52:	d20a      	bcs.n	8002d6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	21f0      	movs	r1, #240	; 0xf0
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d5c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d62:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d64:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d78:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_MPU_Disable+0x18>)
 8002d7e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d86:	2200      	movs	r2, #0
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_MPU_Disable+0x1c>)
 8002d8a:	605a      	str	r2, [r3, #4]
}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	e000ed90 	.word	0xe000ed90

08002d98 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d9a:	f040 0001 	orr.w	r0, r0, #1
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_MPU_Enable+0x20>)
 8002da0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002da2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002daa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00
 8002db8:	e000ed90 	.word	0xe000ed90

08002dbc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002dbc:	7843      	ldrb	r3, [r0, #1]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_MPU_ConfigRegion+0x4c>)
{
 8002dc0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002dc2:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002dc4:	7801      	ldrb	r1, [r0, #0]
 8002dc6:	b1d9      	cbz	r1, 8002e00 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002dc8:	6843      	ldr	r3, [r0, #4]
 8002dca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dcc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dce:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dd0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dd2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dd6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dd8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dda:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dde:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002de0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002de4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002de6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dea:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002df0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002df2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002df6:	7a01      	ldrb	r1, [r0, #8]
 8002df8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dfc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002dfe:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8002e00:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8002e02:	6111      	str	r1, [r2, #16]
}
 8002e04:	e7fb      	b.n	8002dfe <HAL_MPU_ConfigRegion+0x42>
 8002e06:	bf00      	nop
 8002e08:	e000ed90 	.word	0xe000ed90

08002e0c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002e0c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002e0e:	6804      	ldr	r4, [r0, #0]
 8002e10:	9d04      	ldr	r5, [sp, #16]
 8002e12:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002e14:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002e18:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002e1c:	4333      	orrs	r3, r6
 8002e1e:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e20:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e22:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e28:	d130      	bne.n	8002e8c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e2a:	6886      	ldr	r6, [r0, #8]
 8002e2c:	b11e      	cbz	r6, 8002e36 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e2e:	2e01      	cmp	r6, #1
 8002e30:	d103      	bne.n	8002e3a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002e36:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e3a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e3c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e40:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e44:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e46:	d107      	bne.n	8002e58 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002e48:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002e4a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e4c:	02c9      	lsls	r1, r1, #11
 8002e4e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002e52:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002e56:	e7ee      	b.n	8002e36 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e58:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e5a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e5e:	d10a      	bne.n	8002e76 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002e60:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002e62:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002e64:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002e66:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002e68:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002e6c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002e70:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002e74:	e7df      	b.n	8002e36 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002e76:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002e78:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e7a:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8002e7c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e7e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002e82:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002e86:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002e8a:	e7d4      	b.n	8002e36 <DMA2D_SetConfig+0x2a>
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e90:	d101      	bne.n	8002e96 <DMA2D_SetConfig+0x8a>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 8002e92:	6161      	str	r1, [r4, #20]
 8002e94:	e7d0      	b.n	8002e38 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e96:	60e1      	str	r1, [r4, #12]
}
 8002e98:	e7ce      	b.n	8002e38 <DMA2D_SetConfig+0x2c>

08002e9a <HAL_DMA2D_MspInit>:
}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_DMA2D_Init>:
{
 8002e9c:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d036      	beq.n	8002f12 <HAL_DMA2D_Init+0x76>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ea4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8002ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eac:	b91b      	cbnz	r3, 8002eb6 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8002eae:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8002eb2:	f7ff fff2 	bl	8002e9a <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002eb6:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002eb8:	69e0      	ldr	r0, [r4, #28]
 8002eba:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ebc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002ec4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8002ecc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed6:	68a2      	ldr	r2, [r4, #8]
 8002ed8:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8002edc:	4302      	orrs	r2, r0
 8002ede:	f021 0101 	bic.w	r1, r1, #1
 8002ee2:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ee4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eea:	0c12      	lsrs	r2, r2, #16
 8002eec:	0412      	lsls	r2, r2, #16
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8002ef8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002efc:	0552      	lsls	r2, r2, #21
 8002efe:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f02:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002f04:	430a      	orrs	r2, r1
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f08:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f0a:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f0c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8002f10:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
 8002f14:	e7fc      	b.n	8002f10 <HAL_DMA2D_Init+0x74>

08002f16 <HAL_DMA2D_Start>:
{
 8002f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002f18:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 8002f1c:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 8002f1e:	2c01      	cmp	r4, #1
 8002f20:	f04f 0402 	mov.w	r4, #2
 8002f24:	d00f      	beq.n	8002f46 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f26:	f880 4061 	strb.w	r4, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8002f2a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002f2c:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002f2e:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002f32:	9400      	str	r4, [sp, #0]
 8002f34:	f7ff ff6a 	bl	8002e0c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f38:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8002f3a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	4333      	orrs	r3, r6
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	b002      	add	sp, #8
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002f46:	4620      	mov	r0, r4
 8002f48:	e7fb      	b.n	8002f42 <HAL_DMA2D_Start+0x2c>

08002f4a <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8002f4a:	2300      	movs	r3, #0
{
 8002f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002f4e:	9301      	str	r3, [sp, #4]
{
 8002f50:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f52:	6803      	ldr	r3, [r0, #0]
{
 8002f54:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	07db      	lsls	r3, r3, #31
 8002f5a:	d417      	bmi.n	8002f8c <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f62:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002f64:	069e      	lsls	r6, r3, #26
 8002f66:	d506      	bpl.n	8002f76 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002f68:	f7ff fe78 	bl	8002c5c <HAL_GetTick>
 8002f6c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	06d2      	lsls	r2, r2, #27
 8002f74:	d543      	bpl.n	8002ffe <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8002f7a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f7c:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f7e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8002f80:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f84:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002f8c:	f7ff fe66 	bl	8002c5c <HAL_GetTick>
 8002f90:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	0792      	lsls	r2, r2, #30
 8002f98:	d4e0      	bmi.n	8002f5c <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002f9e:	9a01      	ldr	r2, [sp, #4]
 8002fa0:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002fa4:	d017      	beq.n	8002fd6 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fa6:	9a01      	ldr	r2, [sp, #4]
 8002fa8:	0695      	lsls	r5, r2, #26
 8002faa:	d503      	bpl.n	8002fb4 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002fac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fae:	f042 0202 	orr.w	r2, r2, #2
 8002fb2:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002fb4:	9a01      	ldr	r2, [sp, #4]
 8002fb6:	07d0      	lsls	r0, r2, #31
 8002fb8:	d503      	bpl.n	8002fc2 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fc2:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fc4:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002fc6:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002fc8:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002fca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8002fd4:	e7d8      	b.n	8002f88 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8002fd6:	1c69      	adds	r1, r5, #1
 8002fd8:	d0dc      	beq.n	8002f94 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002fda:	f7ff fe3f 	bl	8002c5c <HAL_GetTick>
 8002fde:	1b80      	subs	r0, r0, r6
 8002fe0:	42a8      	cmp	r0, r5
 8002fe2:	d801      	bhi.n	8002fe8 <HAL_DMA2D_PollForTransfer+0x9e>
 8002fe4:	2d00      	cmp	r5, #0
 8002fe6:	d1d4      	bne.n	8002f92 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002fea:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fec:	f043 0320 	orr.w	r3, r3, #32
 8002ff0:	6663      	str	r3, [r4, #100]	; 0x64
          __HAL_UNLOCK(hdma2d);
 8002ff2:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002ff4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
          __HAL_UNLOCK(hdma2d);
 8002ff8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          return HAL_TIMEOUT;
 8002ffc:	e7c4      	b.n	8002f88 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003002:	9a01      	ldr	r2, [sp, #4]
 8003004:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003008:	d016      	beq.n	8003038 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800300a:	9a01      	ldr	r2, [sp, #4]
 800300c:	0716      	lsls	r6, r2, #28
 800300e:	d503      	bpl.n	8003018 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003010:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003012:	f042 0204 	orr.w	r2, r2, #4
 8003016:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003018:	9a01      	ldr	r2, [sp, #4]
 800301a:	0695      	lsls	r5, r2, #26
 800301c:	d503      	bpl.n	8003026 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800301e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003020:	f042 0202 	orr.w	r2, r2, #2
 8003024:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003026:	9a01      	ldr	r2, [sp, #4]
 8003028:	07d0      	lsls	r0, r2, #31
 800302a:	d503      	bpl.n	8003034 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800302c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003034:	2229      	movs	r2, #41	; 0x29
 8003036:	e7c5      	b.n	8002fc4 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8003038:	1c69      	adds	r1, r5, #1
 800303a:	d099      	beq.n	8002f70 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800303c:	f7ff fe0e 	bl	8002c5c <HAL_GetTick>
 8003040:	1b80      	subs	r0, r0, r6
 8003042:	42a8      	cmp	r0, r5
 8003044:	d8d0      	bhi.n	8002fe8 <HAL_DMA2D_PollForTransfer+0x9e>
 8003046:	2d00      	cmp	r5, #0
 8003048:	d191      	bne.n	8002f6e <HAL_DMA2D_PollForTransfer+0x24>
 800304a:	e7cd      	b.n	8002fe8 <HAL_DMA2D_PollForTransfer+0x9e>

0800304c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800304c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8003050:	2b01      	cmp	r3, #1
 8003052:	f04f 0302 	mov.w	r3, #2
{
 8003056:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8003058:	d03d      	beq.n	80030d6 <HAL_DMA2D_ConfigLayer+0x8a>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800305a:	241c      	movs	r4, #28
  __HAL_LOCK(hdma2d);
 800305c:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800305e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003062:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 8003066:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800306a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800306c:	e9d4 650b 	ldrd	r6, r5, [r4, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003070:	0513      	lsls	r3, r2, #20
 8003072:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003074:	f1a6 0709 	sub.w	r7, r6, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003078:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800307c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800307e:	2f01      	cmp	r7, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003080:	ea43 0306 	orr.w	r3, r3, r6
 8003084:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003088:	6802      	ldr	r2, [r0, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800308a:	d80f      	bhi.n	80030ac <HAL_DMA2D_ConfigLayer+0x60>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800308c:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 8003090:	4f1d      	ldr	r7, [pc, #116]	; (8003108 <HAL_DMA2D_ConfigLayer+0xbc>)
 8003092:	431e      	orrs	r6, r3
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003094:	bb49      	cbnz	r1, 80030ea <HAL_DMA2D_ConfigLayer+0x9e>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003096:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003098:	403b      	ands	r3, r7
 800309a:	4333      	orrs	r3, r6
 800309c:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800309e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030a0:	6193      	str	r3, [r2, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80030a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030a8:	6293      	str	r3, [r2, #40]	; 0x28
 80030aa:	e00e      	b.n	80030ca <HAL_DMA2D_ConfigLayer+0x7e>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80030ac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80030b0:	b199      	cbz	r1, 80030da <HAL_DMA2D_ConfigLayer+0x8e>
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80030b2:	2e0b      	cmp	r6, #11
 80030b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80030b6:	d122      	bne.n	80030fe <HAL_DMA2D_ConfigLayer+0xb2>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80030b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030ba:	69d6      	ldr	r6, [r2, #28]
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80030bc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030c0:	4912      	ldr	r1, [pc, #72]	; (800310c <HAL_DMA2D_ConfigLayer+0xc0>)
 80030c2:	4031      	ands	r1, r6
 80030c4:	430b      	orrs	r3, r1
 80030c6:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030c8:	6115      	str	r5, [r2, #16]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 80030d0:	2300      	movs	r3, #0
 80030d2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  __HAL_LOCK(hdma2d);
 80030d6:	4618      	mov	r0, r3
}
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80030da:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80030dc:	490a      	ldr	r1, [pc, #40]	; (8003108 <HAL_DMA2D_ConfigLayer+0xbc>)
 80030de:	4021      	ands	r1, r4
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80030e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030e6:	6193      	str	r3, [r2, #24]
 80030e8:	e7ef      	b.n	80030ca <HAL_DMA2D_ConfigLayer+0x7e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030ea:	69d3      	ldr	r3, [r2, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80030ec:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030f0:	403b      	ands	r3, r7
 80030f2:	4333      	orrs	r3, r6
 80030f4:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030f8:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80030fa:	6215      	str	r5, [r2, #32]
 80030fc:	e7e5      	b.n	80030ca <HAL_DMA2D_ConfigLayer+0x7e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030fe:	69d4      	ldr	r4, [r2, #28]
 8003100:	4901      	ldr	r1, [pc, #4]	; (8003108 <HAL_DMA2D_ConfigLayer+0xbc>)
 8003102:	4021      	ands	r1, r4
 8003104:	e7de      	b.n	80030c4 <HAL_DMA2D_ConfigLayer+0x78>
 8003106:	bf00      	nop
 8003108:	00ccfff0 	.word	0x00ccfff0
 800310c:	00c0fff0 	.word	0x00c0fff0

08003110 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check null pointer */
  if (hexti == NULL)
 8003110:	b118      	cbz	r0, 800311a <HAL_EXTI_RegisterCallback+0xa>
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 8003112:	b911      	cbnz	r1, 800311a <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003114:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	4608      	mov	r0, r1
      break;
 8003118:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800311a:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800311c:	4770      	bx	lr

0800311e <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800311e:	b110      	cbz	r0, 8003126 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003120:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8003122:	2000      	movs	r0, #0
 8003124:	4770      	bx	lr
    return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
  }
}
 8003128:	4770      	bx	lr
	...

0800312c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003130:	680b      	ldr	r3, [r1, #0]
{
 8003132:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80032f8 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003138:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800313c:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800313e:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8003140:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80032fc <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003144:	9a01      	ldr	r2, [sp, #4]
 8003146:	40da      	lsrs	r2, r3
 8003148:	d102      	bne.n	8003150 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 800314a:	b005      	add	sp, #20
 800314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003150:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8003152:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003154:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8003156:	ea17 0502 	ands.w	r5, r7, r2
 800315a:	f000 80b6 	beq.w	80032ca <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800315e:	684a      	ldr	r2, [r1, #4]
 8003160:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003164:	2403      	movs	r4, #3
 8003166:	f022 0a10 	bic.w	sl, r2, #16
 800316a:	fa04 f40e 	lsl.w	r4, r4, lr
 800316e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8003172:	43e4      	mvns	r4, r4
 8003174:	2e01      	cmp	r6, #1
 8003176:	d810      	bhi.n	800319a <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8003178:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800317a:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800317e:	68ce      	ldr	r6, [r1, #12]
 8003180:	fa06 f60e 	lsl.w	r6, r6, lr
 8003184:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8003188:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800318a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800318c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003190:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8003194:	409e      	lsls	r6, r3
 8003196:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8003198:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800319a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319c:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a0:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a2:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a6:	fa06 f60e 	lsl.w	r6, r6, lr
 80031aa:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 80031ae:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b0:	d114      	bne.n	80031dc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 80031b2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031b6:	f003 0b07 	and.w	fp, r3, #7
 80031ba:	270f      	movs	r7, #15
 80031bc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80031c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80031c4:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031c8:	fa07 f70b 	lsl.w	r7, r7, fp
 80031cc:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031d0:	690e      	ldr	r6, [r1, #16]
 80031d2:	fa06 f60b 	lsl.w	r6, r6, fp
 80031d6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80031d8:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 80031dc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031de:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e0:	f002 0603 	and.w	r6, r2, #3
 80031e4:	fa06 fe0e 	lsl.w	lr, r6, lr
 80031e8:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 80031ec:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ee:	00d4      	lsls	r4, r2, #3
 80031f0:	d56b      	bpl.n	80032ca <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80031f6:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031fa:	f003 0703 	and.w	r7, r3, #3
 80031fe:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	f044 0402 	orr.w	r4, r4, #2
 8003206:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800320a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320c:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8003210:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003214:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8003218:	f004 0402 	and.w	r4, r4, #2
 800321c:	9403      	str	r4, [sp, #12]
 800321e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003220:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8003224:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003228:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800322c:	4c31      	ldr	r4, [pc, #196]	; (80032f4 <HAL_GPIO_Init+0x1c8>)
 800322e:	42a0      	cmp	r0, r4
 8003230:	d04d      	beq.n	80032ce <HAL_GPIO_Init+0x1a2>
 8003232:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003236:	42a0      	cmp	r0, r4
 8003238:	d04b      	beq.n	80032d2 <HAL_GPIO_Init+0x1a6>
 800323a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800323e:	42a0      	cmp	r0, r4
 8003240:	d049      	beq.n	80032d6 <HAL_GPIO_Init+0x1aa>
 8003242:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003246:	42a0      	cmp	r0, r4
 8003248:	d047      	beq.n	80032da <HAL_GPIO_Init+0x1ae>
 800324a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800324e:	42a0      	cmp	r0, r4
 8003250:	d045      	beq.n	80032de <HAL_GPIO_Init+0x1b2>
 8003252:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003256:	42a0      	cmp	r0, r4
 8003258:	d043      	beq.n	80032e2 <HAL_GPIO_Init+0x1b6>
 800325a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800325e:	42a0      	cmp	r0, r4
 8003260:	d041      	beq.n	80032e6 <HAL_GPIO_Init+0x1ba>
 8003262:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003266:	42a0      	cmp	r0, r4
 8003268:	d03f      	beq.n	80032ea <HAL_GPIO_Init+0x1be>
 800326a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800326e:	42a0      	cmp	r0, r4
 8003270:	d03d      	beq.n	80032ee <HAL_GPIO_Init+0x1c2>
 8003272:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003276:	42a0      	cmp	r0, r4
 8003278:	bf14      	ite	ne
 800327a:	240a      	movne	r4, #10
 800327c:	2409      	moveq	r4, #9
 800327e:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003280:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003282:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003286:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8003288:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 800328c:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8003290:	bf54      	ite	pl
 8003292:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003294:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003296:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8003298:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 800329c:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 80032a0:	bf54      	ite	pl
 80032a2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80032a4:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a6:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 80032a8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80032ac:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 80032b0:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 80032b4:	bf54      	ite	pl
 80032b6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80032b8:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ba:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80032bc:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 80032be:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 80032c0:	bf54      	ite	pl
 80032c2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80032c4:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 80032c6:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 80032ca:	3301      	adds	r3, #1
 80032cc:	e73a      	b.n	8003144 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032ce:	2400      	movs	r4, #0
 80032d0:	e7d5      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032d2:	2401      	movs	r4, #1
 80032d4:	e7d3      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032d6:	2402      	movs	r4, #2
 80032d8:	e7d1      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032da:	2403      	movs	r4, #3
 80032dc:	e7cf      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032de:	2404      	movs	r4, #4
 80032e0:	e7cd      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032e2:	2405      	movs	r4, #5
 80032e4:	e7cb      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032e6:	2406      	movs	r4, #6
 80032e8:	e7c9      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032ea:	2407      	movs	r4, #7
 80032ec:	e7c7      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032ee:	2408      	movs	r4, #8
 80032f0:	e7c5      	b.n	800327e <HAL_GPIO_Init+0x152>
 80032f2:	bf00      	nop
 80032f4:	58020000 	.word	0x58020000
 80032f8:	58024400 	.word	0x58024400
 80032fc:	58000080 	.word	0x58000080

08003300 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003304:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8003306:	4e4b      	ldr	r6, [pc, #300]	; (8003434 <HAL_GPIO_DeInit+0x134>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003308:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800343c <HAL_GPIO_DeInit+0x13c>
 800330c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003440 <HAL_GPIO_DeInit+0x140>
 8003310:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003444 <HAL_GPIO_DeInit+0x144>
  while ((GPIO_Pin >> position) != 0x00U)
 8003314:	fa31 f302 	lsrs.w	r3, r1, r2
 8003318:	d101      	bne.n	800331e <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800331e:	2301      	movs	r3, #1
 8003320:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 8003324:	ea1e 0401 	ands.w	r4, lr, r1
 8003328:	d070      	beq.n	800340c <HAL_GPIO_DeInit+0x10c>
 800332a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800332e:	f002 0c03 	and.w	ip, r2, #3
 8003332:	270f      	movs	r7, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003334:	4b40      	ldr	r3, [pc, #256]	; (8003438 <HAL_GPIO_DeInit+0x138>)
 8003336:	f105 45b0 	add.w	r5, r5, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800333a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800333e:	4298      	cmp	r0, r3
 8003340:	f505 6580 	add.w	r5, r5, #1024	; 0x400
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003344:	fa07 f70c 	lsl.w	r7, r7, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003348:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800334c:	ea07 0808 	and.w	r8, r7, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003350:	d05e      	beq.n	8003410 <HAL_GPIO_DeInit+0x110>
 8003352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003356:	4298      	cmp	r0, r3
 8003358:	d05c      	beq.n	8003414 <HAL_GPIO_DeInit+0x114>
 800335a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335e:	4298      	cmp	r0, r3
 8003360:	d05a      	beq.n	8003418 <HAL_GPIO_DeInit+0x118>
 8003362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003366:	4298      	cmp	r0, r3
 8003368:	d058      	beq.n	800341c <HAL_GPIO_DeInit+0x11c>
 800336a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800336e:	4298      	cmp	r0, r3
 8003370:	d056      	beq.n	8003420 <HAL_GPIO_DeInit+0x120>
 8003372:	4548      	cmp	r0, r9
 8003374:	d056      	beq.n	8003424 <HAL_GPIO_DeInit+0x124>
 8003376:	4550      	cmp	r0, sl
 8003378:	d056      	beq.n	8003428 <HAL_GPIO_DeInit+0x128>
 800337a:	4558      	cmp	r0, fp
 800337c:	d056      	beq.n	800342c <HAL_GPIO_DeInit+0x12c>
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	4298      	cmp	r0, r3
 8003384:	d054      	beq.n	8003430 <HAL_GPIO_DeInit+0x130>
 8003386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800338a:	4298      	cmp	r0, r3
 800338c:	bf0c      	ite	eq
 800338e:	2309      	moveq	r3, #9
 8003390:	230a      	movne	r3, #10
 8003392:	fa03 f30c 	lsl.w	r3, r3, ip
 8003396:	4543      	cmp	r3, r8
 8003398:	d117      	bne.n	80033ca <HAL_GPIO_DeInit+0xca>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800339a:	6833      	ldr	r3, [r6, #0]
 800339c:	43e4      	mvns	r4, r4
 800339e:	4023      	ands	r3, r4
 80033a0:	6033      	str	r3, [r6, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80033a2:	6873      	ldr	r3, [r6, #4]
 80033a4:	4023      	ands	r3, r4
 80033a6:	6073      	str	r3, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	f8d3 c000 	ldr.w	ip, [r3]
 80033b0:	ea04 0c0c 	and.w	ip, r4, ip
 80033b4:	f8c3 c000 	str.w	ip, [r3]
        EXTI->FTSR1 &= ~(iocurrent);
 80033b8:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80033bc:	ea04 040c 	and.w	r4, r4, ip
 80033c0:	605c      	str	r4, [r3, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033c2:	68ab      	ldr	r3, [r5, #8]
 80033c4:	ea23 0707 	bic.w	r7, r3, r7
 80033c8:	60af      	str	r7, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80033ca:	2503      	movs	r5, #3
 80033cc:	0053      	lsls	r3, r2, #1
 80033ce:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80033d0:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80033d4:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80033d8:	270f      	movs	r7, #15
 80033da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80033de:	431c      	orrs	r4, r3
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033e0:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80033e2:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80033e6:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80033e8:	fa22 f405 	lsr.w	r4, r2, r5
 80033ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80033f0:	6a25      	ldr	r5, [r4, #32]
 80033f2:	ea25 0707 	bic.w	r7, r5, r7
 80033f6:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f8:	68c4      	ldr	r4, [r0, #12]
 80033fa:	401c      	ands	r4, r3
 80033fc:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033fe:	6844      	ldr	r4, [r0, #4]
 8003400:	ea24 040e 	bic.w	r4, r4, lr
 8003404:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003406:	6884      	ldr	r4, [r0, #8]
 8003408:	4023      	ands	r3, r4
 800340a:	6083      	str	r3, [r0, #8]
    position++;
 800340c:	3201      	adds	r2, #1
 800340e:	e781      	b.n	8003314 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003410:	2300      	movs	r3, #0
 8003412:	e7be      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003414:	2301      	movs	r3, #1
 8003416:	e7bc      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003418:	2302      	movs	r3, #2
 800341a:	e7ba      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 800341c:	2303      	movs	r3, #3
 800341e:	e7b8      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003420:	2304      	movs	r3, #4
 8003422:	e7b6      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003424:	2305      	movs	r3, #5
 8003426:	e7b4      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003428:	2306      	movs	r3, #6
 800342a:	e7b2      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 800342c:	2307      	movs	r3, #7
 800342e:	e7b0      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003430:	2308      	movs	r3, #8
 8003432:	e7ae      	b.n	8003392 <HAL_GPIO_DeInit+0x92>
 8003434:	58000080 	.word	0x58000080
 8003438:	58020000 	.word	0x58020000
 800343c:	58021400 	.word	0x58021400
 8003440:	58021800 	.word	0x58021800
 8003444:	58021c00 	.word	0x58021c00

08003448 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003448:	b10a      	cbz	r2, 800344e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800344a:	6181      	str	r1, [r0, #24]
  }
}
 800344c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800344e:	0409      	lsls	r1, r1, #16
 8003450:	e7fb      	b.n	800344a <HAL_GPIO_WritePin+0x2>
	...

08003454 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003458:	6806      	ldr	r6, [r0, #0]
{
 800345a:	b085      	sub	sp, #20
 800345c:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800345e:	4630      	mov	r0, r6
 8003460:	f002 fb3c 	bl	8005adc <USB_GetMode>
 8003464:	2801      	cmp	r0, #1
 8003466:	f040 80e0 	bne.w	800362a <HAL_HCD_IRQHandler+0x1d6>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800346a:	6828      	ldr	r0, [r5, #0]
 800346c:	f002 fb32 	bl	8005ad4 <USB_ReadInterrupts>
 8003470:	2800      	cmp	r0, #0
 8003472:	f000 80da 	beq.w	800362a <HAL_HCD_IRQHandler+0x1d6>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003476:	6828      	ldr	r0, [r5, #0]
 8003478:	f002 fb2c 	bl	8005ad4 <USB_ReadInterrupts>
 800347c:	0284      	lsls	r4, r0, #10
 800347e:	d503      	bpl.n	8003488 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003486:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003488:	6828      	ldr	r0, [r5, #0]
 800348a:	f002 fb23 	bl	8005ad4 <USB_ReadInterrupts>
 800348e:	02c0      	lsls	r0, r0, #11
 8003490:	d503      	bpl.n	800349a <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003498:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800349a:	6828      	ldr	r0, [r5, #0]
 800349c:	f002 fb1a 	bl	8005ad4 <USB_ReadInterrupts>
 80034a0:	0141      	lsls	r1, r0, #5
 80034a2:	d503      	bpl.n	80034ac <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80034ac:	6828      	ldr	r0, [r5, #0]
 80034ae:	f002 fb11 	bl	8005ad4 <USB_ReadInterrupts>
 80034b2:	0782      	lsls	r2, r0, #30
 80034b4:	d502      	bpl.n	80034bc <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034bc:	6828      	ldr	r0, [r5, #0]
 80034be:	f002 fb09 	bl	8005ad4 <USB_ReadInterrupts>
 80034c2:	0083      	lsls	r3, r0, #2
 80034c4:	d50e      	bpl.n	80034e4 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034c6:	682b      	ldr	r3, [r5, #0]
 80034c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034ce:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80034d2:	07df      	lsls	r7, r3, #31
 80034d4:	d406      	bmi.n	80034e4 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7fd f980 	bl	80007dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034dc:	2101      	movs	r1, #1
 80034de:	6828      	ldr	r0, [r5, #0]
 80034e0:	f002 fb00 	bl	8005ae4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034e4:	6828      	ldr	r0, [r5, #0]
 80034e6:	f002 faf5 	bl	8005ad4 <USB_ReadInterrupts>
 80034ea:	01c4      	lsls	r4, r0, #7
 80034ec:	d53c      	bpl.n	8003568 <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ee:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034f0:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80034f4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80034f6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80034fa:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003502:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	0798      	lsls	r0, r3, #30
 8003508:	d509      	bpl.n	800351e <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800350a:	9b02      	ldr	r3, [sp, #8]
 800350c:	07d9      	lsls	r1, r3, #31
 800350e:	d502      	bpl.n	8003516 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003510:	4628      	mov	r0, r5
 8003512:	f7fd f95f 	bl	80007d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800351e:	9b02      	ldr	r3, [sp, #8]
 8003520:	071a      	lsls	r2, r3, #28
 8003522:	d517      	bpl.n	8003554 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800352c:	9b02      	ldr	r3, [sp, #8]
 800352e:	075b      	lsls	r3, r3, #29
 8003530:	f140 8086 	bpl.w	8003640 <HAL_HCD_IRQHandler+0x1ec>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003534:	69a9      	ldr	r1, [r5, #24]
 8003536:	2902      	cmp	r1, #2
 8003538:	d17a      	bne.n	8003630 <HAL_HCD_IRQHandler+0x1dc>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800353a:	9b02      	ldr	r3, [sp, #8]
 800353c:	6828      	ldr	r0, [r5, #0]
 800353e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003546:	bf18      	it	ne
 8003548:	2101      	movne	r1, #1
 800354a:	f002 facb 	bl	8005ae4 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800354e:	4628      	mov	r0, r5
 8003550:	f7fd f948 	bl	80007e4 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003554:	9b02      	ldr	r3, [sp, #8]
 8003556:	069f      	lsls	r7, r3, #26
 8003558:	d503      	bpl.n	8003562 <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003562:	9b03      	ldr	r3, [sp, #12]
 8003564:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003568:	6828      	ldr	r0, [r5, #0]
 800356a:	f002 fab3 	bl	8005ad4 <USB_ReadInterrupts>
 800356e:	0704      	lsls	r4, r0, #28
 8003570:	d505      	bpl.n	800357e <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
 8003572:	4628      	mov	r0, r5
 8003574:	f7fd f92a 	bl	80007cc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	2208      	movs	r2, #8
 800357c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800357e:	6828      	ldr	r0, [r5, #0]
 8003580:	f002 faa8 	bl	8005ad4 <USB_ReadInterrupts>
 8003584:	0180      	lsls	r0, r0, #6
 8003586:	d512      	bpl.n	80035ae <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003588:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800358a:	f04f 0900 	mov.w	r9, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800358e:	f002 fac6 	bl	8005b1e <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003592:	2728      	movs	r7, #40	; 0x28
 8003594:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003598:	f04f 0802 	mov.w	r8, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035a0:	68ab      	ldr	r3, [r5, #8]
 80035a2:	6828      	ldr	r0, [r5, #0]
 80035a4:	454b      	cmp	r3, r9
 80035a6:	d84f      	bhi.n	8003648 <HAL_HCD_IRQHandler+0x1f4>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ac:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80035ae:	6828      	ldr	r0, [r5, #0]
 80035b0:	f002 fa90 	bl	8005ad4 <USB_ReadInterrupts>
 80035b4:	06c3      	lsls	r3, r0, #27
 80035b6:	d538      	bpl.n	800362a <HAL_HCD_IRQHandler+0x1d6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035b8:	682c      	ldr	r4, [r5, #0]
 80035ba:	69a3      	ldr	r3, [r4, #24]
 80035bc:	f023 0310 	bic.w	r3, r3, #16
 80035c0:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 80035c2:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035c4:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 80035c8:	2a02      	cmp	r2, #2
 80035ca:	d129      	bne.n	8003620 <HAL_HCD_IRQHandler+0x1cc>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035cc:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035d0:	f1b8 0f00 	cmp.w	r8, #0
 80035d4:	d024      	beq.n	8003620 <HAL_HCD_IRQHandler+0x1cc>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80035d6:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035da:	2728      	movs	r7, #40	; 0x28
 80035dc:	fb07 5706 	mla	r7, r7, r6, r5
 80035e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035e2:	b1e9      	cbz	r1, 8003620 <HAL_HCD_IRQHandler+0x1cc>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80035e4:	4642      	mov	r2, r8
 80035e6:	4620      	mov	r0, r4
 80035e8:	f002 fa66 	bl	8005ab8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80035ee:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035f2:	4443      	add	r3, r8
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	4443      	add	r3, r8
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80035fc:	0173      	lsls	r3, r6, #5
 80035fe:	18e2      	adds	r2, r4, r3
 8003600:	6911      	ldr	r1, [r2, #16]
 8003602:	4ab1      	ldr	r2, [pc, #708]	; (80038c8 <HAL_HCD_IRQHandler+0x474>)
 8003604:	400a      	ands	r2, r1
 8003606:	b15a      	cbz	r2, 8003620 <HAL_HCD_IRQHandler+0x1cc>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003608:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800360e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003612:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003614:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003620:	682a      	ldr	r2, [r5, #0]
 8003622:	6993      	ldr	r3, [r2, #24]
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	6193      	str	r3, [r2, #24]
}
 800362a:	b005      	add	sp, #20
 800362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003630:	68eb      	ldr	r3, [r5, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d18b      	bne.n	800354e <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
 8003636:	f64e 2260 	movw	r2, #60000	; 0xea60
 800363a:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 800363e:	e786      	b.n	800354e <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003640:	4628      	mov	r0, r5
 8003642:	f7fd f8d3 	bl	80007ec <HAL_HCD_PortDisabled_Callback>
 8003646:	e785      	b.n	8003554 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003648:	f009 030f 	and.w	r3, r9, #15
 800364c:	9a00      	ldr	r2, [sp, #0]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	07d9      	lsls	r1, r3, #31
 8003654:	f140 8095 	bpl.w	8003782 <HAL_HCD_IRQHandler+0x32e>
 8003658:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800365c:	9a01      	ldr	r2, [sp, #4]
 800365e:	fa5f f689 	uxtb.w	r6, r9
 8003662:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8003666:	58d1      	ldr	r1, [r2, r3]
 8003668:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 800366c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003670:	eb0b 040a 	add.w	r4, fp, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003674:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003676:	f000 811d 	beq.w	80038b4 <HAL_HCD_IRQHandler+0x460>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800367a:	074a      	lsls	r2, r1, #29
 800367c:	d513      	bpl.n	80036a6 <HAL_HCD_IRQHandler+0x252>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800367e:	2104      	movs	r1, #4
 8003680:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003682:	68e1      	ldr	r1, [r4, #12]
 8003684:	f041 0102 	orr.w	r1, r1, #2
 8003688:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800368a:	68a1      	ldr	r1, [r4, #8]
 800368c:	0588      	lsls	r0, r1, #22
 800368e:	d54a      	bpl.n	8003726 <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003690:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003692:	4631      	mov	r1, r6
 8003694:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369c:	f002 fa44 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a4:	e0e6      	b.n	8003874 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036a6:	68a1      	ldr	r1, [r4, #8]
 80036a8:	05cb      	lsls	r3, r1, #23
 80036aa:	d510      	bpl.n	80036ce <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80036ac:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 80036b0:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80036b4:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80036b6:	fb07 5106 	mla	r1, r7, r6, r5
 80036ba:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036be:	68e1      	ldr	r1, [r4, #12]
 80036c0:	f041 0102 	orr.w	r1, r1, #2
 80036c4:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c6:	4631      	mov	r1, r6
 80036c8:	f002 fa2e 	bl	8005b28 <USB_HC_Halt>
 80036cc:	e7dd      	b.n	800368a <HAL_HCD_IRQHandler+0x236>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036ce:	68a1      	ldr	r1, [r4, #8]
 80036d0:	0689      	lsls	r1, r1, #26
 80036d2:	d502      	bpl.n	80036da <HAL_HCD_IRQHandler+0x286>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036d4:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036d6:	60a1      	str	r1, [r4, #8]
 80036d8:	e7d7      	b.n	800368a <HAL_HCD_IRQHandler+0x236>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036da:	68a1      	ldr	r1, [r4, #8]
 80036dc:	070a      	lsls	r2, r1, #28
 80036de:	d50e      	bpl.n	80036fe <HAL_HCD_IRQHandler+0x2aa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e0:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036e2:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e6:	f041 0102 	orr.w	r1, r1, #2
 80036ea:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036ec:	fb07 5106 	mla	r1, r7, r6, r5
 80036f0:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036f4:	2110      	movs	r1, #16
 80036f6:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036f8:	2108      	movs	r1, #8
 80036fa:	60a1      	str	r1, [r4, #8]
 80036fc:	e7e3      	b.n	80036c6 <HAL_HCD_IRQHandler+0x272>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036fe:	68a1      	ldr	r1, [r4, #8]
 8003700:	054b      	lsls	r3, r1, #21
 8003702:	d5c2      	bpl.n	800368a <HAL_HCD_IRQHandler+0x236>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003704:	68e1      	ldr	r1, [r4, #12]
 8003706:	f041 0102 	orr.w	r1, r1, #2
 800370a:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	4631      	mov	r1, r6
 800370e:	f002 fa0b 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003712:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003714:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003716:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003718:	fb07 5106 	mla	r1, r7, r6, r5
 800371c:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003724:	e7d7      	b.n	80036d6 <HAL_HCD_IRQHandler+0x282>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003726:	68a1      	ldr	r1, [r4, #8]
 8003728:	07c9      	lsls	r1, r1, #31
 800372a:	d548      	bpl.n	80037be <HAL_HCD_IRQHandler+0x36a>
    if (hhcd->Init.dma_enable != 0U)
 800372c:	6929      	ldr	r1, [r5, #16]
 800372e:	b149      	cbz	r1, 8003744 <HAL_HCD_IRQHandler+0x2f0>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003730:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003732:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003736:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800373a:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 800373e:	1a09      	subs	r1, r1, r0
 8003740:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8003744:	fb07 5106 	mla	r1, r7, r6, r5
 8003748:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800374a:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 800374c:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003750:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003752:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003754:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8003758:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800375c:	d114      	bne.n	8003788 <HAL_HCD_IRQHandler+0x334>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800375e:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003760:	4631      	mov	r1, r6
 8003762:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376a:	f002 f9dd 	bl	8005b28 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800376e:	2310      	movs	r3, #16
 8003770:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003772:	fb07 5606 	mla	r6, r7, r6, r5
 8003776:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800377a:	f083 0301 	eor.w	r3, r3, #1
 800377e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003782:	f109 0901 	add.w	r9, r9, #1
 8003786:	e70b      	b.n	80035a0 <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003788:	2a03      	cmp	r2, #3
 800378a:	d10d      	bne.n	80037a8 <HAL_HCD_IRQHandler+0x354>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800378c:	f85b 000a 	ldr.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003790:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003792:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8003796:	f84b 000a 	str.w	r0, [fp, sl]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800379a:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800379e:	4631      	mov	r1, r6
 80037a0:	4628      	mov	r0, r5
 80037a2:	f7fd f827 	bl	80007f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037a6:	e7e4      	b.n	8003772 <HAL_HCD_IRQHandler+0x31e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80037a8:	2a01      	cmp	r2, #1
 80037aa:	d1e2      	bne.n	8003772 <HAL_HCD_IRQHandler+0x31e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80037ac:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037b0:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80037b4:	f083 0301 	eor.w	r3, r3, #1
 80037b8:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 80037bc:	e7ef      	b.n	800379e <HAL_HCD_IRQHandler+0x34a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037be:	68a1      	ldr	r1, [r4, #8]
 80037c0:	078a      	lsls	r2, r1, #30
 80037c2:	d542      	bpl.n	800384a <HAL_HCD_IRQHandler+0x3f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80037c4:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037c6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80037ca:	f021 0102 	bic.w	r1, r1, #2
 80037ce:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037d0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80037d4:	2901      	cmp	r1, #1
 80037d6:	d102      	bne.n	80037de <HAL_HCD_IRQHandler+0x38a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037d8:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 80037dc:	e02a      	b.n	8003834 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037de:	2905      	cmp	r1, #5
 80037e0:	d0fa      	beq.n	80037d8 <HAL_HCD_IRQHandler+0x384>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037e2:	2906      	cmp	r1, #6
 80037e4:	d001      	beq.n	80037ea <HAL_HCD_IRQHandler+0x396>
 80037e6:	2908      	cmp	r1, #8
 80037e8:	d10f      	bne.n	800380a <HAL_HCD_IRQHandler+0x3b6>
      hhcd->hc[ch_num].ErrCnt++;
 80037ea:	fb07 5106 	mla	r1, r7, r6, r5
 80037ee:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80037f0:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80037f2:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80037f4:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037f6:	bf89      	itett	hi
 80037f8:	2000      	movhi	r0, #0
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037fa:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037fe:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003800:	2004      	movhi	r0, #4
 8003802:	bf88      	it	hi
 8003804:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
 8003808:	e003      	b.n	8003812 <HAL_HCD_IRQHandler+0x3be>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800380a:	2903      	cmp	r1, #3
 800380c:	d10a      	bne.n	8003824 <HAL_HCD_IRQHandler+0x3d0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800380e:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003812:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003816:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800381a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381e:	f84b 100a 	str.w	r1, [fp, sl]
 8003822:	e007      	b.n	8003834 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003824:	2907      	cmp	r1, #7
 8003826:	d105      	bne.n	8003834 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].ErrCnt++;
 8003828:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800382a:	3301      	adds	r3, #1
 800382c:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800382e:	2304      	movs	r3, #4
 8003830:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003834:	fb07 5306 	mla	r3, r7, r6, r5
 8003838:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800383a:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800383e:	4628      	mov	r0, r5
 8003840:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003844:	f7fc ffd6 	bl	80007f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003848:	e79b      	b.n	8003782 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800384a:	68a1      	ldr	r1, [r4, #8]
 800384c:	6828      	ldr	r0, [r5, #0]
 800384e:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8003852:	d011      	beq.n	8003878 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003854:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003856:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385a:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003862:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003864:	3301      	adds	r3, #1
 8003866:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003868:	2306      	movs	r3, #6
 800386a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800386e:	f002 f95b 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	e784      	b.n	8003782 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003878:	68a3      	ldr	r3, [r4, #8]
 800387a:	06db      	lsls	r3, r3, #27
 800387c:	d581      	bpl.n	8003782 <HAL_HCD_IRQHandler+0x32e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800387e:	fb07 5206 	mla	r2, r7, r6, r5
 8003882:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8003886:	2b03      	cmp	r3, #3
 8003888:	d109      	bne.n	800389e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800388a:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800388c:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388e:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003896:	f002 f947 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800389a:	2310      	movs	r3, #16
 800389c:	e7ea      	b.n	8003874 <HAL_HCD_IRQHandler+0x420>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800389e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80038a2:	d1fa      	bne.n	800389a <HAL_HCD_IRQHandler+0x446>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038a4:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80038a6:	692b      	ldr	r3, [r5, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f6      	bne.n	800389a <HAL_HCD_IRQHandler+0x446>
        hhcd->hc[ch_num].state = HC_NAK;
 80038ac:	2303      	movs	r3, #3
 80038ae:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80038b2:	e7eb      	b.n	800388c <HAL_HCD_IRQHandler+0x438>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038b4:	f011 0c04 	ands.w	ip, r1, #4
 80038b8:	d008      	beq.n	80038cc <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038ba:	2304      	movs	r3, #4
 80038bc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	60e3      	str	r3, [r4, #12]
 80038c6:	e75c      	b.n	8003782 <HAL_HCD_IRQHandler+0x32e>
 80038c8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038cc:	68a1      	ldr	r1, [r4, #8]
 80038ce:	f011 0120 	ands.w	r1, r1, #32
 80038d2:	d014      	beq.n	80038fe <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038d4:	2320      	movs	r3, #32
 80038d6:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80038d8:	fb07 5306 	mla	r3, r7, r6, r5
 80038dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80038e0:	2a01      	cmp	r2, #1
 80038e2:	f47f af4e 	bne.w	8003782 <HAL_HCD_IRQHandler+0x32e>
      hhcd->hc[ch_num].do_ping = 0U;
 80038e6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ea:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038ec:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f0:	68e3      	ldr	r3, [r4, #12]
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f8:	f002 f916 	bl	8005b28 <USB_HC_Halt>
 80038fc:	e741      	b.n	8003782 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038fe:	68a3      	ldr	r3, [r4, #8]
 8003900:	065a      	lsls	r2, r3, #25
 8003902:	d511      	bpl.n	8003928 <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
 8003904:	fb07 5306 	mla	r3, r7, r6, r5
 8003908:	2204      	movs	r2, #4
 800390a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 800390e:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003910:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003912:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003918:	68e3      	ldr	r3, [r4, #12]
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003920:	f002 f902 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003924:	2340      	movs	r3, #64	; 0x40
 8003926:	e7a5      	b.n	8003874 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003928:	68a1      	ldr	r1, [r4, #8]
 800392a:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 800392e:	d005      	beq.n	800393c <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003930:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003932:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	60e3      	str	r3, [r4, #12]
 800393a:	e6af      	b.n	800369c <HAL_HCD_IRQHandler+0x248>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800393c:	68a3      	ldr	r3, [r4, #8]
 800393e:	07db      	lsls	r3, r3, #31
 8003940:	d50f      	bpl.n	8003962 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003942:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003944:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003948:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800394c:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003950:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003952:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003954:	f002 f8e8 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003958:	2201      	movs	r2, #1
 800395a:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800395c:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8003960:	e70f      	b.n	8003782 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003962:	68a1      	ldr	r1, [r4, #8]
 8003964:	0709      	lsls	r1, r1, #28
 8003966:	d50e      	bpl.n	8003986 <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003968:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
 800396c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003970:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800397a:	f002 f8d5 	bl	8005b28 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800397e:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003980:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8003984:	e6fd      	b.n	8003782 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003986:	68a1      	ldr	r1, [r4, #8]
 8003988:	06ca      	lsls	r2, r1, #27
 800398a:	d514      	bpl.n	80039b6 <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800398c:	fb07 5306 	mla	r3, r7, r6, r5
 8003990:	2200      	movs	r2, #0
 8003992:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8003994:	2203      	movs	r2, #3
 8003996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800399a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800399e:	2a00      	cmp	r2, #0
 80039a0:	f47f af74 	bne.w	800388c <HAL_HCD_IRQHandler+0x438>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80039a4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	f47f af6f 	bne.w	800388c <HAL_HCD_IRQHandler+0x438>
        hhcd->hc[ch_num].do_ping = 1U;
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039b4:	e76a      	b.n	800388c <HAL_HCD_IRQHandler+0x438>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039b6:	68a1      	ldr	r1, [r4, #8]
 80039b8:	060b      	lsls	r3, r1, #24
 80039ba:	d50c      	bpl.n	80039d6 <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039bc:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039be:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039c0:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ca:	f002 f8ad 	bl	8005b28 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039ce:	2306      	movs	r3, #6
 80039d0:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 80039d4:	e74d      	b.n	8003872 <HAL_HCD_IRQHandler+0x41e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039d6:	68a1      	ldr	r1, [r4, #8]
 80039d8:	0549      	lsls	r1, r1, #21
 80039da:	d50f      	bpl.n	80039fc <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039dc:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039de:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039e0:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ea:	f002 f89d 	bl	8005b28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ee:	2310      	movs	r3, #16
 80039f0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039f8:	2308      	movs	r3, #8
 80039fa:	e7c1      	b.n	8003980 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039fc:	68a1      	ldr	r1, [r4, #8]
 80039fe:	078a      	lsls	r2, r1, #30
 8003a00:	f57f aebf 	bpl.w	8003782 <HAL_HCD_IRQHandler+0x32e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a04:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a06:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a0a:	f021 0102 	bic.w	r1, r1, #2
 8003a0e:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a10:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8003a14:	2901      	cmp	r1, #1
 8003a16:	d10e      	bne.n	8003a36 <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a18:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a1c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a20:	3b02      	subs	r3, #2
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	f63f af06 	bhi.w	8003834 <HAL_HCD_IRQHandler+0x3e0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a28:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8003a34:	e6fe      	b.n	8003834 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a36:	2903      	cmp	r1, #3
 8003a38:	d102      	bne.n	8003a40 <HAL_HCD_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a3a:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 8003a3e:	e6f9      	b.n	8003834 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a40:	2904      	cmp	r1, #4
 8003a42:	d0fa      	beq.n	8003a3a <HAL_HCD_IRQHandler+0x5e6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a44:	2905      	cmp	r1, #5
 8003a46:	f43f aec7 	beq.w	80037d8 <HAL_HCD_IRQHandler+0x384>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a4a:	2906      	cmp	r1, #6
 8003a4c:	f43f aecd 	beq.w	80037ea <HAL_HCD_IRQHandler+0x396>
 8003a50:	2908      	cmp	r1, #8
 8003a52:	f47f aeef 	bne.w	8003834 <HAL_HCD_IRQHandler+0x3e0>
 8003a56:	e6c8      	b.n	80037ea <HAL_HCD_IRQHandler+0x396>

08003a58 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8003a58:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003a5c:	2b01      	cmp	r3, #1
{
 8003a5e:	b510      	push	{r4, lr}
 8003a60:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8003a62:	d009      	beq.n	8003a78 <HAL_HCD_Stop+0x20>
 8003a64:	2301      	movs	r3, #1
 8003a66:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	f002 f8ae 	bl	8005bcc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a70:	2000      	movs	r0, #0
 8003a72:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8003a76:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003a78:	2002      	movs	r0, #2
 8003a7a:	e7fc      	b.n	8003a76 <HAL_HCD_Stop+0x1e>

08003a7c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a7c:	6803      	ldr	r3, [r0, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	0791      	lsls	r1, r2, #30
 8003a82:	d501      	bpl.n	8003a88 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a84:	2200      	movs	r2, #0
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	07d2      	lsls	r2, r2, #31
 8003a8c:	d403      	bmi.n	8003a96 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	619a      	str	r2, [r3, #24]
  }
}
 8003a96:	4770      	bx	lr

08003a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003a98:	b530      	push	{r4, r5, lr}
 8003a9a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003a9c:	6804      	ldr	r4, [r0, #0]
 8003a9e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8003aa2:	6860      	ldr	r0, [r4, #4]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <I2C_TransferConfig+0x24>)
 8003aae:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8003ab2:	ea20 0003 	bic.w	r0, r0, r3
 8003ab6:	4302      	orrs	r2, r0
 8003ab8:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003aba:	bd30      	pop	{r4, r5, pc}
 8003abc:	03ff63ff 	.word	0x03ff63ff

08003ac0 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac0:	6803      	ldr	r3, [r0, #0]
{
 8003ac2:	b570      	push	{r4, r5, r6, lr}
 8003ac4:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac6:	6998      	ldr	r0, [r3, #24]
{
 8003ac8:	460d      	mov	r5, r1
 8003aca:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003acc:	f010 0010 	ands.w	r0, r0, #16
 8003ad0:	d116      	bne.n	8003b00 <I2C_IsAcknowledgeFailed+0x40>
}
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003ad4:	1c69      	adds	r1, r5, #1
 8003ad6:	d014      	beq.n	8003b02 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad8:	f7ff f8c0 	bl	8002c5c <HAL_GetTick>
 8003adc:	1b80      	subs	r0, r0, r6
 8003ade:	42a8      	cmp	r0, r5
 8003ae0:	d800      	bhi.n	8003ae4 <I2C_IsAcknowledgeFailed+0x24>
 8003ae2:	b96d      	cbnz	r5, 8003b00 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	2320      	movs	r3, #32
 8003aee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003afa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003afe:	e7e8      	b.n	8003ad2 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	6999      	ldr	r1, [r3, #24]
 8003b04:	068a      	lsls	r2, r1, #26
 8003b06:	d5e5      	bpl.n	8003ad4 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0a:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8003b0c:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b10:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003b12:	f7ff ffb3 	bl	8003a7c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	6853      	ldr	r3, [r2, #4]
 8003b1a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003b1e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003b22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8003b38:	e7db      	b.n	8003af2 <I2C_IsAcknowledgeFailed+0x32>

08003b3a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003b3a:	b570      	push	{r4, r5, r6, lr}
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	460d      	mov	r5, r1
 8003b40:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	069b      	lsls	r3, r3, #26
 8003b48:	d501      	bpl.n	8003b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003b4a:	2000      	movs	r0, #0
}
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4e:	4632      	mov	r2, r6
 8003b50:	4629      	mov	r1, r5
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff ffb4 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003b58:	b990      	cbnz	r0, 8003b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7ff f87f 	bl	8002c5c <HAL_GetTick>
 8003b5e:	1b80      	subs	r0, r0, r6
 8003b60:	42a8      	cmp	r0, r5
 8003b62:	d801      	bhi.n	8003b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003b64:	2d00      	cmp	r5, #0
 8003b66:	d1ec      	bne.n	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b6a:	f043 0320 	orr.w	r3, r3, #32
 8003b6e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	2320      	movs	r3, #32
 8003b72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003b7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
 8003b82:	e7e3      	b.n	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08003b84 <I2C_WaitOnFlagUntilTimeout>:
{
 8003b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b88:	9f06      	ldr	r7, [sp, #24]
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4688      	mov	r8, r1
 8003b8e:	4616      	mov	r6, r2
 8003b90:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	6993      	ldr	r3, [r2, #24]
 8003b96:	ea38 0303 	bics.w	r3, r8, r3
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	42b3      	cmp	r3, r6
 8003ba2:	d001      	beq.n	8003ba8 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	e015      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	1c6b      	adds	r3, r5, #1
 8003baa:	d0f3      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bac:	f7ff f856 	bl	8002c5c <HAL_GetTick>
 8003bb0:	1bc0      	subs	r0, r0, r7
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	d801      	bhi.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x36>
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	d1eb      	bne.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003bbc:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bbe:	f043 0320 	orr.w	r3, r3, #32
 8003bc2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003bd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4604      	mov	r4, r0
 8003bdc:	460d      	mov	r5, r1
 8003bde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	079b      	lsls	r3, r3, #30
 8003be6:	d501      	bpl.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003be8:	2000      	movs	r0, #0
}
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bec:	4632      	mov	r2, r6
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ff65 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003bf6:	b9a0      	cbnz	r0, 8003c22 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003bf8:	1c6a      	adds	r2, r5, #1
 8003bfa:	d0f1      	beq.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfc:	f7ff f82e 	bl	8002c5c <HAL_GetTick>
 8003c00:	1b80      	subs	r0, r0, r6
 8003c02:	42a8      	cmp	r0, r5
 8003c04:	d801      	bhi.n	8003c0a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	d1ea      	bne.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c0c:	f043 0320 	orr.w	r3, r3, #32
 8003c10:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	2320      	movs	r3, #32
 8003c14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003c22:	2001      	movs	r0, #1
 8003c24:	e7e1      	b.n	8003bea <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

08003c28 <I2C_RequestMemoryWrite>:
{
 8003c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c2a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <I2C_RequestMemoryWrite+0x60>)
{
 8003c2e:	4605      	mov	r5, r0
 8003c30:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c32:	9300      	str	r3, [sp, #0]
{
 8003c34:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c3a:	b2fa      	uxtb	r2, r7
 8003c3c:	f7ff ff2c 	bl	8003a98 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c40:	4632      	mov	r2, r6
 8003c42:	9908      	ldr	r1, [sp, #32]
 8003c44:	4628      	mov	r0, r5
 8003c46:	f7ff ffc7 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4a:	b110      	cbz	r0, 8003c52 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8003c4c:	2001      	movs	r0, #1
}
 8003c4e:	b003      	add	sp, #12
 8003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c52:	2f01      	cmp	r7, #1
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	d10c      	bne.n	8003c72 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c58:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c60:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c62:	9b08      	ldr	r3, [sp, #32]
 8003c64:	9600      	str	r6, [sp, #0]
 8003c66:	f7ff ff8d 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003c6a:	3000      	adds	r0, #0
 8003c6c:	bf18      	it	ne
 8003c6e:	2001      	movne	r0, #1
 8003c70:	e7ed      	b.n	8003c4e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c72:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c74:	9908      	ldr	r1, [sp, #32]
 8003c76:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7a:	4632      	mov	r2, r6
 8003c7c:	f7ff ffac 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d1e3      	bne.n	8003c4c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	e7e7      	b.n	8003c58 <I2C_RequestMemoryWrite+0x30>
 8003c88:	80002000 	.word	0x80002000

08003c8c <I2C_RequestMemoryRead>:
{
 8003c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c8e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <I2C_RequestMemoryRead+0x60>)
{
 8003c92:	4605      	mov	r5, r0
 8003c94:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c96:	9300      	str	r3, [sp, #0]
{
 8003c98:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	b2fa      	uxtb	r2, r7
 8003c9e:	f7ff fefb 	bl	8003a98 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	9908      	ldr	r1, [sp, #32]
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7ff ff96 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cac:	b110      	cbz	r0, 8003cb4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
}
 8003cb0:	b003      	add	sp, #12
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cb4:	2f01      	cmp	r7, #1
 8003cb6:	682b      	ldr	r3, [r5, #0]
 8003cb8:	d10c      	bne.n	8003cd4 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cba:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2140      	movs	r1, #64	; 0x40
 8003cc0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc4:	9b08      	ldr	r3, [sp, #32]
 8003cc6:	9600      	str	r6, [sp, #0]
 8003cc8:	f7ff ff5c 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003ccc:	3000      	adds	r0, #0
 8003cce:	bf18      	it	ne
 8003cd0:	2001      	movne	r0, #1
 8003cd2:	e7ed      	b.n	8003cb0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd4:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	9908      	ldr	r1, [sp, #32]
 8003cd8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cdc:	4632      	mov	r2, r6
 8003cde:	f7ff ff7b 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1e3      	bne.n	8003cae <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce6:	682b      	ldr	r3, [r5, #0]
 8003ce8:	e7e7      	b.n	8003cba <I2C_RequestMemoryRead+0x2e>
 8003cea:	bf00      	nop
 8003cec:	80002000 	.word	0x80002000

08003cf0 <HAL_I2C_MspInit>:
}
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_I2C_Init>:
{
 8003cf2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d04a      	beq.n	8003d90 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d02:	b91b      	cbnz	r3, 8003d0c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003d04:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003d08:	f7ff fff2 	bl	8003cf0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0c:	2324      	movs	r3, #36	; 0x24
 8003d0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d1c:	6862      	ldr	r2, [r4, #4]
 8003d1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d22:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d30:	2901      	cmp	r1, #1
 8003d32:	d124      	bne.n	8003d7e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d38:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d3a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d3e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d46:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d4e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d50:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	69a1      	ldr	r1, [r4, #24]
 8003d58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d5c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d5e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d76:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003d7c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d82:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d84:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d86:	d1d8      	bne.n	8003d3a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e7d4      	b.n	8003d3a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003d90:	2001      	movs	r0, #1
 8003d92:	e7f3      	b.n	8003d7c <HAL_I2C_Init+0x8a>

08003d94 <HAL_I2C_MspDeInit>:
 8003d94:	4770      	bx	lr

08003d96 <HAL_I2C_DeInit>:
{
 8003d96:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003d98:	4604      	mov	r4, r0
 8003d9a:	b198      	cbz	r0, 8003dc4 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003d9c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9e:	2324      	movs	r3, #36	; 0x24
 8003da0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003dac:	f7ff fff2 	bl	8003d94 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	2000      	movs	r0, #0
 8003db2:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8003db4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003db8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dbc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003dc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	e7fc      	b.n	8003dc2 <HAL_I2C_DeInit+0x2c>

08003dc8 <HAL_I2C_Mem_Write>:
{
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd6:	2b20      	cmp	r3, #32
{
 8003dd8:	460f      	mov	r7, r1
 8003dda:	9203      	str	r2, [sp, #12]
 8003ddc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003de0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	f040 80a2 	bne.w	8003f2c <HAL_I2C_Mem_Write+0x164>
    if ((pData == NULL) || (Size == 0U))
 8003de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dea:	b113      	cbz	r3, 8003df2 <HAL_I2C_Mem_Write+0x2a>
 8003dec:	f1ba 0f00 	cmp.w	sl, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003df6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
}
 8003dfa:	b005      	add	sp, #20
 8003dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003e00:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f000 8091 	beq.w	8003f2c <HAL_I2C_Mem_Write+0x164>
 8003e0a:	2501      	movs	r5, #1
 8003e0c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003e10:	f7fe ff24 	bl	8002c5c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e14:	2319      	movs	r3, #25
 8003e16:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003e18:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e1a:	462a      	mov	r2, r5
 8003e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff feaf 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4681      	mov	r9, r0
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d1e5      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e2c:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8003e2e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e30:	9a03      	ldr	r2, [sp, #12]
 8003e32:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e38:	2340      	movs	r3, #64	; 0x40
 8003e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e42:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003e44:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e46:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8003e48:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4c:	e9cd 8600 	strd	r8, r6, [sp]
 8003e50:	f7ff feea 	bl	8003c28 <I2C_RequestMemoryWrite>
 8003e54:	b110      	cbz	r0, 8003e5c <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8003e56:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003e5a:	e7cd      	b.n	8003df8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e5e:	2bff      	cmp	r3, #255	; 0xff
 8003e60:	d954      	bls.n	8003f0c <HAL_I2C_Mem_Write+0x144>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e62:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e68:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e6a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7ff fe12 	bl	8003a98 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e74:	4632      	mov	r2, r6
 8003e76:	4641      	mov	r1, r8
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f7ff fead 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d1ba      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003e8a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003e8c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003e8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003e92:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003e94:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003e96:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003e98:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003e9a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e9e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	b1a3      	cbz	r3, 8003ece <HAL_I2C_Mem_Write+0x106>
 8003ea4:	b99a      	cbnz	r2, 8003ece <HAL_I2C_Mem_Write+0x106>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ea6:	9600      	str	r6, [sp, #0]
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff fe69 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d1a0      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eb8:	2bff      	cmp	r3, #255	; 0xff
 8003eba:	d92f      	bls.n	8003f1c <HAL_I2C_Mem_Write+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ebc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ec2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ec4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff fde5 	bl	8003a98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003ece:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ce      	bne.n	8003e74 <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed6:	4632      	mov	r2, r6
 8003ed8:	4641      	mov	r1, r8
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff fe2d 	bl	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d189      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003ef0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003ef4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f02:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f06:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003f0a:	e776      	b.n	8003dfa <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8003f0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f12:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003f14:	b292      	uxth	r2, r2
 8003f16:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	e7a7      	b.n	8003e6c <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 8003f1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f22:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003f24:	b292      	uxth	r2, r2
 8003f26:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	e7cc      	b.n	8003ec6 <HAL_I2C_Mem_Write+0xfe>
    return HAL_BUSY;
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	e764      	b.n	8003dfa <HAL_I2C_Mem_Write+0x32>

08003f30 <HAL_I2C_Mem_Read>:
{
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f34:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	2b20      	cmp	r3, #32
{
 8003f40:	460f      	mov	r7, r1
 8003f42:	9203      	str	r2, [sp, #12]
 8003f44:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003f48:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4c:	f040 80a6 	bne.w	800409c <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8003f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f52:	b113      	cbz	r3, 8003f5a <HAL_I2C_Mem_Read+0x2a>
 8003f54:	f1ba 0f00 	cmp.w	sl, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003f60:	2001      	movs	r0, #1
}
 8003f62:	b005      	add	sp, #20
 8003f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003f68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f000 8095 	beq.w	800409c <HAL_I2C_Mem_Read+0x16c>
 8003f72:	2501      	movs	r5, #1
 8003f74:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003f78:	f7fe fe70 	bl	8002c5c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003f80:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f82:	462a      	mov	r2, r5
 8003f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff fdfb 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4681      	mov	r9, r0
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d1e5      	bne.n	8003f60 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f94:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8003f96:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f98:	9a03      	ldr	r2, [sp, #12]
 8003f9a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa0:	2340      	movs	r3, #64	; 0x40
 8003fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003faa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003fac:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fae:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8003fb0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb4:	e9cd 8600 	strd	r8, r6, [sp]
 8003fb8:	f7ff fe68 	bl	8003c8c <I2C_RequestMemoryRead>
 8003fbc:	b110      	cbz	r0, 8003fc4 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8003fbe:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003fc2:	e7cd      	b.n	8003f60 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fc6:	2bff      	cmp	r3, #255	; 0xff
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <HAL_I2C_Mem_Read+0x170>)
 8003fca:	d957      	bls.n	800407c <HAL_I2C_Mem_Read+0x14c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fcc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7ff fd5d 	bl	8003a98 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	9600      	str	r6, [sp, #0]
 8003fe0:	4643      	mov	r3, r8
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2104      	movs	r1, #4
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7ff fdcc 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1b7      	bne.n	8003f60 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003ffa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003ffc:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8003ffe:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004000:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004004:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004006:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004008:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800400a:	b29b      	uxth	r3, r3
 800400c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800400e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	b1a3      	cbz	r3, 800403e <HAL_I2C_Mem_Read+0x10e>
 8004014:	b99a      	cbnz	r2, 800403e <HAL_I2C_Mem_Read+0x10e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004016:	9600      	str	r6, [sp, #0]
 8004018:	4643      	mov	r3, r8
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	4620      	mov	r0, r4
 800401e:	f7ff fdb1 	bl	8003b84 <I2C_WaitOnFlagUntilTimeout>
 8004022:	2800      	cmp	r0, #0
 8004024:	d19c      	bne.n	8003f60 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004028:	2bff      	cmp	r3, #255	; 0xff
 800402a:	d92f      	bls.n	800408c <HAL_I2C_Mem_Read+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800402c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800402e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004032:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004034:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004036:	4639      	mov	r1, r7
 8004038:	4620      	mov	r0, r4
 800403a:	f7ff fd2d 	bl	8003a98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800403e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1cb      	bne.n	8003fde <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004046:	4632      	mov	r2, r6
 8004048:	4641      	mov	r1, r8
 800404a:	4620      	mov	r0, r4
 800404c:	f7ff fd75 	bl	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004050:	2800      	cmp	r0, #0
 8004052:	d185      	bne.n	8003f60 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	2120      	movs	r1, #32
 8004058:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004060:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004064:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004072:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004076:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800407a:	e772      	b.n	8003f62 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800407c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004084:	b292      	uxth	r2, r2
 8004086:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	e7a4      	b.n	8003fd6 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 800408c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800408e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004092:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004094:	b292      	uxth	r2, r2
 8004096:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	e7cc      	b.n	8004036 <HAL_I2C_Mem_Read+0x106>
    return HAL_BUSY;
 800409c:	2002      	movs	r0, #2
 800409e:	e760      	b.n	8003f62 <HAL_I2C_Mem_Read+0x32>
 80040a0:	80002400 	.word	0x80002400

080040a4 <HAL_I2C_GetState>:
  return hi2c->State;
 80040a4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80040a8:	4770      	bx	lr

080040aa <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80040aa:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80040ac:	4770      	bx	lr

080040ae <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ae:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	2a20      	cmp	r2, #32
{
 80040b6:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b8:	d11d      	bne.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d019      	beq.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c2:	2324      	movs	r3, #36	; 0x24
 80040c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c8:	6803      	ldr	r3, [r0, #0]
 80040ca:	681c      	ldr	r4, [r3, #0]
 80040cc:	f024 0401 	bic.w	r4, r4, #1
 80040d0:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80040d8:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040da:	681c      	ldr	r4, [r3, #0]
 80040dc:	4321      	orrs	r1, r4
 80040de:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	f041 0101 	orr.w	r1, r1, #1
 80040e6:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80040ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80040f2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80040f4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80040f6:	2002      	movs	r0, #2
 80040f8:	e7fc      	b.n	80040f4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080040fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040fa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8004100:	b2e4      	uxtb	r4, r4
 8004102:	2c20      	cmp	r4, #32
 8004104:	d11c      	bne.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004106:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800410a:	2b01      	cmp	r3, #1
 800410c:	d018      	beq.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800410e:	2324      	movs	r3, #36	; 0x24
 8004110:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004114:	6803      	ldr	r3, [r0, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800411e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004120:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004124:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004128:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004138:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800413c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800413e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004140:	2002      	movs	r0, #2
 8004142:	e7fc      	b.n	800413e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08004144 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004144:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004146:	f8d1 c000 	ldr.w	ip, [r1]
{
 800414a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800414e:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004150:	6804      	ldr	r4, [r0, #0]
 8004152:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004154:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004158:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800415a:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800415c:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004160:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004164:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004166:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800416a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800416e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004170:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004172:	68e0      	ldr	r0, [r4, #12]
 8004174:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004178:	4430      	add	r0, r6
 800417a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800417e:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004180:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004182:	68e0      	ldr	r0, [r4, #12]
 8004184:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004188:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800418a:	6898      	ldr	r0, [r3, #8]
 800418c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004190:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004192:	6888      	ldr	r0, [r1, #8]
 8004194:	68e6      	ldr	r6, [r4, #12]
 8004196:	3001      	adds	r0, #1
 8004198:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800419c:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800419e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041a0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80041a4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041a6:	6918      	ldr	r0, [r3, #16]
 80041a8:	f020 0007 	bic.w	r0, r0, #7
 80041ac:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041ae:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80041b0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041b2:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041b6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80041ba:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80041be:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80041c2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80041c6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80041ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80041ce:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80041d0:	6958      	ldr	r0, [r3, #20]
 80041d2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80041d6:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80041d8:	6948      	ldr	r0, [r1, #20]
 80041da:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041dc:	69d8      	ldr	r0, [r3, #28]
 80041de:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80041e2:	f020 0007 	bic.w	r0, r0, #7
 80041e6:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80041e8:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 80041ec:	4305      	orrs	r5, r0
 80041ee:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80041f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80041f2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80041f4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80041f8:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041fa:	b31e      	cbz	r6, 8004244 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041fc:	2e01      	cmp	r6, #1
 80041fe:	d023      	beq.n	8004248 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004200:	1eb0      	subs	r0, r6, #2
 8004202:	2802      	cmp	r0, #2
 8004204:	d922      	bls.n	800424c <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004206:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004208:	bf0c      	ite	eq
 800420a:	2002      	moveq	r0, #2
 800420c:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800420e:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004210:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004214:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8004218:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800421a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800421c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800421e:	4345      	muls	r5, r0
 8004220:	4378      	muls	r0, r7
 8004222:	3007      	adds	r0, #7
 8004224:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004228:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800422a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800422c:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004230:	f020 0007 	bic.w	r0, r0, #7
 8004234:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004236:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004238:	58a3      	ldr	r3, [r4, r2]
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	50a3      	str	r3, [r4, r2]
}
 8004240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004244:	2004      	movs	r0, #4
 8004246:	e7e2      	b.n	800420e <LTDC_SetConfig+0xca>
    tmp = 3U;
 8004248:	2003      	movs	r0, #3
 800424a:	e7e0      	b.n	800420e <LTDC_SetConfig+0xca>
    tmp = 2U;
 800424c:	2002      	movs	r0, #2
 800424e:	e7de      	b.n	800420e <LTDC_SetConfig+0xca>

08004250 <HAL_LTDC_MspInit>:
}
 8004250:	4770      	bx	lr
	...

08004254 <HAL_LTDC_Init>:
{
 8004254:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004256:	4604      	mov	r4, r0
 8004258:	2800      	cmp	r0, #0
 800425a:	d063      	beq.n	8004324 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800425c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004260:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004264:	b91b      	cbnz	r3, 800426e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004266:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800426a:	f7ff fff1 	bl	8004250 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800427c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800427e:	6999      	ldr	r1, [r3, #24]
 8004280:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004284:	4302      	orrs	r2, r0
 8004286:	68e0      	ldr	r0, [r4, #12]
 8004288:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800428a:	6920      	ldr	r0, [r4, #16]
 800428c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800428e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004290:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004292:	4925      	ldr	r1, [pc, #148]	; (8004328 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004294:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	400a      	ands	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80042a2:	69a0      	ldr	r0, [r4, #24]
 80042a4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80042a6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042a8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	400a      	ands	r2, r1
 80042ae:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80042b6:	6a20      	ldr	r0, [r4, #32]
 80042b8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80042bc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	400a      	ands	r2, r1
 80042c2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80042ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80042cc:	4302      	orrs	r2, r0
 80042ce:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	4011      	ands	r1, r2
 80042d4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042e0:	430a      	orrs	r2, r1
 80042e2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80042e6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042ea:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042ee:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042f2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80042f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042f6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80042fa:	430a      	orrs	r2, r1
 80042fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004300:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004304:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430a:	f042 0206 	orr.w	r2, r2, #6
 800430e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004318:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800431a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800431e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004322:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004324:	2001      	movs	r0, #1
 8004326:	e7fc      	b.n	8004322 <HAL_LTDC_Init+0xce>
 8004328:	f000f800 	.word	0xf000f800

0800432c <HAL_LTDC_ConfigLayer>:
{
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800432e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8004332:	4606      	mov	r6, r0
 8004334:	468c      	mov	ip, r1
 8004336:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 8004338:	2b01      	cmp	r3, #1
 800433a:	f04f 0002 	mov.w	r0, #2
 800433e:	d01d      	beq.n	800437c <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004340:	2434      	movs	r4, #52	; 0x34
 8004342:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004344:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8004348:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800434a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800434e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004352:	3438      	adds	r4, #56	; 0x38
 8004354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800435c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004360:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004362:	4630      	mov	r0, r6
 8004364:	4672      	mov	r2, lr
 8004366:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004368:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800436a:	f7ff feeb 	bl	8004144 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800436e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004370:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004372:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004374:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004378:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800437e <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800437e:	b538      	push	{r3, r4, r5, lr}
 8004380:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004382:	f7fe fc6b 	bl	8002c5c <HAL_GetTick>
 8004386:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004388:	2c00      	cmp	r4, #0
 800438a:	d061      	beq.n	8004450 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800438c:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800438e:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8004390:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8004394:	2302      	movs	r3, #2
 8004396:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800439a:	68d3      	ldr	r3, [r2, #12]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	07d2      	lsls	r2, r2, #31
 80043a8:	d448      	bmi.n	800443c <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80043aa:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80043b2:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	69e1      	ldr	r1, [r4, #28]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	6a21      	ldr	r1, [r4, #32]
 80043be:	430a      	orrs	r2, r1
 80043c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043c2:	430a      	orrs	r2, r1
 80043c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80043c6:	430a      	orrs	r2, r1
 80043c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80043ca:	430a      	orrs	r2, r1
 80043cc:	68a1      	ldr	r1, [r4, #8]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043d2:	3901      	subs	r1, #1
 80043d4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80043d8:	6861      	ldr	r1, [r4, #4]
 80043da:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80043de:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80043e0:	d103      	bne.n	80043ea <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80043e8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80043ea:	2200      	movs	r2, #0
 80043ec:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80043ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	da04      	bge.n	80043fe <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80043f4:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80043f6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80043f8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80043fc:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80043fe:	b292      	uxth	r2, r2
 8004400:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004402:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004404:	2a00      	cmp	r2, #0
 8004406:	da25      	bge.n	8004454 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004408:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800440a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800440c:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8004410:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004412:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004414:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004418:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800441c:	621a      	str	r2, [r3, #32]
 800441e:	f04f 0200 	mov.w	r2, #0
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004422:	d019      	beq.n	8004458 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004424:	b2c9      	uxtb	r1, r1
 8004426:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800442a:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800442c:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800442e:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8004430:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8004432:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8004436:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800443a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800443c:	f7fe fc0e 	bl	8002c5c <HAL_GetTick>
 8004440:	1b40      	subs	r0, r0, r5
 8004442:	2805      	cmp	r0, #5
 8004444:	d9ad      	bls.n	80043a2 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8004446:	2340      	movs	r3, #64	; 0x40
 8004448:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800444a:	2303      	movs	r3, #3
 800444c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8004450:	2001      	movs	r0, #1
 8004452:	e7f2      	b.n	800443a <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004454:	6a18      	ldr	r0, [r3, #32]
 8004456:	e7dd      	b.n	8004414 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8004458:	629a      	str	r2, [r3, #40]	; 0x28
 800445a:	e7e5      	b.n	8004428 <HAL_MDMA_Init+0xaa>

0800445c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800445c:	b1d8      	cbz	r0, 8004496 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800445e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8004460:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8004462:	68d3      	ldr	r3, [r2, #12]
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800446e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8004470:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8004472:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8004474:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8004476:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8004478:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800447a:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800447c:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800447e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8004480:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004482:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8004484:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8004486:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800448a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800448e:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8004492:	4618      	mov	r0, r3
 8004494:	4770      	bx	lr
    return HAL_ERROR;
 8004496:	2001      	movs	r0, #1
}
 8004498:	4770      	bx	lr
	...

0800449c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800449c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800449e:	4c10      	ldr	r4, [pc, #64]	; (80044e0 <HAL_PWREx_ConfigSupply+0x44>)
 80044a0:	68e3      	ldr	r3, [r4, #12]
 80044a2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044a6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044a8:	d105      	bne.n	80044b6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044aa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044ae:	1a18      	subs	r0, r3, r0
 80044b0:	bf18      	it	ne
 80044b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80044b4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	4318      	orrs	r0, r3
 80044bc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80044be:	f7fe fbcd 	bl	8002c5c <HAL_GetTick>
 80044c2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	049b      	lsls	r3, r3, #18
 80044c8:	d501      	bpl.n	80044ce <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80044ca:	2000      	movs	r0, #0
 80044cc:	e7f2      	b.n	80044b4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044ce:	f7fe fbc5 	bl	8002c5c <HAL_GetTick>
 80044d2:	1b40      	subs	r0, r0, r5
 80044d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80044d8:	d9f4      	bls.n	80044c4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80044da:	2001      	movs	r0, #1
 80044dc:	e7ea      	b.n	80044b4 <HAL_PWREx_ConfigSupply+0x18>
 80044de:	bf00      	nop
 80044e0:	58024800 	.word	0x58024800

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e6:	4604      	mov	r4, r0
 80044e8:	b908      	cbnz	r0, 80044ee <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80044ea:	2001      	movs	r0, #1
 80044ec:	e08e      	b.n	800460c <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	6803      	ldr	r3, [r0, #0]
 80044f0:	07dd      	lsls	r5, r3, #31
 80044f2:	d45e      	bmi.n	80045b2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	0798      	lsls	r0, r3, #30
 80044f8:	f100 80b0 	bmi.w	800465c <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	06da      	lsls	r2, r3, #27
 8004500:	d527      	bpl.n	8004552 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4baa      	ldr	r3, [pc, #680]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 8004504:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004506:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004508:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800450c:	2a08      	cmp	r2, #8
 800450e:	d007      	beq.n	8004520 <HAL_RCC_OscConfig+0x3c>
 8004510:	2a18      	cmp	r2, #24
 8004512:	f040 810e 	bne.w	8004732 <HAL_RCC_OscConfig+0x24e>
 8004516:	f001 0203 	and.w	r2, r1, #3
 800451a:	2a01      	cmp	r2, #1
 800451c:	f040 8109 	bne.w	8004732 <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	05db      	lsls	r3, r3, #23
 8004524:	d502      	bpl.n	800452c <HAL_RCC_OscConfig+0x48>
 8004526:	69e3      	ldr	r3, [r4, #28]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d1de      	bne.n	80044ea <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800452c:	f7fe fbae 	bl	8002c8c <HAL_GetREVID>
 8004530:	f241 0303 	movw	r3, #4099	; 0x1003
 8004534:	6a21      	ldr	r1, [r4, #32]
 8004536:	4298      	cmp	r0, r3
 8004538:	4b9c      	ldr	r3, [pc, #624]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 800453a:	f200 80f3 	bhi.w	8004724 <HAL_RCC_OscConfig+0x240>
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	2920      	cmp	r1, #32
 8004542:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8004546:	bf0c      	ite	eq
 8004548:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800454c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004550:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	0719      	lsls	r1, r3, #28
 8004556:	f100 812d 	bmi.w	80047b4 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	069a      	lsls	r2, r3, #26
 800455e:	f100 814e 	bmi.w	80047fe <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	075d      	lsls	r5, r3, #29
 8004566:	d51e      	bpl.n	80045a6 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8004568:	4d91      	ldr	r5, [pc, #580]	; (80047b0 <HAL_RCC_OscConfig+0x2cc>)
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004572:	f7fe fb73 	bl	8002c5c <HAL_GetTick>
 8004576:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	05da      	lsls	r2, r3, #23
 800457c:	f140 8164 	bpl.w	8004848 <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	4d8a      	ldr	r5, [pc, #552]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 8166 	bne.w	8004856 <HAL_RCC_OscConfig+0x372>
 800458a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004596:	f7fe fb61 	bl	8002c5c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459a:	4e84      	ldr	r6, [pc, #528]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800459c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80045a0:	079b      	lsls	r3, r3, #30
 80045a2:	f140 817e 	bpl.w	80048a2 <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f040 8181 	bne.w	80048b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 80045ae:	2000      	movs	r0, #0
 80045b0:	e02c      	b.n	800460c <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b2:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 80045b4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045bc:	2a10      	cmp	r2, #16
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0xe8>
 80045c0:	2a18      	cmp	r2, #24
 80045c2:	d10a      	bne.n	80045da <HAL_RCC_OscConfig+0xf6>
 80045c4:	f001 0203 	and.w	r2, r1, #3
 80045c8:	2a02      	cmp	r2, #2
 80045ca:	d106      	bne.n	80045da <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0399      	lsls	r1, r3, #14
 80045d0:	d590      	bpl.n	80044f4 <HAL_RCC_OscConfig+0x10>
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d18d      	bne.n	80044f4 <HAL_RCC_OscConfig+0x10>
 80045d8:	e787      	b.n	80044ea <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	4d73      	ldr	r5, [pc, #460]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e2:	d114      	bne.n	800460e <HAL_RCC_OscConfig+0x12a>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80045f0:	f7fe fb34 	bl	8002c5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045f4:	4e6d      	ldr	r6, [pc, #436]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80045f6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	039a      	lsls	r2, r3, #14
 80045fc:	f53f af7a 	bmi.w	80044f4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004600:	f7fe fb2c 	bl	8002c5c <HAL_GetTick>
 8004604:	1bc0      	subs	r0, r0, r7
 8004606:	42a8      	cmp	r0, r5
 8004608:	d9f6      	bls.n	80045f8 <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 800460a:	2003      	movs	r0, #3
}
 800460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460e:	b9b3      	cbnz	r3, 800463e <HAL_RCC_OscConfig+0x15a>
 8004610:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004612:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004624:	f7fe fb1a 	bl	8002c5c <HAL_GetTick>
 8004628:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	039b      	lsls	r3, r3, #14
 800462e:	f57f af61 	bpl.w	80044f4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004632:	f7fe fb13 	bl	8002c5c <HAL_GetTick>
 8004636:	1b80      	subs	r0, r0, r6
 8004638:	42b8      	cmp	r0, r7
 800463a:	d9f6      	bls.n	800462a <HAL_RCC_OscConfig+0x146>
 800463c:	e7e5      	b.n	800460a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004642:	682b      	ldr	r3, [r5, #0]
 8004644:	d103      	bne.n	800464e <HAL_RCC_OscConfig+0x16a>
 8004646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	e7ca      	b.n	80045e4 <HAL_RCC_OscConfig+0x100>
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465a:	e7c6      	b.n	80045ea <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465c:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 800465e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004660:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004662:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8004666:	d003      	beq.n	8004670 <HAL_RCC_OscConfig+0x18c>
 8004668:	2a18      	cmp	r2, #24
 800466a:	d120      	bne.n	80046ae <HAL_RCC_OscConfig+0x1ca>
 800466c:	078e      	lsls	r6, r1, #30
 800466e:	d11e      	bne.n	80046ae <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	075d      	lsls	r5, r3, #29
 8004674:	d503      	bpl.n	800467e <HAL_RCC_OscConfig+0x19a>
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f43f af36 	beq.w	80044ea <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	f7fe fb05 	bl	8002c8c <HAL_GetREVID>
 8004682:	f241 0303 	movw	r3, #4099	; 0x1003
 8004686:	6921      	ldr	r1, [r4, #16]
 8004688:	4298      	cmp	r0, r3
 800468a:	4b48      	ldr	r3, [pc, #288]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	d809      	bhi.n	80046a4 <HAL_RCC_OscConfig+0x1c0>
 8004690:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8004694:	2940      	cmp	r1, #64	; 0x40
 8004696:	bf0c      	ite	eq
 8004698:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 800469c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e72b      	b.n	80044fc <HAL_RCC_OscConfig+0x18>
 80046a4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80046a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046ac:	e7f8      	b.n	80046a0 <HAL_RCC_OscConfig+0x1bc>
 80046ae:	4d3f      	ldr	r5, [pc, #252]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046b2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b4:	b332      	cbz	r2, 8004704 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046b6:	f023 0319 	bic.w	r3, r3, #25
 80046ba:	4313      	orrs	r3, r2
 80046bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046be:	f7fe facd 	bl	8002c5c <HAL_GetTick>
 80046c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	0758      	lsls	r0, r3, #29
 80046c8:	d511      	bpl.n	80046ee <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	f7fe fadf 	bl	8002c8c <HAL_GetREVID>
 80046ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80046d2:	6922      	ldr	r2, [r4, #16]
 80046d4:	4298      	cmp	r0, r3
 80046d6:	686b      	ldr	r3, [r5, #4]
 80046d8:	d80f      	bhi.n	80046fa <HAL_RCC_OscConfig+0x216>
 80046da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046de:	2a40      	cmp	r2, #64	; 0x40
 80046e0:	bf0c      	ite	eq
 80046e2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80046e6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80046ea:	606b      	str	r3, [r5, #4]
 80046ec:	e706      	b.n	80044fc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fe fab5 	bl	8002c5c <HAL_GetTick>
 80046f2:	1b80      	subs	r0, r0, r6
 80046f4:	2802      	cmp	r0, #2
 80046f6:	d9e5      	bls.n	80046c4 <HAL_RCC_OscConfig+0x1e0>
 80046f8:	e787      	b.n	800460a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004702:	e7f2      	b.n	80046ea <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800470a:	f7fe faa7 	bl	8002c5c <HAL_GetTick>
 800470e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	0759      	lsls	r1, r3, #29
 8004714:	f57f aef2 	bpl.w	80044fc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004718:	f7fe faa0 	bl	8002c5c <HAL_GetTick>
 800471c:	1b80      	subs	r0, r0, r6
 800471e:	2802      	cmp	r0, #2
 8004720:	d9f6      	bls.n	8004710 <HAL_RCC_OscConfig+0x22c>
 8004722:	e772      	b.n	800460a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800472a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e70f      	b.n	8004552 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004732:	69e3      	ldr	r3, [r4, #28]
 8004734:	4d1d      	ldr	r5, [pc, #116]	; (80047ac <HAL_RCC_OscConfig+0x2c8>)
 8004736:	b343      	cbz	r3, 800478a <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004740:	f7fe fa8c 	bl	8002c5c <HAL_GetTick>
 8004744:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	05df      	lsls	r7, r3, #23
 800474a:	d511      	bpl.n	8004770 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800474c:	f7fe fa9e 	bl	8002c8c <HAL_GetREVID>
 8004750:	f241 0303 	movw	r3, #4099	; 0x1003
 8004754:	6a22      	ldr	r2, [r4, #32]
 8004756:	4298      	cmp	r0, r3
 8004758:	d810      	bhi.n	800477c <HAL_RCC_OscConfig+0x298>
 800475a:	686b      	ldr	r3, [r5, #4]
 800475c:	2a20      	cmp	r2, #32
 800475e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004762:	bf0c      	ite	eq
 8004764:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004768:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800476c:	606b      	str	r3, [r5, #4]
 800476e:	e6f0      	b.n	8004552 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004770:	f7fe fa74 	bl	8002c5c <HAL_GetTick>
 8004774:	1b80      	subs	r0, r0, r6
 8004776:	2802      	cmp	r0, #2
 8004778:	d9e5      	bls.n	8004746 <HAL_RCC_OscConfig+0x262>
 800477a:	e746      	b.n	800460a <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800477c:	68eb      	ldr	r3, [r5, #12]
 800477e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004782:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004786:	60eb      	str	r3, [r5, #12]
 8004788:	e6e3      	b.n	8004552 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004790:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004792:	f7fe fa63 	bl	8002c5c <HAL_GetTick>
 8004796:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	05d8      	lsls	r0, r3, #23
 800479c:	f57f aed9 	bpl.w	8004552 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047a0:	f7fe fa5c 	bl	8002c5c <HAL_GetTick>
 80047a4:	1b80      	subs	r0, r0, r6
 80047a6:	2802      	cmp	r0, #2
 80047a8:	d9f6      	bls.n	8004798 <HAL_RCC_OscConfig+0x2b4>
 80047aa:	e72e      	b.n	800460a <HAL_RCC_OscConfig+0x126>
 80047ac:	58024400 	.word	0x58024400
 80047b0:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047b4:	6963      	ldr	r3, [r4, #20]
 80047b6:	4d96      	ldr	r5, [pc, #600]	; (8004a10 <HAL_RCC_OscConfig+0x52c>)
 80047b8:	b183      	cbz	r3, 80047dc <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 80047ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80047c2:	f7fe fa4b 	bl	8002c5c <HAL_GetTick>
 80047c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80047ca:	079b      	lsls	r3, r3, #30
 80047cc:	f53f aec5 	bmi.w	800455a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fe fa44 	bl	8002c5c <HAL_GetTick>
 80047d4:	1b80      	subs	r0, r0, r6
 80047d6:	2802      	cmp	r0, #2
 80047d8:	d9f6      	bls.n	80047c8 <HAL_RCC_OscConfig+0x2e4>
 80047da:	e716      	b.n	800460a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 80047dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80047e4:	f7fe fa3a 	bl	8002c5c <HAL_GetTick>
 80047e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80047ec:	079f      	lsls	r7, r3, #30
 80047ee:	f57f aeb4 	bpl.w	800455a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f2:	f7fe fa33 	bl	8002c5c <HAL_GetTick>
 80047f6:	1b80      	subs	r0, r0, r6
 80047f8:	2802      	cmp	r0, #2
 80047fa:	d9f6      	bls.n	80047ea <HAL_RCC_OscConfig+0x306>
 80047fc:	e705      	b.n	800460a <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80047fe:	69a3      	ldr	r3, [r4, #24]
 8004800:	4d83      	ldr	r5, [pc, #524]	; (8004a10 <HAL_RCC_OscConfig+0x52c>)
 8004802:	b183      	cbz	r3, 8004826 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800480a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800480c:	f7fe fa26 	bl	8002c5c <HAL_GetTick>
 8004810:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	0498      	lsls	r0, r3, #18
 8004816:	f53f aea4 	bmi.w	8004562 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800481a:	f7fe fa1f 	bl	8002c5c <HAL_GetTick>
 800481e:	1b80      	subs	r0, r0, r6
 8004820:	2802      	cmp	r0, #2
 8004822:	d9f6      	bls.n	8004812 <HAL_RCC_OscConfig+0x32e>
 8004824:	e6f1      	b.n	800460a <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800482c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800482e:	f7fe fa15 	bl	8002c5c <HAL_GetTick>
 8004832:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	0499      	lsls	r1, r3, #18
 8004838:	f57f ae93 	bpl.w	8004562 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800483c:	f7fe fa0e 	bl	8002c5c <HAL_GetTick>
 8004840:	1b80      	subs	r0, r0, r6
 8004842:	2802      	cmp	r0, #2
 8004844:	d9f6      	bls.n	8004834 <HAL_RCC_OscConfig+0x350>
 8004846:	e6e0      	b.n	800460a <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004848:	f7fe fa08 	bl	8002c5c <HAL_GetTick>
 800484c:	1b80      	subs	r0, r0, r6
 800484e:	2864      	cmp	r0, #100	; 0x64
 8004850:	f67f ae92 	bls.w	8004578 <HAL_RCC_OscConfig+0x94>
 8004854:	e6d9      	b.n	800460a <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004856:	b9b3      	cbnz	r3, 8004886 <HAL_RCC_OscConfig+0x3a2>
 8004858:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	672b      	str	r3, [r5, #112]	; 0x70
 8004864:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004866:	f023 0304 	bic.w	r3, r3, #4
 800486a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800486c:	f7fe f9f6 	bl	8002c5c <HAL_GetTick>
 8004870:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004872:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004874:	0798      	lsls	r0, r3, #30
 8004876:	f57f ae96 	bpl.w	80045a6 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fe f9ef 	bl	8002c5c <HAL_GetTick>
 800487e:	1b80      	subs	r0, r0, r6
 8004880:	42b8      	cmp	r0, r7
 8004882:	d9f6      	bls.n	8004872 <HAL_RCC_OscConfig+0x38e>
 8004884:	e6c1      	b.n	800460a <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004886:	2b05      	cmp	r3, #5
 8004888:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800488a:	d103      	bne.n	8004894 <HAL_RCC_OscConfig+0x3b0>
 800488c:	f043 0304 	orr.w	r3, r3, #4
 8004890:	672b      	str	r3, [r5, #112]	; 0x70
 8004892:	e67a      	b.n	800458a <HAL_RCC_OscConfig+0xa6>
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	672b      	str	r3, [r5, #112]	; 0x70
 800489a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	e676      	b.n	8004590 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fe f9db 	bl	8002c5c <HAL_GetTick>
 80048a6:	1bc0      	subs	r0, r0, r7
 80048a8:	42a8      	cmp	r0, r5
 80048aa:	f67f ae78 	bls.w	800459e <HAL_RCC_OscConfig+0xba>
 80048ae:	e6ac      	b.n	800460a <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048b0:	4d57      	ldr	r5, [pc, #348]	; (8004a10 <HAL_RCC_OscConfig+0x52c>)
 80048b2:	692b      	ldr	r3, [r5, #16]
 80048b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b8:	2b18      	cmp	r3, #24
 80048ba:	d07a      	beq.n	80049b2 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 80048bc:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80048c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c6:	d167      	bne.n	8004998 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 80048c8:	f7fe f9c8 	bl	8002c5c <HAL_GetTick>
 80048cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	0199      	lsls	r1, r3, #6
 80048d2:	d45b      	bmi.n	800498c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80048d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048d8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80048dc:	f023 0303 	bic.w	r3, r3, #3
 80048e0:	4313      	orrs	r3, r2
 80048e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80048e4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80048e8:	62ab      	str	r3, [r5, #40]	; 0x28
 80048ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048ee:	3b01      	subs	r3, #1
 80048f0:	3a01      	subs	r2, #1
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	0412      	lsls	r2, r2, #16
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80048fc:	4313      	orrs	r3, r2
 80048fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004900:	3a01      	subs	r2, #1
 8004902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004906:	4313      	orrs	r3, r2
 8004908:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800490a:	3a01      	subs	r2, #1
 800490c:	0612      	lsls	r2, r2, #24
 800490e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004912:	4313      	orrs	r3, r2
 8004914:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8004916:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800491e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004920:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004926:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800492a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800492e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004930:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004932:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004934:	f023 030c 	bic.w	r3, r3, #12
 8004938:	4313      	orrs	r3, r2
 800493a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800493c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800493e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004940:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004944:	4c32      	ldr	r4, [pc, #200]	; (8004a10 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004946:	4313      	orrs	r3, r2
 8004948:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800494a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800494c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004950:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004952:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800495a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800495c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004960:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004962:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004970:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004972:	f7fe f973 	bl	8002c5c <HAL_GetTick>
 8004976:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	f53f ae17 	bmi.w	80045ae <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004980:	f7fe f96c 	bl	8002c5c <HAL_GetTick>
 8004984:	1b40      	subs	r0, r0, r5
 8004986:	2802      	cmp	r0, #2
 8004988:	d9f6      	bls.n	8004978 <HAL_RCC_OscConfig+0x494>
 800498a:	e63e      	b.n	800460a <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498c:	f7fe f966 	bl	8002c5c <HAL_GetTick>
 8004990:	1b80      	subs	r0, r0, r6
 8004992:	2802      	cmp	r0, #2
 8004994:	d99b      	bls.n	80048ce <HAL_RCC_OscConfig+0x3ea>
 8004996:	e638      	b.n	800460a <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 8004998:	f7fe f960 	bl	8002c5c <HAL_GetTick>
 800499c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800499e:	682b      	ldr	r3, [r5, #0]
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	f57f ae04 	bpl.w	80045ae <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fe f959 	bl	8002c5c <HAL_GetTick>
 80049aa:	1b00      	subs	r0, r0, r4
 80049ac:	2802      	cmp	r0, #2
 80049ae:	d9f6      	bls.n	800499e <HAL_RCC_OscConfig+0x4ba>
 80049b0:	e62b      	b.n	800460a <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b8:	f43f ae28 	beq.w	800460c <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80049c2:	4281      	cmp	r1, r0
 80049c4:	f47f ad91 	bne.w	80044ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80049ce:	428a      	cmp	r2, r1
 80049d0:	f47f ad8b 	bne.w	80044ea <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049d6:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80049da:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049dc:	4291      	cmp	r1, r2
 80049de:	f47f ad84 	bne.w	80044ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80049e4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80049e8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f47f ad7d 	bne.w	80044ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80049f2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80049f6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049f8:	4291      	cmp	r1, r2
 80049fa:	f47f ad76 	bne.w	80044ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a00:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a04:	3801      	subs	r0, #1
    return HAL_ERROR;
 8004a06:	1a18      	subs	r0, r3, r0
 8004a08:	bf18      	it	ne
 8004a0a:	2001      	movne	r0, #1
 8004a0c:	e5fe      	b.n	800460c <HAL_RCC_OscConfig+0x128>
 8004a0e:	bf00      	nop
 8004a10:	58024400 	.word	0x58024400

08004a14 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a14:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x11c>)
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004a1c:	2a10      	cmp	r2, #16
{
 8004a1e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a20:	f000 8084 	beq.w	8004b2c <HAL_RCC_GetSysClockFreq+0x118>
 8004a24:	2a18      	cmp	r2, #24
 8004a26:	d00c      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x2e>
 8004a28:	b10a      	cbz	r2, 8004a2e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a2a:	4842      	ldr	r0, [pc, #264]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004a2c:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4841      	ldr	r0, [pc, #260]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x124>)
 8004a32:	f012 0f20 	tst.w	r2, #32
 8004a36:	d0f9      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004a3e:	40d8      	lsrs	r0, r3
 8004a40:	e7f4      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a42:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a44:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a48:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a4c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0ec      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
 8004a52:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a56:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a5a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 8004a5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004a62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a66:	4342      	muls	r2, r0
 8004a68:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8004a70:	2a01      	cmp	r2, #1
 8004a72:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8004a76:	d002      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0x6a>
 8004a78:	d30f      	bcc.n	8004a9a <HAL_RCC_GetSysClockFreq+0x86>
 8004a7a:	2a02      	cmp	r2, #2
 8004a7c:	d048      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	ee07 3a10 	vmov	s14, r3
 8004a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a90:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004a94:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8004b3c <HAL_RCC_GetSysClockFreq+0x128>
 8004a98:	e037      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	0692      	lsls	r2, r2, #26
 8004a9e:	d527      	bpl.n	8004af0 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x124>)
 8004aa4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aaa:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab0:	ee07 2a10 	vmov	s14, r2
 8004ab4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004ab8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8004abc:	ee06 3a90 	vmov	s13, r3
 8004ac0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ace:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004ad8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ada:	ee07 3a10 	vmov	s14, r3
 8004ade:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004ae2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ae6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004aea:	ee17 0a90 	vmov	r0, s15
 8004aee:	e79d      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a10 	vmov	s14, r3
 8004afa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b02:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b06:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8004b40 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b0a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b0e:	e7dd      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a10 	vmov	s14, r3
 8004b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b22:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b26:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8004b44 <HAL_RCC_GetSysClockFreq+0x130>
 8004b2a:	e7ee      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 8004b2c:	4806      	ldr	r0, [pc, #24]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b2e:	e77d      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x18>
 8004b30:	58024400 	.word	0x58024400
 8004b34:	003d0900 	.word	0x003d0900
 8004b38:	03d09000 	.word	0x03d09000
 8004b3c:	4a742400 	.word	0x4a742400
 8004b40:	4c742400 	.word	0x4c742400
 8004b44:	4bbebc20 	.word	0x4bbebc20
 8004b48:	017d7840 	.word	0x017d7840

08004b4c <HAL_RCC_ClockConfig>:
{
 8004b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b50:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004b52:	4604      	mov	r4, r0
 8004b54:	b910      	cbnz	r0, 8004b5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004b56:	2001      	movs	r0, #1
}
 8004b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b5c:	4a88      	ldr	r2, [pc, #544]	; (8004d80 <HAL_RCC_ClockConfig+0x234>)
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	428b      	cmp	r3, r1
 8004b66:	f0c0 8093 	bcc.w	8004c90 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	075f      	lsls	r7, r3, #29
 8004b6e:	f100 809b 	bmi.w	8004ca8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b72:	071e      	lsls	r6, r3, #28
 8004b74:	d50b      	bpl.n	8004b8e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b76:	4983      	ldr	r1, [pc, #524]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004b78:	6966      	ldr	r6, [r4, #20]
 8004b7a:	69c8      	ldr	r0, [r1, #28]
 8004b7c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004b80:	4286      	cmp	r6, r0
 8004b82:	d904      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b84:	69ca      	ldr	r2, [r1, #28]
 8004b86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b8a:	4332      	orrs	r2, r6
 8004b8c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	06d8      	lsls	r0, r3, #27
 8004b90:	d50b      	bpl.n	8004baa <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b92:	497c      	ldr	r1, [pc, #496]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004b94:	69a6      	ldr	r6, [r4, #24]
 8004b96:	69c8      	ldr	r0, [r1, #28]
 8004b98:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004b9c:	4286      	cmp	r6, r0
 8004b9e:	d904      	bls.n	8004baa <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ba0:	69ca      	ldr	r2, [r1, #28]
 8004ba2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ba6:	4332      	orrs	r2, r6
 8004ba8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004baa:	0699      	lsls	r1, r3, #26
 8004bac:	d50b      	bpl.n	8004bc6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bae:	4975      	ldr	r1, [pc, #468]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004bb0:	69e6      	ldr	r6, [r4, #28]
 8004bb2:	6a08      	ldr	r0, [r1, #32]
 8004bb4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004bb8:	4286      	cmp	r6, r0
 8004bba:	d904      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004bbc:	6a0a      	ldr	r2, [r1, #32]
 8004bbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bc2:	4332      	orrs	r2, r6
 8004bc4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc6:	079a      	lsls	r2, r3, #30
 8004bc8:	d50b      	bpl.n	8004be2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bca:	496e      	ldr	r1, [pc, #440]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004bcc:	68e6      	ldr	r6, [r4, #12]
 8004bce:	6988      	ldr	r0, [r1, #24]
 8004bd0:	f000 000f 	and.w	r0, r0, #15
 8004bd4:	4286      	cmp	r6, r0
 8004bd6:	d904      	bls.n	8004be2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	698a      	ldr	r2, [r1, #24]
 8004bda:	f022 020f 	bic.w	r2, r2, #15
 8004bde:	4332      	orrs	r2, r6
 8004be0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be2:	07df      	lsls	r7, r3, #31
 8004be4:	d46e      	bmi.n	8004cc4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	079e      	lsls	r6, r3, #30
 8004bea:	f100 80a1 	bmi.w	8004d30 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bee:	4964      	ldr	r1, [pc, #400]	; (8004d80 <HAL_RCC_ClockConfig+0x234>)
 8004bf0:	680a      	ldr	r2, [r1, #0]
 8004bf2:	f002 020f 	and.w	r2, r2, #15
 8004bf6:	42aa      	cmp	r2, r5
 8004bf8:	f200 80a8 	bhi.w	8004d4c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bfc:	0758      	lsls	r0, r3, #29
 8004bfe:	f100 80b1 	bmi.w	8004d64 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c02:	0719      	lsls	r1, r3, #28
 8004c04:	d50b      	bpl.n	8004c1e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c06:	495f      	ldr	r1, [pc, #380]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004c08:	6965      	ldr	r5, [r4, #20]
 8004c0a:	69c8      	ldr	r0, [r1, #28]
 8004c0c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004c10:	4285      	cmp	r5, r0
 8004c12:	d204      	bcs.n	8004c1e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c14:	69ca      	ldr	r2, [r1, #28]
 8004c16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c1a:	432a      	orrs	r2, r5
 8004c1c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	06da      	lsls	r2, r3, #27
 8004c20:	d50b      	bpl.n	8004c3a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c22:	4958      	ldr	r1, [pc, #352]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004c24:	69a5      	ldr	r5, [r4, #24]
 8004c26:	69c8      	ldr	r0, [r1, #28]
 8004c28:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004c2c:	4285      	cmp	r5, r0
 8004c2e:	d204      	bcs.n	8004c3a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c30:	69ca      	ldr	r2, [r1, #28]
 8004c32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c36:	432a      	orrs	r2, r5
 8004c38:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c3a:	069b      	lsls	r3, r3, #26
 8004c3c:	d50b      	bpl.n	8004c56 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c3e:	4a51      	ldr	r2, [pc, #324]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004c40:	69e0      	ldr	r0, [r4, #28]
 8004c42:	6a11      	ldr	r1, [r2, #32]
 8004c44:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8004c48:	4288      	cmp	r0, r1
 8004c4a:	d204      	bcs.n	8004c56 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c4c:	6a13      	ldr	r3, [r2, #32]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	4303      	orrs	r3, r0
 8004c54:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c56:	f7ff fedd 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004c5a:	494a      	ldr	r1, [pc, #296]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <HAL_RCC_ClockConfig+0x23c>)
 8004c5e:	698b      	ldr	r3, [r1, #24]
 8004c60:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004c64:	5cd3      	ldrb	r3, [r2, r3]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c6c:	698b      	ldr	r3, [r1, #24]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	5cd3      	ldrb	r3, [r2, r3]
 8004c74:	4a45      	ldr	r2, [pc, #276]	; (8004d8c <HAL_RCC_ClockConfig+0x240>)
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	fa20 f303 	lsr.w	r3, r0, r3
 8004c7e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004c80:	4b43      	ldr	r3, [pc, #268]	; (8004d90 <HAL_RCC_ClockConfig+0x244>)
 8004c82:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004c84:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <HAL_RCC_ClockConfig+0x248>)
}
 8004c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	f7fd bf88 	b.w	8002ba0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	f023 030f 	bic.w	r3, r3, #15
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	f47f af58 	bne.w	8004b56 <HAL_RCC_ClockConfig+0xa>
 8004ca6:	e760      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ca8:	4936      	ldr	r1, [pc, #216]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004caa:	6926      	ldr	r6, [r4, #16]
 8004cac:	6988      	ldr	r0, [r1, #24]
 8004cae:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004cb2:	4286      	cmp	r6, r0
 8004cb4:	f67f af5d 	bls.w	8004b72 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cb8:	698a      	ldr	r2, [r1, #24]
 8004cba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cbe:	4332      	orrs	r2, r6
 8004cc0:	618a      	str	r2, [r1, #24]
 8004cc2:	e756      	b.n	8004b72 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cc4:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004cc6:	68a1      	ldr	r1, [r4, #8]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd6:	2902      	cmp	r1, #2
 8004cd8:	d11d      	bne.n	8004d16 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cda:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cde:	f43f af3a 	beq.w	8004b56 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce8:	4e26      	ldr	r6, [pc, #152]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	f022 0207 	bic.w	r2, r2, #7
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8004cf2:	f7fd ffb3 	bl	8002c5c <HAL_GetTick>
 8004cf6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf8:	6933      	ldr	r3, [r6, #16]
 8004cfa:	6862      	ldr	r2, [r4, #4]
 8004cfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d00:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004d04:	f43f af6f 	beq.w	8004be6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fd ffa8 	bl	8002c5c <HAL_GetTick>
 8004d0c:	1bc0      	subs	r0, r0, r7
 8004d0e:	4540      	cmp	r0, r8
 8004d10:	d9f2      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8004d12:	2003      	movs	r0, #3
 8004d14:	e720      	b.n	8004b58 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	2903      	cmp	r1, #3
 8004d18:	d102      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d1a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004d1e:	e7de      	b.n	8004cde <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d20:	2901      	cmp	r1, #1
 8004d22:	d102      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d24:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004d28:	e7d9      	b.n	8004cde <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2a:	f012 0f04 	tst.w	r2, #4
 8004d2e:	e7d6      	b.n	8004cde <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d30:	4914      	ldr	r1, [pc, #80]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004d32:	68e6      	ldr	r6, [r4, #12]
 8004d34:	6988      	ldr	r0, [r1, #24]
 8004d36:	f000 000f 	and.w	r0, r0, #15
 8004d3a:	4286      	cmp	r6, r0
 8004d3c:	f4bf af57 	bcs.w	8004bee <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d40:	698a      	ldr	r2, [r1, #24]
 8004d42:	f022 020f 	bic.w	r2, r2, #15
 8004d46:	4332      	orrs	r2, r6
 8004d48:	618a      	str	r2, [r1, #24]
 8004d4a:	e750      	b.n	8004bee <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4c:	680a      	ldr	r2, [r1, #0]
 8004d4e:	f022 020f 	bic.w	r2, r2, #15
 8004d52:	432a      	orrs	r2, r5
 8004d54:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	680a      	ldr	r2, [r1, #0]
 8004d58:	f002 020f 	and.w	r2, r2, #15
 8004d5c:	42aa      	cmp	r2, r5
 8004d5e:	f47f aefa 	bne.w	8004b56 <HAL_RCC_ClockConfig+0xa>
 8004d62:	e74b      	b.n	8004bfc <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d64:	4907      	ldr	r1, [pc, #28]	; (8004d84 <HAL_RCC_ClockConfig+0x238>)
 8004d66:	6925      	ldr	r5, [r4, #16]
 8004d68:	6988      	ldr	r0, [r1, #24]
 8004d6a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004d6e:	4285      	cmp	r5, r0
 8004d70:	f4bf af47 	bcs.w	8004c02 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d74:	698a      	ldr	r2, [r1, #24]
 8004d76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d7a:	432a      	orrs	r2, r5
 8004d7c:	618a      	str	r2, [r1, #24]
 8004d7e:	e740      	b.n	8004c02 <HAL_RCC_ClockConfig+0xb6>
 8004d80:	52002000 	.word	0x52002000
 8004d84:	58024400 	.word	0x58024400
 8004d88:	08006d50 	.word	0x08006d50
 8004d8c:	20000104 	.word	0x20000104
 8004d90:	20000100 	.word	0x20000100
 8004d94:	2000010c 	.word	0x2000010c

08004d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d9a:	f7ff fe3b 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004d9e:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <HAL_RCC_GetHCLKFreq+0x34>)
 8004da0:	490b      	ldr	r1, [pc, #44]	; (8004dd0 <HAL_RCC_GetHCLKFreq+0x38>)
 8004da2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004da4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004da6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004daa:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004db8:	5c88      	ldrb	r0, [r1, r2]
 8004dba:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004dbc:	f000 001f 	and.w	r0, r0, #31
 8004dc0:	fa23 f000 	lsr.w	r0, r3, r0
 8004dc4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dc6:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x40>)
 8004dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004dca:	bd08      	pop	{r3, pc}
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	08006d50 	.word	0x08006d50
 8004dd4:	20000104 	.word	0x20000104
 8004dd8:	20000100 	.word	0x20000100

08004ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ddc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004dde:	f7ff ffdb 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004de4:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004df2:	40d8      	lsrs	r0, r3
 8004df4:	bd08      	pop	{r3, pc}
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	08006d50 	.word	0x08006d50

08004e00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e02:	4c3a      	ldr	r4, [pc, #232]	; (8004eec <RCCEx_PLL2_Config+0xec>)
{
 8004e04:	4606      	mov	r6, r0
 8004e06:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d069      	beq.n	8004ee6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1a:	f7fd ff1f 	bl	8002c5c <HAL_GetTick>
 8004e1e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	011a      	lsls	r2, r3, #4
 8004e24:	d44b      	bmi.n	8004ebe <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e28:	6832      	ldr	r2, [r6, #0]
 8004e2a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e2e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004e32:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e34:	68b3      	ldr	r3, [r6, #8]
 8004e36:	68f2      	ldr	r2, [r6, #12]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	3a01      	subs	r2, #1
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	0412      	lsls	r2, r2, #16
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004e46:	4313      	orrs	r3, r2
 8004e48:	6872      	ldr	r2, [r6, #4]
 8004e4a:	3a01      	subs	r2, #1
 8004e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e50:	4313      	orrs	r3, r2
 8004e52:	6932      	ldr	r2, [r6, #16]
 8004e54:	3a01      	subs	r2, #1
 8004e56:	0612      	lsls	r2, r2, #24
 8004e58:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e62:	6972      	ldr	r2, [r6, #20]
 8004e64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e6e:	69b2      	ldr	r2, [r6, #24]
 8004e70:	f023 0320 	bic.w	r3, r3, #32
 8004e74:	4313      	orrs	r3, r2
 8004e76:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e7a:	f023 0310 	bic.w	r3, r3, #16
 8004e7e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e82:	69f2      	ldr	r2, [r6, #28]
 8004e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e90:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e94:	f043 0310 	orr.w	r3, r3, #16
 8004e98:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004e9c:	b9b5      	cbnz	r5, 8004ecc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ea2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ea4:	4c11      	ldr	r4, [pc, #68]	; (8004eec <RCCEx_PLL2_Config+0xec>)
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eae:	f7fd fed5 	bl	8002c5c <HAL_GetTick>
 8004eb2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	d50f      	bpl.n	8004eda <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e005      	b.n	8004eca <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ebe:	f7fd fecd 	bl	8002c5c <HAL_GetTick>
 8004ec2:	1bc0      	subs	r0, r0, r7
 8004ec4:	2802      	cmp	r0, #2
 8004ec6:	d9ab      	bls.n	8004e20 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8004ec8:	2003      	movs	r0, #3
}
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ecc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ece:	bf0c      	ite	eq
 8004ed0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ed4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004ed8:	e7e3      	b.n	8004ea2 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004eda:	f7fd febf 	bl	8002c5c <HAL_GetTick>
 8004ede:	1b40      	subs	r0, r0, r5
 8004ee0:	2802      	cmp	r0, #2
 8004ee2:	d9e7      	bls.n	8004eb4 <RCCEx_PLL2_Config+0xb4>
 8004ee4:	e7f0      	b.n	8004ec8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	e7ef      	b.n	8004eca <RCCEx_PLL2_Config+0xca>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400

08004ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef2:	4c3a      	ldr	r4, [pc, #232]	; (8004fdc <RCCEx_PLL3_Config+0xec>)
{
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d069      	beq.n	8004fd6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fd fea7 	bl	8002c5c <HAL_GetTick>
 8004f0e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	009a      	lsls	r2, r3, #2
 8004f14:	d44b      	bmi.n	8004fae <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f18:	6832      	ldr	r2, [r6, #0]
 8004f1a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004f1e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f24:	68b3      	ldr	r3, [r6, #8]
 8004f26:	68f2      	ldr	r2, [r6, #12]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	025b      	lsls	r3, r3, #9
 8004f2e:	0412      	lsls	r2, r2, #16
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004f36:	4313      	orrs	r3, r2
 8004f38:	6872      	ldr	r2, [r6, #4]
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f40:	4313      	orrs	r3, r2
 8004f42:	6932      	ldr	r2, [r6, #16]
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0612      	lsls	r2, r2, #24
 8004f48:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f52:	6972      	ldr	r2, [r6, #20]
 8004f54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f5e:	69b2      	ldr	r2, [r6, #24]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f64:	4313      	orrs	r3, r2
 8004f66:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f72:	69f2      	ldr	r2, [r6, #28]
 8004f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f80:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004f8c:	b9b5      	cbnz	r5, 8004fbc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f92:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f94:	4c11      	ldr	r4, [pc, #68]	; (8004fdc <RCCEx_PLL3_Config+0xec>)
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9e:	f7fd fe5d 	bl	8002c5c <HAL_GetTick>
 8004fa2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	d50f      	bpl.n	8004fca <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8004faa:	2000      	movs	r0, #0
 8004fac:	e005      	b.n	8004fba <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fae:	f7fd fe55 	bl	8002c5c <HAL_GetTick>
 8004fb2:	1bc0      	subs	r0, r0, r7
 8004fb4:	2802      	cmp	r0, #2
 8004fb6:	d9ab      	bls.n	8004f10 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8004fb8:	2003      	movs	r0, #3
}
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fbc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fbe:	bf0c      	ite	eq
 8004fc0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fc4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	e7e3      	b.n	8004f92 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fca:	f7fd fe47 	bl	8002c5c <HAL_GetTick>
 8004fce:	1b40      	subs	r0, r0, r5
 8004fd0:	2802      	cmp	r0, #2
 8004fd2:	d9e7      	bls.n	8004fa4 <RCCEx_PLL3_Config+0xb4>
 8004fd4:	e7f0      	b.n	8004fb8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e7ef      	b.n	8004fba <RCCEx_PLL3_Config+0xca>
 8004fda:	bf00      	nop
 8004fdc:	58024400 	.word	0x58024400

08004fe0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe4:	6806      	ldr	r6, [r0, #0]
{
 8004fe6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe8:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8004fec:	d023      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004fee:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff4:	d018      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004ff6:	d802      	bhi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ff8:	b183      	cbz	r3, 800501c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8004ffa:	2601      	movs	r6, #1
 8004ffc:	e01b      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005002:	d023      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005008:	d1f7      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800500a:	4a9f      	ldr	r2, [pc, #636]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800500c:	2600      	movs	r6, #0
 800500e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005010:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005012:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005016:	430b      	orrs	r3, r1
 8005018:	6513      	str	r3, [r2, #80]	; 0x50
 800501a:	e00c      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4a9a      	ldr	r2, [pc, #616]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800501e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005026:	e7f0      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005028:	2102      	movs	r1, #2
 800502a:	3004      	adds	r0, #4
 800502c:	f7ff fee8 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005030:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005032:	2800      	cmp	r0, #0
 8005034:	d0e9      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	05dd      	lsls	r5, r3, #23
 800503a:	d534      	bpl.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 800503c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800503e:	2b04      	cmp	r3, #4
 8005040:	d830      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8005042:	e8df f003 	tbb	[pc, r3]
 8005046:	0f08      	.short	0x0f08
 8005048:	0d29      	.short	0x0d29
 800504a:	0d          	.byte	0x0d
 800504b:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800504c:	2102      	movs	r1, #2
 800504e:	3024      	adds	r0, #36	; 0x24
 8005050:	f7ff ff4e 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005054:	e7ec      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005056:	4a8c      	ldr	r2, [pc, #560]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005058:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800505a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8005060:	4635      	mov	r5, r6
 8005062:	e004      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005064:	2100      	movs	r1, #0
 8005066:	1d20      	adds	r0, r4, #4
 8005068:	f7ff feca 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800506c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800506e:	b9e5      	cbnz	r5, 80050aa <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005070:	4a85      	ldr	r2, [pc, #532]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005072:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005074:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	430b      	orrs	r3, r1
 800507c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	0598      	lsls	r0, r3, #22
 8005082:	d521      	bpl.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005084:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d03b      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800508a:	d810      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xce>
 800508c:	b36b      	cbz	r3, 80050ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d031      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8005092:	2601      	movs	r6, #1
 8005094:	4635      	mov	r5, r6
 8005096:	e017      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005098:	2100      	movs	r1, #0
 800509a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800509e:	f7ff ff27 	bl	8004ef0 <RCCEx_PLL3_Config>
 80050a2:	e7e3      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 80050a4:	2601      	movs	r6, #1
 80050a6:	4635      	mov	r5, r6
 80050a8:	e7e9      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80050aa:	462e      	mov	r6, r5
 80050ac:	e7e7      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80050ae:	2bc0      	cmp	r3, #192	; 0xc0
 80050b0:	d002      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80050b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b6:	d1ec      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 80050b8:	bb4d      	cbnz	r5, 800510e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050ba:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80050bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80050be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80050c0:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	0559      	lsls	r1, r3, #21
 80050cc:	d530      	bpl.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 80050ce:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80050d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d6:	d047      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80050d8:	d81b      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d038      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80050de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e2:	d03b      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 80050e4:	2601      	movs	r6, #1
 80050e6:	4635      	mov	r5, r6
 80050e8:	e022      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ea:	4a67      	ldr	r2, [pc, #412]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80050ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80050f4:	e7e0      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f6:	2100      	movs	r1, #0
 80050f8:	1d20      	adds	r0, r4, #4
 80050fa:	f7ff fe81 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050fe:	4605      	mov	r5, r0
      break;
 8005100:	e7da      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005102:	2100      	movs	r1, #0
 8005104:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005108:	f7ff fef2 	bl	8004ef0 <RCCEx_PLL3_Config>
 800510c:	e7f7      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800510e:	462e      	mov	r6, r5
 8005110:	e7da      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005116:	d002      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8005118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511c:	d1e2      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 800511e:	bb4d      	cbnz	r5, 8005174 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005120:	4a59      	ldr	r2, [pc, #356]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005122:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005126:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005128:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800512c:	430b      	orrs	r3, r1
 800512e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	051a      	lsls	r2, r3, #20
 8005134:	d52f      	bpl.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005136:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800513a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800513e:	d041      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005140:	d81a      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005142:	b39b      	cbz	r3, 80051ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005148:	d036      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 800514a:	2601      	movs	r6, #1
 800514c:	4635      	mov	r5, r6
 800514e:	e022      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005150:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005152:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005158:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800515a:	e7e0      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800515c:	2100      	movs	r1, #0
 800515e:	1d20      	adds	r0, r4, #4
 8005160:	f7ff fe4e 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005164:	4605      	mov	r5, r0
      break;
 8005166:	e7da      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005168:	2100      	movs	r1, #0
 800516a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800516e:	f7ff febf 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005172:	e7f7      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8005174:	462e      	mov	r6, r5
 8005176:	e7db      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800517c:	d002      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800517e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005182:	d1e2      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8005184:	bb25      	cbnz	r5, 80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005186:	4a40      	ldr	r2, [pc, #256]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005188:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800518c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800518e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005192:	430b      	orrs	r3, r1
 8005194:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	d527      	bpl.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 800519c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d033      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051a2:	d817      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80051a4:	b1d3      	cbz	r3, 80051dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 80051a6:	2601      	movs	r6, #1
 80051a8:	4635      	mov	r5, r6
 80051aa:	e01f      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ac:	4a36      	ldr	r2, [pc, #216]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80051ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80051b6:	e7e5      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051b8:	2100      	movs	r1, #0
 80051ba:	1d20      	adds	r0, r4, #4
 80051bc:	f7ff fe20 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c0:	4605      	mov	r5, r0
      break;
 80051c2:	e7df      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c4:	2100      	movs	r1, #0
 80051c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051ca:	f7ff fe91 	bl	8004ef0 <RCCEx_PLL3_Config>
 80051ce:	e7f7      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80051d0:	462e      	mov	r6, r5
 80051d2:	e7e0      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d01e      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	d1e4      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 80051dc:	bb0d      	cbnz	r5, 8005222 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80051e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80051e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80051e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80051e8:	430b      	orrs	r3, r1
 80051ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	04df      	lsls	r7, r3, #19
 80051f0:	d527      	bpl.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 80051f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d03e      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80051fa:	d814      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80051fc:	b383      	cbz	r3, 8005260 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d033      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8005204:	2601      	movs	r6, #1
 8005206:	4635      	mov	r5, r6
 8005208:	e01b      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520a:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800520c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800520e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005212:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8005214:	e7e2      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005216:	2102      	movs	r1, #2
 8005218:	1d20      	adds	r0, r4, #4
 800521a:	f7ff fdf1 	bl	8004e00 <RCCEx_PLL2_Config>
 800521e:	4605      	mov	r5, r0
      break;
 8005220:	e7dc      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8005222:	462e      	mov	r6, r5
 8005224:	e7e2      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8005226:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800522a:	d002      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x252>
 800522c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005230:	d1e8      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8005232:	bb3d      	cbnz	r5, 8005284 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005236:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005238:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	430b      	orrs	r3, r1
 8005240:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	0498      	lsls	r0, r3, #18
 8005246:	d532      	bpl.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8005248:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800524a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524e:	d044      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005250:	d81c      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005252:	b323      	cbz	r3, 800529e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d039      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 800525a:	2601      	movs	r6, #1
 800525c:	4635      	mov	r5, r6
 800525e:	e026      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005262:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005268:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800526a:	e7e2      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800526c:	2100      	movs	r1, #0
 800526e:	1d20      	adds	r0, r4, #4
 8005270:	f7ff fdc6 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005274:	4605      	mov	r5, r0
      break;
 8005276:	e7dc      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005278:	2100      	movs	r1, #0
 800527a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800527e:	f7ff fe37 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005282:	e7f7      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8005284:	462e      	mov	r6, r5
 8005286:	e7dc      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005288:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 800528c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005290:	d005      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8005292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005296:	d002      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8005298:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800529c:	d1dd      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 800529e:	bb15      	cbnz	r5, 80052e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052a0:	4aa0      	ldr	r2, [pc, #640]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80052a2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80052a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80052a6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80052aa:	430b      	orrs	r3, r1
 80052ac:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	0459      	lsls	r1, r3, #17
 80052b2:	d52d      	bpl.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80052b4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d04b      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052be:	d814      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80052c0:	b1e3      	cbz	r3, 80052fc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80052c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c6:	d040      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 80052c8:	2601      	movs	r6, #1
 80052ca:	4635      	mov	r5, r6
 80052cc:	e020      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052ce:	2101      	movs	r1, #1
 80052d0:	1d20      	adds	r0, r4, #4
 80052d2:	f7ff fd95 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052d6:	4605      	mov	r5, r0
      break;
 80052d8:	e7e1      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052da:	2101      	movs	r1, #1
 80052dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052e0:	f7ff fe06 	bl	8004ef0 <RCCEx_PLL3_Config>
 80052e4:	e7f7      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80052e6:	462e      	mov	r6, r5
 80052e8:	e7e1      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d005      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80052f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052f4:	d002      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80052f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052fa:	d1e5      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	d130      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005300:	4a88      	ldr	r2, [pc, #544]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005302:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8005306:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005308:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800530c:	430b      	orrs	r3, r1
 800530e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	041a      	lsls	r2, r3, #16
 8005314:	d50f      	bpl.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8005316:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800531c:	d023      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800531e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005322:	d026      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005324:	bb5b      	cbnz	r3, 800537e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8005326:	bb6d      	cbnz	r5, 8005384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005328:	4a7e      	ldr	r2, [pc, #504]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800532a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800532c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800532e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005332:	430b      	orrs	r3, r1
 8005334:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	01db      	lsls	r3, r3, #7
 800533a:	d533      	bpl.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 800533c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800533e:	2b03      	cmp	r3, #3
 8005340:	d874      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005342:	e8df f003 	tbb	[pc, r3]
 8005346:	2126      	.short	0x2126
 8005348:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800534a:	2101      	movs	r1, #1
 800534c:	1d20      	adds	r0, r4, #4
 800534e:	f7ff fd57 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005352:	4605      	mov	r5, r0
      break;
 8005354:	e7d2      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005356:	2101      	movs	r1, #1
 8005358:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800535c:	f7ff fdc8 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005360:	e7f7      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005362:	462e      	mov	r6, r5
 8005364:	e7d4      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005366:	4a6f      	ldr	r2, [pc, #444]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005368:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800536a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8005370:	e7d9      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005372:	2101      	movs	r1, #1
 8005374:	1d20      	adds	r0, r4, #4
 8005376:	f7ff fd43 	bl	8004e00 <RCCEx_PLL2_Config>
 800537a:	4605      	mov	r5, r0
      break;
 800537c:	e7d3      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 800537e:	2601      	movs	r6, #1
 8005380:	4635      	mov	r5, r6
 8005382:	e7d8      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005384:	462e      	mov	r6, r5
 8005386:	e7d6      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005388:	4a66      	ldr	r2, [pc, #408]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800538a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800538c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005392:	2d00      	cmp	r5, #0
 8005394:	d14d      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005396:	4a63      	ldr	r2, [pc, #396]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005398:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800539a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800539c:	f023 0303 	bic.w	r3, r3, #3
 80053a0:	430b      	orrs	r3, r1
 80053a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	025f      	lsls	r7, r3, #9
 80053a8:	d54d      	bpl.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053aa:	4f5f      	ldr	r7, [pc, #380]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80053b4:	f7fd fc52 	bl	8002c5c <HAL_GetTick>
 80053b8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	05d8      	lsls	r0, r3, #23
 80053be:	d53a      	bpl.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	d161      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053c4:	4b57      	ldr	r3, [pc, #348]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80053c6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80053ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053cc:	4042      	eors	r2, r0
 80053ce:	f412 7f40 	tst.w	r2, #768	; 0x300
 80053d2:	d00b      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80053dc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80053e0:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80053e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80053e8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80053ea:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80053f0:	d036      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80053f6:	494b      	ldr	r1, [pc, #300]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80053f8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80053fc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005400:	d13e      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005402:	6908      	ldr	r0, [r1, #16]
 8005404:	4a49      	ldr	r2, [pc, #292]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005406:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800540a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800540e:	4302      	orrs	r2, r0
 8005410:	610a      	str	r2, [r1, #16]
 8005412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005416:	4a43      	ldr	r2, [pc, #268]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005418:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800541a:	430b      	orrs	r3, r1
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
 800541e:	e012      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005420:	2102      	movs	r1, #2
 8005422:	1d20      	adds	r0, r4, #4
 8005424:	f7ff fcec 	bl	8004e00 <RCCEx_PLL2_Config>
 8005428:	4605      	mov	r5, r0
      break;
 800542a:	e7b2      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 800542c:	2601      	movs	r6, #1
 800542e:	4635      	mov	r5, r6
 8005430:	e7b8      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005432:	462e      	mov	r6, r5
 8005434:	e7b6      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005436:	f7fd fc11 	bl	8002c5c <HAL_GetTick>
 800543a:	eba0 0008 	sub.w	r0, r0, r8
 800543e:	2864      	cmp	r0, #100	; 0x64
 8005440:	d9bb      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8005442:	2603      	movs	r6, #3
 8005444:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	07da      	lsls	r2, r3, #31
 800544a:	d52d      	bpl.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 800544c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800544e:	2b10      	cmp	r3, #16
 8005450:	d03b      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005452:	d81b      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005454:	b303      	cbz	r3, 8005498 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8005456:	2b08      	cmp	r3, #8
 8005458:	d031      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 800545a:	2601      	movs	r6, #1
 800545c:	4635      	mov	r5, r6
 800545e:	e023      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8005460:	f7fd fbfc 	bl	8002c5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005464:	4f2f      	ldr	r7, [pc, #188]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8005466:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800546c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546e:	0799      	lsls	r1, r3, #30
 8005470:	d4bf      	bmi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fd fbf3 	bl	8002c5c <HAL_GetTick>
 8005476:	eba0 0008 	sub.w	r0, r0, r8
 800547a:	4548      	cmp	r0, r9
 800547c:	d9f6      	bls.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800547e:	e7e0      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005480:	690a      	ldr	r2, [r1, #16]
 8005482:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005486:	e7c3      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005488:	462e      	mov	r6, r5
 800548a:	e7dc      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 800548c:	2b20      	cmp	r3, #32
 800548e:	d003      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8005490:	2b28      	cmp	r3, #40	; 0x28
 8005492:	d001      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8005494:	2b18      	cmp	r3, #24
 8005496:	d1e0      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8005498:	b9ed      	cbnz	r5, 80054d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800549a:	4a22      	ldr	r2, [pc, #136]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800549c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800549e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80054a0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	079b      	lsls	r3, r3, #30
 80054ac:	d522      	bpl.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d831      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80054b4:	e8df f003 	tbb	[pc, r3]
 80054b8:	162a1116 	.word	0x162a1116
 80054bc:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054be:	2101      	movs	r1, #1
 80054c0:	1d20      	adds	r0, r4, #4
 80054c2:	f7ff fc9d 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054c6:	4605      	mov	r5, r0
      break;
 80054c8:	e7e6      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054ca:	2101      	movs	r1, #1
 80054cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054d0:	f7ff fd0e 	bl	8004ef0 <RCCEx_PLL3_Config>
 80054d4:	e7f7      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80054d6:	462e      	mov	r6, r5
 80054d8:	e7e6      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054da:	2101      	movs	r1, #1
 80054dc:	1d20      	adds	r0, r4, #4
 80054de:	f7ff fc8f 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80054e4:	b9dd      	cbnz	r5, 800551e <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054e6:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80054e8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80054ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	075f      	lsls	r7, r3, #29
 80054f8:	d528      	bpl.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d83a      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005502:	e8df f003 	tbb	[pc, r3]
 8005506:	151a      	.short	0x151a
 8005508:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800550c:	2101      	movs	r1, #1
 800550e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005512:	f7ff fced 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005516:	e7e4      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8005518:	2601      	movs	r6, #1
 800551a:	4635      	mov	r5, r6
 800551c:	e7ea      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800551e:	462e      	mov	r6, r5
 8005520:	e7e8      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005522:	bf00      	nop
 8005524:	58024400 	.word	0x58024400
 8005528:	58024800 	.word	0x58024800
 800552c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005530:	2101      	movs	r1, #1
 8005532:	1d20      	adds	r0, r4, #4
 8005534:	f7ff fc64 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005538:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800553a:	bb05      	cbnz	r5, 800557e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800553c:	4a98      	ldr	r2, [pc, #608]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800553e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005542:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	430b      	orrs	r3, r1
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	0698      	lsls	r0, r3, #26
 8005550:	d529      	bpl.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005552:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555a:	d03a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800555c:	d811      	bhi.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800555e:	b1cb      	cbz	r3, 8005594 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005564:	d02f      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8005566:	2601      	movs	r6, #1
 8005568:	4635      	mov	r5, r6
 800556a:	e01c      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800556c:	2101      	movs	r1, #1
 800556e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005572:	f7ff fcbd 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005576:	e7df      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8005578:	2601      	movs	r6, #1
 800557a:	4635      	mov	r5, r6
 800557c:	e7e6      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800557e:	462e      	mov	r6, r5
 8005580:	e7e4      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d005      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800558c:	d002      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800558e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005592:	d1e8      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8005594:	bb1d      	cbnz	r5, 80055de <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005596:	4a82      	ldr	r2, [pc, #520]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005598:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800559c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800559e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	0659      	lsls	r1, r3, #25
 80055aa:	d52c      	bpl.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80055b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b4:	d03f      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x656>
 80055b6:	d814      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80055b8:	b1e3      	cbz	r3, 80055f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055be:	d034      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 80055c0:	2601      	movs	r6, #1
 80055c2:	4635      	mov	r5, r6
 80055c4:	e01f      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055c6:	2100      	movs	r1, #0
 80055c8:	1d20      	adds	r0, r4, #4
 80055ca:	f7ff fc19 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055ce:	4605      	mov	r5, r0
      break;
 80055d0:	e7e0      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055d2:	2102      	movs	r1, #2
 80055d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055d8:	f7ff fc8a 	bl	8004ef0 <RCCEx_PLL3_Config>
 80055dc:	e7f7      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80055de:	462e      	mov	r6, r5
 80055e0:	e7e1      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e6:	d005      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80055e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055ec:	d002      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80055ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f2:	d1e5      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 80055f4:	bb2d      	cbnz	r5, 8005642 <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055f6:	4a6a      	ldr	r2, [pc, #424]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80055f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80055fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80055fe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005602:	430b      	orrs	r3, r1
 8005604:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	061a      	lsls	r2, r3, #24
 800560a:	d530      	bpl.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800560c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005614:	f000 80a4 	beq.w	8005760 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8005618:	d815      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x666>
 800561a:	b1eb      	cbz	r3, 8005658 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005620:	f000 8098 	beq.w	8005754 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 8005624:	2601      	movs	r6, #1
 8005626:	4635      	mov	r5, r6
 8005628:	e021      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800562a:	2100      	movs	r1, #0
 800562c:	1d20      	adds	r0, r4, #4
 800562e:	f7ff fbe7 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005632:	4605      	mov	r5, r0
      break;
 8005634:	e7de      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005636:	2102      	movs	r1, #2
 8005638:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800563c:	f7ff fc58 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005640:	e7f7      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005642:	462e      	mov	r6, r5
 8005644:	e7df      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564a:	d005      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800564c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005650:	d002      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005652:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005656:	d1e5      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8005658:	2d00      	cmp	r5, #0
 800565a:	f040 8087 	bne.w	800576c <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800565e:	4a50      	ldr	r2, [pc, #320]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005660:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005664:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005666:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800566a:	430b      	orrs	r3, r1
 800566c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	071b      	lsls	r3, r3, #28
 8005672:	d514      	bpl.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005674:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d107      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800567e:	2102      	movs	r1, #2
 8005680:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005684:	f7ff fc34 	bl	8004ef0 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8005688:	2800      	cmp	r0, #0
 800568a:	bf18      	it	ne
 800568c:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800568e:	4a44      	ldr	r2, [pc, #272]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005690:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005694:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800569a:	430b      	orrs	r3, r1
 800569c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	06df      	lsls	r7, r3, #27
 80056a2:	d514      	bpl.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80056a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80056a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ac:	d107      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80056ae:	2102      	movs	r1, #2
 80056b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056b4:	f7ff fc1c 	bl	8004ef0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80056b8:	2800      	cmp	r0, #0
 80056ba:	bf18      	it	ne
 80056bc:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80056c0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80056c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	430b      	orrs	r3, r1
 80056cc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	0318      	lsls	r0, r3, #12
 80056d2:	d517      	bpl.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 80056d4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80056d8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80056dc:	d048      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80056de:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80056e2:	d005      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x710>
 80056e4:	2900      	cmp	r1, #0
 80056e6:	d149      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056e8:	1d20      	adds	r0, r4, #4
 80056ea:	f7ff fb89 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	d146      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80056f6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80056fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005700:	430b      	orrs	r3, r1
 8005702:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	0359      	lsls	r1, r3, #13
 8005708:	d518      	bpl.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 800570a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800570e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005712:	d038      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005718:	d007      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571e:	d139      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005722:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005728:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800572a:	bbb5      	cbnz	r5, 800579a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800572e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005732:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005734:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005738:	430b      	orrs	r3, r1
 800573a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	03da      	lsls	r2, r3, #15
 8005740:	d53e      	bpl.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8005742:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005744:	b373      	cbz	r3, 80057a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8005746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574a:	f000 808c 	beq.w	8005866 <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 800574e:	2601      	movs	r6, #1
 8005750:	4635      	mov	r5, r6
 8005752:	e035      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005754:	2100      	movs	r1, #0
 8005756:	1d20      	adds	r0, r4, #4
 8005758:	f7ff fb52 	bl	8004e00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800575c:	4605      	mov	r5, r0
      break;
 800575e:	e77b      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005760:	2102      	movs	r1, #2
 8005762:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005766:	f7ff fbc3 	bl	8004ef0 <RCCEx_PLL3_Config>
 800576a:	e7f7      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 800576c:	462e      	mov	r6, r5
 800576e:	e77e      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005770:	2102      	movs	r1, #2
 8005772:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005776:	f7ff fbbb 	bl	8004ef0 <RCCEx_PLL3_Config>
 800577a:	e7b8      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 800577c:	2601      	movs	r6, #1
 800577e:	4635      	mov	r5, r6
 8005780:	e7c0      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x724>
 8005782:	462e      	mov	r6, r5
 8005784:	e7be      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005786:	2101      	movs	r1, #1
 8005788:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800578c:	f7ff fbb0 	bl	8004ef0 <RCCEx_PLL3_Config>
 8005790:	4605      	mov	r5, r0
      break;
 8005792:	e7ca      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8005794:	2601      	movs	r6, #1
 8005796:	4635      	mov	r5, r6
 8005798:	e7d0      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800579a:	462e      	mov	r6, r5
 800579c:	e7ce      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800579e:	bf00      	nop
 80057a0:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4a3c      	ldr	r2, [pc, #240]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80057a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d15f      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057b2:	4a39      	ldr	r2, [pc, #228]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80057b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80057b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057bc:	430b      	orrs	r3, r1
 80057be:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	d507      	bpl.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80057c6:	2102      	movs	r1, #2
 80057c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80057cc:	f7ff fb90 	bl	8004ef0 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80057d0:	2800      	cmp	r0, #0
 80057d2:	bf18      	it	ne
 80057d4:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	039f      	lsls	r7, r3, #14
 80057da:	d50e      	bpl.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 80057dc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80057de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80057e2:	d050      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80057e4:	d847      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x896>
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d14b      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	d151      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ee:	482a      	ldr	r0, [pc, #168]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80057f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057f6:	430a      	orrs	r2, r1
 80057f8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057fa:	02dd      	lsls	r5, r3, #11
 80057fc:	d506      	bpl.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057fe:	4926      	ldr	r1, [pc, #152]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005800:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005802:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005804:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005808:	4302      	orrs	r2, r0
 800580a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800580c:	00d8      	lsls	r0, r3, #3
 800580e:	d507      	bpl.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005810:	4921      	ldr	r1, [pc, #132]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005812:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8005816:	690a      	ldr	r2, [r1, #16]
 8005818:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800581c:	4302      	orrs	r2, r0
 800581e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005820:	0299      	lsls	r1, r3, #10
 8005822:	d506      	bpl.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005824:	491c      	ldr	r1, [pc, #112]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005826:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005828:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800582a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800582e:	4302      	orrs	r2, r0
 8005830:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005832:	005a      	lsls	r2, r3, #1
 8005834:	d509      	bpl.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005838:	6911      	ldr	r1, [r2, #16]
 800583a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800583e:	6111      	str	r1, [r2, #16]
 8005840:	6911      	ldr	r1, [r2, #16]
 8005842:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8005846:	4301      	orrs	r1, r0
 8005848:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800584a:	2b00      	cmp	r3, #0
 800584c:	da06      	bge.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005850:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005852:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005854:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005858:	430b      	orrs	r3, r1
 800585a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800585c:	1c30      	adds	r0, r6, #0
 800585e:	bf18      	it	ne
 8005860:	2001      	movne	r0, #1
 8005862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005866:	2102      	movs	r1, #2
 8005868:	1d20      	adds	r0, r4, #4
 800586a:	f7ff fac9 	bl	8004e00 <RCCEx_PLL2_Config>
 800586e:	4605      	mov	r5, r0
      break;
 8005870:	e79d      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005872:	462e      	mov	r6, r5
 8005874:	e7a4      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8005876:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800587a:	d0b6      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800587c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8005880:	d0b3      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8005882:	2601      	movs	r6, #1
 8005884:	e7b9      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005886:	4804      	ldr	r0, [pc, #16]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005888:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800588a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800588e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8005890:	e7ab      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005892:	462e      	mov	r6, r5
 8005894:	e7b1      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400

0800589c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_SDRAM_Init>:
{
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	460d      	mov	r5, r1
  if (hsdram == NULL)
 80058a4:	4604      	mov	r4, r0
 80058a6:	b1f0      	cbz	r0, 80058e6 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80058a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80058ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058b0:	b91b      	cbnz	r3, 80058ba <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80058b2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80058b6:	f7ff fff1 	bl	800589c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058ba:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80058bc:	1d21      	adds	r1, r4, #4
 80058be:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80058c4:	f000 f84b 	bl	800595e <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	4629      	mov	r1, r5
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	f000 f881 	bl	80059d4 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80058d2:	4a06      	ldr	r2, [pc, #24]	; (80058ec <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 80058d4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80058de:	2301      	movs	r3, #1
 80058e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80058e6:	2001      	movs	r0, #1
 80058e8:	e7fc      	b.n	80058e4 <HAL_SDRAM_Init+0x44>
 80058ea:	bf00      	nop
 80058ec:	52004000 	.word	0x52004000

080058f0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80058f4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80058f8:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80058fa:	b2c0      	uxtb	r0, r0
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80058fc:	2802      	cmp	r0, #2
 80058fe:	d010      	beq.n	8005922 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005900:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8005904:	2c01      	cmp	r4, #1
 8005906:	d110      	bne.n	800592a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005908:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800590a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800590c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005910:	f000 f896 	bl	8005a40 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d104      	bne.n	8005924 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800591a:	2305      	movs	r3, #5
 800591c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005920:	2000      	movs	r0, #0
}
 8005922:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005924:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8005928:	e7fa      	b.n	8005920 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800592a:	2001      	movs	r0, #1
 800592c:	e7f9      	b.n	8005922 <HAL_SDRAM_SendCommand+0x32>

0800592e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800592e:	b538      	push	{r3, r4, r5, lr}
 8005930:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005932:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8005936:	b2c0      	uxtb	r0, r0
 8005938:	2802      	cmp	r0, #2
 800593a:	d00d      	beq.n	8005958 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800593c:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 8005940:	b2ed      	uxtb	r5, r5
 8005942:	2d01      	cmp	r5, #1
 8005944:	d109      	bne.n	800595a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005946:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005948:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800594a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800594e:	f000 f887 	bl	8005a60 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005952:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005954:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8005958:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800595a:	2001      	movs	r0, #1
 800595c:	e7fc      	b.n	8005958 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800595e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800595e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005962:	680a      	ldr	r2, [r1, #0]
 8005964:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8005968:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800596c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8005970:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8005974:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8005978:	4323      	orrs	r3, r4
 800597a:	b9a2      	cbnz	r2, 80059a6 <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800597c:	ea43 0209 	orr.w	r2, r3, r9
 8005980:	6801      	ldr	r1, [r0, #0]
 8005982:	432a      	orrs	r2, r5
 8005984:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005988:	ea42 0308 	orr.w	r3, r2, r8
 800598c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8005990:	ea43 030e 	orr.w	r3, r3, lr
 8005994:	ea43 030c 	orr.w	r3, r3, ip
 8005998:	433b      	orrs	r3, r7
 800599a:	4333      	orrs	r3, r6
 800599c:	430b      	orrs	r3, r1
 800599e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80059a0:	2000      	movs	r0, #0
 80059a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80059a6:	6802      	ldr	r2, [r0, #0]
 80059a8:	ea43 0309 	orr.w	r3, r3, r9
 80059ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059b0:	4313      	orrs	r3, r2
 80059b2:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80059b4:	ea45 0308 	orr.w	r3, r5, r8
 80059b8:	6842      	ldr	r2, [r0, #4]
 80059ba:	ea43 030e 	orr.w	r3, r3, lr
 80059be:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80059c2:	ea43 030c 	orr.w	r3, r3, ip
 80059c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80059ca:	433b      	orrs	r3, r7
 80059cc:	4333      	orrs	r3, r6
 80059ce:	4313      	orrs	r3, r2
 80059d0:	6043      	str	r3, [r0, #4]
 80059d2:	e7e5      	b.n	80059a0 <FMC_SDRAM_Init+0x42>

080059d4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059d4:	68cb      	ldr	r3, [r1, #12]
 80059d6:	f103 3cff 	add.w	ip, r3, #4294967295
 80059da:	694b      	ldr	r3, [r1, #20]
 80059dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059de:	3b01      	subs	r3, #1
 80059e0:	680f      	ldr	r7, [r1, #0]
 80059e2:	684c      	ldr	r4, [r1, #4]
 80059e4:	688e      	ldr	r6, [r1, #8]
 80059e6:	051b      	lsls	r3, r3, #20
 80059e8:	690d      	ldr	r5, [r1, #16]
 80059ea:	3c01      	subs	r4, #1
 80059ec:	6989      	ldr	r1, [r1, #24]
 80059ee:	3e01      	subs	r6, #1
 80059f0:	3d01      	subs	r5, #1
 80059f2:	3f01      	subs	r7, #1
 80059f4:	3901      	subs	r1, #1
 80059f6:	0124      	lsls	r4, r4, #4
 80059f8:	0236      	lsls	r6, r6, #8
 80059fa:	042d      	lsls	r5, r5, #16
 80059fc:	0609      	lsls	r1, r1, #24
 80059fe:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005a02:	b95a      	cbnz	r2, 8005a1c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a04:	433b      	orrs	r3, r7
 8005a06:	6882      	ldr	r2, [r0, #8]
 8005a08:	4323      	orrs	r3, r4
 8005a0a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005a0e:	4333      	orrs	r3, r6
 8005a10:	432b      	orrs	r3, r5
 8005a12:	430b      	orrs	r3, r1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8005a18:	2000      	movs	r0, #0
 8005a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a1c:	6882      	ldr	r2, [r0, #8]
 8005a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a22:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8005a26:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005a28:	ea44 0306 	orr.w	r3, r4, r6
 8005a2c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a2e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005a30:	68c2      	ldr	r2, [r0, #12]
 8005a32:	432b      	orrs	r3, r5
 8005a34:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60c3      	str	r3, [r0, #12]
 8005a3e:	e7eb      	b.n	8005a18 <FMC_SDRAM_Timing_Init+0x44>

08005a40 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005a40:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 8005a42:	e9d1 3400 	ldrd	r3, r4, [r1]
 8005a46:	6902      	ldr	r2, [r0, #16]
 8005a48:	4323      	orrs	r3, r4
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	68ca      	ldr	r2, [r1, #12]
 8005a4e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8005a52:	688a      	ldr	r2, [r1, #8]
 8005a54:	3a01      	subs	r2, #1
 8005a56:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005a5a:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005a60:	6943      	ldr	r3, [r0, #20]
 8005a62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a66:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8005a6a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005a6e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8005a70:	2000      	movs	r0, #0
 8005a72:	4770      	bx	lr

08005a74 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a74:	0189      	lsls	r1, r1, #6
 8005a76:	4a07      	ldr	r2, [pc, #28]	; (8005a94 <USB_FlushTxFifo+0x20>)
 8005a78:	f041 0120 	orr.w	r1, r1, #32
 8005a7c:	6101      	str	r1, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005a7e:	3a01      	subs	r2, #1
 8005a80:	d005      	beq.n	8005a8e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a82:	6903      	ldr	r3, [r0, #16]
 8005a84:	f013 0320 	ands.w	r3, r3, #32
 8005a88:	d1f9      	bne.n	8005a7e <USB_FlushTxFifo+0xa>

  return HAL_OK;
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005a8e:	2003      	movs	r0, #3
}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	00030d41 	.word	0x00030d41

08005a98 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a98:	2310      	movs	r3, #16
 8005a9a:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <USB_FlushRxFifo+0x1c>)
 8005a9c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	d005      	beq.n	8005aae <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aa2:	6903      	ldr	r3, [r0, #16]
 8005aa4:	f013 0310 	ands.w	r3, r3, #16
 8005aa8:	d1f9      	bne.n	8005a9e <USB_FlushRxFifo+0x6>

  return HAL_OK;
 8005aaa:	4618      	mov	r0, r3
 8005aac:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005aae:	2003      	movs	r0, #3
}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	00030d41 	.word	0x00030d41

08005ab8 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ab8:	3203      	adds	r2, #3

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aba:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005abe:	0892      	lsrs	r2, r2, #2
 8005ac0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8005ac4:	4291      	cmp	r1, r2
 8005ac6:	d101      	bne.n	8005acc <USB_ReadPacket+0x14>
    pDest++;
  }

  return ((void *)pDest);
}
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005acc:	6803      	ldr	r3, [r0, #0]
 8005ace:	f841 3b04 	str.w	r3, [r1], #4
 8005ad2:	e7f7      	b.n	8005ac4 <USB_ReadPacket+0xc>

08005ad4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ad4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005ad6:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8005ad8:	4010      	ands	r0, r2
 8005ada:	4770      	bx	lr

08005adc <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8005adc:	6940      	ldr	r0, [r0, #20]
}
 8005ade:	f000 0001 	and.w	r0, r0, #1
 8005ae2:	4770      	bx	lr

08005ae4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ae4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 8005ae8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005aea:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8005aee:	f023 0303 	bic.w	r3, r3, #3
{
 8005af2:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005af4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005af8:	f001 0303 	and.w	r3, r1, #3
 8005afc:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8005b00:	ea43 0304 	orr.w	r3, r3, r4
 8005b04:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8005b08:	d104      	bne.n	8005b14 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 8005b0a:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8005b0e:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8005b10:	2000      	movs	r0, #0
 8005b12:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8005b14:	2902      	cmp	r1, #2
 8005b16:	d1fb      	bne.n	8005b10 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 8005b18:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b1c:	e7f7      	b.n	8005b0e <USB_InitFSLSPClkSel+0x2a>

08005b1e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b1e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005b22:	6940      	ldr	r0, [r0, #20]
}
 8005b24:	b280      	uxth	r0, r0
 8005b26:	4770      	bx	lr

08005b28 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b28:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005b2c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005b30:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b34:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b38:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b40:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b44:	d11e      	bne.n	8005b84 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b48:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b4c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b50:	d137      	bne.n	8005bc2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b56:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b5a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b66:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005b6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b6e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005b72:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8005b76:	3b01      	subs	r3, #1
 8005b78:	d002      	beq.n	8005b80 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b7a:	6811      	ldr	r1, [r2, #0]
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	dbfa      	blt.n	8005b76 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005b80:	2000      	movs	r0, #0
 8005b82:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b84:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8005b88:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b8c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b90:	d117      	bne.n	8005bc2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b96:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b9a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ba6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bae:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005bb2:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	d0e2      	beq.n	8005b80 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bba:	6811      	ldr	r1, [r2, #0]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	dbfa      	blt.n	8005bb6 <USB_HC_Halt+0x8e>
 8005bc0:	e7de      	b.n	8005b80 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005bca:	e7d9      	b.n	8005b80 <USB_HC_Halt+0x58>

08005bcc <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bcc:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005bce:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
{
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd8:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005bda:	f7ff ff4b 	bl	8005a74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff ff5a 	bl	8005a98 <USB_FlushRxFifo>
 8005be4:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8005be8:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8005bec:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005bee:	6811      	ldr	r1, [r2, #0]
 8005bf0:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bf4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8005bf8:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8005bfc:	4282      	cmp	r2, r0
 8005bfe:	d1f6      	bne.n	8005bee <USB_StopHost+0x22>
  uint32_t count = 0U;
 8005c00:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c08:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005c0c:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c14:	d802      	bhi.n	8005c1c <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	dbf8      	blt.n	8005c0e <USB_StopHost+0x42>
 8005c1c:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d1ef      	bne.n	8005c02 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8005c26:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c28:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c2c:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	60a3      	str	r3, [r4, #8]
}
 8005c36:	bd10      	pop	{r4, pc}

08005c38 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8005c38:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 8005c3c:	3201      	adds	r2, #1
 8005c3e:	f8c0 24c4 	str.w	r2, [r0, #1220]	; 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005c42:	7802      	ldrb	r2, [r0, #0]
 8005c44:	2a0b      	cmp	r2, #11
 8005c46:	d104      	bne.n	8005c52 <USBH_LL_IncTimer+0x1a>
 8005c48:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8005c4c:	b10b      	cbz	r3, 8005c52 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	4718      	bx	r3
}
 8005c52:	4770      	bx	lr

08005c54 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8005c5a:	4770      	bx	lr

08005c5c <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 8005c62:	4770      	bx	lr

08005c64 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8005c70:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	4770      	bx	lr

08005c78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005c78:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005c7a:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8005c7c:	2500      	movs	r5, #0
{
 8005c7e:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 8005c80:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 8005c84:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 8005c88:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005c8c:	f7fa fdb3 	bl	80007f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005c90:	7921      	ldrb	r1, [r4, #4]
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 f806 	bl	8005ca4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005c98:	7961      	ldrb	r1, [r4, #5]
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 f802 	bl	8005ca4 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}

08005ca4 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
  if (idx < 11U)
 8005ca4:	290a      	cmp	r1, #10
 8005ca6:	bf9f      	itttt	ls
 8005ca8:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005cac:	f8d0 3484 	ldrls.w	r3, [r0, #1156]	; 0x484
 8005cb0:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8005cb4:	f8c0 3484 	strls.w	r3, [r0, #1156]	; 0x484
  }

  return USBH_OK;
}
 8005cb8:	2000      	movs	r0, #0
 8005cba:	4770      	bx	lr

08005cbc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8005cbc:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8005cbe:	6803      	ldr	r3, [r0, #0]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8005cc0:	2500      	movs	r5, #0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8005cc2:	4c14      	ldr	r4, [pc, #80]	; (8005d14 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8005cc4:	6a02      	ldr	r2, [r0, #32]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8005cc6:	6023      	str	r3, [r4, #0]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005cc8:	f104 0140 	add.w	r1, r4, #64	; 0x40
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8005ccc:	6843      	ldr	r3, [r0, #4]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8005cce:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8005cd0:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8005cd2:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8005cd4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8005cd6:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8005cd8:	68c3      	ldr	r3, [r0, #12]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8005cda:	6262      	str	r2, [r4, #36]	; 0x24
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8005cdc:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8005cde:	6903      	ldr	r3, [r0, #16]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8005ce0:	6a82      	ldr	r2, [r0, #40]	; 0x28
  FuncDriver.FillRect       = pDrv->FillRect;
 8005ce2:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8005ce4:	6943      	ldr	r3, [r0, #20]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8005ce6:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8005ce8:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8005cea:	6983      	ldr	r3, [r0, #24]
 8005cec:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8005cee:	69c3      	ldr	r3, [r0, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005cf0:	4628      	mov	r0, r5
  DrawProp->LcdDevice = 0;
 8005cf2:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8005cf6:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005cf8:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8005cfa:	6a23      	ldr	r3, [r4, #32]
 8005cfc:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8005d00:	4628      	mov	r0, r5
 8005d02:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8005d04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d06:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8005d0a:	4628      	mov	r0, r5
}
 8005d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8005d10:	4718      	bx	r3
 8005d12:	bf00      	nop
 8005d14:	20000db4 	.word	0x20000db4

08005d18 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8005d18:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8005d1a:	4c05      	ldr	r4, [pc, #20]	; (8005d30 <UTIL_LCD_SetLayer+0x18>)
{
 8005d1c:	4605      	mov	r5, r0
  if(FuncDriver.SetLayer != NULL)
 8005d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d20:	b123      	cbz	r3, 8005d2c <UTIL_LCD_SetLayer+0x14>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8005d22:	4601      	mov	r1, r0
 8005d24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005d26:	4798      	blx	r3
 8005d28:	b900      	cbnz	r0, 8005d2c <UTIL_LCD_SetLayer+0x14>
    {
      DrawProp->LcdLayer = Layer;
 8005d2a:	63a5      	str	r5, [r4, #56]	; 0x38
    }
  }
}
 8005d2c:	bd38      	pop	{r3, r4, r5, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000db4 	.word	0x20000db4

08005d34 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d36:	4c0c      	ldr	r4, [pc, #48]	; (8005d68 <UTIL_LCD_DrawHLine+0x34>)
 8005d38:	4607      	mov	r7, r0
 8005d3a:	68a6      	ldr	r6, [r4, #8]
 8005d3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005d3e:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8005d40:	2c02      	cmp	r4, #2
 8005d42:	d109      	bne.n	8005d58 <UTIL_LCD_DrawHLine+0x24>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8005d44:	095c      	lsrs	r4, r3, #5
 8005d46:	0a1d      	lsrs	r5, r3, #8
 8005d48:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005d4c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8005d50:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8005d54:	432c      	orrs	r4, r5
 8005d56:	4323      	orrs	r3, r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	4639      	mov	r1, r7
 8005d60:	47b0      	blx	r6
  }
}
 8005d62:	b003      	add	sp, #12
 8005d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000db4 	.word	0x20000db4

08005d6c <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <UTIL_LCD_SetPixel+0x34>)
 8005d6e:	b470      	push	{r4, r5, r6}
 8005d70:	4606      	mov	r6, r0
 8005d72:	699d      	ldr	r5, [r3, #24]
 8005d74:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005d78:	46ac      	mov	ip, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005d7a:	2b02      	cmp	r3, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8005d7c:	bf09      	itett	eq
 8005d7e:	0953      	lsreq	r3, r2, #5
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005d80:	4613      	movne	r3, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8005d82:	0a14      	lsreq	r4, r2, #8
 8005d84:	f3c2 02c4 	ubfxeq	r2, r2, #3, #5
 8005d88:	bf01      	itttt	eq
 8005d8a:	f403 63fc 	andeq.w	r3, r3, #2016	; 0x7e0
 8005d8e:	f404 4478 	andeq.w	r4, r4, #63488	; 0xf800
 8005d92:	4323      	orreq	r3, r4
 8005d94:	4313      	orreq	r3, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005d96:	460a      	mov	r2, r1
 8005d98:	4631      	mov	r1, r6
  }
}
 8005d9a:	bc70      	pop	{r4, r5, r6}
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005d9c:	4760      	bx	ip
 8005d9e:	bf00      	nop
 8005da0:	20000db4 	.word	0x20000db4

08005da4 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8005da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8005da8:	0056      	lsls	r6, r2, #1
  current_x = 0;
  current_y = Radius;

  while (current_x <= current_y)
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8005daa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005ec4 <UTIL_LCD_DrawCircle+0x120>
{
 8005dae:	4680      	mov	r8, r0
 8005db0:	468a      	mov	sl, r1
 8005db2:	4615      	mov	r5, r2
 8005db4:	4699      	mov	r9, r3
  decision = 3 - (Radius << 1);
 8005db6:	f1c6 0603 	rsb	r6, r6, #3
  current_x = 0;
 8005dba:	2400      	movs	r4, #0
 8005dbc:	465f      	mov	r7, fp
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8005dbe:	ebaa 0305 	sub.w	r3, sl, r5
 8005dc2:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d216      	bcs.n	8005df8 <UTIL_LCD_DrawCircle+0x54>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8005dca:	eb08 0004 	add.w	r0, r8, r4
 8005dce:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 8005dd2:	4290      	cmp	r0, r2
 8005dd4:	d206      	bcs.n	8005de4 <UTIL_LCD_DrawCircle+0x40>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8005dd6:	b299      	uxth	r1, r3
 8005dd8:	464a      	mov	r2, r9
 8005dda:	b280      	uxth	r0, r0
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	f7ff ffc5 	bl	8005d6c <UTIL_LCD_SetPixel>
 8005de2:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8005de4:	eba8 0004 	sub.w	r0, r8, r4
 8005de8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dea:	4290      	cmp	r0, r2
 8005dec:	d204      	bcs.n	8005df8 <UTIL_LCD_DrawCircle+0x54>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8005dee:	464a      	mov	r2, r9
 8005df0:	b299      	uxth	r1, r3
 8005df2:	b280      	uxth	r0, r0
 8005df4:	f7ff ffba 	bl	8005d6c <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8005df8:	ebaa 0304 	sub.w	r3, sl, r4
 8005dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d215      	bcs.n	8005e2e <UTIL_LCD_DrawCircle+0x8a>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8005e02:	eb08 0005 	add.w	r0, r8, r5
 8005e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e08:	4290      	cmp	r0, r2
 8005e0a:	d206      	bcs.n	8005e1a <UTIL_LCD_DrawCircle+0x76>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8005e0c:	b299      	uxth	r1, r3
 8005e0e:	464a      	mov	r2, r9
 8005e10:	b280      	uxth	r0, r0
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	f7ff ffaa 	bl	8005d6c <UTIL_LCD_SetPixel>
 8005e18:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8005e1a:	eba8 0005 	sub.w	r0, r8, r5
 8005e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e20:	4290      	cmp	r0, r2
 8005e22:	d204      	bcs.n	8005e2e <UTIL_LCD_DrawCircle+0x8a>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8005e24:	464a      	mov	r2, r9
 8005e26:	b299      	uxth	r1, r3
 8005e28:	b280      	uxth	r0, r0
 8005e2a:	f7ff ff9f 	bl	8005d6c <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8005e2e:	eb0a 0305 	add.w	r3, sl, r5
 8005e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d215      	bcs.n	8005e64 <UTIL_LCD_DrawCircle+0xc0>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8005e38:	eb08 0004 	add.w	r0, r8, r4
 8005e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e3e:	4290      	cmp	r0, r2
 8005e40:	d206      	bcs.n	8005e50 <UTIL_LCD_DrawCircle+0xac>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8005e42:	b299      	uxth	r1, r3
 8005e44:	464a      	mov	r2, r9
 8005e46:	b280      	uxth	r0, r0
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	f7ff ff8f 	bl	8005d6c <UTIL_LCD_SetPixel>
 8005e4e:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8005e50:	eba8 0004 	sub.w	r0, r8, r4
 8005e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e56:	4290      	cmp	r0, r2
 8005e58:	d204      	bcs.n	8005e64 <UTIL_LCD_DrawCircle+0xc0>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8005e5a:	464a      	mov	r2, r9
 8005e5c:	b299      	uxth	r1, r3
 8005e5e:	b280      	uxth	r0, r0
 8005e60:	f7ff ff84 	bl	8005d6c <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8005e64:	eb0a 0304 	add.w	r3, sl, r4
 8005e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d215      	bcs.n	8005e9a <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8005e6e:	eb08 0005 	add.w	r0, r8, r5
 8005e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e74:	4290      	cmp	r0, r2
 8005e76:	d206      	bcs.n	8005e86 <UTIL_LCD_DrawCircle+0xe2>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8005e78:	b299      	uxth	r1, r3
 8005e7a:	464a      	mov	r2, r9
 8005e7c:	b280      	uxth	r0, r0
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	f7ff ff74 	bl	8005d6c <UTIL_LCD_SetPixel>
 8005e84:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8005e86:	eba8 0005 	sub.w	r0, r8, r5
 8005e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e8c:	4290      	cmp	r0, r2
 8005e8e:	d204      	bcs.n	8005e9a <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8005e90:	464a      	mov	r2, r9
 8005e92:	b299      	uxth	r1, r3
 8005e94:	b280      	uxth	r0, r0
 8005e96:	f7ff ff69 	bl	8005d6c <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8005e9a:	2e00      	cmp	r6, #0
    {
      decision += (current_x << 2) + 6;
 8005e9c:	bfb1      	iteee	lt
 8005e9e:	3606      	addlt	r6, #6
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8005ea0:	1b63      	subge	r3, r4, r5
 8005ea2:	360a      	addge	r6, #10
      current_y--;
 8005ea4:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 8005ea8:	bfb8      	it	lt
 8005eaa:	eb06 0684 	addlt.w	r6, r6, r4, lsl #2
    }
    current_x++;
 8005eae:	f104 0401 	add.w	r4, r4, #1
      decision += ((current_x - current_y) << 2) + 10;
 8005eb2:	bfa8      	it	ge
 8005eb4:	eb06 0683 	addge.w	r6, r6, r3, lsl #2
  while (current_x <= current_y)
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d280      	bcs.n	8005dbe <UTIL_LCD_DrawCircle+0x1a>
  }
}
 8005ebc:	b003      	add	sp, #12
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000db4 	.word	0x20000db4

08005ec8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8005ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eca:	4c0e      	ldr	r4, [pc, #56]	; (8005f04 <UTIL_LCD_FillRect+0x3c>)
 8005ecc:	4684      	mov	ip, r0
 8005ece:	9d08      	ldr	r5, [sp, #32]
 8005ed0:	6927      	ldr	r7, [r4, #16]
 8005ed2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005ed4:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8005ed6:	2c02      	cmp	r4, #2
 8005ed8:	d111      	bne.n	8005efe <UTIL_LCD_FillRect+0x36>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8005eda:	096c      	lsrs	r4, r5, #5
 8005edc:	0a2e      	lsrs	r6, r5, #8
 8005ede:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8005ee2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8005ee6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8005eea:	4334      	orrs	r4, r6
 8005eec:	432c      	orrs	r4, r5
 8005eee:	9401      	str	r4, [sp, #4]
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	460a      	mov	r2, r1
 8005ef6:	4661      	mov	r1, ip
 8005ef8:	47b8      	blx	r7
  }
}
 8005efa:	b003      	add	sp, #12
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8005efe:	9501      	str	r5, [sp, #4]
 8005f00:	e7f6      	b.n	8005ef0 <UTIL_LCD_FillRect+0x28>
 8005f02:	bf00      	nop
 8005f04:	20000db4 	.word	0x20000db4

08005f08 <UTIL_LCD_Clear>:
{
 8005f08:	b507      	push	{r0, r1, r2, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <UTIL_LCD_Clear+0x18>)
 8005f0e:	9000      	str	r0, [sp, #0]
 8005f10:	4608      	mov	r0, r1
 8005f12:	e9d2 2310 	ldrd	r2, r3, [r2, #64]	; 0x40
 8005f16:	f7ff ffd7 	bl	8005ec8 <UTIL_LCD_FillRect>
}
 8005f1a:	b003      	add	sp, #12
 8005f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f20:	20000db4 	.word	0x20000db4

08005f24 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8005f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	461e      	mov	r6, r3
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8005f2a:	0053      	lsls	r3, r2, #1
{
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	4689      	mov	r9, r1
  decision = 3 - (Radius << 1);
 8005f30:	f1c3 0303 	rsb	r3, r3, #3

  current_x = 0;
  current_y = Radius;
 8005f34:	4615      	mov	r5, r2
  current_x = 0;
 8005f36:	2400      	movs	r4, #0
{
 8005f38:	9201      	str	r2, [sp, #4]
  decision = 3 - (Radius << 1);
 8005f3a:	9300      	str	r3, [sp, #0]

  while (current_x <= current_y)
  {
    if(current_y > 0)
 8005f3c:	b1a5      	cbz	r5, 8005f68 <UTIL_LCD_FillCircle+0x44>
    {
      if(current_y >= Xpos)
 8005f3e:	45a8      	cmp	r8, r5
 8005f40:	eb09 0104 	add.w	r1, r9, r4
 8005f44:	ea4f 0745 	mov.w	r7, r5, lsl #1
 8005f48:	eba9 0b04 	sub.w	fp, r9, r4
 8005f4c:	d835      	bhi.n	8005fba <UTIL_LCD_FillCircle+0x96>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8005f4e:	1b7f      	subs	r7, r7, r5
 8005f50:	4633      	mov	r3, r6
 8005f52:	2000      	movs	r0, #0
 8005f54:	4447      	add	r7, r8
 8005f56:	463a      	mov	r2, r7
 8005f58:	f7ff feec 	bl	8005d34 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8005f5c:	4633      	mov	r3, r6
 8005f5e:	463a      	mov	r2, r7
 8005f60:	4659      	mov	r1, fp
 8005f62:	2000      	movs	r0, #0
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8005f64:	f7ff fee6 	bl	8005d34 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8005f68:	b1a4      	cbz	r4, 8005f94 <UTIL_LCD_FillCircle+0x70>
    {
      if(current_x >= Xpos)
 8005f6a:	45a0      	cmp	r8, r4
 8005f6c:	eba9 0105 	sub.w	r1, r9, r5
 8005f70:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8005f74:	eb09 0a05 	add.w	sl, r9, r5
 8005f78:	d82b      	bhi.n	8005fd2 <UTIL_LCD_FillCircle+0xae>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8005f7a:	eb08 0704 	add.w	r7, r8, r4
 8005f7e:	4633      	mov	r3, r6
 8005f80:	2000      	movs	r0, #0
 8005f82:	463a      	mov	r2, r7
 8005f84:	f7ff fed6 	bl	8005d34 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8005f88:	4633      	mov	r3, r6
 8005f8a:	463a      	mov	r2, r7
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	2000      	movs	r0, #0
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8005f90:	f7ff fed0 	bl	8005d34 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8005f94:	9b00      	ldr	r3, [sp, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da27      	bge.n	8005fea <UTIL_LCD_FillCircle+0xc6>
    {
      decision += (current_x << 2) + 6;
 8005f9a:	3306      	adds	r3, #6
 8005f9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005fa0:	9300      	str	r3, [sp, #0]
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
      current_y--;
    }
    current_x++;
 8005fa2:	3401      	adds	r4, #1
  while (current_x <= current_y)
 8005fa4:	42a5      	cmp	r5, r4
 8005fa6:	d2c9      	bcs.n	8005f3c <UTIL_LCD_FillCircle+0x18>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8005fa8:	4633      	mov	r3, r6
 8005faa:	9a01      	ldr	r2, [sp, #4]
 8005fac:	4649      	mov	r1, r9
 8005fae:	4640      	mov	r0, r8
}
 8005fb0:	b003      	add	sp, #12
 8005fb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8005fb6:	f7ff bef5 	b.w	8005da4 <UTIL_LCD_DrawCircle>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8005fba:	eba8 0a05 	sub.w	sl, r8, r5
 8005fbe:	4633      	mov	r3, r6
 8005fc0:	463a      	mov	r2, r7
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	f7ff feb6 	bl	8005d34 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8005fc8:	4633      	mov	r3, r6
 8005fca:	463a      	mov	r2, r7
 8005fcc:	4659      	mov	r1, fp
 8005fce:	4650      	mov	r0, sl
 8005fd0:	e7c8      	b.n	8005f64 <UTIL_LCD_FillCircle+0x40>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8005fd2:	eba8 0704 	sub.w	r7, r8, r4
 8005fd6:	4633      	mov	r3, r6
 8005fd8:	465a      	mov	r2, fp
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f7ff feaa 	bl	8005d34 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8005fe0:	4633      	mov	r3, r6
 8005fe2:	465a      	mov	r2, fp
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	e7d2      	b.n	8005f90 <UTIL_LCD_FillCircle+0x6c>
      decision += ((current_x - current_y) << 2) + 10;
 8005fea:	9b00      	ldr	r3, [sp, #0]
 8005fec:	1b62      	subs	r2, r4, r5
      current_y--;
 8005fee:	3d01      	subs	r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 8005ff0:	330a      	adds	r3, #10
 8005ff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	e7d3      	b.n	8005fa2 <UTIL_LCD_FillCircle+0x7e>
	...

08005ffc <__libc_init_array>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0d      	ldr	r6, [pc, #52]	; (8006034 <__libc_init_array+0x38>)
 8006000:	4c0d      	ldr	r4, [pc, #52]	; (8006038 <__libc_init_array+0x3c>)
 8006002:	1ba4      	subs	r4, r4, r6
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	2500      	movs	r5, #0
 8006008:	42a5      	cmp	r5, r4
 800600a:	d109      	bne.n	8006020 <__libc_init_array+0x24>
 800600c:	4e0b      	ldr	r6, [pc, #44]	; (800603c <__libc_init_array+0x40>)
 800600e:	4c0c      	ldr	r4, [pc, #48]	; (8006040 <__libc_init_array+0x44>)
 8006010:	f000 fe40 	bl	8006c94 <_init>
 8006014:	1ba4      	subs	r4, r4, r6
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	2500      	movs	r5, #0
 800601a:	42a5      	cmp	r5, r4
 800601c:	d105      	bne.n	800602a <__libc_init_array+0x2e>
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006024:	4798      	blx	r3
 8006026:	3501      	adds	r5, #1
 8006028:	e7ee      	b.n	8006008 <__libc_init_array+0xc>
 800602a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800602e:	4798      	blx	r3
 8006030:	3501      	adds	r5, #1
 8006032:	e7f2      	b.n	800601a <__libc_init_array+0x1e>
 8006034:	08006f38 	.word	0x08006f38
 8006038:	08006f38 	.word	0x08006f38
 800603c:	08006f38 	.word	0x08006f38
 8006040:	08006f3c 	.word	0x08006f3c
 8006044:	00000000 	.word	0x00000000

08006048 <cos>:
 8006048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800604a:	eeb0 7b40 	vmov.f64	d7, d0
 800604e:	ee17 3a90 	vmov	r3, s15
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <cos+0x70>)
 8006054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006058:	4293      	cmp	r3, r2
 800605a:	dc04      	bgt.n	8006066 <cos+0x1e>
 800605c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80060b0 <cos+0x68>
 8006060:	f000 f9a6 	bl	80063b0 <__kernel_cos>
 8006064:	e004      	b.n	8006070 <cos+0x28>
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <cos+0x74>)
 8006068:	4293      	cmp	r3, r2
 800606a:	dd04      	ble.n	8006076 <cos+0x2e>
 800606c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006070:	b005      	add	sp, #20
 8006072:	f85d fb04 	ldr.w	pc, [sp], #4
 8006076:	4668      	mov	r0, sp
 8006078:	f000 f85e 	bl	8006138 <__ieee754_rem_pio2>
 800607c:	f000 0003 	and.w	r0, r0, #3
 8006080:	2801      	cmp	r0, #1
 8006082:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006086:	ed9d 0b00 	vldr	d0, [sp]
 800608a:	d007      	beq.n	800609c <cos+0x54>
 800608c:	2802      	cmp	r0, #2
 800608e:	d00a      	beq.n	80060a6 <cos+0x5e>
 8006090:	2800      	cmp	r0, #0
 8006092:	d0e5      	beq.n	8006060 <cos+0x18>
 8006094:	2001      	movs	r0, #1
 8006096:	f000 fc93 	bl	80069c0 <__kernel_sin>
 800609a:	e7e9      	b.n	8006070 <cos+0x28>
 800609c:	f000 fc90 	bl	80069c0 <__kernel_sin>
 80060a0:	eeb1 0b40 	vneg.f64	d0, d0
 80060a4:	e7e4      	b.n	8006070 <cos+0x28>
 80060a6:	f000 f983 	bl	80063b0 <__kernel_cos>
 80060aa:	e7f9      	b.n	80060a0 <cos+0x58>
 80060ac:	f3af 8000 	nop.w
	...
 80060b8:	3fe921fb 	.word	0x3fe921fb
 80060bc:	7fefffff 	.word	0x7fefffff

080060c0 <sin>:
 80060c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060c2:	eeb0 7b40 	vmov.f64	d7, d0
 80060c6:	ee17 3a90 	vmov	r3, s15
 80060ca:	4a19      	ldr	r2, [pc, #100]	; (8006130 <sin+0x70>)
 80060cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060d0:	4293      	cmp	r3, r2
 80060d2:	dc05      	bgt.n	80060e0 <sin+0x20>
 80060d4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006128 <sin+0x68>
 80060d8:	2000      	movs	r0, #0
 80060da:	f000 fc71 	bl	80069c0 <__kernel_sin>
 80060de:	e004      	b.n	80060ea <sin+0x2a>
 80060e0:	4a14      	ldr	r2, [pc, #80]	; (8006134 <sin+0x74>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	dd04      	ble.n	80060f0 <sin+0x30>
 80060e6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80060ea:	b005      	add	sp, #20
 80060ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80060f0:	4668      	mov	r0, sp
 80060f2:	f000 f821 	bl	8006138 <__ieee754_rem_pio2>
 80060f6:	f000 0003 	and.w	r0, r0, #3
 80060fa:	2801      	cmp	r0, #1
 80060fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006100:	ed9d 0b00 	vldr	d0, [sp]
 8006104:	d004      	beq.n	8006110 <sin+0x50>
 8006106:	2802      	cmp	r0, #2
 8006108:	d005      	beq.n	8006116 <sin+0x56>
 800610a:	b950      	cbnz	r0, 8006122 <sin+0x62>
 800610c:	2001      	movs	r0, #1
 800610e:	e7e4      	b.n	80060da <sin+0x1a>
 8006110:	f000 f94e 	bl	80063b0 <__kernel_cos>
 8006114:	e7e9      	b.n	80060ea <sin+0x2a>
 8006116:	2001      	movs	r0, #1
 8006118:	f000 fc52 	bl	80069c0 <__kernel_sin>
 800611c:	eeb1 0b40 	vneg.f64	d0, d0
 8006120:	e7e3      	b.n	80060ea <sin+0x2a>
 8006122:	f000 f945 	bl	80063b0 <__kernel_cos>
 8006126:	e7f9      	b.n	800611c <sin+0x5c>
	...
 8006130:	3fe921fb 	.word	0x3fe921fb
 8006134:	7fefffff 	.word	0x7fefffff

08006138 <__ieee754_rem_pio2>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	eeb0 7b40 	vmov.f64	d7, d0
 800613e:	ee17 5a90 	vmov	r5, s15
 8006142:	4b95      	ldr	r3, [pc, #596]	; (8006398 <__ieee754_rem_pio2+0x260>)
 8006144:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006148:	429e      	cmp	r6, r3
 800614a:	b088      	sub	sp, #32
 800614c:	4604      	mov	r4, r0
 800614e:	dc07      	bgt.n	8006160 <__ieee754_rem_pio2+0x28>
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	ed84 0b00 	vstr	d0, [r4]
 8006158:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800615c:	2000      	movs	r0, #0
 800615e:	e01b      	b.n	8006198 <__ieee754_rem_pio2+0x60>
 8006160:	4b8e      	ldr	r3, [pc, #568]	; (800639c <__ieee754_rem_pio2+0x264>)
 8006162:	429e      	cmp	r6, r3
 8006164:	dc3b      	bgt.n	80061de <__ieee754_rem_pio2+0xa6>
 8006166:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800616a:	2d00      	cmp	r5, #0
 800616c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8006358 <__ieee754_rem_pio2+0x220>
 8006170:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8006174:	dd19      	ble.n	80061aa <__ieee754_rem_pio2+0x72>
 8006176:	ee30 7b46 	vsub.f64	d7, d0, d6
 800617a:	429e      	cmp	r6, r3
 800617c:	d00e      	beq.n	800619c <__ieee754_rem_pio2+0x64>
 800617e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006360 <__ieee754_rem_pio2+0x228>
 8006182:	ee37 5b46 	vsub.f64	d5, d7, d6
 8006186:	ee37 7b45 	vsub.f64	d7, d7, d5
 800618a:	ed84 5b00 	vstr	d5, [r4]
 800618e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006192:	ed84 7b02 	vstr	d7, [r4, #8]
 8006196:	2001      	movs	r0, #1
 8006198:	b008      	add	sp, #32
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006368 <__ieee754_rem_pio2+0x230>
 80061a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061a4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006370 <__ieee754_rem_pio2+0x238>
 80061a8:	e7eb      	b.n	8006182 <__ieee754_rem_pio2+0x4a>
 80061aa:	429e      	cmp	r6, r3
 80061ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80061b0:	d00e      	beq.n	80061d0 <__ieee754_rem_pio2+0x98>
 80061b2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8006360 <__ieee754_rem_pio2+0x228>
 80061b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80061ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80061be:	ed84 5b00 	vstr	d5, [r4]
 80061c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80061c6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80061ce:	e7e3      	b.n	8006198 <__ieee754_rem_pio2+0x60>
 80061d0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8006368 <__ieee754_rem_pio2+0x230>
 80061d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80061d8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8006370 <__ieee754_rem_pio2+0x238>
 80061dc:	e7eb      	b.n	80061b6 <__ieee754_rem_pio2+0x7e>
 80061de:	4b70      	ldr	r3, [pc, #448]	; (80063a0 <__ieee754_rem_pio2+0x268>)
 80061e0:	429e      	cmp	r6, r3
 80061e2:	dc6c      	bgt.n	80062be <__ieee754_rem_pio2+0x186>
 80061e4:	f000 fc44 	bl	8006a70 <fabs>
 80061e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80061ec:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8006378 <__ieee754_rem_pio2+0x240>
 80061f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80061f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80061f8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80061fc:	ee17 0a90 	vmov	r0, s15
 8006200:	eeb1 5b44 	vneg.f64	d5, d4
 8006204:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8006358 <__ieee754_rem_pio2+0x220>
 8006208:	eea5 0b07 	vfma.f64	d0, d5, d7
 800620c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8006360 <__ieee754_rem_pio2+0x228>
 8006210:	281f      	cmp	r0, #31
 8006212:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006216:	ee30 6b47 	vsub.f64	d6, d0, d7
 800621a:	dc08      	bgt.n	800622e <__ieee754_rem_pio2+0xf6>
 800621c:	1e42      	subs	r2, r0, #1
 800621e:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <__ieee754_rem_pio2+0x26c>)
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	42b3      	cmp	r3, r6
 8006226:	d002      	beq.n	800622e <__ieee754_rem_pio2+0xf6>
 8006228:	ed84 6b00 	vstr	d6, [r4]
 800622c:	e022      	b.n	8006274 <__ieee754_rem_pio2+0x13c>
 800622e:	ee16 3a90 	vmov	r3, s13
 8006232:	1536      	asrs	r6, r6, #20
 8006234:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006238:	1af3      	subs	r3, r6, r3
 800623a:	2b10      	cmp	r3, #16
 800623c:	ddf4      	ble.n	8006228 <__ieee754_rem_pio2+0xf0>
 800623e:	eeb0 6b40 	vmov.f64	d6, d0
 8006242:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8006368 <__ieee754_rem_pio2+0x230>
 8006246:	eea5 6b03 	vfma.f64	d6, d5, d3
 800624a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800624e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006252:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8006370 <__ieee754_rem_pio2+0x238>
 8006256:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800625a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800625e:	ee13 3a90 	vmov	r3, s7
 8006262:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006266:	1af6      	subs	r6, r6, r3
 8006268:	2e31      	cmp	r6, #49	; 0x31
 800626a:	dc17      	bgt.n	800629c <__ieee754_rem_pio2+0x164>
 800626c:	eeb0 0b46 	vmov.f64	d0, d6
 8006270:	ed84 3b00 	vstr	d3, [r4]
 8006274:	ed94 6b00 	vldr	d6, [r4]
 8006278:	2d00      	cmp	r5, #0
 800627a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800627e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8006282:	ed84 7b02 	vstr	d7, [r4, #8]
 8006286:	da87      	bge.n	8006198 <__ieee754_rem_pio2+0x60>
 8006288:	eeb1 6b46 	vneg.f64	d6, d6
 800628c:	ed84 6b00 	vstr	d6, [r4]
 8006290:	eeb1 7b47 	vneg.f64	d7, d7
 8006294:	4240      	negs	r0, r0
 8006296:	ed84 7b02 	vstr	d7, [r4, #8]
 800629a:	e77d      	b.n	8006198 <__ieee754_rem_pio2+0x60>
 800629c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8006380 <__ieee754_rem_pio2+0x248>
 80062a0:	eeb0 0b46 	vmov.f64	d0, d6
 80062a4:	eea5 0b03 	vfma.f64	d0, d5, d3
 80062a8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80062ac:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8006388 <__ieee754_rem_pio2+0x250>
 80062b0:	eea5 7b03 	vfma.f64	d7, d5, d3
 80062b4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 80062b8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80062bc:	e7b4      	b.n	8006228 <__ieee754_rem_pio2+0xf0>
 80062be:	4b3a      	ldr	r3, [pc, #232]	; (80063a8 <__ieee754_rem_pio2+0x270>)
 80062c0:	429e      	cmp	r6, r3
 80062c2:	dd06      	ble.n	80062d2 <__ieee754_rem_pio2+0x19a>
 80062c4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80062c8:	ed80 7b02 	vstr	d7, [r0, #8]
 80062cc:	ed80 7b00 	vstr	d7, [r0]
 80062d0:	e744      	b.n	800615c <__ieee754_rem_pio2+0x24>
 80062d2:	1532      	asrs	r2, r6, #20
 80062d4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80062d8:	ee10 0a10 	vmov	r0, s0
 80062dc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80062e0:	ec41 0b17 	vmov	d7, r0, r1
 80062e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80062e8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8006390 <__ieee754_rem_pio2+0x258>
 80062ec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80062f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80062f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80062f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80062fc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006300:	a908      	add	r1, sp, #32
 8006302:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006306:	ee37 7b46 	vsub.f64	d7, d7, d6
 800630a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800630e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006312:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006316:	2303      	movs	r3, #3
 8006318:	ed31 7b02 	vldmdb	r1!, {d7}
 800631c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	f103 30ff 	add.w	r0, r3, #4294967295
 8006328:	d013      	beq.n	8006352 <__ieee754_rem_pio2+0x21a>
 800632a:	4920      	ldr	r1, [pc, #128]	; (80063ac <__ieee754_rem_pio2+0x274>)
 800632c:	9101      	str	r1, [sp, #4]
 800632e:	2102      	movs	r1, #2
 8006330:	9100      	str	r1, [sp, #0]
 8006332:	a802      	add	r0, sp, #8
 8006334:	4621      	mov	r1, r4
 8006336:	f000 f8a7 	bl	8006488 <__kernel_rem_pio2>
 800633a:	2d00      	cmp	r5, #0
 800633c:	f6bf af2c 	bge.w	8006198 <__ieee754_rem_pio2+0x60>
 8006340:	ed94 7b00 	vldr	d7, [r4]
 8006344:	eeb1 7b47 	vneg.f64	d7, d7
 8006348:	ed84 7b00 	vstr	d7, [r4]
 800634c:	ed94 7b02 	vldr	d7, [r4, #8]
 8006350:	e79e      	b.n	8006290 <__ieee754_rem_pio2+0x158>
 8006352:	4603      	mov	r3, r0
 8006354:	e7e0      	b.n	8006318 <__ieee754_rem_pio2+0x1e0>
 8006356:	bf00      	nop
 8006358:	54400000 	.word	0x54400000
 800635c:	3ff921fb 	.word	0x3ff921fb
 8006360:	1a626331 	.word	0x1a626331
 8006364:	3dd0b461 	.word	0x3dd0b461
 8006368:	1a600000 	.word	0x1a600000
 800636c:	3dd0b461 	.word	0x3dd0b461
 8006370:	2e037073 	.word	0x2e037073
 8006374:	3ba3198a 	.word	0x3ba3198a
 8006378:	6dc9c883 	.word	0x6dc9c883
 800637c:	3fe45f30 	.word	0x3fe45f30
 8006380:	2e000000 	.word	0x2e000000
 8006384:	3ba3198a 	.word	0x3ba3198a
 8006388:	252049c1 	.word	0x252049c1
 800638c:	397b839a 	.word	0x397b839a
 8006390:	00000000 	.word	0x00000000
 8006394:	41700000 	.word	0x41700000
 8006398:	3fe921fb 	.word	0x3fe921fb
 800639c:	4002d97b 	.word	0x4002d97b
 80063a0:	413921fb 	.word	0x413921fb
 80063a4:	08006d60 	.word	0x08006d60
 80063a8:	7fefffff 	.word	0x7fefffff
 80063ac:	08006de0 	.word	0x08006de0

080063b0 <__kernel_cos>:
 80063b0:	ee10 1a90 	vmov	r1, s1
 80063b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80063b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80063bc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80063c0:	da05      	bge.n	80063ce <__kernel_cos+0x1e>
 80063c2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80063c6:	ee16 3a90 	vmov	r3, s13
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03d      	beq.n	800644a <__kernel_cos+0x9a>
 80063ce:	ee20 4b00 	vmul.f64	d4, d0, d0
 80063d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80063d6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8006450 <__kernel_cos+0xa0>
 80063da:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80063de:	ee24 6b06 	vmul.f64	d6, d4, d6
 80063e2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8006458 <__kernel_cos+0xa8>
 80063e6:	eea4 5b03 	vfma.f64	d5, d4, d3
 80063ea:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8006460 <__kernel_cos+0xb0>
 80063ee:	eea5 3b04 	vfma.f64	d3, d5, d4
 80063f2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8006468 <__kernel_cos+0xb8>
 80063f6:	eea3 5b04 	vfma.f64	d5, d3, d4
 80063fa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8006470 <__kernel_cos+0xc0>
 80063fe:	4b20      	ldr	r3, [pc, #128]	; (8006480 <__kernel_cos+0xd0>)
 8006400:	eea5 3b04 	vfma.f64	d3, d5, d4
 8006404:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8006478 <__kernel_cos+0xc8>
 8006408:	4299      	cmp	r1, r3
 800640a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800640e:	ee25 5b04 	vmul.f64	d5, d5, d4
 8006412:	eea4 1b05 	vfma.f64	d1, d4, d5
 8006416:	dc04      	bgt.n	8006422 <__kernel_cos+0x72>
 8006418:	ee36 6b41 	vsub.f64	d6, d6, d1
 800641c:	ee37 0b46 	vsub.f64	d0, d7, d6
 8006420:	4770      	bx	lr
 8006422:	4b18      	ldr	r3, [pc, #96]	; (8006484 <__kernel_cos+0xd4>)
 8006424:	4299      	cmp	r1, r3
 8006426:	dc0d      	bgt.n	8006444 <__kernel_cos+0x94>
 8006428:	2200      	movs	r2, #0
 800642a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800642e:	ec43 2b15 	vmov	d5, r2, r3
 8006432:	ee37 0b45 	vsub.f64	d0, d7, d5
 8006436:	ee36 6b45 	vsub.f64	d6, d6, d5
 800643a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800643e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006442:	4770      	bx	lr
 8006444:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8006448:	e7f3      	b.n	8006432 <__kernel_cos+0x82>
 800644a:	eeb0 0b47 	vmov.f64	d0, d7
 800644e:	4770      	bx	lr
 8006450:	be8838d4 	.word	0xbe8838d4
 8006454:	bda8fae9 	.word	0xbda8fae9
 8006458:	bdb4b1c4 	.word	0xbdb4b1c4
 800645c:	3e21ee9e 	.word	0x3e21ee9e
 8006460:	809c52ad 	.word	0x809c52ad
 8006464:	be927e4f 	.word	0xbe927e4f
 8006468:	19cb1590 	.word	0x19cb1590
 800646c:	3efa01a0 	.word	0x3efa01a0
 8006470:	16c15177 	.word	0x16c15177
 8006474:	bf56c16c 	.word	0xbf56c16c
 8006478:	5555554c 	.word	0x5555554c
 800647c:	3fa55555 	.word	0x3fa55555
 8006480:	3fd33332 	.word	0x3fd33332
 8006484:	3fe90000 	.word	0x3fe90000

08006488 <__kernel_rem_pio2>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	ed2d 8b06 	vpush	{d8-d10}
 8006490:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006494:	469b      	mov	fp, r3
 8006496:	460e      	mov	r6, r1
 8006498:	4bc7      	ldr	r3, [pc, #796]	; (80067b8 <__kernel_rem_pio2+0x330>)
 800649a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800649c:	9002      	str	r0, [sp, #8]
 800649e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80064a2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 80064a4:	1ed1      	subs	r1, r2, #3
 80064a6:	2318      	movs	r3, #24
 80064a8:	f06f 0417 	mvn.w	r4, #23
 80064ac:	fb91 f1f3 	sdiv	r1, r1, r3
 80064b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80064b4:	f10b 3aff 	add.w	sl, fp, #4294967295
 80064b8:	fb01 4404 	mla	r4, r1, r4, r4
 80064bc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80067a0 <__kernel_rem_pio2+0x318>
 80064c0:	4414      	add	r4, r2
 80064c2:	eba1 050a 	sub.w	r5, r1, sl
 80064c6:	aa1a      	add	r2, sp, #104	; 0x68
 80064c8:	eb09 070a 	add.w	r7, r9, sl
 80064cc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80064d0:	4696      	mov	lr, r2
 80064d2:	2300      	movs	r3, #0
 80064d4:	42bb      	cmp	r3, r7
 80064d6:	dd0f      	ble.n	80064f8 <__kernel_rem_pio2+0x70>
 80064d8:	af6a      	add	r7, sp, #424	; 0x1a8
 80064da:	2200      	movs	r2, #0
 80064dc:	454a      	cmp	r2, r9
 80064de:	dc28      	bgt.n	8006532 <__kernel_rem_pio2+0xaa>
 80064e0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80064e4:	eb0b 0302 	add.w	r3, fp, r2
 80064e8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 80064ec:	9d02      	ldr	r5, [sp, #8]
 80064ee:	ed9f 7bac 	vldr	d7, [pc, #688]	; 80067a0 <__kernel_rem_pio2+0x318>
 80064f2:	f04f 0c00 	mov.w	ip, #0
 80064f6:	e016      	b.n	8006526 <__kernel_rem_pio2+0x9e>
 80064f8:	42dd      	cmn	r5, r3
 80064fa:	d409      	bmi.n	8006510 <__kernel_rem_pio2+0x88>
 80064fc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8006500:	ee07 2a90 	vmov	s15, r2
 8006504:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006508:	ecae 7b02 	vstmia	lr!, {d7}
 800650c:	3301      	adds	r3, #1
 800650e:	e7e1      	b.n	80064d4 <__kernel_rem_pio2+0x4c>
 8006510:	eeb0 7b46 	vmov.f64	d7, d6
 8006514:	e7f8      	b.n	8006508 <__kernel_rem_pio2+0x80>
 8006516:	ecb5 5b02 	vldmia	r5!, {d5}
 800651a:	ed33 6b02 	vldmdb	r3!, {d6}
 800651e:	f10c 0c01 	add.w	ip, ip, #1
 8006522:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006526:	45d4      	cmp	ip, sl
 8006528:	ddf5      	ble.n	8006516 <__kernel_rem_pio2+0x8e>
 800652a:	eca7 7b02 	vstmia	r7!, {d7}
 800652e:	3201      	adds	r2, #1
 8006530:	e7d4      	b.n	80064dc <__kernel_rem_pio2+0x54>
 8006532:	ab06      	add	r3, sp, #24
 8006534:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006538:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 80067a8 <__kernel_rem_pio2+0x320>
 800653c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 80067b0 <__kernel_rem_pio2+0x328>
 8006540:	9304      	str	r3, [sp, #16]
 8006542:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	464d      	mov	r5, r9
 800654a:	ab92      	add	r3, sp, #584	; 0x248
 800654c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8006550:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006554:	3f01      	subs	r7, #1
 8006556:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800655a:	00ff      	lsls	r7, r7, #3
 800655c:	ab92      	add	r3, sp, #584	; 0x248
 800655e:	19da      	adds	r2, r3, r7
 8006560:	3a98      	subs	r2, #152	; 0x98
 8006562:	2300      	movs	r3, #0
 8006564:	1ae9      	subs	r1, r5, r3
 8006566:	2900      	cmp	r1, #0
 8006568:	dc4e      	bgt.n	8006608 <__kernel_rem_pio2+0x180>
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fb04 	bl	8006b78 <scalbn>
 8006570:	eeb0 8b40 	vmov.f64	d8, d0
 8006574:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006578:	ee28 0b00 	vmul.f64	d0, d8, d0
 800657c:	f000 fa84 	bl	8006a88 <floor>
 8006580:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006584:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006588:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800658c:	2c00      	cmp	r4, #0
 800658e:	edcd 7a01 	vstr	s15, [sp, #4]
 8006592:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006596:	ee38 8b47 	vsub.f64	d8, d8, d7
 800659a:	dd4a      	ble.n	8006632 <__kernel_rem_pio2+0x1aa>
 800659c:	1e69      	subs	r1, r5, #1
 800659e:	ab06      	add	r3, sp, #24
 80065a0:	f1c4 0018 	rsb	r0, r4, #24
 80065a4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80065a8:	9a01      	ldr	r2, [sp, #4]
 80065aa:	fa4c f300 	asr.w	r3, ip, r0
 80065ae:	441a      	add	r2, r3
 80065b0:	4083      	lsls	r3, r0
 80065b2:	9201      	str	r2, [sp, #4]
 80065b4:	ebac 0203 	sub.w	r2, ip, r3
 80065b8:	ab06      	add	r3, sp, #24
 80065ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80065be:	f1c4 0317 	rsb	r3, r4, #23
 80065c2:	fa42 f803 	asr.w	r8, r2, r3
 80065c6:	f1b8 0f00 	cmp.w	r8, #0
 80065ca:	dd43      	ble.n	8006654 <__kernel_rem_pio2+0x1cc>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	2000      	movs	r0, #0
 80065d0:	3301      	adds	r3, #1
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	4601      	mov	r1, r0
 80065d6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 80065da:	4285      	cmp	r5, r0
 80065dc:	dc6e      	bgt.n	80066bc <__kernel_rem_pio2+0x234>
 80065de:	2c00      	cmp	r4, #0
 80065e0:	dd04      	ble.n	80065ec <__kernel_rem_pio2+0x164>
 80065e2:	2c01      	cmp	r4, #1
 80065e4:	d07f      	beq.n	80066e6 <__kernel_rem_pio2+0x25e>
 80065e6:	2c02      	cmp	r4, #2
 80065e8:	f000 8087 	beq.w	80066fa <__kernel_rem_pio2+0x272>
 80065ec:	f1b8 0f02 	cmp.w	r8, #2
 80065f0:	d130      	bne.n	8006654 <__kernel_rem_pio2+0x1cc>
 80065f2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80065f6:	ee30 8b48 	vsub.f64	d8, d0, d8
 80065fa:	b359      	cbz	r1, 8006654 <__kernel_rem_pio2+0x1cc>
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fabb 	bl	8006b78 <scalbn>
 8006602:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006606:	e025      	b.n	8006654 <__kernel_rem_pio2+0x1cc>
 8006608:	ee20 7b09 	vmul.f64	d7, d0, d9
 800660c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006610:	a806      	add	r0, sp, #24
 8006612:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006616:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800661a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800661e:	ee10 1a10 	vmov	r1, s0
 8006622:	ed32 0b02 	vldmdb	r2!, {d0}
 8006626:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800662a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800662e:	3301      	adds	r3, #1
 8006630:	e798      	b.n	8006564 <__kernel_rem_pio2+0xdc>
 8006632:	d106      	bne.n	8006642 <__kernel_rem_pio2+0x1ba>
 8006634:	1e6b      	subs	r3, r5, #1
 8006636:	aa06      	add	r2, sp, #24
 8006638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800663c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8006640:	e7c1      	b.n	80065c6 <__kernel_rem_pio2+0x13e>
 8006642:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006646:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	da32      	bge.n	80066b6 <__kernel_rem_pio2+0x22e>
 8006650:	f04f 0800 	mov.w	r8, #0
 8006654:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665c:	f040 80b0 	bne.w	80067c0 <__kernel_rem_pio2+0x338>
 8006660:	1e6b      	subs	r3, r5, #1
 8006662:	4618      	mov	r0, r3
 8006664:	2200      	movs	r2, #0
 8006666:	4548      	cmp	r0, r9
 8006668:	da4e      	bge.n	8006708 <__kernel_rem_pio2+0x280>
 800666a:	2a00      	cmp	r2, #0
 800666c:	f000 8088 	beq.w	8006780 <__kernel_rem_pio2+0x2f8>
 8006670:	aa06      	add	r2, sp, #24
 8006672:	3c18      	subs	r4, #24
 8006674:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006678:	2900      	cmp	r1, #0
 800667a:	f000 808e 	beq.w	800679a <__kernel_rem_pio2+0x312>
 800667e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006682:	4620      	mov	r0, r4
 8006684:	9302      	str	r3, [sp, #8]
 8006686:	f000 fa77 	bl	8006b78 <scalbn>
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800668e:	00d9      	lsls	r1, r3, #3
 8006690:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80067a8 <__kernel_rem_pio2+0x320>
 8006694:	1850      	adds	r0, r2, r1
 8006696:	f100 0508 	add.w	r5, r0, #8
 800669a:	461c      	mov	r4, r3
 800669c:	2c00      	cmp	r4, #0
 800669e:	f280 80bd 	bge.w	800681c <__kernel_rem_pio2+0x394>
 80066a2:	2500      	movs	r5, #0
 80066a4:	1b5c      	subs	r4, r3, r5
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	f2c0 80dd 	blt.w	8006866 <__kernel_rem_pio2+0x3de>
 80066ac:	4f43      	ldr	r7, [pc, #268]	; (80067bc <__kernel_rem_pio2+0x334>)
 80066ae:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 80067a0 <__kernel_rem_pio2+0x318>
 80066b2:	2400      	movs	r4, #0
 80066b4:	e0cb      	b.n	800684e <__kernel_rem_pio2+0x3c6>
 80066b6:	f04f 0802 	mov.w	r8, #2
 80066ba:	e787      	b.n	80065cc <__kernel_rem_pio2+0x144>
 80066bc:	ab06      	add	r3, sp, #24
 80066be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80066c2:	b949      	cbnz	r1, 80066d8 <__kernel_rem_pio2+0x250>
 80066c4:	b12b      	cbz	r3, 80066d2 <__kernel_rem_pio2+0x24a>
 80066c6:	aa06      	add	r2, sp, #24
 80066c8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80066cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80066d0:	2301      	movs	r3, #1
 80066d2:	3001      	adds	r0, #1
 80066d4:	4619      	mov	r1, r3
 80066d6:	e780      	b.n	80065da <__kernel_rem_pio2+0x152>
 80066d8:	aa06      	add	r2, sp, #24
 80066da:	ebac 0303 	sub.w	r3, ip, r3
 80066de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80066e2:	460b      	mov	r3, r1
 80066e4:	e7f5      	b.n	80066d2 <__kernel_rem_pio2+0x24a>
 80066e6:	1e68      	subs	r0, r5, #1
 80066e8:	ab06      	add	r3, sp, #24
 80066ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80066ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066f2:	aa06      	add	r2, sp, #24
 80066f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80066f8:	e778      	b.n	80065ec <__kernel_rem_pio2+0x164>
 80066fa:	1e68      	subs	r0, r5, #1
 80066fc:	ab06      	add	r3, sp, #24
 80066fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006702:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006706:	e7f4      	b.n	80066f2 <__kernel_rem_pio2+0x26a>
 8006708:	a906      	add	r1, sp, #24
 800670a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800670e:	3801      	subs	r0, #1
 8006710:	430a      	orrs	r2, r1
 8006712:	e7a8      	b.n	8006666 <__kernel_rem_pio2+0x1de>
 8006714:	f10c 0c01 	add.w	ip, ip, #1
 8006718:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800671c:	2a00      	cmp	r2, #0
 800671e:	d0f9      	beq.n	8006714 <__kernel_rem_pio2+0x28c>
 8006720:	eb0b 0305 	add.w	r3, fp, r5
 8006724:	aa1a      	add	r2, sp, #104	; 0x68
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	1898      	adds	r0, r3, r2
 800672a:	3008      	adds	r0, #8
 800672c:	1c69      	adds	r1, r5, #1
 800672e:	3708      	adds	r7, #8
 8006730:	2200      	movs	r2, #0
 8006732:	4465      	add	r5, ip
 8006734:	9005      	str	r0, [sp, #20]
 8006736:	428d      	cmp	r5, r1
 8006738:	f6ff af07 	blt.w	800654a <__kernel_rem_pio2+0xc2>
 800673c:	a81a      	add	r0, sp, #104	; 0x68
 800673e:	eb02 0c03 	add.w	ip, r2, r3
 8006742:	4484      	add	ip, r0
 8006744:	9803      	ldr	r0, [sp, #12]
 8006746:	f8dd e008 	ldr.w	lr, [sp, #8]
 800674a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800674e:	9001      	str	r0, [sp, #4]
 8006750:	ee07 0a90 	vmov	s15, r0
 8006754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006758:	9805      	ldr	r0, [sp, #20]
 800675a:	ed8c 7b00 	vstr	d7, [ip]
 800675e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80067a0 <__kernel_rem_pio2+0x318>
 8006762:	eb00 0802 	add.w	r8, r0, r2
 8006766:	f04f 0c00 	mov.w	ip, #0
 800676a:	45d4      	cmp	ip, sl
 800676c:	dd0c      	ble.n	8006788 <__kernel_rem_pio2+0x300>
 800676e:	eb02 0c07 	add.w	ip, r2, r7
 8006772:	a86a      	add	r0, sp, #424	; 0x1a8
 8006774:	4484      	add	ip, r0
 8006776:	ed8c 7b02 	vstr	d7, [ip, #8]
 800677a:	3101      	adds	r1, #1
 800677c:	3208      	adds	r2, #8
 800677e:	e7da      	b.n	8006736 <__kernel_rem_pio2+0x2ae>
 8006780:	9b04      	ldr	r3, [sp, #16]
 8006782:	f04f 0c01 	mov.w	ip, #1
 8006786:	e7c7      	b.n	8006718 <__kernel_rem_pio2+0x290>
 8006788:	ecbe 5b02 	vldmia	lr!, {d5}
 800678c:	ed38 6b02 	vldmdb	r8!, {d6}
 8006790:	f10c 0c01 	add.w	ip, ip, #1
 8006794:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006798:	e7e7      	b.n	800676a <__kernel_rem_pio2+0x2e2>
 800679a:	3b01      	subs	r3, #1
 800679c:	e768      	b.n	8006670 <__kernel_rem_pio2+0x1e8>
 800679e:	bf00      	nop
	...
 80067ac:	3e700000 	.word	0x3e700000
 80067b0:	00000000 	.word	0x00000000
 80067b4:	41700000 	.word	0x41700000
 80067b8:	08006f28 	.word	0x08006f28
 80067bc:	08006ee8 	.word	0x08006ee8
 80067c0:	4260      	negs	r0, r4
 80067c2:	eeb0 0b48 	vmov.f64	d0, d8
 80067c6:	f000 f9d7 	bl	8006b78 <scalbn>
 80067ca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80069a8 <__kernel_rem_pio2+0x520>
 80067ce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	db18      	blt.n	800680a <__kernel_rem_pio2+0x382>
 80067d8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80069b0 <__kernel_rem_pio2+0x528>
 80067dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80067e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80067e4:	aa06      	add	r2, sp, #24
 80067e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80067ea:	eea5 0b46 	vfms.f64	d0, d5, d6
 80067ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80067f2:	a906      	add	r1, sp, #24
 80067f4:	ee10 3a10 	vmov	r3, s0
 80067f8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80067fc:	1c6b      	adds	r3, r5, #1
 80067fe:	ee17 2a10 	vmov	r2, s14
 8006802:	3418      	adds	r4, #24
 8006804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006808:	e739      	b.n	800667e <__kernel_rem_pio2+0x1f6>
 800680a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800680e:	aa06      	add	r2, sp, #24
 8006810:	ee10 3a10 	vmov	r3, s0
 8006814:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006818:	462b      	mov	r3, r5
 800681a:	e730      	b.n	800667e <__kernel_rem_pio2+0x1f6>
 800681c:	aa06      	add	r2, sp, #24
 800681e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8006822:	9202      	str	r2, [sp, #8]
 8006824:	ee07 2a90 	vmov	s15, r2
 8006828:	3c01      	subs	r4, #1
 800682a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800682e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8006832:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006836:	ed25 7b02 	vstmdb	r5!, {d7}
 800683a:	e72f      	b.n	800669c <__kernel_rem_pio2+0x214>
 800683c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8006840:	ecb7 5b02 	vldmia	r7!, {d5}
 8006844:	ed9c 6b00 	vldr	d6, [ip]
 8006848:	3401      	adds	r4, #1
 800684a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800684e:	454c      	cmp	r4, r9
 8006850:	dc01      	bgt.n	8006856 <__kernel_rem_pio2+0x3ce>
 8006852:	42a5      	cmp	r5, r4
 8006854:	daf2      	bge.n	800683c <__kernel_rem_pio2+0x3b4>
 8006856:	aa42      	add	r2, sp, #264	; 0x108
 8006858:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800685c:	ed84 7b00 	vstr	d7, [r4]
 8006860:	3501      	adds	r5, #1
 8006862:	3808      	subs	r0, #8
 8006864:	e71e      	b.n	80066a4 <__kernel_rem_pio2+0x21c>
 8006866:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8006868:	2a03      	cmp	r2, #3
 800686a:	d84e      	bhi.n	800690a <__kernel_rem_pio2+0x482>
 800686c:	e8df f002 	tbb	[pc, r2]
 8006870:	021f1f3e 	.word	0x021f1f3e
 8006874:	3108      	adds	r1, #8
 8006876:	aa42      	add	r2, sp, #264	; 0x108
 8006878:	4411      	add	r1, r2
 800687a:	4608      	mov	r0, r1
 800687c:	461c      	mov	r4, r3
 800687e:	2c00      	cmp	r4, #0
 8006880:	dc61      	bgt.n	8006946 <__kernel_rem_pio2+0x4be>
 8006882:	4608      	mov	r0, r1
 8006884:	461c      	mov	r4, r3
 8006886:	2c01      	cmp	r4, #1
 8006888:	dc6d      	bgt.n	8006966 <__kernel_rem_pio2+0x4de>
 800688a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80069b8 <__kernel_rem_pio2+0x530>
 800688e:	2b01      	cmp	r3, #1
 8006890:	dc79      	bgt.n	8006986 <__kernel_rem_pio2+0x4fe>
 8006892:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8006896:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800689a:	f1b8 0f00 	cmp.w	r8, #0
 800689e:	d178      	bne.n	8006992 <__kernel_rem_pio2+0x50a>
 80068a0:	ed86 5b00 	vstr	d5, [r6]
 80068a4:	ed86 6b02 	vstr	d6, [r6, #8]
 80068a8:	ed86 7b04 	vstr	d7, [r6, #16]
 80068ac:	e02d      	b.n	800690a <__kernel_rem_pio2+0x482>
 80068ae:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80069b8 <__kernel_rem_pio2+0x530>
 80068b2:	3108      	adds	r1, #8
 80068b4:	aa42      	add	r2, sp, #264	; 0x108
 80068b6:	4411      	add	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	2800      	cmp	r0, #0
 80068bc:	da34      	bge.n	8006928 <__kernel_rem_pio2+0x4a0>
 80068be:	f1b8 0f00 	cmp.w	r8, #0
 80068c2:	d037      	beq.n	8006934 <__kernel_rem_pio2+0x4ac>
 80068c4:	eeb1 7b46 	vneg.f64	d7, d6
 80068c8:	ed86 7b00 	vstr	d7, [r6]
 80068cc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80068d0:	a844      	add	r0, sp, #272	; 0x110
 80068d2:	2101      	movs	r1, #1
 80068d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068d8:	428b      	cmp	r3, r1
 80068da:	da2e      	bge.n	800693a <__kernel_rem_pio2+0x4b2>
 80068dc:	f1b8 0f00 	cmp.w	r8, #0
 80068e0:	d001      	beq.n	80068e6 <__kernel_rem_pio2+0x45e>
 80068e2:	eeb1 7b47 	vneg.f64	d7, d7
 80068e6:	ed86 7b02 	vstr	d7, [r6, #8]
 80068ea:	e00e      	b.n	800690a <__kernel_rem_pio2+0x482>
 80068ec:	aa92      	add	r2, sp, #584	; 0x248
 80068ee:	ed9f 7b32 	vldr	d7, [pc, #200]	; 80069b8 <__kernel_rem_pio2+0x530>
 80068f2:	4411      	add	r1, r2
 80068f4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da0f      	bge.n	800691c <__kernel_rem_pio2+0x494>
 80068fc:	f1b8 0f00 	cmp.w	r8, #0
 8006900:	d001      	beq.n	8006906 <__kernel_rem_pio2+0x47e>
 8006902:	eeb1 7b47 	vneg.f64	d7, d7
 8006906:	ed86 7b00 	vstr	d7, [r6]
 800690a:	9b01      	ldr	r3, [sp, #4]
 800690c:	f003 0007 	and.w	r0, r3, #7
 8006910:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006914:	ecbd 8b06 	vpop	{d8-d10}
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	ed31 6b02 	vldmdb	r1!, {d6}
 8006920:	3b01      	subs	r3, #1
 8006922:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006926:	e7e7      	b.n	80068f8 <__kernel_rem_pio2+0x470>
 8006928:	ed31 7b02 	vldmdb	r1!, {d7}
 800692c:	3801      	subs	r0, #1
 800692e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006932:	e7c2      	b.n	80068ba <__kernel_rem_pio2+0x432>
 8006934:	eeb0 7b46 	vmov.f64	d7, d6
 8006938:	e7c6      	b.n	80068c8 <__kernel_rem_pio2+0x440>
 800693a:	ecb0 6b02 	vldmia	r0!, {d6}
 800693e:	3101      	adds	r1, #1
 8006940:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006944:	e7c8      	b.n	80068d8 <__kernel_rem_pio2+0x450>
 8006946:	ed10 7b04 	vldr	d7, [r0, #-16]
 800694a:	ed30 5b02 	vldmdb	r0!, {d5}
 800694e:	3c01      	subs	r4, #1
 8006950:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006954:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006958:	ed00 6b02 	vstr	d6, [r0, #-8]
 800695c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006960:	ed80 7b00 	vstr	d7, [r0]
 8006964:	e78b      	b.n	800687e <__kernel_rem_pio2+0x3f6>
 8006966:	ed10 7b04 	vldr	d7, [r0, #-16]
 800696a:	ed30 5b02 	vldmdb	r0!, {d5}
 800696e:	3c01      	subs	r4, #1
 8006970:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006974:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006978:	ed00 6b02 	vstr	d6, [r0, #-8]
 800697c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006980:	ed80 7b00 	vstr	d7, [r0]
 8006984:	e77f      	b.n	8006886 <__kernel_rem_pio2+0x3fe>
 8006986:	ed31 6b02 	vldmdb	r1!, {d6}
 800698a:	3b01      	subs	r3, #1
 800698c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006990:	e77d      	b.n	800688e <__kernel_rem_pio2+0x406>
 8006992:	eeb1 5b45 	vneg.f64	d5, d5
 8006996:	eeb1 6b46 	vneg.f64	d6, d6
 800699a:	ed86 5b00 	vstr	d5, [r6]
 800699e:	eeb1 7b47 	vneg.f64	d7, d7
 80069a2:	ed86 6b02 	vstr	d6, [r6, #8]
 80069a6:	e77f      	b.n	80068a8 <__kernel_rem_pio2+0x420>
 80069a8:	00000000 	.word	0x00000000
 80069ac:	41700000 	.word	0x41700000
 80069b0:	00000000 	.word	0x00000000
 80069b4:	3e700000 	.word	0x3e700000
	...

080069c0 <__kernel_sin>:
 80069c0:	ee10 3a90 	vmov	r3, s1
 80069c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069c8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80069cc:	da04      	bge.n	80069d8 <__kernel_sin+0x18>
 80069ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80069d2:	ee17 3a90 	vmov	r3, s15
 80069d6:	b35b      	cbz	r3, 8006a30 <__kernel_sin+0x70>
 80069d8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80069dc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80069e0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006a38 <__kernel_sin+0x78>
 80069e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006a40 <__kernel_sin+0x80>
 80069e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80069ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006a48 <__kernel_sin+0x88>
 80069f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80069f4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006a50 <__kernel_sin+0x90>
 80069f8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80069fc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006a58 <__kernel_sin+0x98>
 8006a00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006a04:	b930      	cbnz	r0, 8006a14 <__kernel_sin+0x54>
 8006a06:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006a60 <__kernel_sin+0xa0>
 8006a0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006a0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006a12:	4770      	bx	lr
 8006a14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006a18:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006a1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006a20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006a24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006a68 <__kernel_sin+0xa8>
 8006a28:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006a2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	f3af 8000 	nop.w
 8006a38:	5acfd57c 	.word	0x5acfd57c
 8006a3c:	3de5d93a 	.word	0x3de5d93a
 8006a40:	8a2b9ceb 	.word	0x8a2b9ceb
 8006a44:	be5ae5e6 	.word	0xbe5ae5e6
 8006a48:	57b1fe7d 	.word	0x57b1fe7d
 8006a4c:	3ec71de3 	.word	0x3ec71de3
 8006a50:	19c161d5 	.word	0x19c161d5
 8006a54:	bf2a01a0 	.word	0xbf2a01a0
 8006a58:	1110f8a6 	.word	0x1110f8a6
 8006a5c:	3f811111 	.word	0x3f811111
 8006a60:	55555549 	.word	0x55555549
 8006a64:	bfc55555 	.word	0xbfc55555
 8006a68:	55555549 	.word	0x55555549
 8006a6c:	3fc55555 	.word	0x3fc55555

08006a70 <fabs>:
 8006a70:	ec51 0b10 	vmov	r0, r1, d0
 8006a74:	ee10 2a10 	vmov	r2, s0
 8006a78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a7c:	ec43 2b10 	vmov	d0, r2, r3
 8006a80:	4770      	bx	lr
 8006a82:	0000      	movs	r0, r0
 8006a84:	0000      	movs	r0, r0
	...

08006a88 <floor>:
 8006a88:	ee10 1a90 	vmov	r1, s1
 8006a8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006a94:	2b13      	cmp	r3, #19
 8006a96:	b530      	push	{r4, r5, lr}
 8006a98:	ee10 0a10 	vmov	r0, s0
 8006a9c:	ee10 5a10 	vmov	r5, s0
 8006aa0:	dc33      	bgt.n	8006b0a <floor+0x82>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da17      	bge.n	8006ad6 <floor+0x4e>
 8006aa6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006b68 <floor+0xe0>
 8006aaa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006aae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	dd09      	ble.n	8006acc <floor+0x44>
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	da50      	bge.n	8006b5e <floor+0xd6>
 8006abc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ac0:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <floor+0xe8>)
 8006ac2:	4303      	orrs	r3, r0
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	4283      	cmp	r3, r0
 8006ac8:	bf18      	it	ne
 8006aca:	4611      	movne	r1, r2
 8006acc:	460b      	mov	r3, r1
 8006ace:	4602      	mov	r2, r0
 8006ad0:	ec43 2b10 	vmov	d0, r2, r3
 8006ad4:	e020      	b.n	8006b18 <floor+0x90>
 8006ad6:	4a27      	ldr	r2, [pc, #156]	; (8006b74 <floor+0xec>)
 8006ad8:	411a      	asrs	r2, r3
 8006ada:	ea01 0402 	and.w	r4, r1, r2
 8006ade:	4304      	orrs	r4, r0
 8006ae0:	d01a      	beq.n	8006b18 <floor+0x90>
 8006ae2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006b68 <floor+0xe0>
 8006ae6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006aea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af2:	ddeb      	ble.n	8006acc <floor+0x44>
 8006af4:	2900      	cmp	r1, #0
 8006af6:	bfbe      	ittt	lt
 8006af8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8006afc:	fa40 f303 	asrlt.w	r3, r0, r3
 8006b00:	18c9      	addlt	r1, r1, r3
 8006b02:	ea21 0102 	bic.w	r1, r1, r2
 8006b06:	2000      	movs	r0, #0
 8006b08:	e7e0      	b.n	8006acc <floor+0x44>
 8006b0a:	2b33      	cmp	r3, #51	; 0x33
 8006b0c:	dd05      	ble.n	8006b1a <floor+0x92>
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	d101      	bne.n	8006b18 <floor+0x90>
 8006b14:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006b18:	bd30      	pop	{r4, r5, pc}
 8006b1a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b22:	40e2      	lsrs	r2, r4
 8006b24:	4202      	tst	r2, r0
 8006b26:	d0f7      	beq.n	8006b18 <floor+0x90>
 8006b28:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8006b68 <floor+0xe0>
 8006b2c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006b30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b38:	ddc8      	ble.n	8006acc <floor+0x44>
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	da02      	bge.n	8006b44 <floor+0xbc>
 8006b3e:	2b14      	cmp	r3, #20
 8006b40:	d103      	bne.n	8006b4a <floor+0xc2>
 8006b42:	3101      	adds	r1, #1
 8006b44:	ea20 0002 	bic.w	r0, r0, r2
 8006b48:	e7c0      	b.n	8006acc <floor+0x44>
 8006b4a:	2401      	movs	r4, #1
 8006b4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006b50:	fa04 f303 	lsl.w	r3, r4, r3
 8006b54:	4418      	add	r0, r3
 8006b56:	42a8      	cmp	r0, r5
 8006b58:	bf38      	it	cc
 8006b5a:	1909      	addcc	r1, r1, r4
 8006b5c:	e7f2      	b.n	8006b44 <floor+0xbc>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	4601      	mov	r1, r0
 8006b62:	e7b3      	b.n	8006acc <floor+0x44>
 8006b64:	f3af 8000 	nop.w
 8006b68:	8800759c 	.word	0x8800759c
 8006b6c:	7e37e43c 	.word	0x7e37e43c
 8006b70:	bff00000 	.word	0xbff00000
 8006b74:	000fffff 	.word	0x000fffff

08006b78 <scalbn>:
 8006b78:	b500      	push	{lr}
 8006b7a:	ed2d 8b02 	vpush	{d8}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	ed8d 0b00 	vstr	d0, [sp]
 8006b84:	9b01      	ldr	r3, [sp, #4]
 8006b86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006b8a:	b9a2      	cbnz	r2, 8006bb6 <scalbn+0x3e>
 8006b8c:	9a00      	ldr	r2, [sp, #0]
 8006b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b92:	4313      	orrs	r3, r2
 8006b94:	d03a      	beq.n	8006c0c <scalbn+0x94>
 8006b96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006c50 <scalbn+0xd8>
 8006b9a:	4b35      	ldr	r3, [pc, #212]	; (8006c70 <scalbn+0xf8>)
 8006b9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006ba0:	4298      	cmp	r0, r3
 8006ba2:	ed8d 7b00 	vstr	d7, [sp]
 8006ba6:	da11      	bge.n	8006bcc <scalbn+0x54>
 8006ba8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8006c58 <scalbn+0xe0>
 8006bac:	ed9d 6b00 	vldr	d6, [sp]
 8006bb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bb4:	e007      	b.n	8006bc6 <scalbn+0x4e>
 8006bb6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006bba:	428a      	cmp	r2, r1
 8006bbc:	d10a      	bne.n	8006bd4 <scalbn+0x5c>
 8006bbe:	ed9d 7b00 	vldr	d7, [sp]
 8006bc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006bc6:	ed8d 7b00 	vstr	d7, [sp]
 8006bca:	e01f      	b.n	8006c0c <scalbn+0x94>
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006bd2:	3a36      	subs	r2, #54	; 0x36
 8006bd4:	4402      	add	r2, r0
 8006bd6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006bda:	428a      	cmp	r2, r1
 8006bdc:	dd0a      	ble.n	8006bf4 <scalbn+0x7c>
 8006bde:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8006c60 <scalbn+0xe8>
 8006be2:	eeb0 0b48 	vmov.f64	d0, d8
 8006be6:	ed9d 1b00 	vldr	d1, [sp]
 8006bea:	f000 f843 	bl	8006c74 <copysign>
 8006bee:	ee20 7b08 	vmul.f64	d7, d0, d8
 8006bf2:	e7e8      	b.n	8006bc6 <scalbn+0x4e>
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	dd10      	ble.n	8006c1a <scalbn+0xa2>
 8006bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c04:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c08:	e9cd 0100 	strd	r0, r1, [sp]
 8006c0c:	ed9d 0b00 	vldr	d0, [sp]
 8006c10:	b003      	add	sp, #12
 8006c12:	ecbd 8b02 	vpop	{d8}
 8006c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c1a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006c1e:	da06      	bge.n	8006c2e <scalbn+0xb6>
 8006c20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c24:	4298      	cmp	r0, r3
 8006c26:	dcda      	bgt.n	8006bde <scalbn+0x66>
 8006c28:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8006c58 <scalbn+0xe0>
 8006c2c:	e7d9      	b.n	8006be2 <scalbn+0x6a>
 8006c2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c36:	3236      	adds	r2, #54	; 0x36
 8006c38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c3c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c40:	ec41 0b17 	vmov	d7, r0, r1
 8006c44:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8006c68 <scalbn+0xf0>
 8006c48:	e7b2      	b.n	8006bb0 <scalbn+0x38>
 8006c4a:	bf00      	nop
 8006c4c:	f3af 8000 	nop.w
 8006c50:	00000000 	.word	0x00000000
 8006c54:	43500000 	.word	0x43500000
 8006c58:	c2f8f359 	.word	0xc2f8f359
 8006c5c:	01a56e1f 	.word	0x01a56e1f
 8006c60:	8800759c 	.word	0x8800759c
 8006c64:	7e37e43c 	.word	0x7e37e43c
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	3c900000 	.word	0x3c900000
 8006c70:	ffff3cb0 	.word	0xffff3cb0

08006c74 <copysign>:
 8006c74:	ec51 0b10 	vmov	r0, r1, d0
 8006c78:	ee11 0a90 	vmov	r0, s3
 8006c7c:	ee10 2a10 	vmov	r2, s0
 8006c80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006c88:	ea41 0300 	orr.w	r3, r1, r0
 8006c8c:	ec43 2b10 	vmov	d0, r2, r3
 8006c90:	4770      	bx	lr
	...

08006c94 <_init>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

08006ca0 <_fini>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	bf00      	nop
 8006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca6:	bc08      	pop	{r3}
 8006ca8:	469e      	mov	lr, r3
 8006caa:	4770      	bx	lr
