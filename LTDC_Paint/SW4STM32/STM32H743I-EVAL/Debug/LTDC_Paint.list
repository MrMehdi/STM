
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b84  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08006e20  08006e20  00016e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000110  20000000  080070b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d60  20000110  080071c0  00020110  2**3
                  ALLOC
  7 ._user_heap_stack 00000c00  20001e70  080071c0  00021e70  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  9 .debug_line   0001cd3c  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00045f96  00000000  00000000  0003ce7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000073c6  00000000  00000000  00082e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000019f0  00000000  00000000  0008a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001870ed  00000000  00000000  0008bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002088  00000000  00000000  00212cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015d3c  00000000  00000000  00214d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ea3e  00000000  00000000  0022aa7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002694ba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cb4  00000000  00000000  00269538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000110 	.word	0x20000110
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006e04 	.word	0x08006e04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000114 	.word	0x20000114
 80002d4:	08006e04 	.word	0x08006e04

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002de:	e003      	b.n	80002e8 <LoopCopyDataInit>

080002e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002e6:	3104      	adds	r1, #4

080002e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f0:	d3f6      	bcc.n	80002e0 <CopyDataInit>
  ldr  r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002f4:	e002      	b.n	80002fc <LoopFillZerobss>

080002f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002f8:	f842 3b04 	str.w	r3, [r2], #4

080002fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000300:	d3f9      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000302:	f002 fb61 	bl	80029c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000306:	f005 ff33 	bl	8006170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 f811 	bl	8000330 <main>
  bx  lr    
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000314:	080070b0 	.word	0x080070b0
  ldr  r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800031c:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8000320:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8000324:	20001e70 	.word	0x20001e70

08000328 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>
 800032a:	0000      	movs	r0, r0
 800032c:	0000      	movs	r0, r0
	...

08000330 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b0a0      	sub	sp, #128	; 0x80
static void MPU_Config(void)
{
MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000334:	f002 fc78 	bl	8002c28 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000338:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800033a:	f04f 4c50 	mov.w	ip, #3489660928	; 0xd0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800033e:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000340:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000344:	4bae      	ldr	r3, [pc, #696]	; (8000600 <main+0x2d0>)
 8000346:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800034a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034e:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000350:	f002 fc8c 	bl	8002c6c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000354:	2004      	movs	r0, #4
 8000356:	f002 fc77 	bl	8002c48 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800035a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800035e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000362:	4ba8      	ldr	r3, [pc, #672]	; (8000604 <main+0x2d4>)
 8000364:	2100      	movs	r1, #0
 8000366:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800036e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000378:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800037a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800037e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000382:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000386:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800038a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800038e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000392:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000396:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800039a:	07a5      	lsls	r5, r4, #30
 800039c:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800039e:	ea02 0c06 	and.w	ip, r2, r6
 80003a2:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003a4:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003a6:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003aa:	3901      	subs	r1, #1
 80003ac:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003b0:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80003b4:	1c4f      	adds	r7, r1, #1
 80003b6:	d1f6      	bne.n	80003a6 <main+0x76>
 80003b8:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80003ba:	f112 0f20 	cmn.w	r2, #32
 80003be:	d1ee      	bne.n	800039e <main+0x6e>
 80003c0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003d0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80003d4:	f002 fb60 	bl	8002a98 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d8:	2002      	movs	r0, #2
 80003da:	f003 ffb7 	bl	800434c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003de:	2300      	movs	r3, #0
 80003e0:	9303      	str	r3, [sp, #12]
 80003e2:	4b89      	ldr	r3, [pc, #548]	; (8000608 <main+0x2d8>)
 80003e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003e6:	f022 0201 	bic.w	r2, r2, #1
 80003ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	9303      	str	r3, [sp, #12]
 80003f4:	4b85      	ldr	r3, [pc, #532]	; (800060c <main+0x2dc>)
 80003f6:	699a      	ldr	r2, [r3, #24]
 80003f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003fc:	619a      	str	r2, [r3, #24]
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000404:	9203      	str	r2, [sp, #12]
 8000406:	9a03      	ldr	r2, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	0490      	lsls	r0, r2, #18
 800040c:	d5fc      	bpl.n	8000408 <main+0xd8>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000412:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000416:	2105      	movs	r1, #5
 8000418:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800041a:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800041c:	2608      	movs	r6, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800041e:	a80d      	add	r0, sp, #52	; 0x34
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000420:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000422:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000424:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000426:	961d      	str	r6, [sp, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000428:	e9cd 730d 	strd	r7, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800042c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042e:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000432:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000434:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000436:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000438:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 160;
 800043a:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800043e:	f003 ffa9 	bl	8004394 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000442:	b118      	cbz	r0, 800044c <main+0x11c>
  BSP_LED_On(LED3);
 8000444:	4620      	mov	r0, r4
 8000446:	f001 f9bf 	bl	80017c8 <BSP_LED_On>
 800044a:	e7fe      	b.n	800044a <main+0x11a>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	223f      	movs	r2, #63	; 0x3f
 800044e:	2303      	movs	r3, #3
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000450:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000456:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000458:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800045c:	e9cd 0607 	strd	r0, r6, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000460:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000462:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000466:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800046a:	f004 fac7 	bl	80049fc <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800046e:	4606      	mov	r6, r0
 8000470:	b118      	cbz	r0, 800047a <main+0x14a>
  BSP_LED_On(LED3);
 8000472:	4620      	mov	r0, r4
 8000474:	f001 f9a8 	bl	80017c8 <BSP_LED_On>
 8000478:	e7fe      	b.n	8000478 <main+0x148>
  __HAL_RCC_CSI_ENABLE() ;
 800047a:	4b65      	ldr	r3, [pc, #404]	; (8000610 <main+0x2e0>)
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, (1.0-test_percentuale));
 800047c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
  BSP_LCD_GetXSize(0, &x_size);
 8000480:	4d64      	ldr	r5, [pc, #400]	; (8000614 <main+0x2e4>)
  __HAL_RCC_CSI_ENABLE() ;
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000488:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800048a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800048e:	f042 0202 	orr.w	r2, r2, #2
 8000492:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	9304      	str	r3, [sp, #16]
 80004a0:	9b04      	ldr	r3, [sp, #16]
  HAL_EnableCompensationCell();
 80004a2:	f002 fb51 	bl	8002b48 <HAL_EnableCompensationCell>
  BSP_LED_Init(LED1);
 80004a6:	4630      	mov	r0, r6
 80004a8:	f001 f93a 	bl	8001720 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80004ac:	4620      	mov	r0, r4
 80004ae:	f001 f937 	bl	8001720 <BSP_LED_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80004b2:	4639      	mov	r1, r7
 80004b4:	4630      	mov	r0, r6
  configura_dimensioni_interfaccia(&d_int, x_size, y_size);
 80004b6:	4c58      	ldr	r4, [pc, #352]	; (8000618 <main+0x2e8>)
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80004b8:	f002 f826 	bl	8002508 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80004bc:	4857      	ldr	r0, [pc, #348]	; (800061c <main+0x2ec>)
 80004be:	f005 fc79 	bl	8005db4 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80004c2:	4630      	mov	r0, r6
 80004c4:	f005 fca4 	bl	8005e10 <UTIL_LCD_SetLayer>
  BSP_LCD_DisplayOn(0);
 80004c8:	4630      	mov	r0, r6
 80004ca:	f002 f829 	bl	8002520 <BSP_LCD_DisplayOn>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80004ce:	f04f 30ff 	mov.w	r0, #4294967295
 80004d2:	f005 fdd3 	bl	800607c <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
 80004d6:	4629      	mov	r1, r5
 80004d8:	4630      	mov	r0, r6
 80004da:	f001 fc73 	bl	8001dc4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80004de:	1d29      	adds	r1, r5, #4
 80004e0:	4630      	mov	r0, r6
 80004e2:	f001 fc79 	bl	8001dd8 <BSP_LCD_GetYSize>
  hTS.Width = x_size;
 80004e6:	494e      	ldr	r1, [pc, #312]	; (8000620 <main+0x2f0>)
 80004e8:	682b      	ldr	r3, [r5, #0]
  BSP_TS_Init(0, &hTS);
 80004ea:	4630      	mov	r0, r6
  hTS.Accuracy = 0;
 80004ec:	60ce      	str	r6, [r1, #12]
  hTS.Width = x_size;
 80004ee:	600b      	str	r3, [r1, #0]
  hTS.Height = y_size;
 80004f0:	686b      	ldr	r3, [r5, #4]
  hTS.Orientation = TS_SWAP_NONE;
 80004f2:	e9c1 3701 	strd	r3, r7, [r1, #4]
  BSP_TS_Init(0, &hTS);
 80004f6:	f002 f967 	bl	80027c8 <BSP_TS_Init>
  configura_dimensioni_interfaccia(&d_int, x_size, y_size);
 80004fa:	4620      	mov	r0, r4
 80004fc:	e9d5 1200 	ldrd	r1, r2, [r5]
 8000500:	f005 faf2 	bl	8005ae8 <configura_dimensioni_interfaccia>
  UTIL_LCD_SetLayer(0);
 8000504:	4630      	mov	r0, r6
 8000506:	f005 fc83 	bl	8005e10 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(COLORE_SFONDO);
 800050a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800050e:	f005 fdb5 	bl	800607c <UTIL_LCD_Clear>
  BSP_LCD_GetXSize(0, &x_size);
 8000512:	4629      	mov	r1, r5
 8000514:	4630      	mov	r0, r6
 8000516:	f001 fc55 	bl	8001dc4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800051a:	1d29      	adds	r1, r5, #4
 800051c:	4630      	mov	r0, r6
 800051e:	f001 fc5b 	bl	8001dd8 <BSP_LCD_GetYSize>
  disegna_pulsante_controllo(0,0, d_int.dim_quadrato_piu_meno, d_int.dim_riquadro_etichetta_x, d_int.dim_riquadro_etichetta_y);
 8000522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000524:	4631      	mov	r1, r6
 8000526:	4630      	mov	r0, r6
 8000528:	9300      	str	r3, [sp, #0]
  BSP_TS_GetState(0,&TS_State);
 800052a:	f105 0610 	add.w	r6, r5, #16
  disegna_pulsante_controllo(0,0, d_int.dim_quadrato_piu_meno, d_int.dim_riquadro_etichetta_x, d_int.dim_riquadro_etichetta_y);
 800052e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8000532:	f005 fbd7 	bl	8005ce4 <disegna_pulsante_controllo>
  disegna_cerchio_centrale(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.raggio_cerchio_centrale);
 8000536:	6862      	ldr	r2, [r4, #4]
 8000538:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800053c:	f005 fafc 	bl	8005b38 <disegna_cerchio_centrale>
  disegna_frame_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y);
 8000540:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8000544:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8000548:	f005 fb83 	bl	8005c52 <disegna_frame_barra_laterale>
  disegna_frame_barra_laterale(x_size-d_int.pan_barra_destra-d_int.dim_barra_x,d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y);
 800054c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800054e:	6828      	ldr	r0, [r5, #0]
 8000550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000552:	1ac0      	subs	r0, r0, r3
 8000554:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
	test_percentuale+=0.01;
 8000558:	ed9f 8b25 	vldr	d8, [pc, #148]	; 80005f0 <main+0x2c0>
  disegna_frame_barra_laterale(x_size-d_int.pan_barra_destra-d_int.dim_barra_x,d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y);
 800055c:	1a80      	subs	r0, r0, r2
 800055e:	f005 fb78 	bl	8005c52 <disegna_frame_barra_laterale>
	test_percentuale+=0.01;
 8000562:	ed95 0b02 	vldr	d0, [r5, #8]
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, (1.0-test_percentuale));
 8000566:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800056a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
	test_percentuale+=0.01;
 800056e:	ee30 0b08 	vadd.f64	d0, d0, d8
 8000572:	ed85 0b02 	vstr	d0, [r5, #8]
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, (1.0-test_percentuale));
 8000576:	ee39 0b40 	vsub.f64	d0, d9, d0
 800057a:	f005 fb76 	bl	8005c6a <disegna_contenuto_barra_laterale>
	disegna_contenuto_barra_laterale(x_size-d_int.pan_barra_destra-d_int.dim_barra_x, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, (1.0-test_percentuale));
 800057e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000580:	6828      	ldr	r0, [r5, #0]
 8000582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000584:	1ac0      	subs	r0, r0, r3
 8000586:	ed95 0b02 	vldr	d0, [r5, #8]
 800058a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800058e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	f005 fb69 	bl	8005c6a <disegna_contenuto_barra_laterale>
  disegna_indicatore_cerchio(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.angolo, d_int.raggio_cerchio_centrale, d_int.raggio_indicatore_cerchio);
 8000598:	6923      	ldr	r3, [r4, #16]
 800059a:	6862      	ldr	r2, [r4, #4]
	aggiorna_indicatore_cerchio(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.angolo, (d_int.angolo += 0.1), d_int.raggio_cerchio_centrale, d_int.raggio_indicatore_cerchio);
 800059c:	ed9f 9b16 	vldr	d9, [pc, #88]	; 80005f8 <main+0x2c8>
  disegna_indicatore_cerchio(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.angolo, d_int.raggio_cerchio_centrale, d_int.raggio_indicatore_cerchio);
 80005a0:	ed94 0b08 	vldr	d0, [r4, #32]
 80005a4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80005a8:	f005 faca 	bl	8005b40 <disegna_indicatore_cerchio>
  BSP_TS_GetState(0,&TS_State);
 80005ac:	4631      	mov	r1, r6
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 f9b0 	bl	8002914 <BSP_TS_GetState>
  if ((TS_State.TouchDetected))
 80005b4:	692b      	ldr	r3, [r5, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f8      	beq.n	80005ac <main+0x27c>
	test_percentuale+=0.01;
 80005ba:	ed95 0b02 	vldr	d0, [r5, #8]
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, test_percentuale);
 80005be:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80005c2:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
	test_percentuale+=0.01;
 80005c6:	ee30 0b08 	vadd.f64	d0, d0, d8
 80005ca:	ed85 0b02 	vstr	d0, [r5, #8]
	disegna_contenuto_barra_laterale(d_int.pan_barra_destra, d_int.pan_barra_alto, d_int.dim_barra_x, d_int.dim_barra_y, test_percentuale);
 80005ce:	f005 fb4c 	bl	8005c6a <disegna_contenuto_barra_laterale>
	aggiorna_indicatore_cerchio(d_int.centro_x_cerchio_centrale, d_int.centro_y_cerchio_centrale, d_int.angolo, (d_int.angolo += 0.1), d_int.raggio_cerchio_centrale, d_int.raggio_indicatore_cerchio);
 80005d2:	6923      	ldr	r3, [r4, #16]
 80005d4:	6862      	ldr	r2, [r4, #4]
 80005d6:	ed94 0b08 	vldr	d0, [r4, #32]
 80005da:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80005de:	ee30 1b09 	vadd.f64	d1, d0, d9
 80005e2:	ed84 1b08 	vstr	d1, [r4, #32]
 80005e6:	f005 fada 	bl	8005b9e <aggiorna_indicatore_cerchio>
 80005ea:	e7df      	b.n	80005ac <main+0x27c>
 80005ec:	f3af 8000 	nop.w
 80005f0:	47ae147b 	.word	0x47ae147b
 80005f4:	3f847ae1 	.word	0x3f847ae1
 80005f8:	9999999a 	.word	0x9999999a
 80005fc:	3fb99999 	.word	0x3fb99999
 8000600:	03000018 	.word	0x03000018
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	58000400 	.word	0x58000400
 800060c:	58024800 	.word	0x58024800
 8000610:	58024400 	.word	0x58024400
 8000614:	20000130 	.word	0x20000130
 8000618:	20000e30 	.word	0x20000e30
 800061c:	08006e94 	.word	0x08006e94
 8000620:	200012ac 	.word	0x200012ac

08000624 <MX_LTDC_ClockConfig>:
    periph_clk_init_struct.PLL3.PLL3R = 16;
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_LTDC_ClockConfig+0x34>)
 8000626:	2310      	movs	r3, #16
    periph_clk_init_struct.PLL3.PLL3Q = 7;
 8000628:	2207      	movs	r2, #7
    periph_clk_init_struct.PLL3.PLL3N = 336;
 800062a:	f04f 0c19 	mov.w	ip, #25
    periph_clk_init_struct.PLL3.PLL3R = 16;
 800062e:	6503      	str	r3, [r0, #80]	; 0x50
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000630:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    periph_clk_init_struct.PLL3.PLL3Q = 7;
 8000634:	2102      	movs	r1, #2
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000636:	61c3      	str	r3, [r0, #28]
    periph_clk_init_struct.PLL3.PLL3N = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	; 0x150
    periph_clk_init_struct.PLL3.PLL3Q = 7;
 800063c:	e9c0 1212 	strd	r1, r2, [r0, #72]	; 0x48
    periph_clk_init_struct.PLL3.PLL3N = 336;
 8000640:	e9c0 c310 	strd	ip, r3, [r0, #64]	; 0x40
    periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
    periph_clk_init_struct.PLL3.PLL3FRACN = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	65c3      	str	r3, [r0, #92]	; 0x5c
    periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800064c:	e9c0 3215 	strd	r3, r2, [r0, #84]	; 0x54
   return  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000650:	301c      	adds	r0, #28
 8000652:	f004 bc1d 	b.w	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8000656:	bf00      	nop
 8000658:	20000130 	.word	0x20000130

0800065c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800065c:	4770      	bx	lr

0800065e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800065e:	e7fe      	b.n	800065e <HardFault_Handler>

08000660 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler>

08000662 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler>

08000664 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler>

08000666 <SVC_Handler>:
 8000666:	4770      	bx	lr

08000668 <DebugMon_Handler>:
 8000668:	4770      	bx	lr

0800066a <PendSV_Handler>:
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800066c:	f002 ba42 	b.w	8002af4 <HAL_IncTick>

08000670 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
 8000670:	4801      	ldr	r0, [pc, #4]	; (8000678 <OTG_HS_IRQHandler+0x8>)
 8000672:	f002 be47 	b.w	8003304 <HAL_HCD_IRQHandler>
 8000676:	bf00      	nop
 8000678:	200019d0 	.word	0x200019d0

0800067c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 800067c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000680:	f005 bb56 	b.w	8005d30 <USBH_LL_IncTimer>

08000684 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8000684:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000688:	f005 bb68 	b.w	8005d5c <USBH_LL_Connect>

0800068c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800068c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000690:	f005 bb6e 	b.w	8005d70 <USBH_LL_Disconnect>

08000694 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8000694:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000698:	f005 bb58 	b.w	8005d4c <USBH_LL_PortEnabled>

0800069c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800069c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80006a0:	f005 bb58 	b.w	8005d54 <USBH_LL_PortDisabled>

080006a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 80006a4:	4770      	bx	lr

080006a6 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80006a6:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 80006a8:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80006ac:	f003 f92c 	bl	8003908 <HAL_HCD_Stop>
  return USBH_OK; 
}
 80006b0:	2000      	movs	r0, #0
 80006b2:	bd08      	pop	{r3, pc}

080006b4 <EXC7200_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
  Capabilities->Gesture    = 0;
 80006b4:	2301      	movs	r3, #1
  Capabilities->MultiTouch = 0;
 80006b6:	2000      	movs	r0, #0
  Capabilities->Gesture    = 0;
 80006b8:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxTouch   = EXC7200_MAX_NB_TOUCH;
  Capabilities->MaxXl      = EXC7200_MAX_X_LENGTH;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Capabilities->MultiTouch = 0;
 80006be:	8008      	strh	r0, [r1, #0]
  Capabilities->MaxYl      = EXC7200_MAX_Y_LENGTH;
 80006c0:	e9c1 3301 	strd	r3, r3, [r1, #4]
  
  return EXC7200_OK;
}
 80006c4:	4770      	bx	lr

080006c6 <EXC7200_Init>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_Init(EXC7200_Object_t *pObj)
{
 80006c6:	b510      	push	{r4, lr}
  int32_t ret = EXC7200_OK;
  
  if(pObj->IsInitialized == 0U)
 80006c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80006cc:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80006ce:	b933      	cbnz	r3, 80006de <EXC7200_Init+0x18>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != EXC7200_OK)
 80006d0:	6803      	ldr	r3, [r0, #0]
 80006d2:	4798      	blx	r3
 80006d4:	b928      	cbnz	r0, 80006e2 <EXC7200_Init+0x1c>
    {
      ret = EXC7200_ERROR;
    }
    else
    {
      pObj->IsInitialized = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 80006dc:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_OK;
 80006de:	2000      	movs	r0, #0
 80006e0:	e7fc      	b.n	80006dc <EXC7200_Init+0x16>
      ret = EXC7200_ERROR;
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80006e6:	e7f9      	b.n	80006dc <EXC7200_Init+0x16>

080006e8 <EXC7200_DeInit>:
  *         from MCU to EXC7200 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t EXC7200_DeInit(EXC7200_Object_t *pObj)
{
 80006e8:	b510      	push	{r4, lr}
  int32_t ret = EXC7200_OK;
  
  if(pObj->IsInitialized == 1U)
 80006ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80006ee:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 1U)
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d105      	bne.n	8000700 <EXC7200_DeInit+0x18>
  {
    if(pObj->IO.DeInit() != EXC7200_OK)
 80006f4:	6843      	ldr	r3, [r0, #4]
 80006f6:	4798      	blx	r3
 80006f8:	b920      	cbnz	r0, 8000704 <EXC7200_DeInit+0x1c>
    {
      ret = EXC7200_ERROR;
    }
    else
    {
      pObj->IsInitialized = 0;
 80006fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 80006fe:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_OK;
 8000700:	2000      	movs	r0, #0
 8000702:	e7fc      	b.n	80006fe <EXC7200_DeInit+0x16>
      ret = EXC7200_ERROR;
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000708:	e7f9      	b.n	80006fe <EXC7200_DeInit+0x16>

0800070a <EXC7200_GestureConfig>:
  */
int32_t EXC7200_GestureConfig(EXC7200_Object_t *pObj, EXC7200_Gesture_Init_t *GestureInit)
{
  /* Feature not supported */
  return EXC7200_ERROR;  
}
 800070a:	f04f 30ff 	mov.w	r0, #4294967295
 800070e:	4770      	bx	lr

08000710 <EXC7200_EnableIT>:
  */
int32_t EXC7200_EnableIT(EXC7200_Object_t *pObj)
{
  /* Feature not supported */
  return EXC7200_ERROR;
}
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	4770      	bx	lr

08000716 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000716:	b410      	push	{r4}
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000718:	6904      	ldr	r4, [r0, #16]
 800071a:	8900      	ldrh	r0, [r0, #8]
 800071c:	46a4      	mov	ip, r4
}
 800071e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000722:	4760      	bx	ip

08000724 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000724:	b410      	push	{r4}
  EXC7200_Object_t *pObj = (EXC7200_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000726:	68c4      	ldr	r4, [r0, #12]
 8000728:	8900      	ldrh	r0, [r0, #8]
 800072a:	46a4      	mov	ip, r4
}
 800072c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000730:	4760      	bx	ip

08000732 <EXC7200_ReadID>:
{
 8000732:	b513      	push	{r0, r1, r4, lr}
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 8000734:	2301      	movs	r3, #1
{
 8000736:	460c      	mov	r4, r1
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, &data, 1) == EXC7200_OK)
 8000738:	f10d 0207 	add.w	r2, sp, #7
 800073c:	2109      	movs	r1, #9
 800073e:	3018      	adds	r0, #24
 8000740:	f000 f866 	bl	8000810 <exc7200_read_reg>
 8000744:	b920      	cbnz	r0, 8000750 <EXC7200_ReadID+0x1e>
    *Id = EXC7200_ID; 
 8000746:	f44f 43e4 	mov.w	r3, #29184	; 0x7200
 800074a:	6023      	str	r3, [r4, #0]
}
 800074c:	b002      	add	sp, #8
 800074e:	bd10      	pop	{r4, pc}
  int32_t ret = EXC7200_ERROR;
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000754:	e7fa      	b.n	800074c <EXC7200_ReadID+0x1a>

08000756 <EXC7200_ClearIT>:
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	4770      	bx	lr

0800075c <EXC7200_GetMultiTouchState>:
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	4770      	bx	lr

08000762 <EXC7200_GetGesture>:
 8000762:	f04f 30ff 	mov.w	r0, #4294967295
 8000766:	4770      	bx	lr

08000768 <EXC7200_DisableIT>:
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	4770      	bx	lr

0800076e <EXC7200_ITStatus>:
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr

08000774 <EXC7200_GetState>:
{
 8000774:	b530      	push	{r4, r5, lr}
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 8000776:	f100 0518 	add.w	r5, r0, #24
{
 800077a:	b085      	sub	sp, #20
 800077c:	460c      	mov	r4, r1
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 800077e:	230a      	movs	r3, #10
 8000780:	aa01      	add	r2, sp, #4
 8000782:	2109      	movs	r1, #9
 8000784:	4628      	mov	r0, r5
 8000786:	f000 f843 	bl	8000810 <exc7200_read_reg>
 800078a:	bb08      	cbnz	r0, 80007d0 <EXC7200_GetState+0x5c>
    if(pData[1] == 0x83U)
 800078c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000790:	f1a3 0283 	sub.w	r2, r3, #131	; 0x83
 8000794:	4253      	negs	r3, r2
 8000796:	4153      	adcs	r3, r2
  State->TouchDetected = (uint32_t)EXC7200_DetectTouch(pObj, data, (uint32_t)sizeof(data));
 8000798:	6023      	str	r3, [r4, #0]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 800079a:	2109      	movs	r1, #9
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 800079c:	f89d 3006 	ldrb.w	r3, [sp, #6]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80007a0:	4628      	mov	r0, r5
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80007a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80007a6:	091b      	lsrs	r3, r3, #4
 80007a8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80007ac:	f89d 2009 	ldrb.w	r2, [sp, #9]
  State->TouchX = (((data[3]&0x00ff) << 4) | ((data[2]&0x00f0) >> 4)) << 1;
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	6063      	str	r3, [r4, #4]
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80007b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80007b8:	091b      	lsrs	r3, r3, #4
 80007ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80007be:	aa01      	add	r2, sp, #4
  State->TouchY = (((data[5]&0x00ff) << 4) | ((data[4]&0x00f0) >> 4)) << 1;
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	60a3      	str	r3, [r4, #8]
  if(exc7200_read_reg(&pObj->Ctx, EXC7200_READ_REG, pData, Length) != EXC7200_OK)
 80007c4:	230a      	movs	r3, #10
 80007c6:	f000 f823 	bl	8000810 <exc7200_read_reg>
}
 80007ca:	2000      	movs	r0, #0
 80007cc:	b005      	add	sp, #20
 80007ce:	bd30      	pop	{r4, r5, pc}
    ret = EXC7200_ERROR;
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	e7e0      	b.n	8000798 <EXC7200_GetState+0x24>
	...

080007d8 <EXC7200_RegisterBusIO>:
  if (pObj == NULL)
 80007d8:	b190      	cbz	r0, 8000800 <EXC7200_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80007da:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80007dc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80007de:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80007e0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80007e2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80007e4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80007e6:	68ca      	ldr	r2, [r1, #12]
 80007e8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80007ea:	690a      	ldr	r2, [r1, #16]
 80007ec:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80007ee:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80007f0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80007f2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <EXC7200_RegisterBusIO+0x30>)
 80007f6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <EXC7200_RegisterBusIO+0x34>)
 80007fa:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80007fc:	b103      	cbz	r3, 8000800 <EXC7200_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80007fe:	4718      	bx	r3
}
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	08000717 	.word	0x08000717
 800080c:	08000725 	.word	0x08000725

08000810 <exc7200_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t exc7200_read_reg(exc7200_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8000810:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000812:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000816:	46a4      	mov	ip, r4
}
 8000818:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800081c:	4760      	bx	ip
	...

08000820 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000820:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 8000822:	2201      	movs	r2, #1
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <IS42S32800G_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8000826:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800082a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800082c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800082e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8000830:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8000832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000836:	f004 ffb3 	bl	80057a0 <HAL_SDRAM_SendCommand>
 800083a:	3000      	adds	r0, #0
 800083c:	bf18      	it	ne
 800083e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 8000840:	4240      	negs	r0, r0
 8000842:	bd08      	pop	{r3, pc}
 8000844:	20000210 	.word	0x20000210

08000848 <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000848:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 800084a:	2202      	movs	r2, #2
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <IS42S32800G_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800084e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8000852:	2101      	movs	r1, #1
 8000854:	2200      	movs	r2, #0
 8000856:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	4619      	mov	r1, r3
 8000860:	f004 ff9e 	bl	80057a0 <HAL_SDRAM_SendCommand>
 8000864:	3000      	adds	r0, #0
 8000866:	bf18      	it	ne
 8000868:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 800086a:	4240      	negs	r0, r0
 800086c:	bd08      	pop	{r3, pc}
 800086e:	bf00      	nop
 8000870:	20000210 	.word	0x20000210

08000874 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 8000874:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000876:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 800087a:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800087c:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 800087e:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8000880:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8000882:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8000884:	6991      	ldr	r1, [r2, #24]
 8000886:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000888:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800088a:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800088c:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 800088e:	4907      	ldr	r1, [pc, #28]	; (80008ac <IS42S32800G_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8000890:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8000892:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 8000894:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8000896:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 800089a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089e:	f004 ff7f 	bl	80057a0 <HAL_SDRAM_SendCommand>
 80008a2:	3000      	adds	r0, #0
 80008a4:	bf18      	it	ne
 80008a6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80008a8:	4240      	negs	r0, r0
 80008aa:	bd10      	pop	{r4, pc}
 80008ac:	20000210 	.word	0x20000210

080008b0 <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 80008b0:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <IS42S32800G_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80008b4:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80008b8:	2108      	movs	r1, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80008c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 ff6b 	bl	80057a0 <HAL_SDRAM_SendCommand>
 80008ca:	3000      	adds	r0, #0
 80008cc:	bf18      	it	ne
 80008ce:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80008d0:	4240      	negs	r0, r0
 80008d2:	bd08      	pop	{r3, pc}
 80008d4:	20000210 	.word	0x20000210

080008d8 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 80008d8:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80008da:	f004 ff80 	bl	80057de <HAL_SDRAM_ProgramRefreshRate>
 80008de:	3000      	adds	r0, #0
 80008e0:	bf18      	it	ne
 80008e2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800G_OK;
  }
}
 80008e4:	4240      	negs	r0, r0
 80008e6:	bd08      	pop	{r3, pc}

080008e8 <IS42S32800G_Init>:
{
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	460c      	mov	r4, r1
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80008ec:	6809      	ldr	r1, [r1, #0]
{
 80008ee:	4605      	mov	r5, r0
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80008f0:	f7ff ff96 	bl	8000820 <IS42S32800G_ClockEnable>
 80008f4:	b110      	cbz	r0, 80008fc <IS42S32800G_Init+0x14>
  int32_t ret = IS42S32800G_ERROR;
 80008f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80008fc:	f002 f906 	bl	8002b0c <HAL_GetTick>
 8000900:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000902:	f002 f903 	bl	8002b0c <HAL_GetTick>
 8000906:	4286      	cmp	r6, r0
 8000908:	d0fb      	beq.n	8000902 <IS42S32800G_Init+0x1a>
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 800090a:	6821      	ldr	r1, [r4, #0]
 800090c:	4628      	mov	r0, r5
 800090e:	f7ff ff9b 	bl	8000848 <IS42S32800G_Precharge>
 8000912:	2800      	cmp	r0, #0
 8000914:	d1ef      	bne.n	80008f6 <IS42S32800G_Init+0xe>
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8000916:	4628      	mov	r0, r5
 8000918:	e9d4 1200 	ldrd	r1, r2, [r4]
 800091c:	f7ff ffc8 	bl	80008b0 <IS42S32800G_RefreshMode>
 8000920:	2800      	cmp	r0, #0
 8000922:	d1e8      	bne.n	80008f6 <IS42S32800G_Init+0xe>
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8000924:	4621      	mov	r1, r4
 8000926:	4628      	mov	r0, r5
 8000928:	f7ff ffa4 	bl	8000874 <IS42S32800G_ModeRegConfig>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1e2      	bne.n	80008f6 <IS42S32800G_Init+0xe>
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8000930:	68a1      	ldr	r1, [r4, #8]
 8000932:	4628      	mov	r0, r5
 8000934:	f7ff ffd0 	bl	80008d8 <IS42S32800G_RefreshRate>
 8000938:	3000      	adds	r0, #0
 800093a:	bf18      	it	ne
 800093c:	2001      	movne	r0, #1
 800093e:	4240      	negs	r0, r0
  return ret;
 8000940:	e7db      	b.n	80008fa <IS42S32800G_Init+0x12>

08000942 <MFXSTM32L152_DeInit>:
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8000942:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000946:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0U;
 8000948:	bf04      	itt	eq
 800094a:	2300      	moveq	r3, #0
 800094c:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  return MFXSTM32L152_OK;
}
 8000950:	2000      	movs	r0, #0
 8000952:	4770      	bx	lr

08000954 <MFXSTM32L152_WakeUp>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  return MFXSTM32L152_OK;
}
 8000954:	2000      	movs	r0, #0
 8000956:	4770      	bx	lr

08000958 <MFXSTM32L152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
int32_t MFXSTM32L152_IDD_GetValue(MFXSTM32L152_Object_t *pObj, uint32_t *ReadValue)
{
 8000958:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t  data[3];

  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data));
 800095a:	2303      	movs	r3, #3
{
 800095c:	460c      	mov	r4, r1
  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data));
 800095e:	6905      	ldr	r5, [r0, #16]
 8000960:	aa01      	add	r2, sp, #4
 8000962:	2114      	movs	r1, #20
 8000964:	8900      	ldrh	r0, [r0, #8]
 8000966:	47a8      	blx	r5

  /* Recompose Idd current value */
  *ReadValue = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
 8000968:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800096c:	f89d 2004 	ldrb.w	r2, [sp, #4]

  return MFXSTM32L152_OK;
}
 8000970:	2000      	movs	r0, #0
  *ReadValue = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000978:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800097c:	4313      	orrs	r3, r2
 800097e:	6023      	str	r3, [r4, #0]
}
 8000980:	b003      	add	sp, #12
 8000982:	bd30      	pop	{r4, r5, pc}

08000984 <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000984:	b410      	push	{r4}
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000986:	6904      	ldr	r4, [r0, #16]
 8000988:	8900      	ldrh	r0, [r0, #8]
 800098a:	46a4      	mov	ip, r4
}
 800098c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000990:	4760      	bx	ip

08000992 <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000992:	b410      	push	{r4}
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000994:	68c4      	ldr	r4, [r0, #12]
 8000996:	8900      	ldrh	r0, [r0, #8]
 8000998:	46a4      	mov	ip, r4
}
 800099a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800099e:	4760      	bx	ip

080009a0 <MFXSTM32L152_Reset>:
{
 80009a0:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = MFXSTM32L152_SWRST;
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	aa02      	add	r2, sp, #8
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	3018      	adds	r0, #24
  uint8_t tmp = MFXSTM32L152_SWRST;
 80009aa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 80009ae:	2301      	movs	r3, #1
 80009b0:	f000 fdb3 	bl	800151a <mfxstm32l152_write_reg>
 80009b4:	3000      	adds	r0, #0
 80009b6:	bf18      	it	ne
 80009b8:	2001      	movne	r0, #1
}
 80009ba:	4240      	negs	r0, r0
 80009bc:	b003      	add	sp, #12
 80009be:	f85d fb04 	ldr.w	pc, [sp], #4

080009c2 <MFXSTM32L152_LowPower>:
{
 80009c2:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = MFXSTM32L152_STANDBY;
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	aa02      	add	r2, sp, #8
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 80009c8:	2301      	movs	r3, #1
 80009ca:	3018      	adds	r0, #24
  uint8_t tmp = MFXSTM32L152_STANDBY;
 80009cc:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 80009d0:	f000 fda3 	bl	800151a <mfxstm32l152_write_reg>
 80009d4:	3000      	adds	r0, #0
 80009d6:	bf18      	it	ne
 80009d8:	2001      	movne	r0, #1
}
 80009da:	4240      	negs	r0, r0
 80009dc:	b003      	add	sp, #12
 80009de:	f85d fb04 	ldr.w	pc, [sp], #4

080009e2 <MFXSTM32L152_IO_ClearIT>:
{
 80009e2:	b513      	push	{r0, r1, r4, lr}
  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 80009e4:	b2cb      	uxtb	r3, r1
{
 80009e6:	4604      	mov	r4, r0
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 80009e8:	0a0a      	lsrs	r2, r1, #8
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 80009ea:	0c09      	lsrs	r1, r1, #16
  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 80009ec:	f88d 3005 	strb.w	r3, [sp, #5]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 80009f0:	f88d 2006 	strb.w	r2, [sp, #6]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 80009f4:	f88d 1007 	strb.w	r1, [sp, #7]
  if (pin_0_7 != 0U)
 80009f8:	b9db      	cbnz	r3, 8000a32 <MFXSTM32L152_IO_ClearIT+0x50>
  if (pin_8_15 != 0U)
 80009fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80009fe:	b143      	cbz	r3, 8000a12 <MFXSTM32L152_IO_ClearIT+0x30>
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 8000a00:	2301      	movs	r3, #1
 8000a02:	f10d 0206 	add.w	r2, sp, #6
 8000a06:	2155      	movs	r1, #85	; 0x55
 8000a08:	f104 0018 	add.w	r0, r4, #24
 8000a0c:	f000 fd85 	bl	800151a <mfxstm32l152_write_reg>
 8000a10:	b9c0      	cbnz	r0, 8000a44 <MFXSTM32L152_IO_ClearIT+0x62>
  if (pin_16_23 != 0U)
 8000a12:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000a16:	b1b8      	cbz	r0, 8000a48 <MFXSTM32L152_IO_ClearIT+0x66>
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f10d 0207 	add.w	r2, sp, #7
 8000a1e:	2156      	movs	r1, #86	; 0x56
 8000a20:	f104 0018 	add.w	r0, r4, #24
 8000a24:	f000 fd79 	bl	800151a <mfxstm32l152_write_reg>
 8000a28:	3000      	adds	r0, #0
 8000a2a:	bf18      	it	ne
 8000a2c:	2001      	movne	r0, #1
 8000a2e:	4240      	negs	r0, r0
 8000a30:	e00a      	b.n	8000a48 <MFXSTM32L152_IO_ClearIT+0x66>
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 8000a32:	2301      	movs	r3, #1
 8000a34:	f10d 0205 	add.w	r2, sp, #5
 8000a38:	2154      	movs	r1, #84	; 0x54
 8000a3a:	3018      	adds	r0, #24
 8000a3c:	f000 fd6d 	bl	800151a <mfxstm32l152_write_reg>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d0da      	beq.n	80009fa <MFXSTM32L152_IO_ClearIT+0x18>
      return MFXSTM32L152_ERROR;
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd10      	pop	{r4, pc}

08000a4c <MFXSTM32L152_TS_GetXY>:
{
 8000a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy));
 8000a4e:	2303      	movs	r3, #3
{
 8000a50:	4604      	mov	r4, r0
 8000a52:	460e      	mov	r6, r1
 8000a54:	4615      	mov	r5, r2
  pObj->IO.ReadReg(pObj->IO.Address, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy));
 8000a56:	6907      	ldr	r7, [r0, #16]
 8000a58:	aa01      	add	r2, sp, #4
 8000a5a:	2124      	movs	r1, #36	; 0x24
 8000a5c:	8900      	ldrh	r0, [r0, #8]
 8000a5e:	47b8      	blx	r7
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000a60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a64:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1) != MFXSTM32L152_OK)
 8000a68:	f104 0018 	add.w	r0, r4, #24
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000a6c:	091a      	lsrs	r2, r3, #4
  *Y = ((uint16_t)data_xy[2]<<4U) + ((uint16_t)data_xy[0]& 4U);
 8000a6e:	f003 0304 	and.w	r3, r3, #4
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000a72:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1) != MFXSTM32L152_OK)
 8000a76:	21a4      	movs	r1, #164	; 0xa4
  *X = ((uint16_t)data_xy[1]<<4U) + ((uint16_t)data_xy[0]>>4U);
 8000a78:	8032      	strh	r2, [r6, #0]
  *Y = ((uint16_t)data_xy[2]<<4U) + ((uint16_t)data_xy[0]& 4U);
 8000a7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000a7e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000a82:	aa02      	add	r2, sp, #8
  *Y = ((uint16_t)data_xy[2]<<4U) + ((uint16_t)data_xy[0]& 4U);
 8000a84:	802b      	strh	r3, [r5, #0]
  tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	f802 3d05 	strb.w	r3, [r2, #-5]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1) != MFXSTM32L152_OK)
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f000 fd44 	bl	800151a <mfxstm32l152_write_reg>
 8000a92:	3000      	adds	r0, #0
 8000a94:	bf18      	it	ne
 8000a96:	2001      	movne	r0, #1
}
 8000a98:	4240      	negs	r0, r0
 8000a9a:	b003      	add	sp, #12
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a9e <MFXSTM32L152_ReadID>:
{
 8000a9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pObj->IO.Init();
 8000aa0:	4604      	mov	r4, r0
{
 8000aa2:	460d      	mov	r5, r1
  pObj->IO.Init();
 8000aa4:	f854 3b18 	ldr.w	r3, [r4], #24
 8000aa8:	4798      	blx	r3
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f10d 0207 	add.w	r2, sp, #7
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f000 fd2a 	bl	800150c <mfxstm32l152_read_reg>
 8000ab8:	b920      	cbnz	r0, 8000ac4 <MFXSTM32L152_ReadID+0x26>
  *Id = id;
 8000aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000abe:	602b      	str	r3, [r5, #0]
}
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000ac8:	e7fa      	b.n	8000ac0 <MFXSTM32L152_ReadID+0x22>

08000aca <MFXSTM32L152_IO_Start>:
{
 8000aca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000acc:	f100 0418 	add.w	r4, r0, #24
{
 8000ad0:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f10d 0207 	add.w	r2, sp, #7
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4620      	mov	r0, r4
 8000adc:	f000 fd16 	bl	800150c <mfxstm32l152_read_reg>
 8000ae0:	b9d8      	cbnz	r0, 8000b1a <MFXSTM32L152_IO_Start+0x50>
    mode |= MFXSTM32L152_GPIO_EN;
 8000ae2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (IO_Pin > 0xFFFFU)
 8000ae6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000aea:	f10d 0207 	add.w	r2, sp, #7
 8000aee:	f04f 0140 	mov.w	r1, #64	; 0x40
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af2:	bf34      	ite	cc
 8000af4:	f023 0308 	biccc.w	r3, r3, #8
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af8:	f043 0309 	orrcs.w	r3, r3, #9
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000afc:	4620      	mov	r0, r4
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000afe:	bf38      	it	cc
 8000b00:	f043 0301 	orrcc.w	r3, r3, #1
 8000b04:	f88d 3007 	strb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f000 fd06 	bl	800151a <mfxstm32l152_write_reg>
 8000b0e:	3000      	adds	r0, #0
 8000b10:	bf18      	it	ne
 8000b12:	2001      	movne	r0, #1
 8000b14:	4240      	negs	r0, r0
}
 8000b16:	b003      	add	sp, #12
 8000b18:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8000b1a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000b1e:	e7fa      	b.n	8000b16 <MFXSTM32L152_IO_Start+0x4c>

08000b20 <MFXSTM32L152_reg24_setPinValue>:
{
 8000b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b24:	4698      	mov	r8, r3
 8000b26:	b087      	sub	sp, #28
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000b28:	0a13      	lsrs	r3, r2, #8
  if (pin_0_7 != 0U)
 8000b2a:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8000b2e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
{
 8000b32:	4605      	mov	r5, r0
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000b34:	9300      	str	r3, [sp, #0]
{
 8000b36:	460e      	mov	r6, r1
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000b38:	f89d 3000 	ldrb.w	r3, [sp]
{
 8000b3c:	4617      	mov	r7, r2
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 8000b3e:	9301      	str	r3, [sp, #4]
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 8000b40:	fa5f f38b 	uxtb.w	r3, fp
 8000b44:	9302      	str	r3, [sp, #8]
  if (pin_0_7 != 0U)
 8000b46:	d01d      	beq.n	8000b84 <MFXSTM32L152_reg24_setPinValue+0x64>
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8000b48:	f100 0918 	add.w	r9, r0, #24
 8000b4c:	fa1f fa81 	uxth.w	sl, r1
 8000b50:	2301      	movs	r3, #1
 8000b52:	f10d 0217 	add.w	r2, sp, #23
 8000b56:	4651      	mov	r1, sl
 8000b58:	4648      	mov	r0, r9
 8000b5a:	f000 fcd7 	bl	800150c <mfxstm32l152_read_reg>
 8000b5e:	9003      	str	r0, [sp, #12]
 8000b60:	f89d 0017 	ldrb.w	r0, [sp, #23]
    if (PinValue != 0U)
 8000b64:	f1b8 0f00 	cmp.w	r8, #0
 8000b68:	d051      	beq.n	8000c0e <MFXSTM32L152_reg24_setPinValue+0xee>
      tmp |= (uint8_t)pin_0_7;
 8000b6a:	4304      	orrs	r4, r0
 8000b6c:	f88d 4017 	strb.w	r4, [sp, #23]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8000b70:	2301      	movs	r3, #1
 8000b72:	f10d 0217 	add.w	r2, sp, #23
 8000b76:	4651      	mov	r1, sl
 8000b78:	4648      	mov	r0, r9
 8000b7a:	f000 fcce 	bl	800151a <mfxstm32l152_write_reg>
 8000b7e:	9b03      	ldr	r3, [sp, #12]
 8000b80:	4403      	add	r3, r0
 8000b82:	461c      	mov	r4, r3
  if (pin_8_15 != 0U)
 8000b84:	9b01      	ldr	r3, [sp, #4]
 8000b86:	b1eb      	cbz	r3, 8000bc4 <MFXSTM32L152_reg24_setPinValue+0xa4>
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8000b88:	f105 0718 	add.w	r7, r5, #24
 8000b8c:	f106 0901 	add.w	r9, r6, #1
 8000b90:	2301      	movs	r3, #1
 8000b92:	f10d 0217 	add.w	r2, sp, #23
 8000b96:	4649      	mov	r1, r9
 8000b98:	4638      	mov	r0, r7
 8000b9a:	f000 fcb7 	bl	800150c <mfxstm32l152_read_reg>
 8000b9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000ba2:	4404      	add	r4, r0
    if (PinValue != 0U)
 8000ba4:	f1b8 0f00 	cmp.w	r8, #0
 8000ba8:	d036      	beq.n	8000c18 <MFXSTM32L152_reg24_setPinValue+0xf8>
      tmp |= (uint8_t)pin_8_15;
 8000baa:	9a01      	ldr	r2, [sp, #4]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	4613      	mov	r3, r2
      tmp &= ~(uint8_t)pin_8_15;
 8000bb0:	f88d 3017 	strb.w	r3, [sp, #23]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+1U), &tmp, 1);
 8000bb4:	f10d 0217 	add.w	r2, sp, #23
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4649      	mov	r1, r9
 8000bbc:	4638      	mov	r0, r7
 8000bbe:	f000 fcac 	bl	800151a <mfxstm32l152_write_reg>
 8000bc2:	4404      	add	r4, r0
  if (pin_16_23 != 0U)
 8000bc4:	9b02      	ldr	r3, [sp, #8]
 8000bc6:	b1db      	cbz	r3, 8000c00 <MFXSTM32L152_reg24_setPinValue+0xe0>
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8000bc8:	3518      	adds	r5, #24
 8000bca:	3602      	adds	r6, #2
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f10d 0217 	add.w	r2, sp, #23
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f000 fc99 	bl	800150c <mfxstm32l152_read_reg>
 8000bda:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000bde:	4404      	add	r4, r0
    if (PinValue != 0U)
 8000be0:	f1b8 0f00 	cmp.w	r8, #0
 8000be4:	d01c      	beq.n	8000c20 <MFXSTM32L152_reg24_setPinValue+0x100>
      tmp |= (uint8_t)pin_16_23;
 8000be6:	9a02      	ldr	r2, [sp, #8]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	4613      	mov	r3, r2
      tmp &= ~(uint8_t)pin_16_23;
 8000bec:	f88d 3017 	strb.w	r3, [sp, #23]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr+2U), &tmp, 1);
 8000bf0:	f10d 0217 	add.w	r2, sp, #23
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4631      	mov	r1, r6
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	f000 fc8e 	bl	800151a <mfxstm32l152_write_reg>
 8000bfe:	4404      	add	r4, r0
  if(ret != MFXSTM32L152_OK)
 8000c00:	3400      	adds	r4, #0
 8000c02:	bf18      	it	ne
 8000c04:	2401      	movne	r4, #1
}
 8000c06:	4260      	negs	r0, r4
 8000c08:	b007      	add	sp, #28
 8000c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp &= ~(uint8_t)pin_0_7;
 8000c0e:	ea20 0707 	bic.w	r7, r0, r7
 8000c12:	f88d 7017 	strb.w	r7, [sp, #23]
 8000c16:	e7ab      	b.n	8000b70 <MFXSTM32L152_reg24_setPinValue+0x50>
      tmp &= ~(uint8_t)pin_8_15;
 8000c18:	9a00      	ldr	r2, [sp, #0]
 8000c1a:	ea23 0302 	bic.w	r3, r3, r2
 8000c1e:	e7c7      	b.n	8000bb0 <MFXSTM32L152_reg24_setPinValue+0x90>
      tmp &= ~(uint8_t)pin_16_23;
 8000c20:	ea23 030b 	bic.w	r3, r3, fp
 8000c24:	e7e2      	b.n	8000bec <MFXSTM32L152_reg24_setPinValue+0xcc>

08000c26 <MFXSTM32L152_IO_ReadPin>:
{
 8000c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000c28:	f100 0418 	add.w	r4, r0, #24
{
 8000c2c:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000c2e:	2301      	movs	r3, #1
 8000c30:	aa01      	add	r2, sp, #4
 8000c32:	2110      	movs	r1, #16
 8000c34:	4620      	mov	r0, r4
 8000c36:	f000 fc69 	bl	800150c <mfxstm32l152_read_reg>
 8000c3a:	b118      	cbz	r0, 8000c44 <MFXSTM32L152_IO_ReadPin+0x1e>
    return MFXSTM32L152_ERROR;
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000c40:	b003      	add	sp, #12
 8000c42:	bd30      	pop	{r4, r5, pc}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8000c44:	2301      	movs	r3, #1
 8000c46:	f10d 0205 	add.w	r2, sp, #5
 8000c4a:	2111      	movs	r1, #17
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f000 fc5d 	bl	800150c <mfxstm32l152_read_reg>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d1f2      	bne.n	8000c3c <MFXSTM32L152_IO_ReadPin+0x16>
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8000c56:	2301      	movs	r3, #1
 8000c58:	f10d 0206 	add.w	r2, sp, #6
 8000c5c:	2112      	movs	r1, #18
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f000 fc54 	bl	800150c <mfxstm32l152_read_reg>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d1e9      	bne.n	8000c3c <MFXSTM32L152_IO_ReadPin+0x16>
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 8000c68:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000c6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000c70:	0400      	lsls	r0, r0, #16
 8000c72:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8000c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000c7a:	4418      	add	r0, r3
  tmp &= IO_Pin;
 8000c7c:	4028      	ands	r0, r5
  return(int32_t)(tmp);
 8000c7e:	e7df      	b.n	8000c40 <MFXSTM32L152_IO_ReadPin+0x1a>

08000c80 <MFXSTM32L152_IO_ITStatus>:
{
 8000c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000c82:	f100 0418 	add.w	r4, r0, #24
{
 8000c86:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 8000c88:	2301      	movs	r3, #1
 8000c8a:	aa01      	add	r2, sp, #4
 8000c8c:	210c      	movs	r1, #12
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f000 fc3c 	bl	800150c <mfxstm32l152_read_reg>
 8000c94:	b118      	cbz	r0, 8000c9e <MFXSTM32L152_IO_ITStatus+0x1e>
    return MFXSTM32L152_ERROR;
 8000c96:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000c9a:	b003      	add	sp, #12
 8000c9c:	bd30      	pop	{r4, r5, pc}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f10d 0205 	add.w	r2, sp, #5
 8000ca4:	210d      	movs	r1, #13
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f000 fc30 	bl	800150c <mfxstm32l152_read_reg>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d1f2      	bne.n	8000c96 <MFXSTM32L152_IO_ITStatus+0x16>
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f10d 0206 	add.w	r2, sp, #6
 8000cb6:	210e      	movs	r1, #14
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f000 fc27 	bl	800150c <mfxstm32l152_read_reg>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d1e9      	bne.n	8000c96 <MFXSTM32L152_IO_ITStatus+0x16>
  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 8000cc2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000cc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000cca:	0400      	lsls	r0, r0, #16
 8000ccc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8000cd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cd4:	4418      	add	r0, r3
  tmp &= IO_Pin;
 8000cd6:	4028      	ands	r0, r5
  return(int32_t)tmp;
 8000cd8:	e7df      	b.n	8000c9a <MFXSTM32L152_IO_ITStatus+0x1a>

08000cda <MFXSTM32L152_TS_Start>:
{
 8000cda:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000cde:	f100 0518 	add.w	r5, r0, #24
{
 8000ce2:	4607      	mov	r7, r0
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f10d 0206 	add.w	r2, sp, #6
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	4628      	mov	r0, r5
 8000cee:	f000 fc0d 	bl	800150c <mfxstm32l152_read_reg>
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d157      	bne.n	8000da8 <MFXSTM32L152_TS_Start+0xce>
    mode |= MFXSTM32L152_TS_EN;
 8000cf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ret = mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000cfc:	f10d 0206 	add.w	r2, sp, #6
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4628      	mov	r0, r5
    mode |= MFXSTM32L152_TS_EN;
 8000d04:	f043 0302 	orr.w	r3, r3, #2
    tmp = 0x32;
 8000d08:	ae02      	add	r6, sp, #8
    tmp = 0x01;
 8000d0a:	f04f 0901 	mov.w	r9, #1
    mode |= MFXSTM32L152_TS_EN;
 8000d0e:	f88d 3006 	strb.w	r3, [sp, #6]
    ret = mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000d12:	2301      	movs	r3, #1
 8000d14:	f000 fc01 	bl	800151a <mfxstm32l152_write_reg>
    tmp = 0x32;
 8000d18:	2332      	movs	r3, #50	; 0x32
    ret = mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000d1a:	4604      	mov	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_SETTLING, &tmp, 1);
 8000d1c:	21a0      	movs	r1, #160	; 0xa0
    tmp = 0x32;
 8000d1e:	f806 3d01 	strb.w	r3, [r6, #-1]!
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_SETTLING, &tmp, 1);
 8000d22:	4628      	mov	r0, r5
 8000d24:	2301      	movs	r3, #1
 8000d26:	4632      	mov	r2, r6
 8000d28:	f000 fbf7 	bl	800151a <mfxstm32l152_write_reg>
    tmp = 0x05;
 8000d2c:	2305      	movs	r3, #5
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_SETTLING, &tmp, 1);
 8000d2e:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TOUCH_DET_DELAY, &tmp, 1);
 8000d30:	4632      	mov	r2, r6
    tmp = 0x05;
 8000d32:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TOUCH_DET_DELAY, &tmp, 1);
 8000d36:	21a1      	movs	r1, #161	; 0xa1
 8000d38:	2301      	movs	r3, #1
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f000 fbed 	bl	800151a <mfxstm32l152_write_reg>
    tmp = 0x04;
 8000d40:	2304      	movs	r3, #4
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TOUCH_DET_DELAY, &tmp, 1);
 8000d42:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_AVE, &tmp, 1);
 8000d44:	4632      	mov	r2, r6
    tmp = 0x04;
 8000d46:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_AVE, &tmp, 1);
 8000d4a:	21a2      	movs	r1, #162	; 0xa2
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f000 fbe3 	bl	800151a <mfxstm32l152_write_reg>
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000d54:	464b      	mov	r3, r9
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_AVE, &tmp, 1);
 8000d56:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000d58:	4632      	mov	r2, r6
 8000d5a:	21a4      	movs	r1, #164	; 0xa4
 8000d5c:	4628      	mov	r0, r5
    tmp = 0x01;
 8000d5e:	f88d 9007 	strb.w	r9, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000d62:	f000 fbda 	bl	800151a <mfxstm32l152_write_reg>
    tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000d66:	2380      	movs	r3, #128	; 0x80
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000d68:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000d6a:	4632      	mov	r2, r6
 8000d6c:	21a4      	movs	r1, #164	; 0xa4
    tmp = MFXSTM32L152_TS_CLEAR_FIFO;
 8000d6e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_TH, &tmp, 1);
 8000d72:	4628      	mov	r0, r5
 8000d74:	464b      	mov	r3, r9
 8000d76:	f000 fbd0 	bl	800151a <mfxstm32l152_write_reg>
 8000d7a:	4404      	add	r4, r0
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TRACK, &tmp, 1);
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	4632      	mov	r2, r6
 8000d80:	21a3      	movs	r1, #163	; 0xa3
 8000d82:	4628      	mov	r0, r5
    tmp = 0x00;
 8000d84:	f88d 8007 	strb.w	r8, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_TS_TRACK, &tmp, 1);
 8000d88:	f000 fbc7 	bl	800151a <mfxstm32l152_write_reg>
 8000d8c:	4404      	add	r4, r0
    ret += MFXSTM32L152_IO_ClearIT(pObj, 0xFFFFFF);
 8000d8e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000d92:	4638      	mov	r0, r7
 8000d94:	f7ff fe25 	bl	80009e2 <MFXSTM32L152_IO_ClearIT>
  if(ret != MFXSTM32L152_OK)
 8000d98:	42c4      	cmn	r4, r0
 8000d9a:	bf14      	ite	ne
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	2000      	moveq	r0, #0
}
 8000da2:	b003      	add	sp, #12
 8000da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = MFXSTM32L152_ERROR;
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000dac:	e7f9      	b.n	8000da2 <MFXSTM32L152_TS_Start+0xc8>

08000dae <MFXSTM32L152_TS_DetectTouch>:
{
 8000dae:	b513      	push	{r0, r1, r4, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_STA, &state, 1) != MFXSTM32L152_OK)
 8000db0:	f100 0418 	add.w	r4, r0, #24
 8000db4:	2301      	movs	r3, #1
 8000db6:	f10d 0206 	add.w	r2, sp, #6
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f000 fba5 	bl	800150c <mfxstm32l152_read_reg>
 8000dc2:	b118      	cbz	r0, 8000dcc <MFXSTM32L152_TS_DetectTouch+0x1e>
    ret = MFXSTM32L152_ERROR;
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd10      	pop	{r4, pc}
    if(((state & MFXSTM32L152_TS_CTRL_STATUS) == MFXSTM32L152_TS_CTRL_STATUS) != 0U)
 8000dcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000dd0:	071b      	lsls	r3, r3, #28
 8000dd2:	d5f9      	bpl.n	8000dc8 <MFXSTM32L152_TS_DetectTouch+0x1a>
      if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_TS_FIFO_LEVEL, &fifo_level, 1) != MFXSTM32L152_OK)
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f10d 0207 	add.w	r2, sp, #7
 8000dda:	2121      	movs	r1, #33	; 0x21
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f000 fb95 	bl	800150c <mfxstm32l152_read_reg>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d1ee      	bne.n	8000dc4 <MFXSTM32L152_TS_DetectTouch+0x16>
        if(fifo_level > 0U)
 8000de6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000dea:	3000      	adds	r0, #0
 8000dec:	bf18      	it	ne
 8000dee:	2001      	movne	r0, #1
  return ret;
 8000df0:	e7ea      	b.n	8000dc8 <MFXSTM32L152_TS_DetectTouch+0x1a>

08000df2 <MFXSTM32L152_IDD_Start>:
{
 8000df2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t mode = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	ac02      	add	r4, sp, #8
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000df8:	f100 0518 	add.w	r5, r0, #24
 8000dfc:	2180      	movs	r1, #128	; 0x80
  uint8_t mode = 0;
 8000dfe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000e02:	2301      	movs	r3, #1
 8000e04:	4622      	mov	r2, r4
 8000e06:	4628      	mov	r0, r5
 8000e08:	f000 fb80 	bl	800150c <mfxstm32l152_read_reg>
 8000e0c:	b988      	cbnz	r0, 8000e32 <MFXSTM32L152_IDD_Start+0x40>
    mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8000e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000e12:	4622      	mov	r2, r4
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4628      	mov	r0, r5
    mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8000e20:	2301      	movs	r3, #1
 8000e22:	f000 fb7a 	bl	800151a <mfxstm32l152_write_reg>
 8000e26:	3000      	adds	r0, #0
 8000e28:	bf18      	it	ne
 8000e2a:	2001      	movne	r0, #1
 8000e2c:	4240      	negs	r0, r0
}
 8000e2e:	b003      	add	sp, #12
 8000e30:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 8000e32:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8000e36:	e7fa      	b.n	8000e2e <MFXSTM32L152_IDD_Start+0x3c>

08000e38 <MFXSTM32L152_IDD_Config>:
{
 8000e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t mode = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	af02      	add	r7, sp, #8
  ret = mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e3e:	f100 0618 	add.w	r6, r0, #24
{
 8000e42:	460d      	mov	r5, r1
  uint8_t mode = 0;
 8000e44:	f807 3d01 	strb.w	r3, [r7, #-1]!
  ret = mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	463a      	mov	r2, r7
 8000e4e:	4630      	mov	r0, r6
 8000e50:	f000 fb5c 	bl	800150c <mfxstm32l152_read_reg>
  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8000e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
  ret = mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e58:	4604      	mov	r4, r0
  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8000e5a:	075a      	lsls	r2, r3, #29
 8000e5c:	d40a      	bmi.n	8000e74 <MFXSTM32L152_IDD_Config+0x3c>
    mode |= MFXSTM32L152_IDD_EN;
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e62:	463a      	mov	r2, r7
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	4630      	mov	r0, r6
    mode |= MFXSTM32L152_IDD_EN;
 8000e68:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1);
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f000 fb54 	bl	800151a <mfxstm32l152_write_reg>
 8000e72:	4404      	add	r4, r0
  value |= (MfxIddConfig->VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8000e74:	7eab      	ldrb	r3, [r5, #26]
  value |= (MfxIddConfig->Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000e76:	af02      	add	r7, sp, #8
 8000e78:	7eea      	ldrb	r2, [r5, #27]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000e7a:	2180      	movs	r1, #128	; 0x80
  value |= (MfxIddConfig->VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8000e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000e80:	4630      	mov	r0, r6
  value |= (MfxIddConfig->Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000e82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000e86:	4313      	orrs	r3, r2
  value =  ((MfxIddConfig->ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8000e88:	7e6a      	ldrb	r2, [r5, #25]
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	f002 020e 	and.w	r2, r2, #14
  value |= (MfxIddConfig->Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000e90:	4313      	orrs	r3, r2
 8000e92:	f807 3d02 	strb.w	r3, [r7, #-2]!
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000e96:	2301      	movs	r3, #1
 8000e98:	463a      	mov	r2, r7
 8000e9a:	f000 fb3e 	bl	800151a <mfxstm32l152_write_reg>
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000e9e:	7f2b      	ldrb	r3, [r5, #28]
          (MfxIddConfig->PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000ea0:	7f6a      	ldrb	r2, [r5, #29]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_CTRL, &value, 1);
 8000ea2:	4404      	add	r4, r0
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000ea8:	2181      	movs	r1, #129	; 0x81
          (MfxIddConfig->PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000eaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000eae:	4630      	mov	r0, r6
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000eb0:	4313      	orrs	r3, r2
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000eb2:	463a      	mov	r2, r7
  value = (MfxIddConfig->PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000eb4:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f000 fb2e 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt0Value >> 8);
 8000ebe:	88ab      	ldrh	r3, [r5, #4]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8000ec0:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, &value, 1);
 8000ec2:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt0Value >> 8);
 8000ec4:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8000ec6:	2182      	movs	r1, #130	; 0x82
 8000ec8:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt0Value >> 8);
 8000eca:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f000 fb23 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt0Value);
 8000ed4:	88ab      	ldrh	r3, [r5, #4]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, &value, 1);
 8000ed6:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, &value, 1);
 8000ed8:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt0Value);
 8000eda:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, &value, 1);
 8000ede:	2183      	movs	r1, #131	; 0x83
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f000 fb19 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt1Value >> 8);
 8000ee8:	88eb      	ldrh	r3, [r5, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8000eea:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, &value, 1);
 8000eec:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt1Value >> 8);
 8000eee:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8000ef0:	2184      	movs	r1, #132	; 0x84
 8000ef2:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt1Value >> 8);
 8000ef4:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f000 fb0e 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt1Value);
 8000efe:	88eb      	ldrh	r3, [r5, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, &value, 1);
 8000f00:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, &value, 1);
 8000f02:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt1Value);
 8000f04:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, &value, 1);
 8000f08:	2185      	movs	r1, #133	; 0x85
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f000 fb04 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt2Value >> 8);
 8000f12:	892b      	ldrh	r3, [r5, #8]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 8000f14:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, &value, 1);
 8000f16:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt2Value >> 8);
 8000f18:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 8000f1a:	2186      	movs	r1, #134	; 0x86
 8000f1c:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt2Value >> 8);
 8000f1e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 8000f22:	2301      	movs	r3, #1
 8000f24:	f000 faf9 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt2Value);
 8000f28:	892b      	ldrh	r3, [r5, #8]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, &value, 1);
 8000f2a:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, &value, 1);
 8000f2c:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt2Value);
 8000f2e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, &value, 1);
 8000f32:	2187      	movs	r1, #135	; 0x87
 8000f34:	2301      	movs	r3, #1
 8000f36:	4630      	mov	r0, r6
 8000f38:	f000 faef 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt3Value >> 8);
 8000f3c:	896b      	ldrh	r3, [r5, #10]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 8000f3e:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, &value, 1);
 8000f40:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt3Value >> 8);
 8000f42:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 8000f44:	2188      	movs	r1, #136	; 0x88
 8000f46:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt3Value >> 8);
 8000f48:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f000 fae4 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt3Value);
 8000f52:	896b      	ldrh	r3, [r5, #10]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, &value, 1);
 8000f54:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, &value, 1);
 8000f56:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt3Value);
 8000f58:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, &value, 1);
 8000f5c:	2189      	movs	r1, #137	; 0x89
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4630      	mov	r0, r6
 8000f62:	f000 fada 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt4Value >> 8);
 8000f66:	89ab      	ldrh	r3, [r5, #12]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 8000f68:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, &value, 1);
 8000f6a:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt4Value >> 8);
 8000f6c:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 8000f6e:	218a      	movs	r1, #138	; 0x8a
 8000f70:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->Shunt4Value >> 8);
 8000f72:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 8000f76:	2301      	movs	r3, #1
 8000f78:	f000 facf 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->Shunt4Value);
 8000f7c:	89ab      	ldrh	r3, [r5, #12]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, &value, 1);
 8000f7e:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, &value, 1);
 8000f80:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->Shunt4Value);
 8000f82:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, &value, 1);
 8000f86:	218b      	movs	r1, #139	; 0x8b
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f000 fac5 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt0StabDelay;
 8000f90:	89eb      	ldrh	r3, [r5, #14]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, &value, 1);
 8000f92:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, &value, 1);
 8000f94:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt0StabDelay;
 8000f96:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, &value, 1);
 8000f9a:	2190      	movs	r1, #144	; 0x90
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f000 fabb 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt1StabDelay;
 8000fa4:	8a2b      	ldrh	r3, [r5, #16]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, &value, 1);
 8000fa6:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, &value, 1);
 8000fa8:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt1StabDelay;
 8000faa:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, &value, 1);
 8000fae:	2191      	movs	r1, #145	; 0x91
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f000 fab1 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt2StabDelay;
 8000fb8:	8a6b      	ldrh	r3, [r5, #18]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, &value, 1);
 8000fba:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, &value, 1);
 8000fbc:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt2StabDelay;
 8000fbe:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, &value, 1);
 8000fc2:	2192      	movs	r1, #146	; 0x92
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	f000 faa7 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt3StabDelay;
 8000fcc:	8aab      	ldrh	r3, [r5, #20]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, &value, 1);
 8000fce:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, &value, 1);
 8000fd0:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt3StabDelay;
 8000fd2:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, &value, 1);
 8000fd6:	2193      	movs	r1, #147	; 0x93
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f000 fa9d 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t)MfxIddConfig->Shunt4StabDelay;
 8000fe0:	8aeb      	ldrh	r3, [r5, #22]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, &value, 1);
 8000fe2:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, &value, 1);
 8000fe4:	4404      	add	r4, r0
  value = (uint8_t)MfxIddConfig->Shunt4StabDelay;
 8000fe6:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, &value, 1);
 8000fea:	2194      	movs	r1, #148	; 0x94
 8000fec:	2301      	movs	r3, #1
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f000 fa93 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->AmpliGain >> 8);
 8000ff4:	882b      	ldrh	r3, [r5, #0]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 8000ff6:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, &value, 1);
 8000ff8:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->AmpliGain >> 8);
 8000ffa:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 8000ffc:	218c      	movs	r1, #140	; 0x8c
 8000ffe:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->AmpliGain >> 8);
 8001000:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 8001004:	2301      	movs	r3, #1
 8001006:	f000 fa88 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->AmpliGain);
 800100a:	882b      	ldrh	r3, [r5, #0]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, &value, 1);
 800100c:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, &value, 1);
 800100e:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->AmpliGain);
 8001010:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, &value, 1);
 8001014:	218d      	movs	r1, #141	; 0x8d
 8001016:	2301      	movs	r3, #1
 8001018:	4630      	mov	r0, r6
 800101a:	f000 fa7e 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->VddMin >> 8);
 800101e:	886b      	ldrh	r3, [r5, #2]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 8001020:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, &value, 1);
 8001022:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->VddMin >> 8);
 8001024:	0a1b      	lsrs	r3, r3, #8
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 8001026:	218e      	movs	r1, #142	; 0x8e
 8001028:	4630      	mov	r0, r6
  value = (uint8_t) (MfxIddConfig->VddMin >> 8);
 800102a:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 800102e:	2301      	movs	r3, #1
 8001030:	f000 fa73 	bl	800151a <mfxstm32l152_write_reg>
  value = (uint8_t) (MfxIddConfig->VddMin);
 8001034:	886b      	ldrh	r3, [r5, #2]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, &value, 1);
 8001036:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, &value, 1);
 8001038:	4404      	add	r4, r0
  value = (uint8_t) (MfxIddConfig->VddMin);
 800103a:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, &value, 1);
 800103e:	218f      	movs	r1, #143	; 0x8f
 8001040:	2301      	movs	r3, #1
 8001042:	4630      	mov	r0, r6
 8001044:	f000 fa69 	bl	800151a <mfxstm32l152_write_reg>
  value = MfxIddConfig->MeasureNb;
 8001048:	7fab      	ldrb	r3, [r5, #30]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, &value, 1);
 800104a:	463a      	mov	r2, r7
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, &value, 1);
 800104c:	4404      	add	r4, r0
  value = MfxIddConfig->MeasureNb;
 800104e:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, &value, 1);
 8001052:	2196      	movs	r1, #150	; 0x96
 8001054:	2301      	movs	r3, #1
 8001056:	4630      	mov	r0, r6
 8001058:	f000 fa5f 	bl	800151a <mfxstm32l152_write_reg>
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800105c:	7feb      	ldrb	r3, [r5, #31]
          (MfxIddConfig->DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 800105e:	f895 2020 	ldrb.w	r2, [r5, #32]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, &value, 1);
 8001062:	4404      	add	r4, r0
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001064:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 8001068:	2197      	movs	r1, #151	; 0x97
          (MfxIddConfig->DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 800106a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 800106e:	4630      	mov	r0, r6
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001070:	4313      	orrs	r3, r2
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 8001072:	463a      	mov	r2, r7
  value = (MfxIddConfig->DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001074:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 8001078:	2301      	movs	r3, #1
 800107a:	f000 fa4e 	bl	800151a <mfxstm32l152_write_reg>
  value = MfxIddConfig->ShuntNbOnBoard;
 800107e:	7e2b      	ldrb	r3, [r5, #24]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, &value, 1);
 8001080:	4404      	add	r4, r0
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, &value, 1);
 8001082:	463a      	mov	r2, r7
  value = MfxIddConfig->ShuntNbOnBoard;
 8001084:	f88d 3006 	strb.w	r3, [sp, #6]
  ret += mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, &value, 1);
 8001088:	2198      	movs	r1, #152	; 0x98
 800108a:	2301      	movs	r3, #1
 800108c:	4630      	mov	r0, r6
 800108e:	f000 fa44 	bl	800151a <mfxstm32l152_write_reg>
  if(ret != MFXSTM32L152_OK)
 8001092:	42c4      	cmn	r4, r0
}
 8001094:	bf14      	ite	ne
 8001096:	f04f 30ff 	movne.w	r0, #4294967295
 800109a:	2000      	moveq	r0, #0
 800109c:	b003      	add	sp, #12
 800109e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a0 <MFXSTM32L152_Error_ReadSrc>:
{
 80010a0:	b507      	push	{r0, r1, r2, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ERROR_SRC, &tmp, 1) != MFXSTM32L152_OK)
 80010a2:	2301      	movs	r3, #1
 80010a4:	f10d 0207 	add.w	r2, sp, #7
 80010a8:	2103      	movs	r1, #3
 80010aa:	3018      	adds	r0, #24
 80010ac:	f000 fa2e 	bl	800150c <mfxstm32l152_read_reg>
 80010b0:	b920      	cbnz	r0, 80010bc <MFXSTM32L152_Error_ReadSrc+0x1c>
    ret = (int32_t)tmp;
 80010b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010b6:	b003      	add	sp, #12
 80010b8:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MFXSTM32L152_ERROR;
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80010c0:	e7f9      	b.n	80010b6 <MFXSTM32L152_Error_ReadSrc+0x16>

080010c2 <MFXSTM32L152_Error_ReadMsg>:
{
 80010c2:	b507      	push	{r0, r1, r2, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ERROR_MSG, &tmp, 1) != MFXSTM32L152_OK)
 80010c4:	2301      	movs	r3, #1
 80010c6:	f10d 0207 	add.w	r2, sp, #7
 80010ca:	2104      	movs	r1, #4
 80010cc:	3018      	adds	r0, #24
 80010ce:	f000 fa1d 	bl	800150c <mfxstm32l152_read_reg>
 80010d2:	b920      	cbnz	r0, 80010de <MFXSTM32L152_Error_ReadMsg+0x1c>
    ret = (int32_t)tmp;
 80010d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010d8:	b003      	add	sp, #12
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MFXSTM32L152_ERROR;
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80010e2:	e7f9      	b.n	80010d8 <MFXSTM32L152_Error_ReadMsg+0x16>

080010e4 <MFXSTM32L152_IO_WritePin>:
{
 80010e4:	b508      	push	{r3, lr}
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 80010e6:	2301      	movs	r3, #1
  if (PinState != 0U)
 80010e8:	b142      	cbz	r2, 80010fc <MFXSTM32L152_IO_WritePin+0x18>
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 80010ea:	460a      	mov	r2, r1
 80010ec:	216c      	movs	r1, #108	; 0x6c
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 80010ee:	f7ff fd17 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 80010f2:	3000      	adds	r0, #0
 80010f4:	bf18      	it	ne
 80010f6:	2001      	movne	r0, #1
 80010f8:	4240      	negs	r0, r0
}
 80010fa:	bd08      	pop	{r3, pc}
    if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 80010fc:	460a      	mov	r2, r1
 80010fe:	2170      	movs	r1, #112	; 0x70
 8001100:	e7f5      	b.n	80010ee <MFXSTM32L152_IO_WritePin+0xa>

08001102 <MFXSTM32L152_EnableITSource>:
{
 8001102:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001104:	f100 0518 	add.w	r5, r0, #24
{
 8001108:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800110a:	2301      	movs	r3, #1
 800110c:	f10d 0207 	add.w	r2, sp, #7
 8001110:	2142      	movs	r1, #66	; 0x42
 8001112:	4628      	mov	r0, r5
 8001114:	f000 f9fa 	bl	800150c <mfxstm32l152_read_reg>
 8001118:	b988      	cbnz	r0, 800113e <MFXSTM32L152_EnableITSource+0x3c>
    tmp |= Source;
 800111a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800111e:	f10d 0207 	add.w	r2, sp, #7
 8001122:	2142      	movs	r1, #66	; 0x42
 8001124:	4628      	mov	r0, r5
    tmp |= Source;
 8001126:	431c      	orrs	r4, r3
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001128:	2301      	movs	r3, #1
    tmp |= Source;
 800112a:	f88d 4007 	strb.w	r4, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800112e:	f000 f9f4 	bl	800151a <mfxstm32l152_write_reg>
 8001132:	3000      	adds	r0, #0
 8001134:	bf18      	it	ne
 8001136:	2001      	movne	r0, #1
 8001138:	4240      	negs	r0, r0
}
 800113a:	b003      	add	sp, #12
 800113c:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001142:	e7fa      	b.n	800113a <MFXSTM32L152_EnableITSource+0x38>

08001144 <MFXSTM32L152_IO_EnableIT>:
{
 8001144:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001146:	2101      	movs	r1, #1
 8001148:	f7ff ffdb 	bl	8001102 <MFXSTM32L152_EnableITSource>
 800114c:	3000      	adds	r0, #0
 800114e:	bf18      	it	ne
 8001150:	2001      	movne	r0, #1
}
 8001152:	4240      	negs	r0, r0
 8001154:	bd08      	pop	{r3, pc}

08001156 <MFXSTM32L152_TS_EnableIT>:
{
 8001156:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_TS_DET) != MFXSTM32L152_OK)
 8001158:	2108      	movs	r1, #8
 800115a:	f7ff ffd2 	bl	8001102 <MFXSTM32L152_EnableITSource>
 800115e:	3000      	adds	r0, #0
 8001160:	bf18      	it	ne
 8001162:	2001      	movne	r0, #1
}
 8001164:	4240      	negs	r0, r0
 8001166:	bd08      	pop	{r3, pc}

08001168 <MFXSTM32L152_IDD_EnableIT>:
{
 8001168:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_IDD) != MFXSTM32L152_OK)
 800116a:	2102      	movs	r1, #2
 800116c:	f7ff ffc9 	bl	8001102 <MFXSTM32L152_EnableITSource>
 8001170:	3000      	adds	r0, #0
 8001172:	bf18      	it	ne
 8001174:	2001      	movne	r0, #1
}
 8001176:	4240      	negs	r0, r0
 8001178:	bd08      	pop	{r3, pc}

0800117a <MFXSTM32L152_Error_EnableIT>:
{
 800117a:	b508      	push	{r3, lr}
  if(MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_ERROR) != MFXSTM32L152_OK)
 800117c:	2104      	movs	r1, #4
 800117e:	f7ff ffc0 	bl	8001102 <MFXSTM32L152_EnableITSource>
 8001182:	3000      	adds	r0, #0
 8001184:	bf18      	it	ne
 8001186:	2001      	movne	r0, #1
}
 8001188:	4240      	negs	r0, r0
 800118a:	bd08      	pop	{r3, pc}

0800118c <MFXSTM32L152_DisableITSource>:
{
 800118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 800118e:	f100 0418 	add.w	r4, r0, #24
{
 8001192:	460d      	mov	r5, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001194:	2301      	movs	r3, #1
 8001196:	f10d 0207 	add.w	r2, sp, #7
 800119a:	2142      	movs	r1, #66	; 0x42
 800119c:	4620      	mov	r0, r4
 800119e:	f000 f9b5 	bl	800150c <mfxstm32l152_read_reg>
 80011a2:	b990      	cbnz	r0, 80011ca <MFXSTM32L152_DisableITSource+0x3e>
    tmp &= ~Source;
 80011a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80011a8:	2301      	movs	r3, #1
 80011aa:	f10d 0207 	add.w	r2, sp, #7
 80011ae:	4620      	mov	r0, r4
    tmp &= ~Source;
 80011b0:	ea21 0105 	bic.w	r1, r1, r5
 80011b4:	f88d 1007 	strb.w	r1, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80011b8:	2142      	movs	r1, #66	; 0x42
 80011ba:	f000 f9ae 	bl	800151a <mfxstm32l152_write_reg>
 80011be:	3000      	adds	r0, #0
 80011c0:	bf18      	it	ne
 80011c2:	2001      	movne	r0, #1
 80011c4:	4240      	negs	r0, r0
}
 80011c6:	b003      	add	sp, #12
 80011c8:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80011ce:	e7fa      	b.n	80011c6 <MFXSTM32L152_DisableITSource+0x3a>

080011d0 <MFXSTM32L152_IO_DisableIT>:
{
 80011d0:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 80011d2:	2101      	movs	r1, #1
 80011d4:	f7ff ffda 	bl	800118c <MFXSTM32L152_DisableITSource>
 80011d8:	3000      	adds	r0, #0
 80011da:	bf18      	it	ne
 80011dc:	2001      	movne	r0, #1
}
 80011de:	4240      	negs	r0, r0
 80011e0:	bd08      	pop	{r3, pc}

080011e2 <MFXSTM32L152_TS_DisableIT>:
{
 80011e2:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_TS_DET) != MFXSTM32L152_OK)
 80011e4:	2108      	movs	r1, #8
 80011e6:	f7ff ffd1 	bl	800118c <MFXSTM32L152_DisableITSource>
 80011ea:	3000      	adds	r0, #0
 80011ec:	bf18      	it	ne
 80011ee:	2001      	movne	r0, #1
}
 80011f0:	4240      	negs	r0, r0
 80011f2:	bd08      	pop	{r3, pc}

080011f4 <MFXSTM32L152_IDD_DisableIT>:
{
 80011f4:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_IDD) != MFXSTM32L152_OK)
 80011f6:	2102      	movs	r1, #2
 80011f8:	f7ff ffc8 	bl	800118c <MFXSTM32L152_DisableITSource>
 80011fc:	3000      	adds	r0, #0
 80011fe:	bf18      	it	ne
 8001200:	2001      	movne	r0, #1
}
 8001202:	4240      	negs	r0, r0
 8001204:	bd08      	pop	{r3, pc}

08001206 <MFXSTM32L152_Error_DisableIT>:
{
 8001206:	b508      	push	{r3, lr}
  if(MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_ERROR) != MFXSTM32L152_OK)
 8001208:	2104      	movs	r1, #4
 800120a:	f7ff ffbf 	bl	800118c <MFXSTM32L152_DisableITSource>
 800120e:	3000      	adds	r0, #0
 8001210:	bf18      	it	ne
 8001212:	2001      	movne	r0, #1
}
 8001214:	4240      	negs	r0, r0
 8001216:	bd08      	pop	{r3, pc}

08001218 <MFXSTM32L152_GlobalITStatus>:
{
 8001218:	b513      	push	{r0, r1, r4, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_PENDING, &tmp, 1) != MFXSTM32L152_OK)
 800121a:	2301      	movs	r3, #1
{
 800121c:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_PENDING, &tmp, 1) != MFXSTM32L152_OK)
 800121e:	f10d 0207 	add.w	r2, sp, #7
 8001222:	2108      	movs	r1, #8
 8001224:	3018      	adds	r0, #24
 8001226:	f000 f971 	bl	800150c <mfxstm32l152_read_reg>
 800122a:	b920      	cbnz	r0, 8001236 <MFXSTM32L152_GlobalITStatus+0x1e>
    tmp1 = tmp & Source;
 800122c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ret = (int32_t)tmp1;
 8001230:	4020      	ands	r0, r4
}
 8001232:	b002      	add	sp, #8
 8001234:	bd10      	pop	{r4, pc}
    ret = MFXSTM32L152_ERROR;
 8001236:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800123a:	e7fa      	b.n	8001232 <MFXSTM32L152_GlobalITStatus+0x1a>

0800123c <MFXSTM32L152_TS_ITStatus>:
  return(MFXSTM32L152_GlobalITStatus(pObj, MFXSTM32L152_IRQ_TS));
 800123c:	21f8      	movs	r1, #248	; 0xf8
 800123e:	f7ff bfeb 	b.w	8001218 <MFXSTM32L152_GlobalITStatus>

08001242 <MFXSTM32L152_IDD_GetITStatus>:
  return(MFXSTM32L152_GlobalITStatus(pObj, MFXSTM32L152_IRQ_IDD));
 8001242:	2102      	movs	r1, #2
 8001244:	f7ff bfe8 	b.w	8001218 <MFXSTM32L152_GlobalITStatus>

08001248 <MFXSTM32L152_Error_GetITStatus>:
  return(MFXSTM32L152_GlobalITStatus(pObj, MFXSTM32L152_IRQ_ERROR));
 8001248:	2104      	movs	r1, #4
 800124a:	f7ff bfe5 	b.w	8001218 <MFXSTM32L152_GlobalITStatus>

0800124e <MFXSTM32L152_ClearGlobalIT>:
{
 800124e:	b507      	push	{r0, r1, r2, lr}
 8001250:	aa02      	add	r2, sp, #8
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_ACK, &Source, 1) != MFXSTM32L152_OK)
 8001252:	2301      	movs	r3, #1
 8001254:	3018      	adds	r0, #24
{
 8001256:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_ACK, &Source, 1) != MFXSTM32L152_OK)
 800125a:	2144      	movs	r1, #68	; 0x44
 800125c:	f000 f95d 	bl	800151a <mfxstm32l152_write_reg>
 8001260:	3000      	adds	r0, #0
 8001262:	bf18      	it	ne
 8001264:	2001      	movne	r0, #1
}
 8001266:	4240      	negs	r0, r0
 8001268:	b003      	add	sp, #12
 800126a:	f85d fb04 	ldr.w	pc, [sp], #4

0800126e <MFXSTM32L152_TS_ClearIT>:
{
 800126e:	b508      	push	{r3, lr}
  if(MFXSTM32L152_ClearGlobalIT(pObj, MFXSTM32L152_IRQ_TS) != MFXSTM32L152_OK)
 8001270:	21f8      	movs	r1, #248	; 0xf8
 8001272:	f7ff ffec 	bl	800124e <MFXSTM32L152_ClearGlobalIT>
 8001276:	3000      	adds	r0, #0
 8001278:	bf18      	it	ne
 800127a:	2001      	movne	r0, #1
}
 800127c:	4240      	negs	r0, r0
 800127e:	bd08      	pop	{r3, pc}

08001280 <MFXSTM32L152_IDD_ClearIT>:
{
 8001280:	b508      	push	{r3, lr}
  if(MFXSTM32L152_ClearGlobalIT(pObj, MFXSTM32L152_IRQ_IDD) != MFXSTM32L152_OK)
 8001282:	2102      	movs	r1, #2
 8001284:	f7ff ffe3 	bl	800124e <MFXSTM32L152_ClearGlobalIT>
 8001288:	3000      	adds	r0, #0
 800128a:	bf18      	it	ne
 800128c:	2001      	movne	r0, #1
}
 800128e:	4240      	negs	r0, r0
 8001290:	bd08      	pop	{r3, pc}

08001292 <MFXSTM32L152_Error_ClearIT>:
{
 8001292:	b508      	push	{r3, lr}
  if(MFXSTM32L152_ClearGlobalIT(pObj, MFXSTM32L152_IRQ_ERROR) != MFXSTM32L152_OK)
 8001294:	2104      	movs	r1, #4
 8001296:	f7ff ffda 	bl	800124e <MFXSTM32L152_ClearGlobalIT>
 800129a:	3000      	adds	r0, #0
 800129c:	bf18      	it	ne
 800129e:	2001      	movne	r0, #1
}
 80012a0:	4240      	negs	r0, r0
 80012a2:	bd08      	pop	{r3, pc}

080012a4 <MFXSTM32L152_SetIrqOutPinPolarity>:
{
 80012a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012a6:	f100 0518 	add.w	r5, r0, #24
{
 80012aa:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012ac:	2301      	movs	r3, #1
 80012ae:	f10d 0207 	add.w	r2, sp, #7
 80012b2:	2141      	movs	r1, #65	; 0x41
 80012b4:	4628      	mov	r0, r5
 80012b6:	f000 f929 	bl	800150c <mfxstm32l152_read_reg>
 80012ba:	b998      	cbnz	r0, 80012e4 <MFXSTM32L152_SetIrqOutPinPolarity+0x40>
  tmp &= ~(uint8_t)0x02;
 80012bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012c0:	f10d 0207 	add.w	r2, sp, #7
 80012c4:	2141      	movs	r1, #65	; 0x41
 80012c6:	4628      	mov	r0, r5
  tmp &= ~(uint8_t)0x02;
 80012c8:	f023 0302 	bic.w	r3, r3, #2
  tmp |= Polarity;
 80012cc:	431c      	orrs	r4, r3
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012ce:	2301      	movs	r3, #1
  tmp |= Polarity;
 80012d0:	f88d 4007 	strb.w	r4, [sp, #7]
  if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012d4:	f000 f921 	bl	800151a <mfxstm32l152_write_reg>
 80012d8:	3000      	adds	r0, #0
 80012da:	bf18      	it	ne
 80012dc:	2001      	movne	r0, #1
 80012de:	4240      	negs	r0, r0
}
 80012e0:	b003      	add	sp, #12
 80012e2:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80012e8:	e7fa      	b.n	80012e0 <MFXSTM32L152_SetIrqOutPinPolarity+0x3c>

080012ea <MFXSTM32L152_SetIrqOutPinType>:
{
 80012ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012ec:	f100 0518 	add.w	r5, r0, #24
{
 80012f0:	460c      	mov	r4, r1
  if(mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80012f2:	2301      	movs	r3, #1
 80012f4:	f10d 0207 	add.w	r2, sp, #7
 80012f8:	2141      	movs	r1, #65	; 0x41
 80012fa:	4628      	mov	r0, r5
 80012fc:	f000 f906 	bl	800150c <mfxstm32l152_read_reg>
 8001300:	b998      	cbnz	r0, 800132a <MFXSTM32L152_SetIrqOutPinType+0x40>
    tmp &= ~(uint8_t)0x01;
 8001302:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001306:	f10d 0207 	add.w	r2, sp, #7
 800130a:	2141      	movs	r1, #65	; 0x41
 800130c:	4628      	mov	r0, r5
    tmp &= ~(uint8_t)0x01;
 800130e:	f023 0301 	bic.w	r3, r3, #1
    tmp |= Type;
 8001312:	431c      	orrs	r4, r3
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001314:	2301      	movs	r3, #1
    tmp |= Type;
 8001316:	f88d 4007 	strb.w	r4, [sp, #7]
    if(mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800131a:	f000 f8fe 	bl	800151a <mfxstm32l152_write_reg>
 800131e:	3000      	adds	r0, #0
 8001320:	bf18      	it	ne
 8001322:	2001      	movne	r0, #1
 8001324:	4240      	negs	r0, r0
}
 8001326:	b003      	add	sp, #12
 8001328:	bd30      	pop	{r4, r5, pc}
    ret = MFXSTM32L152_ERROR;
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800132e:	e7fa      	b.n	8001326 <MFXSTM32L152_SetIrqOutPinType+0x3c>

08001330 <MFXSTM32L152_Init>:
{
 8001330:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8001332:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001336:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8001338:	b99b      	cbnz	r3, 8001362 <MFXSTM32L152_Init+0x32>
    pObj->IO.Init();
 800133a:	6803      	ldr	r3, [r0, #0]
 800133c:	4798      	blx	r3
    if(MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 800133e:	2102      	movs	r1, #2
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff ffaf 	bl	80012a4 <MFXSTM32L152_SetIrqOutPinPolarity>
 8001346:	b110      	cbz	r0, 800134e <MFXSTM32L152_Init+0x1e>
      ret = MFXSTM32L152_ERROR;
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
}
 800134c:	bd10      	pop	{r4, pc}
    else if(MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 800134e:	2101      	movs	r1, #1
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff ffca 	bl	80012ea <MFXSTM32L152_SetIrqOutPinType>
 8001356:	2800      	cmp	r0, #0
 8001358:	d1f6      	bne.n	8001348 <MFXSTM32L152_Init+0x18>
      pObj->IsInitialized = 1U;
 800135a:	2301      	movs	r3, #1
 800135c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001360:	e7f4      	b.n	800134c <MFXSTM32L152_Init+0x1c>
  int32_t ret = MFXSTM32L152_OK;
 8001362:	2000      	movs	r0, #0
  return ret;
 8001364:	e7f2      	b.n	800134c <MFXSTM32L152_Init+0x1c>

08001366 <MFXSTM32L152_IO_InitPin>:
{
 8001366:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 8001368:	4613      	mov	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	2160      	movs	r1, #96	; 0x60
 800136e:	f7ff fbd7 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 8001372:	3000      	adds	r0, #0
 8001374:	bf18      	it	ne
 8001376:	2001      	movne	r0, #1
}
 8001378:	4240      	negs	r0, r0
 800137a:	bd08      	pop	{r3, pc}

0800137c <MFXSTM32L152_IO_SetIrqEvtMode>:
{
 800137c:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 800137e:	4613      	mov	r3, r2
 8001380:	460a      	mov	r2, r1
 8001382:	214c      	movs	r1, #76	; 0x4c
 8001384:	f7ff fbcc 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 8001388:	3000      	adds	r0, #0
 800138a:	bf18      	it	ne
 800138c:	2001      	movne	r0, #1
}
 800138e:	4240      	negs	r0, r0
 8001390:	bd08      	pop	{r3, pc}

08001392 <MFXSTM32L152_IO_SetIrqTypeMode>:
{
 8001392:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 8001394:	4613      	mov	r3, r2
 8001396:	460a      	mov	r2, r1
 8001398:	2150      	movs	r1, #80	; 0x50
 800139a:	f7ff fbc1 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 800139e:	3000      	adds	r0, #0
 80013a0:	bf18      	it	ne
 80013a2:	2001      	movne	r0, #1
}
 80013a4:	4240      	negs	r0, r0
 80013a6:	bd08      	pop	{r3, pc}

080013a8 <MFXSTM32L152_IO_EnablePinIT>:
{
 80013a8:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 80013aa:	460a      	mov	r2, r1
 80013ac:	2301      	movs	r3, #1
 80013ae:	2148      	movs	r1, #72	; 0x48
 80013b0:	f7ff fbb6 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 80013b4:	3000      	adds	r0, #0
 80013b6:	bf18      	it	ne
 80013b8:	2001      	movne	r0, #1
}
 80013ba:	4240      	negs	r0, r0
 80013bc:	bd08      	pop	{r3, pc}

080013be <MFXSTM32L152_IO_DisablePinIT>:
{
 80013be:	b508      	push	{r3, lr}
  if(MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 80013c0:	460a      	mov	r2, r1
 80013c2:	2300      	movs	r3, #0
 80013c4:	2148      	movs	r1, #72	; 0x48
 80013c6:	f7ff fbab 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 80013ca:	3000      	adds	r0, #0
 80013cc:	bf18      	it	ne
 80013ce:	2001      	movne	r0, #1
}
 80013d0:	4240      	negs	r0, r0
 80013d2:	bd08      	pop	{r3, pc}

080013d4 <MFXSTM32L152_IO_Init>:
  switch(IoInit->Mode)
 80013d4:	684b      	ldr	r3, [r1, #4]
{
 80013d6:	b570      	push	{r4, r5, r6, lr}
 80013d8:	4606      	mov	r6, r0
 80013da:	460d      	mov	r5, r1
  switch(IoInit->Mode)
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d845      	bhi.n	800146c <MFXSTM32L152_IO_Init+0x98>
 80013e0:	e8df f003 	tbb	[pc, r3]
 80013e4:	05050505 	.word	0x05050505
 80013e8:	41414105 	.word	0x41414105
 80013ec:	41          	.byte	0x41
 80013ed:	00          	.byte	0x00
    ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 80013ee:	6809      	ldr	r1, [r1, #0]
 80013f0:	f7ff ffe5 	bl	80013be <MFXSTM32L152_IO_DisablePinIT>
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 80013f4:	4604      	mov	r4, r0
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013f6:	4630      	mov	r0, r6
  if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 80013f8:	e9d5 1300 	ldrd	r1, r3, [r5]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	2b01      	cmp	r3, #1
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001400:	bf94      	ite	ls
 8001402:	2201      	movls	r2, #1
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001404:	2200      	movhi	r2, #0
 8001406:	f7ff ffae 	bl	8001366 <MFXSTM32L152_IO_InitPin>
  switch(IoInit->Pull)
 800140a:	68ab      	ldr	r3, [r5, #8]
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 800140c:	4404      	add	r4, r0
  switch(IoInit->Pull)
 800140e:	b113      	cbz	r3, 8001416 <MFXSTM32L152_IO_Init+0x42>
 8001410:	2b02      	cmp	r3, #2
 8001412:	d806      	bhi.n	8001422 <MFXSTM32L152_IO_Init+0x4e>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001414:	2301      	movs	r3, #1
 8001416:	682a      	ldr	r2, [r5, #0]
 8001418:	2164      	movs	r1, #100	; 0x64
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff fb80 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 8001420:	4404      	add	r4, r0
  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 8001422:	686b      	ldr	r3, [r5, #4]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d106      	bne.n	8001436 <MFXSTM32L152_IO_Init+0x62>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001428:	2300      	movs	r3, #0
 800142a:	682a      	ldr	r2, [r5, #0]
 800142c:	2164      	movs	r1, #100	; 0x64
 800142e:	4630      	mov	r0, r6
 8001430:	f7ff fb76 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 8001434:	4404      	add	r4, r0
  if(IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 8001436:	686b      	ldr	r3, [r5, #4]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d106      	bne.n	800144a <MFXSTM32L152_IO_Init+0x76>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800143c:	2301      	movs	r3, #1
 800143e:	682a      	ldr	r2, [r5, #0]
 8001440:	2164      	movs	r1, #100	; 0x64
 8001442:	4630      	mov	r0, r6
 8001444:	f7ff fb6c 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 8001448:	4404      	add	r4, r0
  switch(IoInit->Pull)
 800144a:	68ab      	ldr	r3, [r5, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d01d      	beq.n	800148c <MFXSTM32L152_IO_Init+0xb8>
 8001450:	d30e      	bcc.n	8001470 <MFXSTM32L152_IO_Init+0x9c>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d019      	beq.n	800148a <MFXSTM32L152_IO_Init+0xb6>
  switch(IoInit->Mode)
 8001456:	686b      	ldr	r3, [r5, #4]
 8001458:	3b05      	subs	r3, #5
 800145a:	2b03      	cmp	r3, #3
 800145c:	d829      	bhi.n	80014b2 <MFXSTM32L152_IO_Init+0xde>
 800145e:	e8df f003 	tbb	[pc, r3]
 8001462:	2d17      	.short	0x2d17
 8001464:	3537      	.short	0x3537
    ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 8001466:	f7ff fe6d 	bl	8001144 <MFXSTM32L152_IO_EnableIT>
 800146a:	e7c3      	b.n	80013f4 <MFXSTM32L152_IO_Init+0x20>
  int32_t ret = MFXSTM32L152_OK;
 800146c:	2400      	movs	r4, #0
 800146e:	e7c2      	b.n	80013f6 <MFXSTM32L152_IO_Init+0x22>
    if((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 8001470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001474:	3b01      	subs	r3, #1
 8001476:	2b01      	cmp	r3, #1
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001478:	bf94      	ite	ls
 800147a:	2300      	movls	r3, #0
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_UP);
 800147c:	2301      	movhi	r3, #1
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800147e:	2168      	movs	r1, #104	; 0x68
 8001480:	4630      	mov	r0, r6
 8001482:	f7ff fb4d 	bl	8000b20 <MFXSTM32L152_reg24_setPinValue>
 8001486:	4404      	add	r4, r0
    break;
 8001488:	e7e5      	b.n	8001456 <MFXSTM32L152_IO_Init+0x82>
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800148a:	2300      	movs	r3, #0
 800148c:	682a      	ldr	r2, [r5, #0]
 800148e:	e7f6      	b.n	800147e <MFXSTM32L152_IO_Init+0xaa>
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001490:	2201      	movs	r2, #1
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001492:	6829      	ldr	r1, [r5, #0]
 8001494:	4630      	mov	r0, r6
 8001496:	f7ff ff71 	bl	800137c <MFXSTM32L152_IO_SetIrqEvtMode>
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800149a:	2201      	movs	r2, #1
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800149c:	4404      	add	r4, r0
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800149e:	6829      	ldr	r1, [r5, #0]
 80014a0:	4630      	mov	r0, r6
 80014a2:	f7ff ff76 	bl	8001392 <MFXSTM32L152_IO_SetIrqTypeMode>
 80014a6:	4404      	add	r4, r0
    ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80014a8:	6829      	ldr	r1, [r5, #0]
 80014aa:	4630      	mov	r0, r6
 80014ac:	f7ff ff7c 	bl	80013a8 <MFXSTM32L152_IO_EnablePinIT>
 80014b0:	4404      	add	r4, r0
  if(ret != MFXSTM32L152_OK)
 80014b2:	1c20      	adds	r0, r4, #0
 80014b4:	bf18      	it	ne
 80014b6:	2001      	movne	r0, #1
}
 80014b8:	4240      	negs	r0, r0
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80014bc:	2201      	movs	r2, #1
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014be:	6829      	ldr	r1, [r5, #0]
 80014c0:	4630      	mov	r0, r6
 80014c2:	f7ff ff5b 	bl	800137c <MFXSTM32L152_IO_SetIrqEvtMode>
    ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80014c6:	2200      	movs	r2, #0
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014c8:	4404      	add	r4, r0
 80014ca:	e7e8      	b.n	800149e <MFXSTM32L152_IO_Init+0xca>
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014cc:	2200      	movs	r2, #0
 80014ce:	e7e0      	b.n	8001492 <MFXSTM32L152_IO_Init+0xbe>
    ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014d0:	2200      	movs	r2, #0
 80014d2:	e7f4      	b.n	80014be <MFXSTM32L152_IO_Init+0xea>

080014d4 <MFXSTM32L152_RegisterBusIO>:
  if (pObj == NULL)
 80014d4:	b190      	cbz	r0, 80014fc <MFXSTM32L152_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80014d6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80014d8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80014da:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80014dc:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80014de:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80014e0:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80014e2:	68ca      	ldr	r2, [r1, #12]
 80014e4:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80014e6:	690a      	ldr	r2, [r1, #16]
 80014e8:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80014ea:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80014ec:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80014ee:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <MFXSTM32L152_RegisterBusIO+0x30>)
 80014f2:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <MFXSTM32L152_RegisterBusIO+0x34>)
 80014f6:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80014f8:	b103      	cbz	r3, 80014fc <MFXSTM32L152_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80014fa:	4718      	bx	r3
}
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	08000985 	.word	0x08000985
 8001508:	08000993 	.word	0x08000993

0800150c <mfxstm32l152_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 800150c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, data, length);
 800150e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001512:	46a4      	mov	ip, r4
}
 8001514:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8001518:	4760      	bx	ip

0800151a <mfxstm32l152_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t* data, uint16_t length)
{
 800151a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800151c:	6804      	ldr	r4, [r0, #0]
 800151e:	6880      	ldr	r0, [r0, #8]
 8001520:	46a4      	mov	ip, r4
}
 8001522:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001526:	4760      	bx	ip

08001528 <TS3510_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 0;
  Capabilities->Gesture    = 0;
 8001528:	2301      	movs	r3, #1
  Capabilities->MultiTouch = 0;
 800152a:	2000      	movs	r0, #0
  Capabilities->Gesture    = 0;
 800152c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxTouch   = TS3510_MAX_NB_TOUCH;
  Capabilities->MaxXl      = TS3510_MAX_X_LENGTH;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Capabilities->MultiTouch = 0;
 8001532:	8008      	strh	r0, [r1, #0]
  Capabilities->MaxYl      = TS3510_MAX_Y_LENGTH;
 8001534:	e9c1 3301 	strd	r3, r3, [r1, #4]
  
  return TS3510_OK;
}
 8001538:	4770      	bx	lr

0800153a <TS3510_Init>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_Init(TS3510_Object_t *pObj)
{
 800153a:	b510      	push	{r4, lr}
  int32_t ret = TS3510_OK;
  
  if(pObj->IsInitialized == 0U)
 800153c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001540:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8001542:	b933      	cbnz	r3, 8001552 <TS3510_Init+0x18>
  {    
    /* Initialize IO BUS layer */
    if(pObj->IO.Init() != TS3510_OK)
 8001544:	6803      	ldr	r3, [r0, #0]
 8001546:	4798      	blx	r3
 8001548:	b928      	cbnz	r0, 8001556 <TS3510_Init+0x1c>
    {
      ret = TS3510_ERROR;
    }
    else
    {
      pObj->IsInitialized = 1;
 800154a:	2301      	movs	r3, #1
 800154c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 8001550:	bd10      	pop	{r4, pc}
  int32_t ret = TS3510_OK;
 8001552:	2000      	movs	r0, #0
 8001554:	e7fc      	b.n	8001550 <TS3510_Init+0x16>
      ret = TS3510_ERROR;
 8001556:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800155a:	e7f9      	b.n	8001550 <TS3510_Init+0x16>

0800155c <TS3510_DeInit>:
  *         from MCU to TS3510 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t TS3510_DeInit(TS3510_Object_t *pObj)
{
 800155c:	b510      	push	{r4, lr}
  int32_t ret = TS3510_OK;
  
  if(pObj->IsInitialized == 1U)
 800155e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001562:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 1U)
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <TS3510_DeInit+0x18>
  {
    if(pObj->IO.DeInit() != TS3510_OK)
 8001568:	6843      	ldr	r3, [r0, #4]
 800156a:	4798      	blx	r3
 800156c:	b920      	cbnz	r0, 8001578 <TS3510_DeInit+0x1c>
    {
      ret = TS3510_ERROR;
    }
    else
    {
      pObj->IsInitialized = 0;
 800156e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    }
  }
  
  return ret;
}
 8001572:	bd10      	pop	{r4, pc}
  int32_t ret = TS3510_OK;
 8001574:	2000      	movs	r0, #0
 8001576:	e7fc      	b.n	8001572 <TS3510_DeInit+0x16>
      ret = TS3510_ERROR;
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800157c:	e7f9      	b.n	8001572 <TS3510_DeInit+0x16>

0800157e <TS3510_GestureConfig>:
  */
int32_t TS3510_GestureConfig(TS3510_Object_t *pObj, TS3510_Gesture_Init_t *GestureInit)
{
  /* Feature not supported */
  return TS3510_ERROR;  
}
 800157e:	f04f 30ff 	mov.w	r0, #4294967295
 8001582:	4770      	bx	lr

08001584 <TS3510_EnableIT>:
  */
int32_t TS3510_EnableIT(TS3510_Object_t *pObj)
{
  /* Feature not supported */
  return TS3510_ERROR;
}
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	4770      	bx	lr

0800158a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800158a:	b410      	push	{r4}
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800158c:	6904      	ldr	r4, [r0, #16]
 800158e:	8900      	ldrh	r0, [r0, #8]
 8001590:	46a4      	mov	ip, r4
}
 8001592:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001596:	4760      	bx	ip

08001598 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001598:	b410      	push	{r4}
  TS3510_Object_t *pObj = (TS3510_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800159a:	68c4      	ldr	r4, [r0, #12]
 800159c:	8900      	ldrh	r0, [r0, #8]
 800159e:	46a4      	mov	ip, r4
}
 80015a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80015a4:	4760      	bx	ip
	...

080015a8 <TS3510_ReadID>:
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <TS3510_ReadID+0x40>)
{
 80015aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80015ac:	881b      	ldrh	r3, [r3, #0]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 80015ae:	f100 0418 	add.w	r4, r0, #24
{
 80015b2:	460d      	mov	r5, r1
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 80015b4:	aa01      	add	r2, sp, #4
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80015b6:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, aTmpBuffer, 2) != TS3510_OK)
 80015ba:	218a      	movs	r1, #138	; 0x8a
 80015bc:	2302      	movs	r3, #2
 80015be:	4620      	mov	r0, r4
 80015c0:	f000 f8a7 	bl	8001712 <ts3510_write_reg>
 80015c4:	b118      	cbz	r0, 80015ce <TS3510_ReadID+0x26>
    ret = TS3510_ERROR;
 80015c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015ca:	b003      	add	sp, #12
 80015cc:	bd30      	pop	{r4, r5, pc}
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, &data, 1) != TS3510_OK)
 80015ce:	2301      	movs	r3, #1
 80015d0:	f10d 0203 	add.w	r2, sp, #3
 80015d4:	218a      	movs	r1, #138	; 0x8a
 80015d6:	4620      	mov	r0, r4
 80015d8:	f000 f894 	bl	8001704 <ts3510_read_reg>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d1f2      	bne.n	80015c6 <TS3510_ReadID+0x1e>
    *Id = TS3510_ID;
 80015e0:	f243 5310 	movw	r3, #13584	; 0x3510
 80015e4:	602b      	str	r3, [r5, #0]
  return ret;     
 80015e6:	e7f0      	b.n	80015ca <TS3510_ReadID+0x22>
 80015e8:	08006e20 	.word	0x08006e20

080015ec <TS3510_GetState>:
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <TS3510_GetState+0xbc>)
{
 80015ee:	b530      	push	{r4, r5, lr}
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80015f0:	881b      	ldrh	r3, [r3, #0]
{
 80015f2:	b087      	sub	sp, #28
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 80015f4:	f100 0518 	add.w	r5, r0, #24
{
 80015f8:	460c      	mov	r4, r1
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 80015fa:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 80015fe:	aa02      	add	r2, sp, #8
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001600:	f8ad 3008 	strh.w	r3, [sp, #8]
  if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	2302      	movs	r3, #2
 8001608:	4628      	mov	r0, r5
 800160a:	f000 f882 	bl	8001712 <ts3510_write_reg>
 800160e:	b178      	cbz	r0, 8001630 <TS3510_GetState+0x44>
    ret = TS3510_ERROR;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
  if(State->TouchDetected == 1U)
 8001614:	2b01      	cmp	r3, #1
  State->TouchDetected = (uint32_t)TS3510_DetectTouch(pObj);
 8001616:	6023      	str	r3, [r4, #0]
  if(State->TouchDetected == 1U)
 8001618:	d143      	bne.n	80016a2 <TS3510_GetState+0xb6>
    if(ts3510_write_reg(&pObj->Ctx, TS3510_SEND_CMD_REG, aTmpBuffer, 2) != TS3510_OK)
 800161a:	2302      	movs	r3, #2
 800161c:	aa01      	add	r2, sp, #4
 800161e:	2100      	movs	r1, #0
 8001620:	4628      	mov	r0, r5
 8001622:	f000 f876 	bl	8001712 <ts3510_write_reg>
 8001626:	b1f8      	cbz	r0, 8001668 <TS3510_GetState+0x7c>
      ret = TS3510_ERROR;
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
}
 800162c:	b007      	add	sp, #28
 800162e:	bd30      	pop	{r4, r5, pc}
  else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8001630:	230b      	movs	r3, #11
 8001632:	aa03      	add	r2, sp, #12
 8001634:	218a      	movs	r1, #138	; 0x8a
 8001636:	4628      	mov	r0, r5
 8001638:	f000 f864 	bl	8001704 <ts3510_read_reg>
 800163c:	2800      	cmp	r0, #0
 800163e:	d1e7      	bne.n	8001610 <TS3510_GetState+0x24>
    if((pData[1] == 0xFF) && (pData[2] == 0xFF) && (pData[3] == 0xFF) && (pData[4] == 0xFF))
 8001640:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001644:	2bff      	cmp	r3, #255	; 0xff
 8001646:	d10d      	bne.n	8001664 <TS3510_GetState+0x78>
 8001648:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800164c:	2bff      	cmp	r3, #255	; 0xff
 800164e:	d109      	bne.n	8001664 <TS3510_GetState+0x78>
 8001650:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d105      	bne.n	8001664 <TS3510_GetState+0x78>
 8001658:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800165c:	3bff      	subs	r3, #255	; 0xff
 800165e:	bf18      	it	ne
 8001660:	2301      	movne	r3, #1
 8001662:	e7d7      	b.n	8001614 <TS3510_GetState+0x28>
      ret = 1;
 8001664:	2301      	movs	r3, #1
 8001666:	e7d5      	b.n	8001614 <TS3510_GetState+0x28>
    else if(ts3510_read_reg(&pObj->Ctx, TS3510_READ_BLOCK_REG, pData, 11) != TS3510_OK)
 8001668:	230b      	movs	r3, #11
 800166a:	aa03      	add	r2, sp, #12
 800166c:	218a      	movs	r1, #138	; 0x8a
 800166e:	4628      	mov	r0, r5
 8001670:	f000 f848 	bl	8001704 <ts3510_read_reg>
 8001674:	2800      	cmp	r0, #0
 8001676:	d1d7      	bne.n	8001628 <TS3510_GetState+0x3c>
      State->TouchX = (((pData[1] << 8) | pData[2]) << 12) / 640;
 8001678:	f8bd 300d 	ldrh.w	r3, [sp, #13]
 800167c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001680:	ba5b      	rev16	r3, r3
 8001682:	b29b      	uxth	r3, r3
 8001684:	031b      	lsls	r3, r3, #12
 8001686:	fb93 f3f2 	sdiv	r3, r3, r2
 800168a:	6063      	str	r3, [r4, #4]
      State->TouchY = (((pData[3] << 8) | pData[4]) << 12) / 480;
 800168c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001690:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 8001694:	ba5b      	rev16	r3, r3
 8001696:	b29b      	uxth	r3, r3
 8001698:	031b      	lsls	r3, r3, #12
 800169a:	fb93 f3f2 	sdiv	r3, r3, r2
 800169e:	60a3      	str	r3, [r4, #8]
 80016a0:	e7c4      	b.n	800162c <TS3510_GetState+0x40>
  int32_t ret = TS3510_OK;
 80016a2:	2000      	movs	r0, #0
  return ret;
 80016a4:	e7c2      	b.n	800162c <TS3510_GetState+0x40>
 80016a6:	bf00      	nop
 80016a8:	08006e20 	.word	0x08006e20

080016ac <TS3510_ClearIT>:
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	4770      	bx	lr

080016b2 <TS3510_GetMultiTouchState>:
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295
 80016b6:	4770      	bx	lr

080016b8 <TS3510_GetGesture>:
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	4770      	bx	lr

080016be <TS3510_DisableIT>:
 80016be:	f04f 30ff 	mov.w	r0, #4294967295
 80016c2:	4770      	bx	lr

080016c4 <TS3510_ITStatus>:
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	4770      	bx	lr
	...

080016cc <TS3510_RegisterBusIO>:
  if (pObj == NULL)
 80016cc:	b190      	cbz	r0, 80016f4 <TS3510_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80016ce:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80016d0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016d2:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80016d4:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80016d6:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80016d8:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80016da:	68ca      	ldr	r2, [r1, #12]
 80016dc:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016de:	690a      	ldr	r2, [r1, #16]
 80016e0:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80016e2:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80016e4:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80016e6:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <TS3510_RegisterBusIO+0x30>)
 80016ea:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <TS3510_RegisterBusIO+0x34>)
 80016ee:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80016f0:	b103      	cbz	r3, 80016f4 <TS3510_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80016f2:	4718      	bx	r3
}
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	0800158b 	.word	0x0800158b
 8001700:	08001599 	.word	0x08001599

08001704 <ts3510_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read  
  * @retval Component status
  */
int32_t ts3510_read_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001704:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001706:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800170a:	46a4      	mov	ip, r4
}
 800170c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001710:	4760      	bx	ip

08001712 <ts3510_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ts3510_write_reg(ts3510_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001712:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001714:	6804      	ldr	r4, [r0, #0]
 8001716:	6880      	ldr	r0, [r0, #8]
 8001718:	46a4      	mov	ip, r4
}
 800171a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800171e:	4760      	bx	ip

08001720 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001720:	4927      	ldr	r1, [pc, #156]	; (80017c0 <BSP_LED_Init+0xa0>)
 8001722:	b570      	push	{r4, r5, r6, lr}
 8001724:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8001728:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led == LED1) || (Led == LED3))
 800172a:	b1a8      	cbz	r0, 8001758 <BSP_LED_Init+0x38>
 800172c:	2802      	cmp	r0, #2
 800172e:	d035      	beq.n	800179c <BSP_LED_Init+0x7c>
#if (USE_BSP_IO_CLASS > 0)
    BSP_IO_Init_t io_init_structure;

    io_init_structure.Pin  = LED_PIN[Led];
    io_init_structure.Pull = IO_PULLUP;
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 8001730:	2304      	movs	r3, #4
 8001732:	2401      	movs	r4, #1
    /* Initialize MFX   */
    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8001734:	a903      	add	r1, sp, #12
 8001736:	2000      	movs	r0, #0
    io_init_structure.Pin  = LED_PIN[Led];
 8001738:	9503      	str	r5, [sp, #12]
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 800173a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    if(BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 800173e:	f000 faf7 	bl	8001d30 <BSP_IO_Init>
 8001742:	2800      	cmp	r0, #0
 8001744:	d138      	bne.n	80017b8 <BSP_LED_Init+0x98>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      if(BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_SET) != BSP_ERROR_NONE)
 8001746:	4622      	mov	r2, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f000 fa8b 	bl	8001c64 <BSP_IO_WritePin>
 800174e:	3000      	adds	r0, #0
 8001750:	bf18      	it	ne
 8001752:	2001      	movne	r0, #1
 8001754:	4240      	negs	r0, r0
 8001756:	e01f      	b.n	8001798 <BSP_LED_Init+0x78>
      LED1_GPIO_CLK_ENABLE();
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <BSP_LED_Init+0xa4>)
 800175a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8001772:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001776:	2302      	movs	r3, #2
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2401      	movs	r4, #1
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 800177a:	a903      	add	r1, sp, #12
 800177c:	6906      	ldr	r6, [r0, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800177e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8001780:	4630      	mov	r0, r6
    gpio_init_structure.Pin = LED_PIN [Led];
 8001782:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001784:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8001788:	f001 fc28 	bl	8002fdc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800178c:	4630      	mov	r0, r6
 800178e:	4622      	mov	r2, r4
 8001790:	b2a9      	uxth	r1, r5
 8001792:	f001 fdb1 	bl	80032f8 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8001796:	2000      	movs	r0, #0
    }
#endif /* (USE_BSP_IO_CLASS > 0)   */
  }

  return ret;
}
 8001798:	b008      	add	sp, #32
 800179a:	bd70      	pop	{r4, r5, r6, pc}
      LED3_GPIO_CLK_ENABLE();
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <BSP_LED_Init+0xa4>)
 800179e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	9b02      	ldr	r3, [sp, #8]
 80017b6:	e7dc      	b.n	8001772 <BSP_LED_Init+0x52>
      ret = BSP_ERROR_NO_INIT;
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80017bc:	e7ec      	b.n	8001798 <BSP_LED_Init+0x78>
 80017be:	bf00      	nop
 80017c0:	08006e24 	.word	0x08006e24
 80017c4:	58024400 	.word	0x58024400

080017c8 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <BSP_LED_On+0x2c>)
int32_t ret = BSP_ERROR_NONE;

if((Led == LED1)||(Led == LED3))
 80017cc:	f010 04fd 	ands.w	r4, r0, #253	; 0xfd
 80017d0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80017d4:	d005      	beq.n	80017e2 <BSP_LED_On+0x1a>
HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
}
else
{
#if (USE_BSP_IO_CLASS > 0)
ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
#endif /* (USE_BSP_IO_CLASS > 0)   */
}
return ret;
}
 80017d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 80017dc:	4610      	mov	r0, r2
 80017de:	f000 ba41 	b.w	8001c64 <BSP_IO_WritePin>
HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80017e2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80017e6:	4622      	mov	r2, r4
 80017e8:	b289      	uxth	r1, r1
 80017ea:	6918      	ldr	r0, [r3, #16]
 80017ec:	f001 fd84 	bl	80032f8 <HAL_GPIO_WritePin>
}
 80017f0:	4620      	mov	r0, r4
 80017f2:	bd10      	pop	{r4, pc}
 80017f4:	08006e24 	.word	0x08006e24

080017f8 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning   */
  UNUSED(Button);
  /* This function should be implemented by the user application.
  It is called into this driver when an event on Button is triggered.   */
}
 80017f8:	4770      	bx	lr

080017fa <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80017fa:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff fffb 	bl	80017f8 <BSP_PB_Callback>
}
 8001802:	bd08      	pop	{r3, pc}

08001804 <BUTTON_TAMPER_EXTI_Callback>:
{
 8001804:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_TAMPER);
 8001806:	2001      	movs	r0, #1
 8001808:	f7ff fff6 	bl	80017f8 <BSP_PB_Callback>
}
 800180c:	bd08      	pop	{r3, pc}

0800180e <BUTTON_WAKEUP_EXTI_Callback>:
{
 800180e:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fff1 	bl	80017f8 <BSP_PB_Callback>
}
 8001816:	bd08      	pop	{r3, pc}

08001818 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c1InitCounter--;
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <BSP_I2C1_DeInit+0x40>)
{
 800181a:	b508      	push	{r3, lr}

  if (--I2c1InitCounter == 0U)
 800181c:	6813      	ldr	r3, [r2, #0]
 800181e:	3b02      	subs	r3, #2
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	b10b      	cbz	r3, 8001828 <BSP_I2C1_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8001824:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8001826:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <BSP_I2C1_DeInit+0x44>)
 800182c:	f001 fcc0 	bl	80031b0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <BSP_I2C1_DeInit+0x44>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	f001 fcbc 	bl	80031b0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <BSP_I2C1_DeInit+0x48>)
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 800183a:	480a      	ldr	r0, [pc, #40]	; (8001864 <BSP_I2C1_DeInit+0x4c>)
  BUS_I2C1_CLK_DISABLE();
 800183c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001840:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001844:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8001848:	f002 f9fd 	bl	8003c46 <HAL_I2C_DeInit>
 800184c:	2800      	cmp	r0, #0
 800184e:	d0e9      	beq.n	8001824 <BSP_I2C1_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8001850:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001854:	e7e7      	b.n	8001826 <BSP_I2C1_DeInit+0xe>
 8001856:	bf00      	nop
 8001858:	20000220 	.word	0x20000220
 800185c:	58020400 	.word	0x58020400
 8001860:	58024400 	.word	0x58024400
 8001864:	20001c94 	.word	0x20001c94

08001868 <MX_I2C1_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001868:	2300      	movs	r3, #0
 800186a:	2201      	movs	r2, #1
{
 800186c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800186e:	6041      	str	r1, [r0, #4]
{
 8001870:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001872:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001874:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8001878:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800187c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001880:	f002 f98f 	bl	8003ba2 <HAL_I2C_Init>
 8001884:	4601      	mov	r1, r0
 8001886:	b108      	cbz	r0, 800188c <MX_I2C1_Init+0x24>
    status = HAL_ERROR;
 8001888:	2001      	movs	r0, #1
}
 800188a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800188c:	4620      	mov	r0, r4
 800188e:	f002 fb66 	bl	8003f5e <HAL_I2CEx_ConfigAnalogFilter>
 8001892:	4601      	mov	r1, r0
 8001894:	2800      	cmp	r0, #0
 8001896:	d1f7      	bne.n	8001888 <MX_I2C1_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001898:	4620      	mov	r0, r4
 800189a:	f002 fb86 	bl	8003faa <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800189e:	3000      	adds	r0, #0
 80018a0:	bf18      	it	ne
 80018a2:	2001      	movne	r0, #1
 80018a4:	e7f1      	b.n	800188a <MX_I2C1_Init+0x22>
	...

080018a8 <BSP_I2C1_Init>:
  hbus_i2c1.Instance = BUS_I2C1;
 80018a8:	4b9c      	ldr	r3, [pc, #624]	; (8001b1c <BSP_I2C1_Init+0x274>)
 80018aa:	489d      	ldr	r0, [pc, #628]	; (8001b20 <BSP_I2C1_Init+0x278>)
{
 80018ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c1.Instance = BUS_I2C1;
 80018b0:	6003      	str	r3, [r0, #0]
{
 80018b2:	b091      	sub	sp, #68	; 0x44
  if (I2c1InitCounter == 0U)
 80018b4:	4b9b      	ldr	r3, [pc, #620]	; (8001b24 <BSP_I2C1_Init+0x27c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	469a      	mov	sl, r3
 80018ba:	9201      	str	r2, [sp, #4]
 80018bc:	b11a      	cbz	r2, 80018c6 <BSP_I2C1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 80018be:	2000      	movs	r0, #0
}
 80018c0:	b011      	add	sp, #68	; 0x44
 80018c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c1InitCounter++;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f8ca 3000 	str.w	r3, [sl]
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 80018cc:	f002 fb42 	bl	8003f54 <HAL_I2C_GetState>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d1f4      	bne.n	80018be <BSP_I2C1_Init+0x16>
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 80018d4:	4d94      	ldr	r5, [pc, #592]	; (8001b28 <BSP_I2C1_Init+0x280>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80018d6:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 80018da:	2702      	movs	r7, #2
 80018dc:	2604      	movs	r6, #4
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 80018de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 80018e2:	a90b      	add	r1, sp, #44	; 0x2c
 80018e4:	4891      	ldr	r0, [pc, #580]	; (8001b2c <BSP_I2C1_Init+0x284>)
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80018ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	9308      	str	r3, [sp, #32]
 80018f8:	9b08      	ldr	r3, [sp, #32]
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 80018fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001906:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	9309      	str	r3, [sp, #36]	; 0x24
 8001910:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001918:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
 800191a:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800191e:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8001920:	f001 fb5c 	bl	8002fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin 		= BUS_I2C1_SDA_PIN;
 8001924:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8001926:	a90b      	add	r1, sp, #44	; 0x2c
 8001928:	4880      	ldr	r0, [pc, #512]	; (8001b2c <BSP_I2C1_Init+0x284>)
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
 800192a:	960f      	str	r6, [sp, #60]	; 0x3c
  gpio_init_structure.Mode 		= GPIO_MODE_AF_OD;
 800192c:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  gpio_init_structure.Pull 		= GPIO_NOPULL;
 8001930:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001932:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8001936:	f001 fb51 	bl	8002fdc <HAL_GPIO_Init>
  BUS_I2C1_CLK_ENABLE();
 800193a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 800193e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001942:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
 8001946:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 800194a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194e:	930a      	str	r3, [sp, #40]	; 0x28
 8001950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C1_FORCE_RESET();
 8001952:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  BUS_I2C1_RELEASE_RESET();
 800195e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001966:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 800196a:	f003 f98f 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800196e:	2800      	cmp	r0, #0
 8001970:	f000 80ca 	beq.w	8001b08 <BSP_I2C1_Init+0x260>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001974:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <BSP_I2C1_Init+0x288>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001976:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800197a:	46d1      	mov	r9, sl
 800197c:	f04f 0b14 	mov.w	fp, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001980:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8001984:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001988:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800198c:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001990:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001992:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001996:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800199a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800199e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80019a2:	32e2      	adds	r2, #226	; 0xe2
 80019a4:	9305      	str	r3, [sp, #20]
 80019a6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80019aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80019ae:	9202      	str	r2, [sp, #8]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80019b0:	9a01      	ldr	r2, [sp, #4]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80019b2:	4696      	mov	lr, r2
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80019b4:	1c54      	adds	r4, r2, #1
 80019b6:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80019b8:	2600      	movs	r6, #0
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80019ba:	9404      	str	r4, [sp, #16]
      if (tscldel >= (uint32_t)tscldel_min)
 80019bc:	f240 3479 	movw	r4, #889	; 0x379
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80019c0:	1c75      	adds	r5, r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80019c2:	45a4      	cmp	ip, r4
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80019c4:	9503      	str	r5, [sp, #12]
      if (tscldel >= (uint32_t)tscldel_min)
 80019c6:	d92c      	bls.n	8001a22 <BSP_I2C1_Init+0x17a>
 80019c8:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80019ca:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80019cc:	9c02      	ldr	r4, [sp, #8]
 80019ce:	42a5      	cmp	r5, r4
 80019d0:	d323      	bcc.n	8001a1a <BSP_I2C1_Init+0x172>
 80019d2:	9c05      	ldr	r4, [sp, #20]
 80019d4:	42a5      	cmp	r5, r4
 80019d6:	d820      	bhi.n	8001a1a <BSP_I2C1_Init+0x172>
            if(presc != prev_presc)
 80019d8:	4542      	cmp	r2, r8
 80019da:	d01e      	beq.n	8001a1a <BSP_I2C1_Init+0x172>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80019dc:	fb0b 9e03 	mla	lr, fp, r3, r9
              I2c_valid_timing_nbr ++;
 80019e0:	3301      	adds	r3, #1
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80019e2:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80019e4:	f8ce 7010 	str.w	r7, [lr, #16]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80019e8:	e9ce 2602 	strd	r2, r6, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80019ec:	d912      	bls.n	8001a14 <BSP_I2C1_Init+0x16c>
 80019ee:	f8c9 3004 	str.w	r3, [r9, #4]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80019f2:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <BSP_I2C1_Init+0x27c>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80019f4:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80019f8:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80019fa:	6853      	ldr	r3, [r2, #4]
 80019fc:	f5ab 59ec 	sub.w	r9, fp, #7552	; 0x1d80
 8001a00:	3208      	adds	r2, #8
 8001a02:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001a04:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a08:	f1a9 0915 	sub.w	r9, r9, #21
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e05e      	b.n	8001ad2 <BSP_I2C1_Init+0x22a>
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001a14:	4690      	mov	r8, r2
 8001a16:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001a1a:	3701      	adds	r7, #1
 8001a1c:	440d      	add	r5, r1
 8001a1e:	2f10      	cmp	r7, #16
 8001a20:	d1d4      	bne.n	80019cc <BSP_I2C1_Init+0x124>
 8001a22:	9e03      	ldr	r6, [sp, #12]
 8001a24:	448c      	add	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001a26:	2e10      	cmp	r6, #16
 8001a28:	d1c8      	bne.n	80019bc <BSP_I2C1_Init+0x114>
 8001a2a:	9a04      	ldr	r2, [sp, #16]
 8001a2c:	4401      	add	r1, r0
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001a2e:	2a10      	cmp	r2, #16
 8001a30:	d1c0      	bne.n	80019b4 <BSP_I2C1_Init+0x10c>
 8001a32:	f1be 0f00 	cmp.w	lr, #0
 8001a36:	d0dc      	beq.n	80019f2 <BSP_I2C1_Init+0x14a>
 8001a38:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <BSP_I2C1_Init+0x27c>)
 8001a3a:	6053      	str	r3, [r2, #4]
 8001a3c:	e7d9      	b.n	80019f2 <BSP_I2C1_Init+0x14a>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001a3e:	6815      	ldr	r5, [r2, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001a40:	f04f 0c00 	mov.w	ip, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001a44:	fb05 0500 	mla	r5, r5, r0, r0
 8001a48:	eb09 0405 	add.w	r4, r9, r5
 8001a4c:	eb05 010b 	add.w	r1, r5, fp
 8001a50:	9407      	str	r4, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001a52:	f10c 0401 	add.w	r4, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001a56:	f101 0632 	add.w	r6, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001a5a:	9403      	str	r4, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001a5c:	f241 245c 	movw	r4, #4700	; 0x125c
 8001a60:	42a6      	cmp	r6, r4
 8001a62:	d92e      	bls.n	8001ac2 <BSP_I2C1_Init+0x21a>
 8001a64:	ebb0 0f91 	cmp.w	r0, r1, lsr #2
 8001a68:	d22b      	bcs.n	8001ac2 <BSP_I2C1_Init+0x21a>
 8001a6a:	9c07      	ldr	r4, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001a6c:	f04f 0e00 	mov.w	lr, #0
 8001a70:	1866      	adds	r6, r4, r1
 8001a72:	f5c1 54ee 	rsb	r4, r1, #7616	; 0x1dc0
 8001a76:	3407      	adds	r4, #7
 8001a78:	9406      	str	r4, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001a7a:	f10e 0401 	add.w	r4, lr, #1
 8001a7e:	9404      	str	r4, [sp, #16]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001a80:	f241 0447 	movw	r4, #4167	; 0x1047
 8001a84:	42a6      	cmp	r6, r4
 8001a86:	d816      	bhi.n	8001ab6 <BSP_I2C1_Init+0x20e>
 8001a88:	9c06      	ldr	r4, [sp, #24]
 8001a8a:	eb04 0806 	add.w	r8, r4, r6
 8001a8e:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8001a92:	d310      	bcc.n	8001ab6 <BSP_I2C1_Init+0x20e>
 8001a94:	4540      	cmp	r0, r8
 8001a96:	d20e      	bcs.n	8001ab6 <BSP_I2C1_Init+0x20e>
            if ((uint32_t)error < prev_error)
 8001a98:	f2a6 6883 	subw	r8, r6, #1667	; 0x683
 8001a9c:	9c02      	ldr	r4, [sp, #8]
 8001a9e:	f1b8 0f00 	cmp.w	r8, #0
 8001aa2:	bfb8      	it	lt
 8001aa4:	f1c8 0800 	rsblt	r8, r8, #0
 8001aa8:	4544      	cmp	r4, r8
              I2c_valid_timing[count].sclh = sclh;
 8001aaa:	bf82      	ittt	hi
 8001aac:	463b      	movhi	r3, r7
 8001aae:	f8cd 8008 	strhi.w	r8, [sp, #8]
 8001ab2:	e9c2 ec03 	strdhi	lr, ip, [r2, #12]
 8001ab6:	f8dd e010 	ldr.w	lr, [sp, #16]
 8001aba:	442e      	add	r6, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001abc:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8001ac0:	d1db      	bne.n	8001a7a <BSP_I2C1_Init+0x1d2>
 8001ac2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8001ac6:	4429      	add	r1, r5
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001ac8:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001acc:	d1c1      	bne.n	8001a52 <BSP_I2C1_Init+0x1aa>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001ace:	3701      	adds	r7, #1
 8001ad0:	3214      	adds	r2, #20
 8001ad2:	9905      	ldr	r1, [sp, #20]
 8001ad4:	428f      	cmp	r7, r1
 8001ad6:	d1b2      	bne.n	8001a3e <BSP_I2C1_Init+0x196>
        if (idx < I2C_VALID_TIMING_NBR)
 8001ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8001ada:	d815      	bhi.n	8001b08 <BSP_I2C1_Init+0x260>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001adc:	2214      	movs	r2, #20
 8001ade:	fb02 a303 	mla	r3, r2, r3, sl
 8001ae2:	689a      	ldr	r2, [r3, #8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001ae4:	7e1c      	ldrb	r4, [r3, #24]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001ae6:	ea44 7402 	orr.w	r4, r4, r2, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	0512      	lsls	r2, r2, #20
 8001aee:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001af2:	4314      	orrs	r4, r2
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001af4:	691a      	ldr	r2, [r3, #16]
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001af6:	695b      	ldr	r3, [r3, #20]
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001af8:	0412      	lsls	r2, r2, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001afa:	021b      	lsls	r3, r3, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001afc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001b00:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001b02:	4314      	orrs	r4, r2
 8001b04:	4323      	orrs	r3, r4
 8001b06:	9301      	str	r3, [sp, #4]
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
 8001b08:	9901      	ldr	r1, [sp, #4]
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <BSP_I2C1_Init+0x278>)
 8001b0c:	f7ff feac 	bl	8001868 <MX_I2C1_Init>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	f43f aed4 	beq.w	80018be <BSP_I2C1_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 8001b16:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001b1a:	e6d1      	b.n	80018c0 <BSP_I2C1_Init+0x18>
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	20001c94 	.word	0x20001c94
 8001b24:	20000220 	.word	0x20000220
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58020400 	.word	0x58020400
 8001b30:	3b9aca00 	.word	0x3b9aca00

08001b34 <BSP_I2C1_WriteReg>:
{
 8001b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001b36:	f242 7410 	movw	r4, #10000	; 0x2710
 8001b3a:	9200      	str	r2, [sp, #0]
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	4601      	mov	r1, r0
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <BSP_I2C1_WriteReg+0x30>)
 8001b42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001b46:	2301      	movs	r3, #1
 8001b48:	f002 f896 	bl	8003c78 <HAL_I2C_Mem_Write>
 8001b4c:	b140      	cbz	r0, 8001b60 <BSP_I2C1_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <BSP_I2C1_WriteReg+0x30>)
 8001b50:	f002 fa03 	bl	8003f5a <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b54:	2804      	cmp	r0, #4
 8001b56:	bf0c      	ite	eq
 8001b58:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8001b5c:	f06f 0003 	mvnne.w	r0, #3
}
 8001b60:	b004      	add	sp, #16
 8001b62:	bd10      	pop	{r4, pc}
 8001b64:	20001c94 	.word	0x20001c94

08001b68 <BSP_I2C1_ReadReg>:
{
 8001b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001b6a:	f242 7410 	movw	r4, #10000	; 0x2710
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	460a      	mov	r2, r1
 8001b72:	4601      	mov	r1, r0
 8001b74:	4808      	ldr	r0, [pc, #32]	; (8001b98 <BSP_I2C1_ReadReg+0x30>)
 8001b76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f002 f930 	bl	8003de0 <HAL_I2C_Mem_Read>
 8001b80:	b140      	cbz	r0, 8001b94 <BSP_I2C1_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <BSP_I2C1_ReadReg+0x30>)
 8001b84:	f002 f9e9 	bl	8003f5a <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b88:	2804      	cmp	r0, #4
 8001b8a:	bf0c      	ite	eq
 8001b8c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8001b90:	f06f 0003 	mvnne.w	r0, #3
}
 8001b94:	b004      	add	sp, #16
 8001b96:	bd10      	pop	{r4, pc}
 8001b98:	20001c94 	.word	0x20001c94

08001b9c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8001b9c:	f000 bfb6 	b.w	8002b0c <HAL_GetTick>

08001ba0 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32H743I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
  int32_t ret = BSP_ERROR_NONE;

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d149      	bne.n	8001c3c <BSP_IOEXPANDER_Init+0x9c>
 8001ba8:	2901      	cmp	r1, #1
 8001baa:	d147      	bne.n	8001c3c <BSP_IOEXPANDER_Init+0x9c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8001bac:	4d25      	ldr	r5, [pc, #148]	; (8001c44 <BSP_IOEXPANDER_Init+0xa4>)
 8001bae:	682e      	ldr	r6, [r5, #0]
 8001bb0:	2e00      	cmp	r6, #0
 8001bb2:	d141      	bne.n	8001c38 <BSP_IOEXPANDER_Init+0x98>
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
  int32_t              ret = BSP_ERROR_NONE;
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id, i;
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8001bb4:	f248 6384 	movw	r3, #34436	; 0x8684
  int32_t              ret = BSP_ERROR_NONE;
 8001bb8:	4634      	mov	r4, r6
  IOCtx.GetTick     = BSP_GetTick;

  for(i = 0U; i < 2U; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001bba:	4f23      	ldr	r7, [pc, #140]	; (8001c48 <BSP_IOEXPANDER_Init+0xa8>)
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8001bbc:	f8ad 3000 	strh.w	r3, [sp]
  IOCtx.Init        = BSP_I2C1_Init;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <BSP_IOEXPANDER_Init+0xac>)
 8001bc2:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <BSP_IOEXPANDER_Init+0xb0>)
 8001bc6:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <BSP_IOEXPANDER_Init+0xb4>)
 8001bca:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <BSP_IOEXPANDER_Init+0xb8>)
 8001bce:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <BSP_IOEXPANDER_Init+0xbc>)
 8001bd2:	9307      	str	r3, [sp, #28]
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8001bd4:	f81d 3006 	ldrb.w	r3, [sp, r6]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001bd8:	a902      	add	r1, sp, #8
 8001bda:	4638      	mov	r0, r7
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8001bdc:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(MFXSTM32L152_RegisterBusIO (&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8001be0:	f7ff fc78 	bl	80014d4 <MFXSTM32L152_RegisterBusIO>
 8001be4:	b980      	cbnz	r0, 8001c08 <BSP_IOEXPANDER_Init+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 8001be6:	a901      	add	r1, sp, #4
 8001be8:	4638      	mov	r0, r7
 8001bea:	f7fe ff58 	bl	8000a9e <MFXSTM32L152_ReadID>
 8001bee:	b988      	cbnz	r0, 8001c14 <BSP_IOEXPANDER_Init+0x74>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
    }
    else
    {
      if((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8001bf0:	9b01      	ldr	r3, [sp, #4]
 8001bf2:	f023 0302 	bic.w	r3, r3, #2
 8001bf6:	2b79      	cmp	r3, #121	; 0x79
 8001bf8:	d10f      	bne.n	8001c1a <BSP_IOEXPANDER_Init+0x7a>
      {
        if(MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8001bfa:	4813      	ldr	r0, [pc, #76]	; (8001c48 <BSP_IOEXPANDER_Init+0xa8>)
 8001bfc:	f7ff fb98 	bl	8001330 <MFXSTM32L152_Init>
 8001c00:	b170      	cbz	r0, 8001c20 <BSP_IOEXPANDER_Init+0x80>
        ret = BSP_ERROR_NO_INIT;
 8001c02:	f04f 34ff 	mov.w	r4, #4294967295
 8001c06:	e00f      	b.n	8001c28 <BSP_IOEXPANDER_Init+0x88>
      ret = BSP_ERROR_BUS_FAILURE;
 8001c08:	f06f 0407 	mvn.w	r4, #7
  for(i = 0U; i < 2U; i++)
 8001c0c:	2e01      	cmp	r6, #1
 8001c0e:	d0f8      	beq.n	8001c02 <BSP_IOEXPANDER_Init+0x62>
 8001c10:	2601      	movs	r6, #1
 8001c12:	e7df      	b.n	8001bd4 <BSP_IOEXPANDER_Init+0x34>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c14:	f06f 0403 	mvn.w	r4, #3
 8001c18:	e7f8      	b.n	8001c0c <BSP_IOEXPANDER_Init+0x6c>
        }
        break;
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001c1a:	f06f 0406 	mvn.w	r4, #6
 8001c1e:	e7f5      	b.n	8001c0c <BSP_IOEXPANDER_Init+0x6c>
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 8001c20:	2c00      	cmp	r4, #0
 8001c22:	d1ee      	bne.n	8001c02 <BSP_IOEXPANDER_Init+0x62>
        IO_Ctx[Instance].IsInitialized = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	602b      	str	r3, [r5, #0]
    if (IO_Ctx[Instance].IsInitialized == 1U)
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <BSP_IOEXPANDER_Init+0x92>
        Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <BSP_IOEXPANDER_Init+0xc0>)
 8001c30:	60ab      	str	r3, [r5, #8]
}
 8001c32:	4620      	mov	r0, r4
 8001c34:	b009      	add	sp, #36	; 0x24
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = BSP_ERROR_NONE;
 8001c38:	4604      	mov	r4, r0
 8001c3a:	e7f5      	b.n	8001c28 <BSP_IOEXPANDER_Init+0x88>
    ret = BSP_ERROR_WRONG_PARAM;
 8001c3c:	f06f 0401 	mvn.w	r4, #1
  return ret;
 8001c40:	e7f7      	b.n	8001c32 <BSP_IOEXPANDER_Init+0x92>
 8001c42:	bf00      	nop
 8001c44:	20000c28 	.word	0x20000c28
 8001c48:	20001ce8 	.word	0x20001ce8
 8001c4c:	080018a9 	.word	0x080018a9
 8001c50:	08001819 	.word	0x08001819
 8001c54:	08001b69 	.word	0x08001b69
 8001c58:	08001b35 	.word	0x08001b35
 8001c5c:	08001b9d 	.word	0x08001b9d
 8001c60:	2000007c 	.word	0x2000007c

08001c64 <BSP_IO_WritePin>:
{
 8001c64:	b508      	push	{r3, lr}
  if((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8001c66:	b970      	cbnz	r0, 8001c86 <BSP_IO_WritePin+0x22>
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <BSP_IO_WritePin+0x28>)
 8001c6a:	6858      	ldr	r0, [r3, #4]
 8001c6c:	07c0      	lsls	r0, r0, #31
 8001c6e:	d50a      	bpl.n	8001c86 <BSP_IO_WritePin+0x22>
    if(Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <BSP_IO_WritePin+0x2c>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4798      	blx	r3
 8001c7a:	2800      	cmp	r0, #0
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c7c:	bfac      	ite	ge
 8001c7e:	2000      	movge	r0, #0
 8001c80:	f06f 0004 	mvnlt.w	r0, #4
}
 8001c84:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001c86:	f06f 0001 	mvn.w	r0, #1
 8001c8a:	e7fb      	b.n	8001c84 <BSP_IO_WritePin+0x20>
 8001c8c:	20000c28 	.word	0x20000c28
 8001c90:	20001ce8 	.word	0x20001ce8

08001c94 <BSP_IOEXPANDER_ITConfig>:
  if(mfx_io_it_enabled == 0U)
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <BSP_IOEXPANDER_ITConfig+0x80>)
{
 8001c96:	b510      	push	{r4, lr}
  if(mfx_io_it_enabled == 0U)
 8001c98:	68dc      	ldr	r4, [r3, #12]
{
 8001c9a:	b088      	sub	sp, #32
  if(mfx_io_it_enabled == 0U)
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	d136      	bne.n	8001d0e <BSP_IOEXPANDER_ITConfig+0x7a>
    mfx_io_it_enabled = 1U;
 8001ca0:	2201      	movs	r2, #1
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8001ca2:	a903      	add	r1, sp, #12
 8001ca4:	481c      	ldr	r0, [pc, #112]	; (8001d18 <BSP_IOEXPANDER_ITConfig+0x84>)
    mfx_io_it_enabled = 1U;
 8001ca6:	60da      	str	r2, [r3, #12]
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <BSP_IOEXPANDER_ITConfig+0x88>)
 8001caa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001cb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001cbe:	9201      	str	r2, [sp, #4]
 8001cc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001cc6:	f042 0202 	orr.w	r2, r2, #2
 8001cca:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	9b02      	ldr	r3, [sp, #8]
    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 8001cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cde:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <BSP_IOEXPANDER_ITConfig+0x8c>)
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	e9cd 4405 	strd	r4, r4, [sp, #20]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8001ce6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 8001ce8:	f001 f978 	bl	8002fdc <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hio_exti, IO_EXTI_LINE);
 8001cec:	490d      	ldr	r1, [pc, #52]	; (8001d24 <BSP_IOEXPANDER_ITConfig+0x90>)
 8001cee:	480e      	ldr	r0, [pc, #56]	; (8001d28 <BSP_IOEXPANDER_ITConfig+0x94>)
 8001cf0:	f001 f96d 	bl	8002fce <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hio_exti,  HAL_EXTI_COMMON_CB_ID, IO_EXTI_Callback);
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <BSP_IOEXPANDER_ITConfig+0x98>)
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <BSP_IOEXPANDER_ITConfig+0x94>)
 8001cfa:	f001 f961 	bl	8002fc0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn), BSP_IOEXPANDER_IT_PRIORITY, 0x0F);
 8001cfe:	220f      	movs	r2, #15
 8001d00:	2017      	movs	r0, #23
 8001d02:	4611      	mov	r1, r2
 8001d04:	f000 ff3a 	bl	8002b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn));
 8001d08:	2017      	movs	r0, #23
 8001d0a:	f000 ff69 	bl	8002be0 <HAL_NVIC_EnableIRQ>
}
 8001d0e:	b008      	add	sp, #32
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	20000c28 	.word	0x20000c28
 8001d18:	58022000 	.word	0x58022000
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	11110000 	.word	0x11110000
 8001d24:	16300008 	.word	0x16300008
 8001d28:	20001ce0 	.word	0x20001ce0
 8001d2c:	08001d93 	.word	0x08001d93

08001d30 <BSP_IO_Init>:
{
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	460d      	mov	r5, r1
  if((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 8001d34:	bb18      	cbnz	r0, 8001d7e <BSP_IO_Init+0x4e>
 8001d36:	b311      	cbz	r1, 8001d7e <BSP_IO_Init+0x4e>
    if((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 8001d38:	4c13      	ldr	r4, [pc, #76]	; (8001d88 <BSP_IO_Init+0x58>)
 8001d3a:	6863      	ldr	r3, [r4, #4]
 8001d3c:	07db      	lsls	r3, r3, #31
 8001d3e:	d40f      	bmi.n	8001d60 <BSP_IO_Init+0x30>
      if(BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 8001d40:	2101      	movs	r1, #1
 8001d42:	f7ff ff2d 	bl	8001ba0 <BSP_IOEXPANDER_Init>
 8001d46:	b9b8      	cbnz	r0, 8001d78 <BSP_IO_Init+0x48>
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 8001d48:	68a3      	ldr	r3, [r4, #8]
 8001d4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001d4e:	480f      	ldr	r0, [pc, #60]	; (8001d8c <BSP_IO_Init+0x5c>)
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	4798      	blx	r3
 8001d54:	2800      	cmp	r0, #0
 8001d56:	db0f      	blt.n	8001d78 <BSP_IO_Init+0x48>
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6063      	str	r3, [r4, #4]
      if(Init->Mode >= IO_MODE_IT_RISING_EDGE)
 8001d60:	686b      	ldr	r3, [r5, #4]
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d901      	bls.n	8001d6a <BSP_IO_Init+0x3a>
        BSP_IOEXPANDER_ITConfig();
 8001d66:	f7ff ff95 	bl	8001c94 <BSP_IOEXPANDER_ITConfig>
      if(Io_Drv->Init(&Io_CompObj, Init) < 0)
 8001d6a:	68a3      	ldr	r3, [r4, #8]
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <BSP_IO_Init+0x5c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4798      	blx	r3
 8001d74:	2800      	cmp	r0, #0
 8001d76:	da05      	bge.n	8001d84 <BSP_IO_Init+0x54>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d78:	f06f 0004 	mvn.w	r0, #4
}
 8001d7c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001d7e:	f06f 0001 	mvn.w	r0, #1
 8001d82:	e7fb      	b.n	8001d7c <BSP_IO_Init+0x4c>
 8001d84:	2000      	movs	r0, #0
  return ret;
 8001d86:	e7f9      	b.n	8001d7c <BSP_IO_Init+0x4c>
 8001d88:	20000c28 	.word	0x20000c28
 8001d8c:	20001ce8 	.word	0x20001ce8

08001d90 <BSP_IO_Callback>:
}
 8001d90:	4770      	bx	lr

08001d92 <IO_EXTI_Callback>:
/**
  * @brief  IO EXTI touch detection callbacks.
  * @retval None
  */
static void IO_EXTI_Callback(void)
{
 8001d92:	b508      	push	{r3, lr}
  BSP_IO_Callback(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fffb 	bl	8001d90 <BSP_IO_Callback>
}
 8001d9a:	bd08      	pop	{r3, pc}

08001d9c <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001d9c:	b918      	cbnz	r0, 8001da6 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <BSP_LCD_GetPixelFormat+0x10>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001da6:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001daa:	4770      	bx	lr
 8001dac:	20001db8 	.word	0x20001db8

08001db0 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001db0:	b910      	cbnz	r0, 8001db8 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8001db2:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <BSP_LCD_SetActiveLayer+0x10>)
 8001db4:	6099      	str	r1, [r3, #8]
 8001db6:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001db8:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20001db8 	.word	0x20001db8

08001dc4 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001dc4:	b918      	cbnz	r0, 8001dce <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <BSP_LCD_GetXSize+0x10>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001dce:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001dd2:	4770      	bx	lr
 8001dd4:	20001db8 	.word	0x20001db8

08001dd8 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001dd8:	b918      	cbnz	r0, 8001de2 <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <BSP_LCD_GetYSize+0x10>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001de2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001de6:	4770      	bx	lr
 8001de8:	20001db8 	.word	0x20001db8

08001dec <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001dee:	2418      	movs	r4, #24
 8001df0:	4e0a      	ldr	r6, [pc, #40]	; (8001e1c <BSP_LCD_ReadPixel+0x30>)
 8001df2:	4d0b      	ldr	r5, [pc, #44]	; (8001e20 <BSP_LCD_ReadPixel+0x34>)
 8001df4:	2734      	movs	r7, #52	; 0x34
 8001df6:	4360      	muls	r0, r4
 8001df8:	1834      	adds	r4, r6, r0
 8001dfa:	5830      	ldr	r0, [r6, r0]
 8001dfc:	68a4      	ldr	r4, [r4, #8]
 8001dfe:	fb00 1202 	mla	r2, r0, r2, r1
 8001e02:	fb07 5404 	mla	r4, r7, r4, r5
 8001e06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001e08:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8001e0a:	b921      	cbnz	r1, 8001e16 <BSP_LCD_ReadPixel+0x2a>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001e0c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001e10:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
}
 8001e12:	2000      	movs	r0, #0
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001e16:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8001e1a:	e7f9      	b.n	8001e10 <BSP_LCD_ReadPixel+0x24>
 8001e1c:	20001db8 	.word	0x20001db8
 8001e20:	20001d10 	.word	0x20001d10

08001e24 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001e26:	2418      	movs	r4, #24
 8001e28:	4e0a      	ldr	r6, [pc, #40]	; (8001e54 <BSP_LCD_WritePixel+0x30>)
 8001e2a:	4d0b      	ldr	r5, [pc, #44]	; (8001e58 <BSP_LCD_WritePixel+0x34>)
 8001e2c:	2734      	movs	r7, #52	; 0x34
 8001e2e:	4360      	muls	r0, r4
 8001e30:	1834      	adds	r4, r6, r0
 8001e32:	5830      	ldr	r0, [r6, r0]
 8001e34:	68a4      	ldr	r4, [r4, #8]
 8001e36:	fb00 1202 	mla	r2, r0, r2, r1
 8001e3a:	fb07 5404 	mla	r4, r7, r4, r5
 8001e3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001e40:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8001e42:	b919      	cbnz	r1, 8001e4c <BSP_LCD_WritePixel+0x28>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001e44:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 8001e48:	2000      	movs	r0, #0
 8001e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8001e52:	e7f9      	b.n	8001e48 <BSP_LCD_WritePixel+0x24>
 8001e54:	20001db8 	.word	0x20001db8
 8001e58:	20001d10 	.word	0x20001d10

08001e5c <BSP_LCD_FillRGBRect>:
{
 8001e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001e62:	461f      	mov	r7, r3
 8001e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e66:	4682      	mov	sl, r0
 8001e68:	4689      	mov	r9, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	4416      	add	r6, r2
 8001e6e:	eb03 0801 	add.w	r8, r3, r1
      pData += PixelFormatFactor;
 8001e72:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8001ea0 <BSP_LCD_FillRGBRect+0x44>
  for(i = 0; i < Height; i++)
 8001e76:	42b4      	cmp	r4, r6
 8001e78:	d00f      	beq.n	8001e9a <BSP_LCD_FillRGBRect+0x3e>
 8001e7a:	464d      	mov	r5, r9
 8001e7c:	e009      	b.n	8001e92 <BSP_LCD_FillRGBRect+0x36>
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4629      	mov	r1, r5
 8001e82:	4622      	mov	r2, r4
 8001e84:	4650      	mov	r0, sl
 8001e86:	f7ff ffcd 	bl	8001e24 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8001e8a:	f8db 3000 	ldr.w	r3, [fp]
 8001e8e:	3501      	adds	r5, #1
 8001e90:	441f      	add	r7, r3
    for(j = 0; j < Width; j++)
 8001e92:	4545      	cmp	r5, r8
 8001e94:	d1f3      	bne.n	8001e7e <BSP_LCD_FillRGBRect+0x22>
 8001e96:	3401      	adds	r4, #1
 8001e98:	e7ed      	b.n	8001e76 <BSP_LCD_FillRGBRect+0x1a>
}
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ea0:	20000c38 	.word	0x20000c38

08001ea4 <BSP_LCD_DrawBitmap>:
{
 8001ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001ea8:	7b1c      	ldrb	r4, [r3, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8001eaa:	f04f 0e34 	mov.w	lr, #52	; 0x34
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001eae:	7add      	ldrb	r5, [r3, #11]
{
 8001eb0:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001eb2:	0424      	lsls	r4, r4, #16
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001eb4:	7d1e      	ldrb	r6, [r3, #20]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001eb6:	7ddf      	ldrb	r7, [r3, #23]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001eb8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8001ebc:	7a9d      	ldrb	r5, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001ebe:	0436      	lsls	r6, r6, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8001ec0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001fd8 <BSP_LCD_DrawBitmap+0x134>
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001ec4:	442c      	add	r4, r5
 8001ec6:	7b5d      	ldrb	r5, [r3, #13]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8001ec8:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8001fdc <BSP_LCD_DrawBitmap+0x138>
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001ecc:	eb04 6405 	add.w	r4, r4, r5, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001ed0:	7cdd      	ldrb	r5, [r3, #19]
 8001ed2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8001ed6:	7c9d      	ldrb	r5, [r3, #18]
 8001ed8:	442e      	add	r6, r5
 8001eda:	7d5d      	ldrb	r5, [r3, #21]
 8001edc:	eb06 6605 	add.w	r6, r6, r5, lsl #24
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001ee0:	7e1d      	ldrb	r5, [r3, #24]
 8001ee2:	042d      	lsls	r5, r5, #16
 8001ee4:	eb05 2507 	add.w	r5, r5, r7, lsl #8
 8001ee8:	7d9f      	ldrb	r7, [r3, #22]
 8001eea:	443d      	add	r5, r7
 8001eec:	7e5f      	ldrb	r7, [r3, #25]
 8001eee:	eb05 6b07 	add.w	fp, r5, r7, lsl #24
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8001ef2:	7f5f      	ldrb	r7, [r3, #29]
 8001ef4:	7f1d      	ldrb	r5, [r3, #28]
 8001ef6:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8001efa:	2718      	movs	r7, #24
 8001efc:	4347      	muls	r7, r0
 8001efe:	eb08 0c07 	add.w	ip, r8, r7
 8001f02:	f858 7007 	ldr.w	r7, [r8, r7]
 8001f06:	fb07 1202 	mla	r2, r7, r2, r1
 8001f0a:	4f30      	ldr	r7, [pc, #192]	; (8001fcc <BSP_LCD_DrawBitmap+0x128>)
 8001f0c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001f10:	fb0e 7101 	mla	r1, lr, r1, r7
 8001f14:	f8d9 7000 	ldr.w	r7, [r9]
 8001f18:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8001f1a:	fb07 1702 	mla	r7, r7, r2, r1
  if ((bit_pixel/8U) == 4U)
 8001f1e:	f1a5 0220 	sub.w	r2, r5, #32
 8001f22:	2a07      	cmp	r2, #7
 8001f24:	d91a      	bls.n	8001f5c <BSP_LCD_DrawBitmap+0xb8>
  else if ((bit_pixel/8U) == 2U)
 8001f26:	f1a5 0210 	sub.w	r2, r5, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 8001f2a:	2a07      	cmp	r2, #7
 8001f2c:	bf8c      	ite	hi
 8001f2e:	2201      	movhi	r2, #1
 8001f30:	2202      	movls	r2, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8001f32:	08ed      	lsrs	r5, r5, #3
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8001f34:	9202      	str	r2, [sp, #8]
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8001f36:	f10b 32ff 	add.w	r2, fp, #4294967295
  for(index=0; index < height; index++)
 8001f3a:	f04f 0a00 	mov.w	sl, #0
 8001f3e:	4375      	muls	r5, r6
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8001f40:	fb05 4402 	mla	r4, r5, r2, r4
 8001f44:	441c      	add	r4, r3
    pbmp -= width*(bit_pixel/8U);
 8001f46:	426b      	negs	r3, r5
 8001f48:	9303      	str	r3, [sp, #12]
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8001f4a:	2318      	movs	r3, #24
 8001f4c:	fb03 8800 	mla	r8, r3, r0, r8
  for(index=0; index < height; index++)
 8001f50:	45da      	cmp	sl, fp
 8001f52:	d105      	bne.n	8001f60 <BSP_LCD_DrawBitmap+0xbc>
}
 8001f54:	2000      	movs	r0, #0
 8001f56:	b005      	add	sp, #20
 8001f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	e7e8      	b.n	8001f32 <BSP_LCD_DrawBitmap+0x8e>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8001f60:	f8d8 300c 	ldr.w	r3, [r8, #12]
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
    break;
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8001f64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f68:	4d19      	ldr	r5, [pc, #100]	; (8001fd0 <BSP_LCD_DrawBitmap+0x12c>)
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8001f6a:	2b02      	cmp	r3, #2
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8001f6c:	4628      	mov	r0, r5
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8001f6e:	bf18      	it	ne
 8001f70:	2300      	movne	r3, #0
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8001f72:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8001f76:	22ff      	movs	r2, #255	; 0xff
  hlcd_dma2d.Init.OutputOffset = 0;
 8001f78:	2300      	movs	r3, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8001f7a:	652a      	str	r2, [r5, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8001f7c:	9a02      	ldr	r2, [sp, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8001f7e:	60eb      	str	r3, [r5, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001f80:	64eb      	str	r3, [r5, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8001f82:	e9c5 3211 	strd	r3, r2, [r5, #68]	; 0x44
  hlcd_dma2d.Instance = DMA2D;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <BSP_LCD_DrawBitmap+0x130>)
 8001f88:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8001f8a:	f000 fedf 	bl	8002d4c <HAL_DMA2D_Init>
 8001f8e:	b988      	cbnz	r0, 8001fb4 <BSP_LCD_DrawBitmap+0x110>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8001f90:	2101      	movs	r1, #1
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 ffb2 	bl	8002efc <HAL_DMA2D_ConfigLayer>
 8001f98:	b960      	cbnz	r0, 8001fb4 <BSP_LCD_DrawBitmap+0x110>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	463a      	mov	r2, r7
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4633      	mov	r3, r6
 8001fa6:	f000 ff0e 	bl	8002dc6 <HAL_DMA2D_Start>
 8001faa:	b918      	cbnz	r0, 8001fb4 <BSP_LCD_DrawBitmap+0x110>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8001fac:	2119      	movs	r1, #25
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f000 ff23 	bl	8002dfa <HAL_DMA2D_PollForTransfer>
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8001fb4:	f8d8 3000 	ldr.w	r3, [r8]
  for(index=0; index < height; index++)
 8001fb8:	f10a 0a01 	add.w	sl, sl, #1
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8001fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8001fc0:	fb02 7703 	mla	r7, r2, r3, r7
    pbmp -= width*(bit_pixel/8U);
 8001fc4:	9b03      	ldr	r3, [sp, #12]
 8001fc6:	441c      	add	r4, r3
 8001fc8:	e7c2      	b.n	8001f50 <BSP_LCD_DrawBitmap+0xac>
 8001fca:	bf00      	nop
 8001fcc:	20001d10 	.word	0x20001d10
 8001fd0:	20001dd0 	.word	0x20001dd0
 8001fd4:	52001000 	.word	0x52001000
 8001fd8:	20001db8 	.word	0x20001db8
 8001fdc:	20000c38 	.word	0x20000c38

08001fe0 <LL_FillBuffer.isra.0>:
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8001fe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001fe4:	460d      	mov	r5, r1
 8001fe6:	461f      	mov	r7, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
 8001fe8:	4925      	ldr	r1, [pc, #148]	; (8002080 <LL_FillBuffer.isra.0+0xa0>)
 8001fea:	2318      	movs	r3, #24
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8001fec:	4616      	mov	r6, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 8001fee:	fb03 1000 	mla	r0, r3, r0, r1
 8001ff2:	68c1      	ldr	r1, [r0, #12]
 8001ff4:	2902      	cmp	r1, #2
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
 8001ff6:	e9dd 2408 	ldrd	r2, r4, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8001ffa:	d13c      	bne.n	8002076 <LL_FillBuffer.isra.0+0x96>
    input_color = CONVERTRGB5652ARGB8888(Color);
 8001ffc:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8002000:	f240 230f 	movw	r3, #527	; 0x20f
 8002004:	f004 0c1f 	and.w	ip, r4, #31
 8002008:	4358      	muls	r0, r3
 800200a:	fb03 f30c 	mul.w	r3, r3, ip
 800200e:	3017      	adds	r0, #23
 8002010:	3317      	adds	r3, #23
 8002012:	0980      	lsrs	r0, r0, #6
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800201e:	f3c4 1045 	ubfx	r0, r4, #5, #6
 8002022:	f240 1403 	movw	r4, #259	; 0x103
 8002026:	4344      	muls	r4, r0
 8002028:	3421      	adds	r4, #33	; 0x21
 800202a:	09a4      	lsrs	r4, r4, #6
 800202c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002030:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002088 <LL_FillBuffer.isra.0+0xa8>
 8002034:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002038:	e9c8 3101 	strd	r3, r1, [r8, #4]
  hlcd_dma2d.Instance = DMA2D;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <LL_FillBuffer.isra.0+0xa4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800203e:	4640      	mov	r0, r8
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002040:	f8c8 200c 	str.w	r2, [r8, #12]
  hlcd_dma2d.Instance = DMA2D;
 8002044:	f8c8 3000 	str.w	r3, [r8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002048:	f000 fe80 	bl	8002d4c <HAL_DMA2D_Init>
 800204c:	b9a8      	cbnz	r0, 800207a <LL_FillBuffer.isra.0+0x9a>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800204e:	2101      	movs	r1, #1
 8002050:	4640      	mov	r0, r8
 8002052:	f000 ff53 	bl	8002efc <HAL_DMA2D_ConfigLayer>
 8002056:	b980      	cbnz	r0, 800207a <LL_FillBuffer.isra.0+0x9a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002058:	9700      	str	r7, [sp, #0]
 800205a:	4633      	mov	r3, r6
 800205c:	462a      	mov	r2, r5
 800205e:	4621      	mov	r1, r4
 8002060:	4640      	mov	r0, r8
 8002062:	f000 feb0 	bl	8002dc6 <HAL_DMA2D_Start>
 8002066:	b940      	cbnz	r0, 800207a <LL_FillBuffer.isra.0+0x9a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8002068:	2119      	movs	r1, #25
 800206a:	4640      	mov	r0, r8
}
 800206c:	b002      	add	sp, #8
 800206e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8002072:	f000 bec2 	b.w	8002dfa <HAL_DMA2D_PollForTransfer>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002076:	2100      	movs	r1, #0
 8002078:	e7da      	b.n	8002030 <LL_FillBuffer.isra.0+0x50>
}
 800207a:	b002      	add	sp, #8
 800207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002080:	20001db8 	.word	0x20001db8
 8002084:	52001000 	.word	0x52001000
 8002088:	20001dd0 	.word	0x20001dd0

0800208c <BSP_LCD_DrawHLine>:
{
 800208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800208e:	461f      	mov	r7, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002090:	2318      	movs	r3, #24
 8002092:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <BSP_LCD_DrawHLine+0x3c>)
 8002094:	4343      	muls	r3, r0
 8002096:	18e5      	adds	r5, r4, r3
 8002098:	58e3      	ldr	r3, [r4, r3]
 800209a:	2434      	movs	r4, #52	; 0x34
 800209c:	fb03 1102 	mla	r1, r3, r2, r1
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <BSP_LCD_DrawHLine+0x40>)
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <BSP_LCD_DrawHLine+0x44>)
 80020a4:	681e      	ldr	r6, [r3, #0]
 80020a6:	68ab      	ldr	r3, [r5, #8]
 80020a8:	fb04 2303 	mla	r3, r4, r3, r2
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80020ac:	2400      	movs	r4, #0
 80020ae:	463a      	mov	r2, r7
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80020b0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80020b2:	9b08      	ldr	r3, [sp, #32]
 80020b4:	9400      	str	r4, [sp, #0]
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2301      	movs	r3, #1
 80020ba:	fb06 5101 	mla	r1, r6, r1, r5
 80020be:	f7ff ff8f 	bl	8001fe0 <LL_FillBuffer.isra.0>
}
 80020c2:	4620      	mov	r0, r4
 80020c4:	b003      	add	sp, #12
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	20001db8 	.word	0x20001db8
 80020cc:	20000c38 	.word	0x20000c38
 80020d0:	20001d10 	.word	0x20001d10

080020d4 <BSP_LCD_DrawVLine>:
{
 80020d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80020d6:	2418      	movs	r4, #24
 80020d8:	4d0c      	ldr	r5, [pc, #48]	; (800210c <BSP_LCD_DrawVLine+0x38>)
 80020da:	4344      	muls	r4, r0
 80020dc:	192f      	adds	r7, r5, r4
 80020de:	592c      	ldr	r4, [r5, r4]
 80020e0:	4d0b      	ldr	r5, [pc, #44]	; (8002110 <BSP_LCD_DrawVLine+0x3c>)
 80020e2:	fb02 1104 	mla	r1, r2, r4, r1
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <BSP_LCD_DrawVLine+0x40>)
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80020e8:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80020ea:	6816      	ldr	r6, [r2, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	2734      	movs	r7, #52	; 0x34
 80020f0:	fb07 5202 	mla	r2, r7, r2, r5
 80020f4:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80020f6:	9a08      	ldr	r2, [sp, #32]
 80020f8:	9400      	str	r4, [sp, #0]
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	fb06 5101 	mla	r1, r6, r1, r5
 8002102:	f7ff ff6d 	bl	8001fe0 <LL_FillBuffer.isra.0>
}
 8002106:	2000      	movs	r0, #0
 8002108:	b003      	add	sp, #12
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210c:	20001db8 	.word	0x20001db8
 8002110:	20001d10 	.word	0x20001d10
 8002114:	20000c38 	.word	0x20000c38

08002118 <BSP_LCD_FillRect>:
{
 8002118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800211a:	461c      	mov	r4, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800211c:	2318      	movs	r3, #24
 800211e:	4d0d      	ldr	r5, [pc, #52]	; (8002154 <BSP_LCD_FillRect+0x3c>)
 8002120:	4343      	muls	r3, r0
 8002122:	18ef      	adds	r7, r5, r3
 8002124:	58eb      	ldr	r3, [r5, r3]
 8002126:	4d0c      	ldr	r5, [pc, #48]	; (8002158 <BSP_LCD_FillRect+0x40>)
 8002128:	fb02 1103 	mla	r1, r2, r3, r1
 800212c:	4a0b      	ldr	r2, [pc, #44]	; (800215c <BSP_LCD_FillRect+0x44>)
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800212e:	1b1b      	subs	r3, r3, r4
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002130:	6816      	ldr	r6, [r2, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	2734      	movs	r7, #52	; 0x34
 8002136:	fb07 5202 	mla	r2, r7, r2, r5
 800213a:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800213c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	4622      	mov	r2, r4
 8002144:	9b08      	ldr	r3, [sp, #32]
 8002146:	fb06 5101 	mla	r1, r6, r1, r5
 800214a:	f7ff ff49 	bl	8001fe0 <LL_FillBuffer.isra.0>
}
 800214e:	2000      	movs	r0, #0
 8002150:	b003      	add	sp, #12
 8002152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002154:	20001db8 	.word	0x20001db8
 8002158:	20001d10 	.word	0x20001d10
 800215c:	20000c38 	.word	0x20000c38

08002160 <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <BSP_LCD_Reset+0x60>)
 8002162:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002166:	f042 0201 	orr.w	r2, r2, #1
{
 800216a:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 800216c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8002170:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002176:	2504      	movs	r5, #4
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8002178:	4c12      	ldr	r4, [pc, #72]	; (80021c4 <BSP_LCD_Reset+0x64>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800217a:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 800217c:	f003 0301 	and.w	r3, r3, #1
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2700      	movs	r7, #0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8002182:	eb0d 0105 	add.w	r1, sp, r5
 8002186:	4620      	mov	r0, r4
  LCD_RESET_GPIO_CLK_ENABLE();
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800218e:	e9cd 5601 	strd	r5, r6, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8002196:	f000 ff21 	bl	8002fdc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800219a:	463a      	mov	r2, r7
 800219c:	4629      	mov	r1, r5
 800219e:	4620      	mov	r0, r4
 80021a0:	f001 f8aa 	bl	80032f8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80021a4:	2014      	movs	r0, #20
 80021a6:	f000 fcb7 	bl	8002b18 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80021aa:	4632      	mov	r2, r6
 80021ac:	4629      	mov	r1, r5
 80021ae:	4620      	mov	r0, r4
 80021b0:	f001 f8a2 	bl	80032f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 fcaf 	bl	8002b18 <HAL_Delay>
}
 80021ba:	b007      	add	sp, #28
 80021bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021be:	bf00      	nop
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020000 	.word	0x58020000

080021c8 <MX_LTDC_Init>:
  hltdc->Instance                = LTDC;
 80021c8:	2200      	movs	r2, #0
 80021ca:	4911      	ldr	r1, [pc, #68]	; (8002210 <MX_LTDC_Init+0x48>)
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 80021cc:	f04f 0c1d 	mov.w	ip, #29
  hltdc->Init.DEPolarity         = LTDC_DEPOLARITY_AL;
 80021d0:	6102      	str	r2, [r0, #16]
  hltdc->Instance                = LTDC;
 80021d2:	e9c0 1200 	strd	r1, r2, [r0]
  hltdc->Init.VSPolarity         = LTDC_VSPOLARITY_AL;
 80021d6:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 80021da:	2202      	movs	r2, #2
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 80021dc:	218f      	movs	r1, #143	; 0x8f
  hltdc->Init.HorizontalSync     = (AMPIRE640480_HSYNC - 1);
 80021de:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 80021e2:	2222      	movs	r2, #34	; 0x22
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 80021e4:	f240 3c0f 	movw	ip, #783	; 0x30f
  hltdc->Init.AccumulatedHBP     = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 80021e8:	e9c0 1207 	strd	r1, r2, [r0, #28]
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 80021ec:	f240 2202 	movw	r2, #514	; 0x202
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 80021f0:	f240 311f 	movw	r1, #799	; 0x31f
  hltdc->Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 80021f4:	e9c0 c209 	strd	ip, r2, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 80021f8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80021fc:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hltdc->Init.TotalHeigh         = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	8682      	strh	r2, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002206:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
  return HAL_LTDC_Init(hltdc);
 800220a:	f001 bf7b 	b.w	8004104 <HAL_LTDC_Init>
 800220e:	bf00      	nop
 8002210:	50001000 	.word	0x50001000

08002214 <MX_LTDC_ConfigLayer>:
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002216:	6915      	ldr	r5, [r2, #16]
{
 8002218:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.WindowX0 = Config->X0;
 800221a:	6817      	ldr	r7, [r2, #0]
  pLayerCfg.Alpha0 = 0;
 800221c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  pLayerCfg.WindowY0 = Config->Y0;
 8002220:	6896      	ldr	r6, [r2, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002222:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
  pLayerCfg.WindowX1 = Config->X1;
 8002226:	6854      	ldr	r4, [r2, #4]
  pLayerCfg.WindowY1 = Config->Y1;
 8002228:	68d3      	ldr	r3, [r2, #12]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800222a:	9505      	str	r5, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 800222c:	2500      	movs	r5, #0
  pLayerCfg.FBStartAdress = Config->Address;
 800222e:	6952      	ldr	r2, [r2, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002230:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002232:	1be4      	subs	r4, r4, r7
  pLayerCfg.WindowY1 = Config->Y1;
 8002234:	9304      	str	r3, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002236:	1b9b      	subs	r3, r3, r6
  pLayerCfg.FBStartAdress = Config->Address;
 8002238:	920a      	str	r2, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800223a:	460a      	mov	r2, r1
 800223c:	a901      	add	r1, sp, #4
  pLayerCfg.WindowX0 = Config->X0;
 800223e:	9701      	str	r7, [sp, #4]
  pLayerCfg.WindowY0 = Config->Y0;
 8002240:	9603      	str	r6, [sp, #12]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002242:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002244:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002246:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800224a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.Alpha0 = 0;
 800224e:	e9cd c506 	strd	ip, r5, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002252:	f04f 0c07 	mov.w	ip, #7
 8002256:	e9cd ec08 	strd	lr, ip, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800225a:	f001 ffbf 	bl	80041dc <HAL_LTDC_ConfigLayer>
}
 800225e:	b00f      	add	sp, #60	; 0x3c
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002264 <BSP_LCD_InitEx>:
{
 8002264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 8002268:	2901      	cmp	r1, #1
{
 800226a:	b0ab      	sub	sp, #172	; 0xac
 800226c:	4607      	mov	r7, r0
 800226e:	4699      	mov	r9, r3
 8002270:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 8002274:	f200 812a 	bhi.w	80024cc <BSP_LCD_InitEx+0x268>
 8002278:	2800      	cmp	r0, #0
 800227a:	f040 8127 	bne.w	80024cc <BSP_LCD_InitEx+0x268>
    switch(PixelFormat)
 800227e:	2a02      	cmp	r2, #2
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8002280:	4c94      	ldr	r4, [pc, #592]	; (80024d4 <BSP_LCD_InitEx+0x270>)
 8002282:	4b95      	ldr	r3, [pc, #596]	; (80024d8 <BSP_LCD_InitEx+0x274>)
    BSP_LCD_Reset(Instance);
 8002284:	f04f 0000 	mov.w	r0, #0
      PixelFormatFactor = 4U;
 8002288:	bf18      	it	ne
 800228a:	2104      	movne	r1, #4
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800228c:	4d93      	ldr	r5, [pc, #588]	; (80024dc <BSP_LCD_InitEx+0x278>)
      PixelFormatFactor = 2U;
 800228e:	bf06      	itte	eq
 8002290:	601a      	streq	r2, [r3, #0]
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8002292:	4617      	moveq	r7, r2
      PixelFormatFactor = 4U;
 8002294:	6019      	strne	r1, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002296:	f04f 0b80 	mov.w	fp, #128	; 0x80
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800229a:	60ea      	str	r2, [r5, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800229c:	f04f 0a01 	mov.w	sl, #1
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022a0:	2602      	movs	r6, #2
    Lcd_Ctx[Instance].YSize  = Height;
 80022a2:	e9c5 9800 	strd	r9, r8, [r5]
    BSP_LCD_Reset(Instance);
 80022a6:	f7ff ff5b 	bl	8002160 <BSP_LCD_Reset>
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80022aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 80022ae:	eb0d 010b 	add.w	r1, sp, fp
 80022b2:	488b      	ldr	r0, [pc, #556]	; (80024e0 <BSP_LCD_InitEx+0x27c>)
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80022b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80022bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022c0:	9623      	str	r6, [sp, #140]	; 0x8c
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	9308      	str	r3, [sp, #32]
 80022c8:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80022ca:	e9cd ba20 	strd	fp, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 80022ce:	f000 fe85 	bl	8002fdc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 80022d2:	4652      	mov	r2, sl
 80022d4:	4659      	mov	r1, fp
 80022d6:	4882      	ldr	r0, [pc, #520]	; (80024e0 <BSP_LCD_InitEx+0x27c>)
 80022d8:	f001 f80e 	bl	80032f8 <HAL_GPIO_WritePin>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80022dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80022e0:	f04f 0b40 	mov.w	fp, #64	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80022e4:	a920      	add	r1, sp, #128	; 0x80
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80022e6:	ea43 030a 	orr.w	r3, r3, sl
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80022ea:	487e      	ldr	r0, [pc, #504]	; (80024e4 <BSP_LCD_InitEx+0x280>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80022ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80022f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022f4:	9623      	str	r6, [sp, #140]	; 0x8c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80022f6:	ea03 030a 	and.w	r3, r3, sl
 80022fa:	9309      	str	r3, [sp, #36]	; 0x24
 80022fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80022fe:	e9cd ba20 	strd	fp, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002302:	f000 fe6b 	bl	8002fdc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002306:	4652      	mov	r2, sl
 8002308:	4659      	mov	r1, fp
 800230a:	4876      	ldr	r0, [pc, #472]	; (80024e4 <BSP_LCD_InitEx+0x280>)
 800230c:	f000 fff4 	bl	80032f8 <HAL_GPIO_WritePin>
    hlcd_ltdc.Instance = LTDC;
 8002310:	4a75      	ldr	r2, [pc, #468]	; (80024e8 <BSP_LCD_InitEx+0x284>)
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <BSP_LCD_InitEx+0x288>)
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002314:	a920      	add	r1, sp, #128	; 0x80
    hlcd_dma2d.Instance = DMA2D;
 8002316:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8002500 <BSP_LCD_InitEx+0x29c>
    hlcd_ltdc.Instance = LTDC;
 800231a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800231c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    hlcd_dma2d.Instance = DMA2D;
 8002320:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8002504 <BSP_LCD_InitEx+0x2a0>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002324:	f043 0308 	orr.w	r3, r3, #8
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002328:	4871      	ldr	r0, [pc, #452]	; (80024f0 <BSP_LCD_InitEx+0x28c>)
    hlcd_dma2d.Instance = DMA2D;
 800232a:	f8cb a000 	str.w	sl, [fp]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800232e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8002332:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	9304      	str	r3, [sp, #16]
 800233c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800233e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800234a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	9305      	str	r3, [sp, #20]
 8002354:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002356:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800235a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002362:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236a:	9306      	str	r3, [sp, #24]
 800236c:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800236e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002376:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800237a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	9307      	str	r3, [sp, #28]
 8002384:	9b07      	ldr	r3, [sp, #28]
    gpio_init_structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002386:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800238a:	e9cd 3620 	strd	r3, r6, [sp, #128]	; 0x80
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002390:	e9cd 3622 	strd	r3, r6, [sp, #136]	; 0x88
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002394:	260e      	movs	r6, #14
 8002396:	9624      	str	r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002398:	f000 fe20 	bl	8002fdc <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800239c:	f64f 73ff 	movw	r3, #65535	; 0xffff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80023a0:	a920      	add	r1, sp, #128	; 0x80
 80023a2:	4854      	ldr	r0, [pc, #336]	; (80024f4 <BSP_LCD_InitEx+0x290>)
    gpio_init_structure.Pin      = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80023a4:	9320      	str	r3, [sp, #128]	; 0x80
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023a6:	9624      	str	r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80023a8:	f000 fe18 	bl	8002fdc <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80023ac:	23ff      	movs	r3, #255	; 0xff
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023ae:	a920      	add	r1, sp, #128	; 0x80
 80023b0:	484b      	ldr	r0, [pc, #300]	; (80024e0 <BSP_LCD_InitEx+0x27c>)
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80023b2:	9320      	str	r3, [sp, #128]	; 0x80
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023b4:	9624      	str	r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023b6:	f000 fe11 	bl	8002fdc <HAL_GPIO_Init>


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80023ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80023c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80023ca:	f023 0308 	bic.w	r3, r3, #8
 80023ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
 80023d2:	f8db 3000 	ldr.w	r3, [fp]
 80023d6:	4553      	cmp	r3, sl
 80023d8:	d113      	bne.n	8002402 <BSP_LCD_InitEx+0x19e>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023da:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80023e6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	9303      	str	r3, [sp, #12]
 80023f0:	9b03      	ldr	r3, [sp, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80023f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	67e3      	str	r3, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80023fa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80023fc:	f023 0310 	bic.w	r3, r3, #16
 8002400:	67e3      	str	r3, [r4, #124]	; 0x7c
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 8002402:	4e3d      	ldr	r6, [pc, #244]	; (80024f8 <BSP_LCD_InitEx+0x294>)
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 8002404:	2308      	movs	r3, #8
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 8002406:	4c3d      	ldr	r4, [pc, #244]	; (80024fc <BSP_LCD_InitEx+0x298>)
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 8002408:	a910      	add	r1, sp, #64	; 0x40
 800240a:	a820      	add	r0, sp, #128	; 0x80
      io_comp_ctx_2.Init    = BSP_I2C1_Init;
 800240c:	9610      	str	r6, [sp, #64]	; 0x40
      io_comp_ctx_2.ReadReg = BSP_I2C1_ReadReg;
 800240e:	9414      	str	r4, [sp, #80]	; 0x50
 8002410:	46b2      	mov	sl, r6
      io_comp_ctx_2.Address = TS_EXC7200_I2C_ADDRESS;
 8002412:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
      if(EXC7200_RegisterBusIO(&ts_comp_obj_2, &io_comp_ctx_2) < 0)
 8002416:	f7fe f9df 	bl	80007d8 <EXC7200_RegisterBusIO>
 800241a:	2800      	cmp	r0, #0
 800241c:	4626      	mov	r6, r4
 800241e:	db13      	blt.n	8002448 <BSP_LCD_InitEx+0x1e4>
      else if(EXC7200_ReadID(&ts_comp_obj_2, &exc7200_id) < 0)
 8002420:	a902      	add	r1, sp, #8
 8002422:	a820      	add	r0, sp, #128	; 0x80
 8002424:	f7fe f985 	bl	8000732 <EXC7200_ReadID>
 8002428:	2800      	cmp	r0, #0
 800242a:	db0d      	blt.n	8002448 <BSP_LCD_InitEx+0x1e4>
        if(exc7200_id != EXC7200_ID)
 800242c:	9b02      	ldr	r3, [sp, #8]
 800242e:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 8002432:	d11a      	bne.n	800246a <BSP_LCD_InitEx+0x206>
        if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8002434:	482d      	ldr	r0, [pc, #180]	; (80024ec <BSP_LCD_InitEx+0x288>)
 8002436:	f7fe f8f5 	bl	8000624 <MX_LTDC_ClockConfig>
 800243a:	b338      	cbz	r0, 800248c <BSP_LCD_InitEx+0x228>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800243c:	f06f 0403 	mvn.w	r4, #3
}
 8002440:	4620      	mov	r0, r4
 8002442:	b02b      	add	sp, #172	; 0xac
 8002444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002448:	f06f 0404 	mvn.w	r4, #4
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 800244c:	2380      	movs	r3, #128	; 0x80
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800244e:	a90a      	add	r1, sp, #40	; 0x28
 8002450:	a816      	add	r0, sp, #88	; 0x58
        io_comp_ctx.Init    = BSP_I2C1_Init;
 8002452:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
        io_comp_ctx.ReadReg = BSP_I2C1_ReadReg;
 8002456:	960e      	str	r6, [sp, #56]	; 0x38
        io_comp_ctx.Address = TS_TS3510_I2C_ADDRESS;
 8002458:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        if(TS3510_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 800245c:	f7ff f936 	bl	80016cc <TS3510_RegisterBusIO>
 8002460:	2800      	cmp	r0, #0
 8002462:	da05      	bge.n	8002470 <BSP_LCD_InitEx+0x20c>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002464:	f06f 0404 	mvn.w	r4, #4
 8002468:	e7ea      	b.n	8002440 <BSP_LCD_InitEx+0x1dc>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800246a:	f06f 0406 	mvn.w	r4, #6
 800246e:	e7ed      	b.n	800244c <BSP_LCD_InitEx+0x1e8>
        else if(TS3510_ReadID(&ts_comp_obj, &ts3510_id) < 0)
 8002470:	a901      	add	r1, sp, #4
 8002472:	a816      	add	r0, sp, #88	; 0x58
 8002474:	f7ff f898 	bl	80015a8 <TS3510_ReadID>
 8002478:	2800      	cmp	r0, #0
 800247a:	dbf3      	blt.n	8002464 <BSP_LCD_InitEx+0x200>
            ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800247c:	9a01      	ldr	r2, [sp, #4]
 800247e:	f243 5310 	movw	r3, #13584	; 0x3510
 8002482:	429a      	cmp	r2, r3
 8002484:	bf18      	it	ne
 8002486:	f06f 0406 	mvnne.w	r4, #6
 800248a:	e7d9      	b.n	8002440 <BSP_LCD_InitEx+0x1dc>
        else if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800248c:	4642      	mov	r2, r8
 800248e:	4649      	mov	r1, r9
 8002490:	4816      	ldr	r0, [pc, #88]	; (80024ec <BSP_LCD_InitEx+0x288>)
 8002492:	f7ff fe99 	bl	80021c8 <MX_LTDC_Init>
 8002496:	2800      	cmp	r0, #0
 8002498:	d1d0      	bne.n	800243c <BSP_LCD_InitEx+0x1d8>
          if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800249a:	f000 f88b 	bl	80025b4 <BSP_SDRAM_Init>
 800249e:	4604      	mov	r4, r0
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d1cb      	bne.n	800243c <BSP_LCD_InitEx+0x1d8>
            config.Address     = LCD_FB_START_ADDRESS;
 80024a4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80024a8:	4601      	mov	r1, r0
 80024aa:	aa16      	add	r2, sp, #88	; 0x58
            config.PixelFormat = ltdc_pixel_format;
 80024ac:	971a      	str	r7, [sp, #104]	; 0x68
            config.Address     = LCD_FB_START_ADDRESS;
 80024ae:	931b      	str	r3, [sp, #108]	; 0x6c
            config.X1          = Width;
 80024b0:	e9cd 0916 	strd	r0, r9, [sp, #88]	; 0x58
            config.Y1          = Height;
 80024b4:	e9cd 0818 	strd	r0, r8, [sp, #96]	; 0x60
            if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <BSP_LCD_InitEx+0x288>)
 80024ba:	f7ff feab 	bl	8002214 <MX_LTDC_ConfigLayer>
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 80024be:	2301      	movs	r3, #1
              ret = BSP_ERROR_PERIPH_FAILURE;
 80024c0:	2800      	cmp	r0, #0
            Lcd_Ctx[Instance].ReloadEnable = 1U;
 80024c2:	616b      	str	r3, [r5, #20]
              ret = BSP_ERROR_PERIPH_FAILURE;
 80024c4:	bf18      	it	ne
 80024c6:	f06f 0403 	mvnne.w	r4, #3
 80024ca:	e7b9      	b.n	8002440 <BSP_LCD_InitEx+0x1dc>
    ret = BSP_ERROR_WRONG_PARAM;
 80024cc:	f06f 0401 	mvn.w	r4, #1
 80024d0:	e7b6      	b.n	8002440 <BSP_LCD_InitEx+0x1dc>
 80024d2:	bf00      	nop
 80024d4:	58024400 	.word	0x58024400
 80024d8:	20000c38 	.word	0x20000c38
 80024dc:	20001db8 	.word	0x20001db8
 80024e0:	58022800 	.word	0x58022800
 80024e4:	58020000 	.word	0x58020000
 80024e8:	50001000 	.word	0x50001000
 80024ec:	20001d10 	.word	0x20001d10
 80024f0:	58022000 	.word	0x58022000
 80024f4:	58022400 	.word	0x58022400
 80024f8:	080018a9 	.word	0x080018a9
 80024fc:	08001b69 	.word	0x08001b69
 8002500:	20001dd0 	.word	0x20001dd0
 8002504:	52001000 	.word	0x52001000

08002508 <BSP_LCD_Init>:
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002508:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
{
 800250c:	b507      	push	{r0, r1, r2, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800250e:	2200      	movs	r2, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002516:	f7ff fea5 	bl	8002264 <BSP_LCD_InitEx>
}
 800251a:	b003      	add	sp, #12
 800251c:	f85d fb04 	ldr.w	pc, [sp], #4

08002520 <BSP_LCD_DisplayOn>:
{
 8002520:	b510      	push	{r4, lr}
  if(Instance >= LCD_INSTANCES_NBR)
 8002522:	4604      	mov	r4, r0
 8002524:	b988      	cbnz	r0, 800254a <BSP_LCD_DisplayOn+0x2a>
    __HAL_LTDC_ENABLE(&hlcd_ltdc);
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <BSP_LCD_DisplayOn+0x30>)
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	480a      	ldr	r0, [pc, #40]	; (8002554 <BSP_LCD_DisplayOn+0x34>)
    __HAL_LTDC_ENABLE(&hlcd_ltdc);
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	6993      	ldr	r3, [r2, #24]
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6193      	str	r3, [r2, #24]
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_SET);
 8002536:	2201      	movs	r2, #1
 8002538:	f000 fede 	bl	80032f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <BSP_LCD_DisplayOn+0x38>)
 800253e:	2201      	movs	r2, #1
 8002540:	2140      	movs	r1, #64	; 0x40
 8002542:	f000 fed9 	bl	80032f8 <HAL_GPIO_WritePin>
    ret = BSP_ERROR_NONE;
 8002546:	4620      	mov	r0, r4
}
 8002548:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800254a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800254e:	e7fb      	b.n	8002548 <BSP_LCD_DisplayOn+0x28>
 8002550:	20001d10 	.word	0x20001d10
 8002554:	58022800 	.word	0x58022800
 8002558:	58020000 	.word	0x58020000

0800255c <MX_SDRAM_BANK2_Init>:

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800255c:	2201      	movs	r2, #1
 800255e:	4914      	ldr	r1, [pc, #80]	; (80025b0 <MX_SDRAM_BANK2_Init+0x54>)
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 8002560:	2302      	movs	r3, #2
{
 8002562:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8002564:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002568:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800256a:	2104      	movs	r1, #4
 800256c:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800256e:	2440      	movs	r4, #64	; 0x40
{
 8002570:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002572:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002576:	f44f 72c0 	mov.w	r2, #384	; 0x180
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 800257a:	9307      	str	r3, [sp, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800257c:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8002586:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800258a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800258e:	e9c0 4209 	strd	r4, r2, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8002592:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 8002594:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8002598:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 800259a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800259e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80025a2:	f003 f8d5 	bl	8005750 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
}
 80025a6:	3000      	adds	r0, #0
 80025a8:	bf18      	it	ne
 80025aa:	2001      	movne	r0, #1
 80025ac:	b008      	add	sp, #32
 80025ae:	bd10      	pop	{r4, pc}
 80025b0:	52004140 	.word	0x52004140

080025b4 <BSP_SDRAM_Init>:
{
 80025b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(Instance >= SDRAM_INSTANCES_NBR)
 80025b8:	4605      	mov	r5, r0
{
 80025ba:	b08e      	sub	sp, #56	; 0x38
  if(Instance >= SDRAM_INSTANCES_NBR)
 80025bc:	2800      	cmp	r0, #0
 80025be:	f040 80e9 	bne.w	8002794 <BSP_SDRAM_Init+0x1e0>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025c2:	4b77      	ldr	r3, [pc, #476]	; (80027a0 <BSP_SDRAM_Init+0x1ec>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80025c4:	f04f 0803 	mov.w	r8, #3

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80025c8:	ac0e      	add	r4, sp, #56	; 0x38
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80025ca:	4876      	ldr	r0, [pc, #472]	; (80027a4 <BSP_SDRAM_Init+0x1f0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80025cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 80025d0:	4f75      	ldr	r7, [pc, #468]	; (80027a8 <BSP_SDRAM_Init+0x1f4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80025d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025d6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80025da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80025de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025e2:	9201      	str	r2, [sp, #4]
 80025e4:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80025e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80025f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80025f6:	f002 0201 	and.w	r2, r2, #1
 80025fa:	9202      	str	r2, [sp, #8]
 80025fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002602:	f042 0208 	orr.w	r2, r2, #8
 8002606:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800260a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800260e:	f002 0208 	and.w	r2, r2, #8
 8002612:	9203      	str	r2, [sp, #12]
 8002614:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002616:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800261a:	f042 0210 	orr.w	r2, r2, #16
 800261e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002622:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002626:	f002 0210 	and.w	r2, r2, #16
 800262a:	9204      	str	r2, [sp, #16]
 800262c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800262e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800263a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800263e:	f002 0220 	and.w	r2, r2, #32
 8002642:	9205      	str	r2, [sp, #20]
 8002644:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002646:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800264a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002652:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002656:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800265a:	9206      	str	r2, [sp, #24]
 800265c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800265e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002666:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800266a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800266e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002672:	9207      	str	r2, [sp, #28]
 8002674:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800267a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002682:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	9308      	str	r3, [sp, #32]
 800268e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002690:	2301      	movs	r3, #1
 8002692:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002696:	230c      	movs	r3, #12
 8002698:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800269c:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026a0:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80026a4:	4621      	mov	r1, r4
 80026a6:	f000 fc99 	bl	8002fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80026aa:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80026ae:	4621      	mov	r1, r4
 80026b0:	483e      	ldr	r0, [pc, #248]	; (80027ac <BSP_SDRAM_Init+0x1f8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80026b2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80026b4:	f000 fc92 	bl	8002fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80026b8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80026bc:	4621      	mov	r1, r4
 80026be:	483c      	ldr	r0, [pc, #240]	; (80027b0 <BSP_SDRAM_Init+0x1fc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80026c0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80026c2:	f000 fc8b 	bl	8002fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 80026c6:	f248 133f 	movw	r3, #33087	; 0x813f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80026ca:	4621      	mov	r1, r4
 80026cc:	4839      	ldr	r0, [pc, #228]	; (80027b4 <BSP_SDRAM_Init+0x200>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |\
 80026ce:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80026d0:	f000 fc84 	bl	8002fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80026d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80026d8:	4621      	mov	r1, r4
 80026da:	4837      	ldr	r0, [pc, #220]	; (80027b8 <BSP_SDRAM_Init+0x204>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80026dc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80026de:	f000 fc7d 	bl	8002fdc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80026e2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80026e6:	4621      	mov	r1, r4
 80026e8:	4834      	ldr	r0, [pc, #208]	; (80027bc <BSP_SDRAM_Init+0x208>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80026ea:	4c35      	ldr	r4, [pc, #212]	; (80027c0 <BSP_SDRAM_Init+0x20c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80026ec:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80026ee:	f000 fc75 	bl	8002fdc <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80026f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80026fa:	f240 2002 	movw	r0, #514	; 0x202
 80026fe:	f640 0208 	movw	r2, #2056	; 0x808
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002702:	4626      	mov	r6, r4
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002704:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8002708:	e9c4 131c 	strd	r1, r3, [r4, #112]	; 0x70
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800270c:	e9c4 0220 	strd	r0, r2, [r4, #128]	; 0x80
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8002710:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8002712:	2220      	movs	r2, #32
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002714:	e9c4 351e 	strd	r3, r5, [r4, #120]	; 0x78
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8002718:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
  mdma_handle.Init.BufferTransferLength     = 128;
 800271c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <BSP_SDRAM_Init+0x210>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8002726:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800272a:	f846 3f6c 	str.w	r3, [r6, #108]!

  /* De-initialize the Stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800272e:	4630      	mov	r0, r6
  __HAL_LINKDMA(hSdram, hmdma, mdma_handle);
 8002730:	633e      	str	r6, [r7, #48]	; 0x30
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8002732:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8002736:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
  HAL_MDMA_DeInit(&mdma_handle);
 800273a:	f001 fde7 	bl	800430c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 800273e:	4630      	mov	r0, r6
 8002740:	f001 fd75 	bl	800422e <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8002744:	462a      	mov	r2, r5
 8002746:	210f      	movs	r1, #15
 8002748:	207a      	movs	r0, #122	; 0x7a
 800274a:	f000 fa17 	bl	8002b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800274e:	207a      	movs	r0, #122	; 0x7a
 8002750:	f000 fa46 	bl	8002be0 <HAL_NVIC_EnableIRQ>
      if(MX_SDRAM_BANK2_Init(&hsdram[Instance]) != HAL_OK)
 8002754:	4638      	mov	r0, r7
 8002756:	f7ff ff01 	bl	800255c <MX_SDRAM_BANK2_Init>
 800275a:	b9f0      	cbnz	r0, 800279a <BSP_SDRAM_Init+0x1e6>
        pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800275c:	2308      	movs	r3, #8
        pRegMode.BurstType       = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 800275e:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 8002762:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
        pRegMode.RefreshMode     = IS42S32800G_AUTOREFRESH_MODE_CMD;
 8002766:	e9c4 3836 	strd	r3, r8, [r4, #216]	; 0xd8
        pRegMode.RefreshRate     = REFRESH_COUNT;
 800276a:	f240 6303 	movw	r3, #1539	; 0x603
        pRegMode.BurstLength     = IS42S32800G_BURST_LENGTH_1;
 800276e:	e9c4 3038 	strd	r3, r0, [r4, #224]	; 0xe0
        pRegMode.CASLatency      = IS42S32800G_CAS_LATENCY_3;
 8002772:	2330      	movs	r3, #48	; 0x30
        pRegMode.OperationMode   = IS42S32800G_OPERATING_MODE_STANDARD;
 8002774:	e9c4 303b 	strd	r3, r0, [r4, #236]	; 0xec
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 8002778:	f44f 7300 	mov.w	r3, #512	; 0x200
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 800277c:	4638      	mov	r0, r7
        pRegMode.WriteBurstMode  = IS42S32800G_WRITEBURST_MODE_SINGLE;
 800277e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        if(IS42S32800G_Init(&hsdram[Instance], &pRegMode) != IS42S32800G_OK)
 8002782:	f7fe f8b1 	bl	80008e8 <IS42S32800G_Init>
          ret =  BSP_ERROR_COMPONENT_FAILURE;
 8002786:	2800      	cmp	r0, #0
 8002788:	bf18      	it	ne
 800278a:	f06f 0004 	mvnne.w	r0, #4
}
 800278e:	b00e      	add	sp, #56	; 0x38
 8002790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8002794:	f06f 0001 	mvn.w	r0, #1
 8002798:	e7f9      	b.n	800278e <BSP_SDRAM_Init+0x1da>
        ret = BSP_ERROR_NO_INIT;
 800279a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800279e:	e7f6      	b.n	800278e <BSP_SDRAM_Init+0x1da>
 80027a0:	58024400 	.word	0x58024400
 80027a4:	58020c00 	.word	0x58020c00
 80027a8:	20001e38 	.word	0x20001e38
 80027ac:	58021000 	.word	0x58021000
 80027b0:	58021400 	.word	0x58021400
 80027b4:	58021800 	.word	0x58021800
 80027b8:	58021c00 	.word	0x58021c00
 80027bc:	58022000 	.word	0x58022000
 80027c0:	20000c3c 	.word	0x20000c3c
 80027c4:	52000040 	.word	0x52000040

080027c8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80027c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027cc:	460d      	mov	r5, r1
 80027ce:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80027d0:	2800      	cmp	r0, #0
 80027d2:	f040 808a 	bne.w	80028ea <BSP_TS_Init+0x122>
 80027d6:	680b      	ldr	r3, [r1, #0]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80027de:	f080 8084 	bcs.w	80028ea <BSP_TS_Init+0x122>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80027e2:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80027e4:	1e51      	subs	r1, r2, #1
 80027e6:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 80027ea:	d27e      	bcs.n	80028ea <BSP_TS_Init+0x122>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf28      	it	cs
 80027f0:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80027f2:	68ea      	ldr	r2, [r5, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d878      	bhi.n	80028ea <BSP_TS_Init+0x122>
  EXC7200_IO_t              IOCtx;
  static EXC7200_Object_t   EXC7200Obj;
  uint32_t exc7200_id       = 0U;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 80027f8:	2308      	movs	r3, #8
  IOCtx.DeInit      = BSP_I2C1_DeInit;
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 80027fa:	4c3d      	ldr	r4, [pc, #244]	; (80028f0 <BSP_TS_Init+0x128>)
  IOCtx.Init        = BSP_I2C1_Init;
 80027fc:	4e3d      	ldr	r6, [pc, #244]	; (80028f4 <BSP_TS_Init+0x12c>)
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 80027fe:	4f3e      	ldr	r7, [pc, #248]	; (80028f8 <BSP_TS_Init+0x130>)
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002800:	eb0d 0103 	add.w	r1, sp, r3
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 8002804:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8002908 <BSP_TS_Init+0x140>
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002808:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800290c <BSP_TS_Init+0x144>
  IOCtx.GetTick     = BSP_GetTick;
 800280c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8002910 <BSP_TS_Init+0x148>
  uint32_t exc7200_id       = 0U;
 8002810:	9001      	str	r0, [sp, #4]
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002812:	4620      	mov	r0, r4
  IOCtx.Address     = TS_EXC7200_I2C_ADDRESS;
 8002814:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C1_Init;
 8002818:	9602      	str	r6, [sp, #8]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 800281a:	9703      	str	r7, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
 800281c:	f8cd 8018 	str.w	r8, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002820:	f8cd 9014 	str.w	r9, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8002824:	f8cd a01c 	str.w	sl, [sp, #28]
  if(EXC7200_RegisterBusIO(&EXC7200Obj, &IOCtx) != EXC7200_OK)
 8002828:	f7fd ffd6 	bl	80007d8 <EXC7200_RegisterBusIO>
 800282c:	b1b0      	cbz	r0, 800285c <BSP_TS_Init+0x94>
static int32_t TS3510_Probe(uint32_t Instance)
{
  int32_t ret              = BSP_ERROR_NONE;
  TS3510_IO_t              IOCtx;
  static TS3510_Object_t   TS3510Obj;
  uint32_t ts3510_id       = 0U;
 800282e:	2300      	movs	r3, #0
  IOCtx.DeInit      = BSP_I2C1_DeInit;
  IOCtx.ReadReg     = BSP_I2C1_ReadReg;
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002830:	a902      	add	r1, sp, #8
  IOCtx.GetTick     = BSP_GetTick;
 8002832:	f8cd a01c 	str.w	sl, [sp, #28]
  uint32_t ts3510_id       = 0U;
 8002836:	9301      	str	r3, [sp, #4]
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8002838:	2380      	movs	r3, #128	; 0x80
  IOCtx.DeInit      = BSP_I2C1_DeInit;
 800283a:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 800283e:	4e2f      	ldr	r6, [pc, #188]	; (80028fc <BSP_TS_Init+0x134>)
  IOCtx.Address     = TS_TS3510_I2C_ADDRESS;
 8002840:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 8002844:	4630      	mov	r0, r6
  IOCtx.WriteReg    = BSP_I2C1_WriteReg;
 8002846:	e9cd 9805 	strd	r9, r8, [sp, #20]
  if(TS3510_RegisterBusIO(&TS3510Obj, &IOCtx) != TS3510_OK)
 800284a:	f7fe ff3f 	bl	80016cc <TS3510_RegisterBusIO>
 800284e:	2800      	cmp	r0, #0
 8002850:	d034      	beq.n	80028bc <BSP_TS_Init+0xf4>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002852:	f06f 0006 	mvn.w	r0, #6
}
 8002856:	b008      	add	sp, #32
 8002858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if(EXC7200_ReadID(&EXC7200Obj, &exc7200_id) != EXC7200_OK)
 800285c:	a901      	add	r1, sp, #4
 800285e:	4620      	mov	r0, r4
 8002860:	f7fd ff67 	bl	8000732 <EXC7200_ReadID>
 8002864:	2800      	cmp	r0, #0
 8002866:	d1e2      	bne.n	800282e <BSP_TS_Init+0x66>
  else if(exc7200_id != EXC7200_ID)
 8002868:	9b01      	ldr	r3, [sp, #4]
 800286a:	f5b3 4fe4 	cmp.w	r3, #29184	; 0x7200
 800286e:	d1de      	bne.n	800282e <BSP_TS_Init+0x66>
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <BSP_TS_Init+0x138>)
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 8002872:	4620      	mov	r0, r4
    Ts_CompObj[Instance] = &EXC7200Obj;
 8002874:	6524      	str	r4, [r4, #80]	; 0x50
    Ts_Drv = (TS_Drv_t *) &EXC7200_TS_Driver;
 8002876:	6563      	str	r3, [r4, #84]	; 0x54
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != EXC7200_OK)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4798      	blx	r3
 800287c:	2800      	cmp	r0, #0
 800287e:	d1d6      	bne.n	800282e <BSP_TS_Init+0x66>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8002880:	682b      	ldr	r3, [r5, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8002882:	a902      	add	r1, sp, #8
 8002884:	6d20      	ldr	r0, [r4, #80]	; 0x50
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8002886:	65a3      	str	r3, [r4, #88]	; 0x58
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8002888:	686b      	ldr	r3, [r5, #4]
 800288a:	65e3      	str	r3, [r4, #92]	; 0x5c
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800288c:	68ab      	ldr	r3, [r5, #8]
 800288e:	6623      	str	r3, [r4, #96]	; 0x60
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8002890:	68eb      	ldr	r3, [r5, #12]
 8002892:	6663      	str	r3, [r4, #100]	; 0x64
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8002894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4798      	blx	r3
 800289a:	2800      	cmp	r0, #0
 800289c:	db22      	blt.n	80028e4 <BSP_TS_Init+0x11c>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800289e:	9b03      	ldr	r3, [sp, #12]
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80028a0:	2000      	movs	r0, #0
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80028a2:	682a      	ldr	r2, [r5, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80028a4:	66a3      	str	r3, [r4, #104]	; 0x68
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80028a6:	9b04      	ldr	r3, [sp, #16]
 80028a8:	66e3      	str	r3, [r4, #108]	; 0x6c
        Ts_Ctx[Instance].PreviousX[0] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80028aa:	68eb      	ldr	r3, [r5, #12]
 80028ac:	441a      	add	r2, r3
 80028ae:	3201      	adds	r2, #1
 80028b0:	6722      	str	r2, [r4, #112]	; 0x70
        Ts_Ctx[Instance].PreviousY[0] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80028b2:	686a      	ldr	r2, [r5, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3301      	adds	r3, #1
 80028b8:	6763      	str	r3, [r4, #116]	; 0x74
 80028ba:	e7cc      	b.n	8002856 <BSP_TS_Init+0x8e>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(TS3510_ReadID(&TS3510Obj, &ts3510_id) != TS3510_OK)
 80028bc:	a901      	add	r1, sp, #4
 80028be:	4630      	mov	r0, r6
 80028c0:	f7fe fe72 	bl	80015a8 <TS3510_ReadID>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d1c4      	bne.n	8002852 <BSP_TS_Init+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ts3510_id != TS3510_ID)
 80028c8:	9a01      	ldr	r2, [sp, #4]
 80028ca:	f243 5310 	movw	r3, #13584	; 0x3510
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d1bf      	bne.n	8002852 <BSP_TS_Init+0x8a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &TS3510Obj;
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <BSP_TS_Init+0x13c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 80028d4:	4630      	mov	r0, r6
    Ts_CompObj[Instance] = &TS3510Obj;
 80028d6:	6526      	str	r6, [r4, #80]	; 0x50
    Ts_Drv = (TS_Drv_t *) &TS3510_TS_Driver;
 80028d8:	6563      	str	r3, [r4, #84]	; 0x54
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != TS3510_OK)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4798      	blx	r3
 80028de:	2800      	cmp	r0, #0
 80028e0:	d0ce      	beq.n	8002880 <BSP_TS_Init+0xb8>
 80028e2:	e7b6      	b.n	8002852 <BSP_TS_Init+0x8a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80028e4:	f06f 0004 	mvn.w	r0, #4
 80028e8:	e7b5      	b.n	8002856 <BSP_TS_Init+0x8e>
    ret = BSP_ERROR_WRONG_PARAM;
 80028ea:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80028ee:	e7b2      	b.n	8002856 <BSP_TS_Init+0x8e>
 80028f0:	20000d34 	.word	0x20000d34
 80028f4:	080018a9 	.word	0x080018a9
 80028f8:	08001819 	.word	0x08001819
 80028fc:	20000d5c 	.word	0x20000d5c
 8002900:	20000000 	.word	0x20000000
 8002904:	200000d0 	.word	0x200000d0
 8002908:	08001b69 	.word	0x08001b69
 800290c:	08001b35 	.word	0x08001b35
 8002910:	08001b9d 	.word	0x08001b9d

08002914 <BSP_TS_GetState>:
{
 8002914:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002918:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 800291a:	2800      	cmp	r0, #0
 800291c:	d14f      	bne.n	80029be <BSP_TS_GetState+0xaa>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800291e:	4c29      	ldr	r4, [pc, #164]	; (80029c4 <BSP_TS_GetState+0xb0>)
 8002920:	a901      	add	r1, sp, #4
 8002922:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002924:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	4798      	blx	r3
 800292a:	2800      	cmp	r0, #0
 800292c:	4623      	mov	r3, r4
 800292e:	db43      	blt.n	80029b8 <BSP_TS_GetState+0xa4>
    else if(state.TouchDetected != 0U)
 8002930:	9801      	ldr	r0, [sp, #4]
 8002932:	e9d4 c71c 	ldrd	ip, r7, [r4, #112]	; 0x70
 8002936:	2800      	cmp	r0, #0
 8002938:	d03a      	beq.n	80029b0 <BSP_TS_GetState+0x9c>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800293a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800293c:	f8d3 8068 	ldr.w	r8, [r3, #104]	; 0x68
 8002940:	072a      	lsls	r2, r5, #28
      y_oriented = state.TouchY;
 8002942:	e9dd e102 	ldrd	lr, r1, [sp, #8]
      x_oriented = state.TouchX;
 8002946:	bf53      	iteet	pl
 8002948:	4674      	movpl	r4, lr
        x_oriented = state.TouchY;
 800294a:	460c      	movmi	r4, r1
        y_oriented = state.TouchX;
 800294c:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 800294e:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8002950:	f015 0f02 	tst.w	r5, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8002954:	bf1c      	itt	ne
 8002956:	f108 34ff 	addne.w	r4, r8, #4294967295
 800295a:	eba4 040e 	subne.w	r4, r4, lr
 800295e:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8002962:	076d      	lsls	r5, r5, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002964:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8002966:	bf48      	it	mi
 8002968:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800296c:	436c      	muls	r4, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800296e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
      TS_State->TouchDetected = state.TouchDetected;
 8002970:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002972:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8002974:	6e58      	ldr	r0, [r3, #100]	; 0x64
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002976:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800297a:	fbb2 f2fe 	udiv	r2, r2, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800297e:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8002980:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8002982:	60b2      	str	r2, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8002984:	bf8c      	ite	hi
 8002986:	eba4 050c 	subhi.w	r5, r4, ip
 800298a:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800298e:	42ba      	cmp	r2, r7
 8002990:	bf8c      	ite	hi
 8002992:	1bd1      	subhi	r1, r2, r7
 8002994:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8002996:	42a8      	cmp	r0, r5
 8002998:	d301      	bcc.n	800299e <BSP_TS_GetState+0x8a>
 800299a:	4288      	cmp	r0, r1
 800299c:	d205      	bcs.n	80029aa <BSP_TS_GetState+0x96>
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800299e:	e9c3 421c 	strd	r4, r2, [r3, #112]	; 0x70
  int32_t ret = BSP_ERROR_NONE;
 80029a2:	2000      	movs	r0, #0
}
 80029a4:	b004      	add	sp, #16
 80029a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80029aa:	e9c6 c701 	strd	ip, r7, [r6, #4]
 80029ae:	e7f8      	b.n	80029a2 <BSP_TS_GetState+0x8e>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80029b0:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80029b4:	60b7      	str	r7, [r6, #8]
 80029b6:	e7f5      	b.n	80029a4 <BSP_TS_GetState+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80029b8:	f06f 0004 	mvn.w	r0, #4
 80029bc:	e7f2      	b.n	80029a4 <BSP_TS_GetState+0x90>
    ret = BSP_ERROR_WRONG_PARAM;
 80029be:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80029c2:	e7ef      	b.n	80029a4 <BSP_TS_GetState+0x90>
 80029c4:	20000d34 	.word	0x20000d34

080029c8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c8:	491a      	ldr	r1, [pc, #104]	; (8002a34 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029ca:	481b      	ldr	r0, [pc, #108]	; (8002a38 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029cc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80029d4:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <SystemInit+0x74>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80029e8:	681c      	ldr	r4, [r3, #0]
 80029ea:	4020      	ands	r0, r4
 80029ec:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029f0:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029f2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002a0a:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <SystemInit+0x78>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1a:	d202      	bcs.n	8002a22 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <SystemInit+0x7c>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <SystemInit+0x80>)
 8002a24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a28:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a2e:	608b      	str	r3, [r1, #8]
#endif  


}
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	5c001000 	.word	0x5c001000
 8002a44:	51008108 	.word	0x51008108
 8002a48:	52004000 	.word	0x52004000

08002a4c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a52:	4e0f      	ldr	r6, [pc, #60]	; (8002a90 <HAL_InitTick+0x40>)
{
 8002a54:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8002a56:	7830      	ldrb	r0, [r6, #0]
 8002a58:	b908      	cbnz	r0, 8002a5e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_InitTick+0x44>)
 8002a64:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a68:	6810      	ldr	r0, [r2, #0]
 8002a6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a6e:	f000 f8c5 	bl	8002bfc <HAL_SYSTICK_Config>
 8002a72:	4604      	mov	r4, r0
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a78:	2d0f      	cmp	r5, #15
 8002a7a:	d8ee      	bhi.n	8002a5a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f000 f87a 	bl	8002b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a88:	6075      	str	r5, [r6, #4]
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	e7e6      	b.n	8002a5c <HAL_InitTick+0xc>
 8002a8e:	bf00      	nop
 8002a90:	20000108 	.word	0x20000108
 8002a94:	20000100 	.word	0x20000100

08002a98 <HAL_Init>:
{
 8002a98:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	f000 f85c 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002aa0:	f001 ff10 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8002aa4:	490f      	ldr	r1, [pc, #60]	; (8002ae4 <HAL_Init+0x4c>)
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_Init+0x50>)
 8002aa8:	698b      	ldr	r3, [r1, #24]
 8002aaa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab6:	698b      	ldr	r3, [r1, #24]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <HAL_Init+0x54>)
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa20 f303 	lsr.w	r3, r0, r3
 8002ac8:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_Init+0x58>)
 8002acc:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	200f      	movs	r0, #15
 8002ad0:	f7ff ffbe 	bl	8002a50 <HAL_InitTick>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	b918      	cbnz	r0, 8002ae0 <HAL_Init+0x48>
  HAL_MspInit();
 8002ad8:	f7ff ffb8 	bl	8002a4c <HAL_MspInit>
}
 8002adc:	4620      	mov	r0, r4
 8002ade:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ae0:	2401      	movs	r4, #1
 8002ae2:	e7fb      	b.n	8002adc <HAL_Init+0x44>
 8002ae4:	58024400 	.word	0x58024400
 8002ae8:	08006ec0 	.word	0x08006ec0
 8002aec:	20000104 	.word	0x20000104
 8002af0:	20000100 	.word	0x20000100

08002af4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <HAL_IncTick+0x10>)
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_IncTick+0x14>)
 8002af8:	6811      	ldr	r1, [r2, #0]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	440b      	add	r3, r1
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20001e6c 	.word	0x20001e6c
 8002b08:	20000108 	.word	0x20000108

08002b0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b0c:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <HAL_GetTick+0x8>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20001e6c 	.word	0x20001e6c

08002b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b18:	b538      	push	{r3, r4, r5, lr}
 8002b1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fff6 	bl	8002b0c <HAL_GetTick>
 8002b20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002b24:	bf1e      	ittt	ne
 8002b26:	4b04      	ldrne	r3, [pc, #16]	; (8002b38 <HAL_Delay+0x20>)
 8002b28:	781b      	ldrbne	r3, [r3, #0]
 8002b2a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	1b40      	subs	r0, r0, r5
 8002b32:	42a0      	cmp	r0, r4
 8002b34:	d3fa      	bcc.n	8002b2c <HAL_Delay+0x14>
  {
  }
}
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	20000108 	.word	0x20000108

08002b3c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002b3c:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <HAL_GetREVID+0x8>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
}
 8002b40:	0c00      	lsrs	r0, r0, #16
 8002b42:	4770      	bx	lr
 8002b44:	5c001000 	.word	0x5c001000

08002b48 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8002b48:	4a02      	ldr	r2, [pc, #8]	; (8002b54 <HAL_EnableCompensationCell+0xc>)
 8002b4a:	6a13      	ldr	r3, [r2, #32]
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6213      	str	r3, [r2, #32]
}
 8002b52:	4770      	bx	lr
 8002b54:	58000400 	.word	0x58000400

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b58:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002b72:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002b74:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7e:	b570      	push	{r4, r5, r6, lr}
 8002b80:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b82:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b86:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	2d04      	cmp	r5, #4
 8002b92:	bf28      	it	cs
 8002b94:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9c:	bf8c      	ite	hi
 8002b9e:	3c03      	subhi	r4, #3
 8002ba0:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	ea21 0303 	bic.w	r3, r1, r3
 8002ba8:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	fa06 f404 	lsl.w	r4, r6, r4
 8002bb0:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	ea43 0304 	orr.w	r3, r3, r4
 8002bb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002bbc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002bbe:	db06      	blt.n	8002bce <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002bc4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002bc8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	f000 000f 	and.w	r0, r0, #15
 8002bd2:	4a02      	ldr	r2, [pc, #8]	; (8002bdc <HAL_NVIC_SetPriority+0x60>)
 8002bd4:	5413      	strb	r3, [r2, r0]
 8002bd6:	e7f9      	b.n	8002bcc <HAL_NVIC_SetPriority+0x50>
 8002bd8:	e000ed00 	.word	0xe000ed00
 8002bdc:	e000ed14 	.word	0xe000ed14

08002be0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	db08      	blt.n	8002bf6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be4:	0942      	lsrs	r2, r0, #5
 8002be6:	2301      	movs	r3, #1
 8002be8:	f000 001f 	and.w	r0, r0, #31
 8002bec:	fa03 f000 	lsl.w	r0, r3, r0
 8002bf0:	4b01      	ldr	r3, [pc, #4]	; (8002bf8 <HAL_NVIC_EnableIRQ+0x18>)
 8002bf2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	3801      	subs	r0, #1
 8002bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c02:	d20a      	bcs.n	8002c1a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	21f0      	movs	r1, #240	; 0xf0
 8002c08:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c28:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_MPU_Disable+0x18>)
 8002c2e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c36:	2200      	movs	r2, #0
 8002c38:	4b02      	ldr	r3, [pc, #8]	; (8002c44 <HAL_MPU_Disable+0x1c>)
 8002c3a:	605a      	str	r2, [r3, #4]
}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00
 8002c44:	e000ed90 	.word	0xe000ed90

08002c48 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c48:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c4a:	f040 0001 	orr.w	r0, r0, #1
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_MPU_Enable+0x20>)
 8002c50:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c52:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c5e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00
 8002c68:	e000ed90 	.word	0xe000ed90

08002c6c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c6c:	7843      	ldrb	r3, [r0, #1]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_MPU_ConfigRegion+0x4c>)
{
 8002c70:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002c72:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002c74:	7801      	ldrb	r1, [r0, #0]
 8002c76:	b1d9      	cbz	r1, 8002cb0 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002c78:	6843      	ldr	r3, [r0, #4]
 8002c7a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c7c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c7e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c80:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c82:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c86:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c88:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c8a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c8e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c90:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c94:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c96:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c9a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ca0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ca2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ca6:	7a01      	ldrb	r1, [r0, #8]
 8002ca8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002cae:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8002cb0:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8002cb2:	6111      	str	r1, [r2, #16]
}
 8002cb4:	e7fb      	b.n	8002cae <HAL_MPU_ConfigRegion+0x42>
 8002cb6:	bf00      	nop
 8002cb8:	e000ed90 	.word	0xe000ed90

08002cbc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002cbc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002cbe:	6804      	ldr	r4, [r0, #0]
 8002cc0:	9d04      	ldr	r5, [sp, #16]
 8002cc2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002cc4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002cc8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002ccc:	4333      	orrs	r3, r6
 8002cce:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002cd0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002cd2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002cd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cd8:	d130      	bne.n	8002d3c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002cda:	6886      	ldr	r6, [r0, #8]
 8002cdc:	b11e      	cbz	r6, 8002ce6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002cde:	2e01      	cmp	r6, #1
 8002ce0:	d103      	bne.n	8002cea <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002ce2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002ce6:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cea:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002cec:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002cf0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002cf4:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cf6:	d107      	bne.n	8002d08 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002cf8:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002cfa:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002cfc:	02c9      	lsls	r1, r1, #11
 8002cfe:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002d02:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002d06:	e7ee      	b.n	8002ce6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d08:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002d0a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d0e:	d10a      	bne.n	8002d26 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002d10:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002d12:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d14:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002d16:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d18:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002d1c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002d20:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002d24:	e7df      	b.n	8002ce6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002d26:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002d28:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d2a:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8002d2c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d2e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002d32:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002d36:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002d3a:	e7d4      	b.n	8002ce6 <DMA2D_SetConfig+0x2a>
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d40:	d101      	bne.n	8002d46 <DMA2D_SetConfig+0x8a>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 8002d42:	6161      	str	r1, [r4, #20]
 8002d44:	e7d0      	b.n	8002ce8 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d46:	60e1      	str	r1, [r4, #12]
}
 8002d48:	e7ce      	b.n	8002ce8 <DMA2D_SetConfig+0x2c>

08002d4a <HAL_DMA2D_MspInit>:
}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_DMA2D_Init>:
{
 8002d4c:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8002d4e:	4604      	mov	r4, r0
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d036      	beq.n	8002dc2 <HAL_DMA2D_Init+0x76>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d54:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8002d58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d5c:	b91b      	cbnz	r3, 8002d66 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8002d5e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8002d62:	f7ff fff2 	bl	8002d4a <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d66:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002d68:	69e0      	ldr	r0, [r4, #28]
 8002d6a:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d6c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002d74:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8002d7c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d86:	68a2      	ldr	r2, [r4, #8]
 8002d88:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8002d8c:	4302      	orrs	r2, r0
 8002d8e:	f021 0101 	bic.w	r1, r1, #1
 8002d92:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d94:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	0c12      	lsrs	r2, r2, #16
 8002d9c:	0412      	lsls	r2, r2, #16
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002da2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8002da8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002dac:	0552      	lsls	r2, r2, #21
 8002dae:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002db2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002db4:	430a      	orrs	r2, r1
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002db8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dba:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002dbc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8002dc0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	e7fc      	b.n	8002dc0 <HAL_DMA2D_Init+0x74>

08002dc6 <HAL_DMA2D_Start>:
{
 8002dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002dc8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 8002dcc:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 8002dce:	2c01      	cmp	r4, #1
 8002dd0:	f04f 0402 	mov.w	r4, #2
 8002dd4:	d00f      	beq.n	8002df6 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dd6:	f880 4061 	strb.w	r4, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8002dda:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ddc:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002dde:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002de2:	9400      	str	r4, [sp, #0]
 8002de4:	f7ff ff6a 	bl	8002cbc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002de8:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8002dea:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002dec:	6813      	ldr	r3, [r2, #0]
 8002dee:	4333      	orrs	r3, r6
 8002df0:	6013      	str	r3, [r2, #0]
}
 8002df2:	b002      	add	sp, #8
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002df6:	4620      	mov	r0, r4
 8002df8:	e7fb      	b.n	8002df2 <HAL_DMA2D_Start+0x2c>

08002dfa <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8002dfa:	2300      	movs	r3, #0
{
 8002dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002dfe:	9301      	str	r3, [sp, #4]
{
 8002e00:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e02:	6803      	ldr	r3, [r0, #0]
{
 8002e04:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	07db      	lsls	r3, r3, #31
 8002e0a:	d417      	bmi.n	8002e3c <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e12:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002e14:	069e      	lsls	r6, r3, #26
 8002e16:	d506      	bpl.n	8002e26 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002e18:	f7ff fe78 	bl	8002b0c <HAL_GetTick>
 8002e1c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	06d2      	lsls	r2, r2, #27
 8002e24:	d543      	bpl.n	8002eae <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8002e2a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002e2c:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e2e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8002e30:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e34:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002e3c:	f7ff fe66 	bl	8002b0c <HAL_GetTick>
 8002e40:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	0792      	lsls	r2, r2, #30
 8002e48:	d4e0      	bmi.n	8002e0c <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002e4e:	9a01      	ldr	r2, [sp, #4]
 8002e50:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002e54:	d017      	beq.n	8002e86 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e56:	9a01      	ldr	r2, [sp, #4]
 8002e58:	0695      	lsls	r5, r2, #26
 8002e5a:	d503      	bpl.n	8002e64 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e5e:	f042 0202 	orr.w	r2, r2, #2
 8002e62:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e64:	9a01      	ldr	r2, [sp, #4]
 8002e66:	07d0      	lsls	r0, r2, #31
 8002e68:	d503      	bpl.n	8002e72 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e72:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e74:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002e76:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002e7a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8002e84:	e7d8      	b.n	8002e38 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8002e86:	1c69      	adds	r1, r5, #1
 8002e88:	d0dc      	beq.n	8002e44 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002e8a:	f7ff fe3f 	bl	8002b0c <HAL_GetTick>
 8002e8e:	1b80      	subs	r0, r0, r6
 8002e90:	42a8      	cmp	r0, r5
 8002e92:	d801      	bhi.n	8002e98 <HAL_DMA2D_PollForTransfer+0x9e>
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	d1d4      	bne.n	8002e42 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002e9a:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e9c:	f043 0320 	orr.w	r3, r3, #32
 8002ea0:	6663      	str	r3, [r4, #100]	; 0x64
          __HAL_UNLOCK(hdma2d);
 8002ea2:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002ea4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
          __HAL_UNLOCK(hdma2d);
 8002ea8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          return HAL_TIMEOUT;
 8002eac:	e7c4      	b.n	8002e38 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002eb2:	9a01      	ldr	r2, [sp, #4]
 8002eb4:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002eb8:	d016      	beq.n	8002ee8 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002eba:	9a01      	ldr	r2, [sp, #4]
 8002ebc:	0716      	lsls	r6, r2, #28
 8002ebe:	d503      	bpl.n	8002ec8 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ec0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ec2:	f042 0204 	orr.w	r2, r2, #4
 8002ec6:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ec8:	9a01      	ldr	r2, [sp, #4]
 8002eca:	0695      	lsls	r5, r2, #26
 8002ecc:	d503      	bpl.n	8002ed6 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ed0:	f042 0202 	orr.w	r2, r2, #2
 8002ed4:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ed6:	9a01      	ldr	r2, [sp, #4]
 8002ed8:	07d0      	lsls	r0, r2, #31
 8002eda:	d503      	bpl.n	8002ee4 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002edc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ee4:	2229      	movs	r2, #41	; 0x29
 8002ee6:	e7c5      	b.n	8002e74 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8002ee8:	1c69      	adds	r1, r5, #1
 8002eea:	d099      	beq.n	8002e20 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002eec:	f7ff fe0e 	bl	8002b0c <HAL_GetTick>
 8002ef0:	1b80      	subs	r0, r0, r6
 8002ef2:	42a8      	cmp	r0, r5
 8002ef4:	d8d0      	bhi.n	8002e98 <HAL_DMA2D_PollForTransfer+0x9e>
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d191      	bne.n	8002e1e <HAL_DMA2D_PollForTransfer+0x24>
 8002efa:	e7cd      	b.n	8002e98 <HAL_DMA2D_PollForTransfer+0x9e>

08002efc <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002efc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	f04f 0302 	mov.w	r3, #2
{
 8002f06:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002f08:	d03d      	beq.n	8002f86 <HAL_DMA2D_ConfigLayer+0x8a>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f0a:	241c      	movs	r4, #28
  __HAL_LOCK(hdma2d);
 8002f0c:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f0e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f12:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 8002f16:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002f1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f1c:	e9d4 650b 	ldrd	r6, r5, [r4, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002f20:	0513      	lsls	r3, r2, #20
 8002f22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f24:	f1a6 0709 	sub.w	r7, r6, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f28:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002f2c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f2e:	2f01      	cmp	r7, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f30:	ea43 0306 	orr.w	r3, r3, r6
 8002f34:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002f38:	6802      	ldr	r2, [r0, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f3a:	d80f      	bhi.n	8002f5c <HAL_DMA2D_ConfigLayer+0x60>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f3c:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 8002f40:	4f1d      	ldr	r7, [pc, #116]	; (8002fb8 <HAL_DMA2D_ConfigLayer+0xbc>)
 8002f42:	431e      	orrs	r6, r3
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f44:	bb49      	cbnz	r1, 8002f9a <HAL_DMA2D_ConfigLayer+0x9e>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f46:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f48:	403b      	ands	r3, r7
 8002f4a:	4333      	orrs	r3, r6
 8002f4c:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f50:	6193      	str	r3, [r2, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002f52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f58:	6293      	str	r3, [r2, #40]	; 0x28
 8002f5a:	e00e      	b.n	8002f7a <HAL_DMA2D_ConfigLayer+0x7e>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f5c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f60:	b199      	cbz	r1, 8002f8a <HAL_DMA2D_ConfigLayer+0x8e>
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002f62:	2e0b      	cmp	r6, #11
 8002f64:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002f66:	d122      	bne.n	8002fae <HAL_DMA2D_ConfigLayer+0xb2>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f68:	6c21      	ldr	r1, [r4, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f6a:	69d6      	ldr	r6, [r2, #28]
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f6c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f70:	4912      	ldr	r1, [pc, #72]	; (8002fbc <HAL_DMA2D_ConfigLayer+0xc0>)
 8002f72:	4031      	ands	r1, r6
 8002f74:	430b      	orrs	r3, r1
 8002f76:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f78:	6115      	str	r5, [r2, #16]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 8002f80:	2300      	movs	r3, #0
 8002f82:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  __HAL_LOCK(hdma2d);
 8002f86:	4618      	mov	r0, r3
}
 8002f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f8a:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8002f8c:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_DMA2D_ConfigLayer+0xbc>)
 8002f8e:	4021      	ands	r1, r4
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f96:	6193      	str	r3, [r2, #24]
 8002f98:	e7ef      	b.n	8002f7a <HAL_DMA2D_ConfigLayer+0x7e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f9a:	69d3      	ldr	r3, [r2, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002f9c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002fa0:	403b      	ands	r3, r7
 8002fa2:	4333      	orrs	r3, r6
 8002fa4:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fa8:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002faa:	6215      	str	r5, [r2, #32]
 8002fac:	e7e5      	b.n	8002f7a <HAL_DMA2D_ConfigLayer+0x7e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002fae:	69d4      	ldr	r4, [r2, #28]
 8002fb0:	4901      	ldr	r1, [pc, #4]	; (8002fb8 <HAL_DMA2D_ConfigLayer+0xbc>)
 8002fb2:	4021      	ands	r1, r4
 8002fb4:	e7de      	b.n	8002f74 <HAL_DMA2D_ConfigLayer+0x78>
 8002fb6:	bf00      	nop
 8002fb8:	00ccfff0 	.word	0x00ccfff0
 8002fbc:	00c0fff0 	.word	0x00c0fff0

08002fc0 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check null pointer */
  if (hexti == NULL)
 8002fc0:	b118      	cbz	r0, 8002fca <HAL_EXTI_RegisterCallback+0xa>
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 8002fc2:	b911      	cbnz	r1, 8002fca <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002fc4:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	4608      	mov	r0, r1
      break;
 8002fc8:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002fcc:	4770      	bx	lr

08002fce <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002fce:	b110      	cbz	r0, 8002fd6 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002fd0:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	4770      	bx	lr
    return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
  }
}
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fe0:	680b      	ldr	r3, [r1, #0]
{
 8002fe2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80031a8 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe8:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fec:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8002fee:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 8002ff0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80031ac <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ff4:	9a01      	ldr	r2, [sp, #4]
 8002ff6:	40da      	lsrs	r2, r3
 8002ff8:	d102      	bne.n	8003000 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 8002ffa:	b005      	add	sp, #20
 8002ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003000:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 8003002:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003004:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8003006:	ea17 0502 	ands.w	r5, r7, r2
 800300a:	f000 80b6 	beq.w	800317a <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800300e:	684a      	ldr	r2, [r1, #4]
 8003010:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003014:	2403      	movs	r4, #3
 8003016:	f022 0a10 	bic.w	sl, r2, #16
 800301a:	fa04 f40e 	lsl.w	r4, r4, lr
 800301e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8003022:	43e4      	mvns	r4, r4
 8003024:	2e01      	cmp	r6, #1
 8003026:	d810      	bhi.n	800304a <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8003028:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800302a:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	68ce      	ldr	r6, [r1, #12]
 8003030:	fa06 f60e 	lsl.w	r6, r6, lr
 8003034:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8003038:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800303a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800303c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003040:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8003044:	409e      	lsls	r6, r3
 8003046:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8003048:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800304a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304c:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003050:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003052:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003056:	fa06 f60e 	lsl.w	r6, r6, lr
 800305a:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 800305e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003060:	d114      	bne.n	800308c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8003062:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003066:	f003 0b07 	and.w	fp, r3, #7
 800306a:	270f      	movs	r7, #15
 800306c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003070:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003074:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003078:	fa07 f70b 	lsl.w	r7, r7, fp
 800307c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003080:	690e      	ldr	r6, [r1, #16]
 8003082:	fa06 f60b 	lsl.w	r6, r6, fp
 8003086:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003088:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 800308c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800308e:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003090:	f002 0603 	and.w	r6, r2, #3
 8003094:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003098:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 800309c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800309e:	00d4      	lsls	r4, r2, #3
 80030a0:	d56b      	bpl.n	800317a <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80030a6:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030aa:	f003 0703 	and.w	r7, r3, #3
 80030ae:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	f044 0402 	orr.w	r4, r4, #2
 80030b6:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030ba:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030bc:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80030c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80030c4:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80030c8:	f004 0402 	and.w	r4, r4, #2
 80030cc:	9403      	str	r4, [sp, #12]
 80030ce:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030d0:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80030d4:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030d8:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030dc:	4c31      	ldr	r4, [pc, #196]	; (80031a4 <HAL_GPIO_Init+0x1c8>)
 80030de:	42a0      	cmp	r0, r4
 80030e0:	d04d      	beq.n	800317e <HAL_GPIO_Init+0x1a2>
 80030e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030e6:	42a0      	cmp	r0, r4
 80030e8:	d04b      	beq.n	8003182 <HAL_GPIO_Init+0x1a6>
 80030ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030ee:	42a0      	cmp	r0, r4
 80030f0:	d049      	beq.n	8003186 <HAL_GPIO_Init+0x1aa>
 80030f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030f6:	42a0      	cmp	r0, r4
 80030f8:	d047      	beq.n	800318a <HAL_GPIO_Init+0x1ae>
 80030fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030fe:	42a0      	cmp	r0, r4
 8003100:	d045      	beq.n	800318e <HAL_GPIO_Init+0x1b2>
 8003102:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003106:	42a0      	cmp	r0, r4
 8003108:	d043      	beq.n	8003192 <HAL_GPIO_Init+0x1b6>
 800310a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800310e:	42a0      	cmp	r0, r4
 8003110:	d041      	beq.n	8003196 <HAL_GPIO_Init+0x1ba>
 8003112:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003116:	42a0      	cmp	r0, r4
 8003118:	d03f      	beq.n	800319a <HAL_GPIO_Init+0x1be>
 800311a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800311e:	42a0      	cmp	r0, r4
 8003120:	d03d      	beq.n	800319e <HAL_GPIO_Init+0x1c2>
 8003122:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003126:	42a0      	cmp	r0, r4
 8003128:	bf14      	ite	ne
 800312a:	240a      	movne	r4, #10
 800312c:	2409      	moveq	r4, #9
 800312e:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003130:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003132:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003136:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8003138:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 800313c:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8003140:	bf54      	ite	pl
 8003142:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003144:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003146:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8003148:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 800314c:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8003150:	bf54      	ite	pl
 8003152:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003154:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003156:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8003158:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800315c:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8003160:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8003164:	bf54      	ite	pl
 8003166:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003168:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800316a:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 800316c:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800316e:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8003170:	bf54      	ite	pl
 8003172:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003174:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8003176:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 800317a:	3301      	adds	r3, #1
 800317c:	e73a      	b.n	8002ff4 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800317e:	2400      	movs	r4, #0
 8003180:	e7d5      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003182:	2401      	movs	r4, #1
 8003184:	e7d3      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003186:	2402      	movs	r4, #2
 8003188:	e7d1      	b.n	800312e <HAL_GPIO_Init+0x152>
 800318a:	2403      	movs	r4, #3
 800318c:	e7cf      	b.n	800312e <HAL_GPIO_Init+0x152>
 800318e:	2404      	movs	r4, #4
 8003190:	e7cd      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003192:	2405      	movs	r4, #5
 8003194:	e7cb      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003196:	2406      	movs	r4, #6
 8003198:	e7c9      	b.n	800312e <HAL_GPIO_Init+0x152>
 800319a:	2407      	movs	r4, #7
 800319c:	e7c7      	b.n	800312e <HAL_GPIO_Init+0x152>
 800319e:	2408      	movs	r4, #8
 80031a0:	e7c5      	b.n	800312e <HAL_GPIO_Init+0x152>
 80031a2:	bf00      	nop
 80031a4:	58020000 	.word	0x58020000
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58000080 	.word	0x58000080

080031b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80031b4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80031b6:	4e4b      	ldr	r6, [pc, #300]	; (80032e4 <HAL_GPIO_DeInit+0x134>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80031b8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80032ec <HAL_GPIO_DeInit+0x13c>
 80031bc:	f8df a130 	ldr.w	sl, [pc, #304]	; 80032f0 <HAL_GPIO_DeInit+0x140>
 80031c0:	f8df b130 	ldr.w	fp, [pc, #304]	; 80032f4 <HAL_GPIO_DeInit+0x144>
  while ((GPIO_Pin >> position) != 0x00U)
 80031c4:	fa31 f302 	lsrs.w	r3, r1, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80031ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80031ce:	2301      	movs	r3, #1
 80031d0:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 80031d4:	ea1e 0401 	ands.w	r4, lr, r1
 80031d8:	d070      	beq.n	80032bc <HAL_GPIO_DeInit+0x10c>
 80031da:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80031de:	f002 0c03 	and.w	ip, r2, #3
 80031e2:	270f      	movs	r7, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80031e4:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <HAL_GPIO_DeInit+0x138>)
 80031e6:	f105 45b0 	add.w	r5, r5, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80031ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80031ee:	4298      	cmp	r0, r3
 80031f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80031f4:	fa07 f70c 	lsl.w	r7, r7, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031f8:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80031fc:	ea07 0808 	and.w	r8, r7, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003200:	d05e      	beq.n	80032c0 <HAL_GPIO_DeInit+0x110>
 8003202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003206:	4298      	cmp	r0, r3
 8003208:	d05c      	beq.n	80032c4 <HAL_GPIO_DeInit+0x114>
 800320a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320e:	4298      	cmp	r0, r3
 8003210:	d05a      	beq.n	80032c8 <HAL_GPIO_DeInit+0x118>
 8003212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003216:	4298      	cmp	r0, r3
 8003218:	d058      	beq.n	80032cc <HAL_GPIO_DeInit+0x11c>
 800321a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800321e:	4298      	cmp	r0, r3
 8003220:	d056      	beq.n	80032d0 <HAL_GPIO_DeInit+0x120>
 8003222:	4548      	cmp	r0, r9
 8003224:	d056      	beq.n	80032d4 <HAL_GPIO_DeInit+0x124>
 8003226:	4550      	cmp	r0, sl
 8003228:	d056      	beq.n	80032d8 <HAL_GPIO_DeInit+0x128>
 800322a:	4558      	cmp	r0, fp
 800322c:	d056      	beq.n	80032dc <HAL_GPIO_DeInit+0x12c>
 800322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003232:	4298      	cmp	r0, r3
 8003234:	d054      	beq.n	80032e0 <HAL_GPIO_DeInit+0x130>
 8003236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800323a:	4298      	cmp	r0, r3
 800323c:	bf0c      	ite	eq
 800323e:	2309      	moveq	r3, #9
 8003240:	230a      	movne	r3, #10
 8003242:	fa03 f30c 	lsl.w	r3, r3, ip
 8003246:	4543      	cmp	r3, r8
 8003248:	d117      	bne.n	800327a <HAL_GPIO_DeInit+0xca>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800324a:	6833      	ldr	r3, [r6, #0]
 800324c:	43e4      	mvns	r4, r4
 800324e:	4023      	ands	r3, r4
 8003250:	6033      	str	r3, [r6, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8003252:	6873      	ldr	r3, [r6, #4]
 8003254:	4023      	ands	r3, r4
 8003256:	6073      	str	r3, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	f8d3 c000 	ldr.w	ip, [r3]
 8003260:	ea04 0c0c 	and.w	ip, r4, ip
 8003264:	f8c3 c000 	str.w	ip, [r3]
        EXTI->FTSR1 &= ~(iocurrent);
 8003268:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800326c:	ea04 040c 	and.w	r4, r4, ip
 8003270:	605c      	str	r4, [r3, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003272:	68ab      	ldr	r3, [r5, #8]
 8003274:	ea23 0707 	bic.w	r7, r3, r7
 8003278:	60af      	str	r7, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800327a:	2503      	movs	r5, #3
 800327c:	0053      	lsls	r3, r2, #1
 800327e:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003280:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003284:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003288:	270f      	movs	r7, #15
 800328a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800328e:	431c      	orrs	r4, r3
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003290:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003292:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003296:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003298:	fa22 f405 	lsr.w	r4, r2, r5
 800329c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80032a0:	6a25      	ldr	r5, [r4, #32]
 80032a2:	ea25 0707 	bic.w	r7, r5, r7
 80032a6:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a8:	68c4      	ldr	r4, [r0, #12]
 80032aa:	401c      	ands	r4, r3
 80032ac:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ae:	6844      	ldr	r4, [r0, #4]
 80032b0:	ea24 040e 	bic.w	r4, r4, lr
 80032b4:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b6:	6884      	ldr	r4, [r0, #8]
 80032b8:	4023      	ands	r3, r4
 80032ba:	6083      	str	r3, [r0, #8]
    position++;
 80032bc:	3201      	adds	r2, #1
 80032be:	e781      	b.n	80031c4 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80032c0:	2300      	movs	r3, #0
 80032c2:	e7be      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e7bc      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e7ba      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032cc:	2303      	movs	r3, #3
 80032ce:	e7b8      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032d0:	2304      	movs	r3, #4
 80032d2:	e7b6      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032d4:	2305      	movs	r3, #5
 80032d6:	e7b4      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032d8:	2306      	movs	r3, #6
 80032da:	e7b2      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032dc:	2307      	movs	r3, #7
 80032de:	e7b0      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032e0:	2308      	movs	r3, #8
 80032e2:	e7ae      	b.n	8003242 <HAL_GPIO_DeInit+0x92>
 80032e4:	58000080 	.word	0x58000080
 80032e8:	58020000 	.word	0x58020000
 80032ec:	58021400 	.word	0x58021400
 80032f0:	58021800 	.word	0x58021800
 80032f4:	58021c00 	.word	0x58021c00

080032f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f8:	b10a      	cbz	r2, 80032fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032fa:	6181      	str	r1, [r0, #24]
  }
}
 80032fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032fe:	0409      	lsls	r1, r1, #16
 8003300:	e7fb      	b.n	80032fa <HAL_GPIO_WritePin+0x2>
	...

08003304 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003308:	6806      	ldr	r6, [r0, #0]
{
 800330a:	b085      	sub	sp, #20
 800330c:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800330e:	4630      	mov	r0, r6
 8003310:	f002 fb3c 	bl	800598c <USB_GetMode>
 8003314:	2801      	cmp	r0, #1
 8003316:	f040 80e0 	bne.w	80034da <HAL_HCD_IRQHandler+0x1d6>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800331a:	6828      	ldr	r0, [r5, #0]
 800331c:	f002 fb32 	bl	8005984 <USB_ReadInterrupts>
 8003320:	2800      	cmp	r0, #0
 8003322:	f000 80da 	beq.w	80034da <HAL_HCD_IRQHandler+0x1d6>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003326:	6828      	ldr	r0, [r5, #0]
 8003328:	f002 fb2c 	bl	8005984 <USB_ReadInterrupts>
 800332c:	0284      	lsls	r4, r0, #10
 800332e:	d503      	bpl.n	8003338 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003336:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003338:	6828      	ldr	r0, [r5, #0]
 800333a:	f002 fb23 	bl	8005984 <USB_ReadInterrupts>
 800333e:	02c0      	lsls	r0, r0, #11
 8003340:	d503      	bpl.n	800334a <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003342:	682b      	ldr	r3, [r5, #0]
 8003344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003348:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800334a:	6828      	ldr	r0, [r5, #0]
 800334c:	f002 fb1a 	bl	8005984 <USB_ReadInterrupts>
 8003350:	0141      	lsls	r1, r0, #5
 8003352:	d503      	bpl.n	800335c <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800335a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800335c:	6828      	ldr	r0, [r5, #0]
 800335e:	f002 fb11 	bl	8005984 <USB_ReadInterrupts>
 8003362:	0782      	lsls	r2, r0, #30
 8003364:	d502      	bpl.n	800336c <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	2202      	movs	r2, #2
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800336c:	6828      	ldr	r0, [r5, #0]
 800336e:	f002 fb09 	bl	8005984 <USB_ReadInterrupts>
 8003372:	0083      	lsls	r3, r0, #2
 8003374:	d50e      	bpl.n	8003394 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800337c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800337e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8003382:	07df      	lsls	r7, r3, #31
 8003384:	d406      	bmi.n	8003394 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003386:	4628      	mov	r0, r5
 8003388:	f7fd f980 	bl	800068c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800338c:	2101      	movs	r1, #1
 800338e:	6828      	ldr	r0, [r5, #0]
 8003390:	f002 fb00 	bl	8005994 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003394:	6828      	ldr	r0, [r5, #0]
 8003396:	f002 faf5 	bl	8005984 <USB_ReadInterrupts>
 800339a:	01c4      	lsls	r4, r0, #7
 800339c:	d53c      	bpl.n	8003418 <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339e:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033a0:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80033a4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80033a6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80033aa:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033ac:	9b03      	ldr	r3, [sp, #12]
 80033ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033b2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033b4:	9b02      	ldr	r3, [sp, #8]
 80033b6:	0798      	lsls	r0, r3, #30
 80033b8:	d509      	bpl.n	80033ce <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033ba:	9b02      	ldr	r3, [sp, #8]
 80033bc:	07d9      	lsls	r1, r3, #31
 80033be:	d502      	bpl.n	80033c6 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033c0:	4628      	mov	r0, r5
 80033c2:	f7fd f95f 	bl	8000684 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80033c6:	9b03      	ldr	r3, [sp, #12]
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033ce:	9b02      	ldr	r3, [sp, #8]
 80033d0:	071a      	lsls	r2, r3, #28
 80033d2:	d517      	bpl.n	8003404 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033d4:	9b03      	ldr	r3, [sp, #12]
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033dc:	9b02      	ldr	r3, [sp, #8]
 80033de:	075b      	lsls	r3, r3, #29
 80033e0:	f140 8086 	bpl.w	80034f0 <HAL_HCD_IRQHandler+0x1ec>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033e4:	69a9      	ldr	r1, [r5, #24]
 80033e6:	2902      	cmp	r1, #2
 80033e8:	d17a      	bne.n	80034e0 <HAL_HCD_IRQHandler+0x1dc>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033ea:	9b02      	ldr	r3, [sp, #8]
 80033ec:	6828      	ldr	r0, [r5, #0]
 80033ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033f6:	bf18      	it	ne
 80033f8:	2101      	movne	r1, #1
 80033fa:	f002 facb 	bl	8005994 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80033fe:	4628      	mov	r0, r5
 8003400:	f7fd f948 	bl	8000694 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003404:	9b02      	ldr	r3, [sp, #8]
 8003406:	069f      	lsls	r7, r3, #26
 8003408:	d503      	bpl.n	8003412 <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800340a:	9b03      	ldr	r3, [sp, #12]
 800340c:	f043 0320 	orr.w	r3, r3, #32
 8003410:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003412:	9b03      	ldr	r3, [sp, #12]
 8003414:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003418:	6828      	ldr	r0, [r5, #0]
 800341a:	f002 fab3 	bl	8005984 <USB_ReadInterrupts>
 800341e:	0704      	lsls	r4, r0, #28
 8003420:	d505      	bpl.n	800342e <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
 8003422:	4628      	mov	r0, r5
 8003424:	f7fd f92a 	bl	800067c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800342e:	6828      	ldr	r0, [r5, #0]
 8003430:	f002 faa8 	bl	8005984 <USB_ReadInterrupts>
 8003434:	0180      	lsls	r0, r0, #6
 8003436:	d512      	bpl.n	800345e <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003438:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800343a:	f04f 0900 	mov.w	r9, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800343e:	f002 fac6 	bl	80059ce <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003442:	2728      	movs	r7, #40	; 0x28
 8003444:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003448:	f04f 0802 	mov.w	r8, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003450:	68ab      	ldr	r3, [r5, #8]
 8003452:	6828      	ldr	r0, [r5, #0]
 8003454:	454b      	cmp	r3, r9
 8003456:	d84f      	bhi.n	80034f8 <HAL_HCD_IRQHandler+0x1f4>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345c:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800345e:	6828      	ldr	r0, [r5, #0]
 8003460:	f002 fa90 	bl	8005984 <USB_ReadInterrupts>
 8003464:	06c3      	lsls	r3, r0, #27
 8003466:	d538      	bpl.n	80034da <HAL_HCD_IRQHandler+0x1d6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003468:	682c      	ldr	r4, [r5, #0]
 800346a:	69a3      	ldr	r3, [r4, #24]
 800346c:	f023 0310 	bic.w	r3, r3, #16
 8003470:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 8003472:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003474:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8003478:	2a02      	cmp	r2, #2
 800347a:	d129      	bne.n	80034d0 <HAL_HCD_IRQHandler+0x1cc>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347c:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003480:	f1b8 0f00 	cmp.w	r8, #0
 8003484:	d024      	beq.n	80034d0 <HAL_HCD_IRQHandler+0x1cc>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003486:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800348a:	2728      	movs	r7, #40	; 0x28
 800348c:	fb07 5706 	mla	r7, r7, r6, r5
 8003490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003492:	b1e9      	cbz	r1, 80034d0 <HAL_HCD_IRQHandler+0x1cc>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003494:	4642      	mov	r2, r8
 8003496:	4620      	mov	r0, r4
 8003498:	f002 fa66 	bl	8005968 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800349c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800349e:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034a2:	4443      	add	r3, r8
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80034a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a8:	4443      	add	r3, r8
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80034ac:	0173      	lsls	r3, r6, #5
 80034ae:	18e2      	adds	r2, r4, r3
 80034b0:	6911      	ldr	r1, [r2, #16]
 80034b2:	4ab1      	ldr	r2, [pc, #708]	; (8003778 <HAL_HCD_IRQHandler+0x474>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	b15a      	cbz	r2, 80034d0 <HAL_HCD_IRQHandler+0x1cc>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034b8:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ba:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c2:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80034c4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d0:	682a      	ldr	r2, [r5, #0]
 80034d2:	6993      	ldr	r3, [r2, #24]
 80034d4:	f043 0310 	orr.w	r3, r3, #16
 80034d8:	6193      	str	r3, [r2, #24]
}
 80034da:	b005      	add	sp, #20
 80034dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034e0:	68eb      	ldr	r3, [r5, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d18b      	bne.n	80033fe <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
 80034e6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80034ea:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 80034ee:	e786      	b.n	80033fe <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034f0:	4628      	mov	r0, r5
 80034f2:	f7fd f8d3 	bl	800069c <HAL_HCD_PortDisabled_Callback>
 80034f6:	e785      	b.n	8003404 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034f8:	f009 030f 	and.w	r3, r9, #15
 80034fc:	9a00      	ldr	r2, [sp, #0]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	07d9      	lsls	r1, r3, #31
 8003504:	f140 8095 	bpl.w	8003632 <HAL_HCD_IRQHandler+0x32e>
 8003508:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800350c:	9a01      	ldr	r2, [sp, #4]
 800350e:	fa5f f689 	uxtb.w	r6, r9
 8003512:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8003516:	58d1      	ldr	r1, [r2, r3]
 8003518:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 800351c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003520:	eb0b 040a 	add.w	r4, fp, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003524:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003526:	f000 811d 	beq.w	8003764 <HAL_HCD_IRQHandler+0x460>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800352a:	074a      	lsls	r2, r1, #29
 800352c:	d513      	bpl.n	8003556 <HAL_HCD_IRQHandler+0x252>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800352e:	2104      	movs	r1, #4
 8003530:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003532:	68e1      	ldr	r1, [r4, #12]
 8003534:	f041 0102 	orr.w	r1, r1, #2
 8003538:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800353a:	68a1      	ldr	r1, [r4, #8]
 800353c:	0588      	lsls	r0, r1, #22
 800353e:	d54a      	bpl.n	80035d6 <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003540:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003542:	4631      	mov	r1, r6
 8003544:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800354c:	f002 fa44 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003554:	e0e6      	b.n	8003724 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003556:	68a1      	ldr	r1, [r4, #8]
 8003558:	05cb      	lsls	r3, r1, #23
 800355a:	d510      	bpl.n	800357e <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800355c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003560:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003564:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003566:	fb07 5106 	mla	r1, r7, r6, r5
 800356a:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800356e:	68e1      	ldr	r1, [r4, #12]
 8003570:	f041 0102 	orr.w	r1, r1, #2
 8003574:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003576:	4631      	mov	r1, r6
 8003578:	f002 fa2e 	bl	80059d8 <USB_HC_Halt>
 800357c:	e7dd      	b.n	800353a <HAL_HCD_IRQHandler+0x236>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800357e:	68a1      	ldr	r1, [r4, #8]
 8003580:	0689      	lsls	r1, r1, #26
 8003582:	d502      	bpl.n	800358a <HAL_HCD_IRQHandler+0x286>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003584:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003586:	60a1      	str	r1, [r4, #8]
 8003588:	e7d7      	b.n	800353a <HAL_HCD_IRQHandler+0x236>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800358a:	68a1      	ldr	r1, [r4, #8]
 800358c:	070a      	lsls	r2, r1, #28
 800358e:	d50e      	bpl.n	80035ae <HAL_HCD_IRQHandler+0x2aa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003590:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003592:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003596:	f041 0102 	orr.w	r1, r1, #2
 800359a:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800359c:	fb07 5106 	mla	r1, r7, r6, r5
 80035a0:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035a4:	2110      	movs	r1, #16
 80035a6:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035a8:	2108      	movs	r1, #8
 80035aa:	60a1      	str	r1, [r4, #8]
 80035ac:	e7e3      	b.n	8003576 <HAL_HCD_IRQHandler+0x272>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035ae:	68a1      	ldr	r1, [r4, #8]
 80035b0:	054b      	lsls	r3, r1, #21
 80035b2:	d5c2      	bpl.n	800353a <HAL_HCD_IRQHandler+0x236>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b4:	68e1      	ldr	r1, [r4, #12]
 80035b6:	f041 0102 	orr.w	r1, r1, #2
 80035ba:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035bc:	4631      	mov	r1, r6
 80035be:	f002 fa0b 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035c2:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035c4:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035c6:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035c8:	fb07 5106 	mla	r1, r7, r6, r5
 80035cc:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035d4:	e7d7      	b.n	8003586 <HAL_HCD_IRQHandler+0x282>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035d6:	68a1      	ldr	r1, [r4, #8]
 80035d8:	07c9      	lsls	r1, r1, #31
 80035da:	d548      	bpl.n	800366e <HAL_HCD_IRQHandler+0x36a>
    if (hhcd->Init.dma_enable != 0U)
 80035dc:	6929      	ldr	r1, [r5, #16]
 80035de:	b149      	cbz	r1, 80035f4 <HAL_HCD_IRQHandler+0x2f0>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035e0:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80035e2:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035e6:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80035ea:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 80035ee:	1a09      	subs	r1, r1, r0
 80035f0:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 80035f4:	fb07 5106 	mla	r1, r7, r6, r5
 80035f8:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035fa:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80035fc:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003600:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003602:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003604:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8003608:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 800360c:	d114      	bne.n	8003638 <HAL_HCD_IRQHandler+0x334>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360e:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003610:	4631      	mov	r1, r6
 8003612:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361a:	f002 f9dd 	bl	80059d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800361e:	2310      	movs	r3, #16
 8003620:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003622:	fb07 5606 	mla	r6, r7, r6, r5
 8003626:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003632:	f109 0901 	add.w	r9, r9, #1
 8003636:	e70b      	b.n	8003450 <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003638:	2a03      	cmp	r2, #3
 800363a:	d10d      	bne.n	8003658 <HAL_HCD_IRQHandler+0x354>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800363c:	f85b 000a 	ldr.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003640:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003642:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8003646:	f84b 000a 	str.w	r0, [fp, sl]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800364a:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	f7fd f827 	bl	80006a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003656:	e7e4      	b.n	8003622 <HAL_HCD_IRQHandler+0x31e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003658:	2a01      	cmp	r2, #1
 800365a:	d1e2      	bne.n	8003622 <HAL_HCD_IRQHandler+0x31e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800365c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003660:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003664:	f083 0301 	eor.w	r3, r3, #1
 8003668:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 800366c:	e7ef      	b.n	800364e <HAL_HCD_IRQHandler+0x34a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800366e:	68a1      	ldr	r1, [r4, #8]
 8003670:	078a      	lsls	r2, r1, #30
 8003672:	d542      	bpl.n	80036fa <HAL_HCD_IRQHandler+0x3f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003674:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003676:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800367a:	f021 0102 	bic.w	r1, r1, #2
 800367e:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003680:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8003684:	2901      	cmp	r1, #1
 8003686:	d102      	bne.n	800368e <HAL_HCD_IRQHandler+0x38a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003688:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 800368c:	e02a      	b.n	80036e4 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800368e:	2905      	cmp	r1, #5
 8003690:	d0fa      	beq.n	8003688 <HAL_HCD_IRQHandler+0x384>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003692:	2906      	cmp	r1, #6
 8003694:	d001      	beq.n	800369a <HAL_HCD_IRQHandler+0x396>
 8003696:	2908      	cmp	r1, #8
 8003698:	d10f      	bne.n	80036ba <HAL_HCD_IRQHandler+0x3b6>
      hhcd->hc[ch_num].ErrCnt++;
 800369a:	fb07 5106 	mla	r1, r7, r6, r5
 800369e:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80036a0:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036a2:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80036a4:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036a6:	bf89      	itett	hi
 80036a8:	2000      	movhi	r0, #0
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036aa:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ae:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036b0:	2004      	movhi	r0, #4
 80036b2:	bf88      	it	hi
 80036b4:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
 80036b8:	e003      	b.n	80036c2 <HAL_HCD_IRQHandler+0x3be>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036ba:	2903      	cmp	r1, #3
 80036bc:	d10a      	bne.n	80036d4 <HAL_HCD_IRQHandler+0x3d0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036be:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036c2:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c6:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ca:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036ce:	f84b 100a 	str.w	r1, [fp, sl]
 80036d2:	e007      	b.n	80036e4 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80036d4:	2907      	cmp	r1, #7
 80036d6:	d105      	bne.n	80036e4 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].ErrCnt++;
 80036d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80036da:	3301      	adds	r3, #1
 80036dc:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036de:	2304      	movs	r3, #4
 80036e0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036e4:	fb07 5306 	mla	r3, r7, r6, r5
 80036e8:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036ea:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036ee:	4628      	mov	r0, r5
 80036f0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80036f4:	f7fc ffd6 	bl	80006a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036f8:	e79b      	b.n	8003632 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036fa:	68a1      	ldr	r1, [r4, #8]
 80036fc:	6828      	ldr	r0, [r5, #0]
 80036fe:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8003702:	d011      	beq.n	8003728 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003704:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003706:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370a:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003712:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003714:	3301      	adds	r3, #1
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003718:	2306      	movs	r3, #6
 800371a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371e:	f002 f95b 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	60a3      	str	r3, [r4, #8]
 8003726:	e784      	b.n	8003632 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003728:	68a3      	ldr	r3, [r4, #8]
 800372a:	06db      	lsls	r3, r3, #27
 800372c:	d581      	bpl.n	8003632 <HAL_HCD_IRQHandler+0x32e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800372e:	fb07 5206 	mla	r2, r7, r6, r5
 8003732:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8003736:	2b03      	cmp	r3, #3
 8003738:	d109      	bne.n	800374e <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800373a:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373c:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373e:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003746:	f002 f947 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800374a:	2310      	movs	r3, #16
 800374c:	e7ea      	b.n	8003724 <HAL_HCD_IRQHandler+0x420>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800374e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8003752:	d1fa      	bne.n	800374a <HAL_HCD_IRQHandler+0x446>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8003756:	692b      	ldr	r3, [r5, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f6      	bne.n	800374a <HAL_HCD_IRQHandler+0x446>
        hhcd->hc[ch_num].state = HC_NAK;
 800375c:	2303      	movs	r3, #3
 800375e:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8003762:	e7eb      	b.n	800373c <HAL_HCD_IRQHandler+0x438>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003764:	f011 0c04 	ands.w	ip, r1, #4
 8003768:	d008      	beq.n	800377c <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800376a:	2304      	movs	r3, #4
 800376c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800376e:	68e3      	ldr	r3, [r4, #12]
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	60e3      	str	r3, [r4, #12]
 8003776:	e75c      	b.n	8003632 <HAL_HCD_IRQHandler+0x32e>
 8003778:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800377c:	68a1      	ldr	r1, [r4, #8]
 800377e:	f011 0120 	ands.w	r1, r1, #32
 8003782:	d014      	beq.n	80037ae <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003784:	2320      	movs	r3, #32
 8003786:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003788:	fb07 5306 	mla	r3, r7, r6, r5
 800378c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003790:	2a01      	cmp	r2, #1
 8003792:	f47f af4e 	bne.w	8003632 <HAL_HCD_IRQHandler+0x32e>
      hhcd->hc[ch_num].do_ping = 0U;
 8003796:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379a:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800379c:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a0:	68e3      	ldr	r3, [r4, #12]
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a8:	f002 f916 	bl	80059d8 <USB_HC_Halt>
 80037ac:	e741      	b.n	8003632 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	065a      	lsls	r2, r3, #25
 80037b2:	d511      	bpl.n	80037d8 <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
 80037b4:	fb07 5306 	mla	r3, r7, r6, r5
 80037b8:	2204      	movs	r2, #4
 80037ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80037be:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037c0:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c2:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c8:	68e3      	ldr	r3, [r4, #12]
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d0:	f002 f902 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037d4:	2340      	movs	r3, #64	; 0x40
 80037d6:	e7a5      	b.n	8003724 <HAL_HCD_IRQHandler+0x420>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037d8:	68a1      	ldr	r1, [r4, #8]
 80037da:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 80037de:	d005      	beq.n	80037ec <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037e0:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e2:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	60e3      	str	r3, [r4, #12]
 80037ea:	e6af      	b.n	800354c <HAL_HCD_IRQHandler+0x248>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	07db      	lsls	r3, r3, #31
 80037f0:	d50f      	bpl.n	8003812 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f2:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037f4:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f8:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037fc:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003800:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003802:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003804:	f002 f8e8 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003808:	2201      	movs	r2, #1
 800380a:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800380c:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8003810:	e70f      	b.n	8003632 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003812:	68a1      	ldr	r1, [r4, #8]
 8003814:	0709      	lsls	r1, r1, #28
 8003816:	d50e      	bpl.n	8003836 <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003818:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
 800381c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003820:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003822:	68e3      	ldr	r3, [r4, #12]
 8003824:	f043 0302 	orr.w	r3, r3, #2
 8003828:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800382a:	f002 f8d5 	bl	80059d8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800382e:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003830:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8003834:	e6fd      	b.n	8003632 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003836:	68a1      	ldr	r1, [r4, #8]
 8003838:	06ca      	lsls	r2, r1, #27
 800383a:	d514      	bpl.n	8003866 <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800383c:	fb07 5306 	mla	r3, r7, r6, r5
 8003840:	2200      	movs	r2, #0
 8003842:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8003844:	2203      	movs	r2, #3
 8003846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800384a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800384e:	2a00      	cmp	r2, #0
 8003850:	f47f af74 	bne.w	800373c <HAL_HCD_IRQHandler+0x438>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003854:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003858:	2a00      	cmp	r2, #0
 800385a:	f47f af6f 	bne.w	800373c <HAL_HCD_IRQHandler+0x438>
        hhcd->hc[ch_num].do_ping = 1U;
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003864:	e76a      	b.n	800373c <HAL_HCD_IRQHandler+0x438>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003866:	68a1      	ldr	r1, [r4, #8]
 8003868:	060b      	lsls	r3, r1, #24
 800386a:	d50c      	bpl.n	8003886 <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800386c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800386e:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003870:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800387a:	f002 f8ad 	bl	80059d8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800387e:	2306      	movs	r3, #6
 8003880:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8003884:	e74d      	b.n	8003722 <HAL_HCD_IRQHandler+0x41e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003886:	68a1      	ldr	r1, [r4, #8]
 8003888:	0549      	lsls	r1, r1, #21
 800388a:	d50f      	bpl.n	80038ac <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800388c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388e:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003890:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800389a:	f002 f89d 	bl	80059d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800389e:	2310      	movs	r3, #16
 80038a0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038a8:	2308      	movs	r3, #8
 80038aa:	e7c1      	b.n	8003830 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038ac:	68a1      	ldr	r1, [r4, #8]
 80038ae:	078a      	lsls	r2, r1, #30
 80038b0:	f57f aebf 	bpl.w	8003632 <HAL_HCD_IRQHandler+0x32e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038b4:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038b6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038ba:	f021 0102 	bic.w	r1, r1, #2
 80038be:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038c0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80038c4:	2901      	cmp	r1, #1
 80038c6:	d10e      	bne.n	80038e6 <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038c8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038cc:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038d0:	3b02      	subs	r3, #2
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	f63f af06 	bhi.w	80036e4 <HAL_HCD_IRQHandler+0x3e0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80038d8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 80038e4:	e6fe      	b.n	80036e4 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038e6:	2903      	cmp	r1, #3
 80038e8:	d102      	bne.n	80038f0 <HAL_HCD_IRQHandler+0x5ec>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038ea:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 80038ee:	e6f9      	b.n	80036e4 <HAL_HCD_IRQHandler+0x3e0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038f0:	2904      	cmp	r1, #4
 80038f2:	d0fa      	beq.n	80038ea <HAL_HCD_IRQHandler+0x5e6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038f4:	2905      	cmp	r1, #5
 80038f6:	f43f aec7 	beq.w	8003688 <HAL_HCD_IRQHandler+0x384>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038fa:	2906      	cmp	r1, #6
 80038fc:	f43f aecd 	beq.w	800369a <HAL_HCD_IRQHandler+0x396>
 8003900:	2908      	cmp	r1, #8
 8003902:	f47f aeef 	bne.w	80036e4 <HAL_HCD_IRQHandler+0x3e0>
 8003906:	e6c8      	b.n	800369a <HAL_HCD_IRQHandler+0x396>

08003908 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8003908:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800390c:	2b01      	cmp	r3, #1
{
 800390e:	b510      	push	{r4, lr}
 8003910:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8003912:	d009      	beq.n	8003928 <HAL_HCD_Stop+0x20>
 8003914:	2301      	movs	r3, #1
 8003916:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800391a:	6800      	ldr	r0, [r0, #0]
 800391c:	f002 f8ae 	bl	8005a7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003920:	2000      	movs	r0, #0
 8003922:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8003926:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003928:	2002      	movs	r0, #2
 800392a:	e7fc      	b.n	8003926 <HAL_HCD_Stop+0x1e>

0800392c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800392c:	6803      	ldr	r3, [r0, #0]
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	0791      	lsls	r1, r2, #30
 8003932:	d501      	bpl.n	8003938 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003934:	2200      	movs	r2, #0
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	07d2      	lsls	r2, r2, #31
 800393c:	d403      	bmi.n	8003946 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	619a      	str	r2, [r3, #24]
  }
}
 8003946:	4770      	bx	lr

08003948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003948:	b530      	push	{r4, r5, lr}
 800394a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800394c:	6804      	ldr	r4, [r0, #0]
 800394e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8003952:	6860      	ldr	r0, [r4, #4]
 8003954:	4313      	orrs	r3, r2
 8003956:	f3c1 0209 	ubfx	r2, r1, #0, #10
 800395a:	431a      	orrs	r2, r3
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <I2C_TransferConfig+0x24>)
 800395e:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8003962:	ea20 0003 	bic.w	r0, r0, r3
 8003966:	4302      	orrs	r2, r0
 8003968:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800396a:	bd30      	pop	{r4, r5, pc}
 800396c:	03ff63ff 	.word	0x03ff63ff

08003970 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003970:	6803      	ldr	r3, [r0, #0]
{
 8003972:	b570      	push	{r4, r5, r6, lr}
 8003974:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003976:	6998      	ldr	r0, [r3, #24]
{
 8003978:	460d      	mov	r5, r1
 800397a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800397c:	f010 0010 	ands.w	r0, r0, #16
 8003980:	d116      	bne.n	80039b0 <I2C_IsAcknowledgeFailed+0x40>
}
 8003982:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003984:	1c69      	adds	r1, r5, #1
 8003986:	d014      	beq.n	80039b2 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7ff f8c0 	bl	8002b0c <HAL_GetTick>
 800398c:	1b80      	subs	r0, r0, r6
 800398e:	42a8      	cmp	r0, r5
 8003990:	d800      	bhi.n	8003994 <I2C_IsAcknowledgeFailed+0x24>
 8003992:	b96d      	cbnz	r5, 80039b0 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003994:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003996:	f043 0320 	orr.w	r3, r3, #32
 800399a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800399c:	2320      	movs	r3, #32
 800399e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a2:	2300      	movs	r3, #0
    return HAL_ERROR;
 80039a4:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80039aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80039ae:	e7e8      	b.n	8003982 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	6999      	ldr	r1, [r3, #24]
 80039b4:	068a      	lsls	r2, r1, #26
 80039b6:	d5e5      	bpl.n	8003984 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b8:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ba:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80039bc:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80039c2:	f7ff ffb3 	bl	800392c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	6853      	ldr	r3, [r2, #4]
 80039ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80039ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80039d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80039e8:	e7db      	b.n	80039a2 <I2C_IsAcknowledgeFailed+0x32>

080039ea <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80039ea:	b570      	push	{r4, r5, r6, lr}
 80039ec:	4604      	mov	r4, r0
 80039ee:	460d      	mov	r5, r1
 80039f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	069b      	lsls	r3, r3, #26
 80039f8:	d501      	bpl.n	80039fe <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80039fa:	2000      	movs	r0, #0
}
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fe:	4632      	mov	r2, r6
 8003a00:	4629      	mov	r1, r5
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ffb4 	bl	8003970 <I2C_IsAcknowledgeFailed>
 8003a08:	b990      	cbnz	r0, 8003a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7ff f87f 	bl	8002b0c <HAL_GetTick>
 8003a0e:	1b80      	subs	r0, r0, r6
 8003a10:	42a8      	cmp	r0, r5
 8003a12:	d801      	bhi.n	8003a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	d1ec      	bne.n	80039f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a1a:	f043 0320 	orr.w	r3, r3, #32
 8003a1e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	2320      	movs	r3, #32
 8003a22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
 8003a32:	e7e3      	b.n	80039fc <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08003a34 <I2C_WaitOnFlagUntilTimeout>:
{
 8003a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a38:	9f06      	ldr	r7, [sp, #24]
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	4688      	mov	r8, r1
 8003a3e:	4616      	mov	r6, r2
 8003a40:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	6993      	ldr	r3, [r2, #24]
 8003a46:	ea38 0303 	bics.w	r3, r8, r3
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	42b3      	cmp	r3, r6
 8003a52:	d001      	beq.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003a54:	2000      	movs	r0, #0
 8003a56:	e015      	b.n	8003a84 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003a58:	1c6b      	adds	r3, r5, #1
 8003a5a:	d0f3      	beq.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7ff f856 	bl	8002b0c <HAL_GetTick>
 8003a60:	1bc0      	subs	r0, r0, r7
 8003a62:	42a8      	cmp	r0, r5
 8003a64:	d801      	bhi.n	8003a6a <I2C_WaitOnFlagUntilTimeout+0x36>
 8003a66:	2d00      	cmp	r5, #0
 8003a68:	d1eb      	bne.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003a6c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6e:	f043 0320 	orr.w	r3, r3, #32
 8003a72:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	2320      	movs	r3, #32
 8003a76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003a80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a88 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	079b      	lsls	r3, r3, #30
 8003a96:	d501      	bpl.n	8003a9c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
}
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7ff ff65 	bl	8003970 <I2C_IsAcknowledgeFailed>
 8003aa6:	b9a0      	cbnz	r0, 8003ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	1c6a      	adds	r2, r5, #1
 8003aaa:	d0f1      	beq.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7ff f82e 	bl	8002b0c <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	42a8      	cmp	r0, r5
 8003ab4:	d801      	bhi.n	8003aba <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	d1ea      	bne.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003abc:	f043 0320 	orr.w	r3, r3, #32
 8003ac0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003ace:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	e7e1      	b.n	8003a9a <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

08003ad8 <I2C_RequestMemoryWrite>:
{
 8003ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ada:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <I2C_RequestMemoryWrite+0x60>)
{
 8003ade:	4605      	mov	r5, r0
 8003ae0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ae2:	9300      	str	r3, [sp, #0]
{
 8003ae4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aea:	b2fa      	uxtb	r2, r7
 8003aec:	f7ff ff2c 	bl	8003948 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af0:	4632      	mov	r2, r6
 8003af2:	9908      	ldr	r1, [sp, #32]
 8003af4:	4628      	mov	r0, r5
 8003af6:	f7ff ffc7 	bl	8003a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003afa:	b110      	cbz	r0, 8003b02 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8003afc:	2001      	movs	r0, #1
}
 8003afe:	b003      	add	sp, #12
 8003b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b02:	2f01      	cmp	r7, #1
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	d10c      	bne.n	8003b22 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b08:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b10:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b12:	9b08      	ldr	r3, [sp, #32]
 8003b14:	9600      	str	r6, [sp, #0]
 8003b16:	f7ff ff8d 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003b1a:	3000      	adds	r0, #0
 8003b1c:	bf18      	it	ne
 8003b1e:	2001      	movne	r0, #1
 8003b20:	e7ed      	b.n	8003afe <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b22:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b24:	9908      	ldr	r1, [sp, #32]
 8003b26:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	f7ff ffac 	bl	8003a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d1e3      	bne.n	8003afc <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	e7e7      	b.n	8003b08 <I2C_RequestMemoryWrite+0x30>
 8003b38:	80002000 	.word	0x80002000

08003b3c <I2C_RequestMemoryRead>:
{
 8003b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b3e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <I2C_RequestMemoryRead+0x60>)
{
 8003b42:	4605      	mov	r5, r0
 8003b44:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b46:	9300      	str	r3, [sp, #0]
{
 8003b48:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	b2fa      	uxtb	r2, r7
 8003b4e:	f7ff fefb 	bl	8003948 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b52:	4632      	mov	r2, r6
 8003b54:	9908      	ldr	r1, [sp, #32]
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7ff ff96 	bl	8003a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b5c:	b110      	cbz	r0, 8003b64 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
}
 8003b60:	b003      	add	sp, #12
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b64:	2f01      	cmp	r7, #1
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	d10c      	bne.n	8003b84 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6a:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b72:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b74:	9b08      	ldr	r3, [sp, #32]
 8003b76:	9600      	str	r6, [sp, #0]
 8003b78:	f7ff ff5c 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003b7c:	3000      	adds	r0, #0
 8003b7e:	bf18      	it	ne
 8003b80:	2001      	movne	r0, #1
 8003b82:	e7ed      	b.n	8003b60 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b84:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	9908      	ldr	r1, [sp, #32]
 8003b88:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	f7ff ff7b 	bl	8003a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d1e3      	bne.n	8003b5e <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	e7e7      	b.n	8003b6a <I2C_RequestMemoryRead+0x2e>
 8003b9a:	bf00      	nop
 8003b9c:	80002000 	.word	0x80002000

08003ba0 <HAL_I2C_MspInit>:
}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_I2C_Init>:
{
 8003ba2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d04a      	beq.n	8003c40 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003bae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bb2:	b91b      	cbnz	r3, 8003bbc <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003bb4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003bb8:	f7ff fff2 	bl	8003ba0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	2324      	movs	r3, #36	; 0x24
 8003bbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bcc:	6862      	ldr	r2, [r4, #4]
 8003bce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bd2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be0:	2901      	cmp	r1, #1
 8003be2:	d124      	bne.n	8003c2e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bea:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bec:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c00:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	69a1      	ldr	r1, [r4, #24]
 8003c08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c0c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c0e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c26:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003c2c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c32:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c34:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c36:	d1d8      	bne.n	8003bea <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e7d4      	b.n	8003bea <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003c40:	2001      	movs	r0, #1
 8003c42:	e7f3      	b.n	8003c2c <HAL_I2C_Init+0x8a>

08003c44 <HAL_I2C_MspDeInit>:
 8003c44:	4770      	bx	lr

08003c46 <HAL_I2C_DeInit>:
{
 8003c46:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003c48:	4604      	mov	r4, r0
 8003c4a:	b198      	cbz	r0, 8003c74 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003c4c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4e:	2324      	movs	r3, #36	; 0x24
 8003c50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003c5c:	f7ff fff2 	bl	8003c44 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c60:	2000      	movs	r0, #0
 8003c62:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8003c64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c68:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003c72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c74:	2001      	movs	r0, #1
 8003c76:	e7fc      	b.n	8003c72 <HAL_I2C_DeInit+0x2c>

08003c78 <HAL_I2C_Mem_Write>:
{
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003c82:	b085      	sub	sp, #20
 8003c84:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c86:	2b20      	cmp	r3, #32
{
 8003c88:	460f      	mov	r7, r1
 8003c8a:	9203      	str	r2, [sp, #12]
 8003c8c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003c90:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c94:	f040 80a2 	bne.w	8003ddc <HAL_I2C_Mem_Write+0x164>
    if ((pData == NULL) || (Size == 0U))
 8003c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c9a:	b113      	cbz	r3, 8003ca2 <HAL_I2C_Mem_Write+0x2a>
 8003c9c:	f1ba 0f00 	cmp.w	sl, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003ca8:	2001      	movs	r0, #1
}
 8003caa:	b005      	add	sp, #20
 8003cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003cb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f000 8091 	beq.w	8003ddc <HAL_I2C_Mem_Write+0x164>
 8003cba:	2501      	movs	r5, #1
 8003cbc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003cc0:	f7fe ff24 	bl	8002b0c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003cc8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cca:	462a      	mov	r2, r5
 8003ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7ff feaf 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4681      	mov	r9, r0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1e5      	bne.n	8003ca8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cdc:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8003cde:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce0:	9a03      	ldr	r2, [sp, #12]
 8003ce2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ce4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	2340      	movs	r3, #64	; 0x40
 8003cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003cf4:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf6:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8003cf8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cfc:	e9cd 8600 	strd	r8, r6, [sp]
 8003d00:	f7ff feea 	bl	8003ad8 <I2C_RequestMemoryWrite>
 8003d04:	b110      	cbz	r0, 8003d0c <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8003d06:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003d0a:	e7cd      	b.n	8003ca8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d0e:	2bff      	cmp	r3, #255	; 0xff
 8003d10:	d954      	bls.n	8003dbc <HAL_I2C_Mem_Write+0x144>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d12:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d18:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d1a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7ff fe12 	bl	8003948 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	4632      	mov	r2, r6
 8003d26:	4641      	mov	r1, r8
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7ff fead 	bl	8003a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d1ba      	bne.n	8003ca8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003d3a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003d3c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003d42:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003d44:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003d46:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003d48:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003d4a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d4e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	b1a3      	cbz	r3, 8003d7e <HAL_I2C_Mem_Write+0x106>
 8003d54:	b99a      	cbnz	r2, 8003d7e <HAL_I2C_Mem_Write+0x106>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	9600      	str	r6, [sp, #0]
 8003d58:	4643      	mov	r3, r8
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff fe69 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d1a0      	bne.n	8003ca8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d68:	2bff      	cmp	r3, #255	; 0xff
 8003d6a:	d92f      	bls.n	8003dcc <HAL_I2C_Mem_Write+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d72:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d76:	4639      	mov	r1, r7
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7ff fde5 	bl	8003948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ce      	bne.n	8003d24 <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d86:	4632      	mov	r2, r6
 8003d88:	4641      	mov	r1, r8
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fe2d 	bl	80039ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d189      	bne.n	8003ca8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	2120      	movs	r1, #32
 8003d98:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003da0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003da4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003db2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003db6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003dba:	e776      	b.n	8003caa <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8003dbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003dc4:	b292      	uxth	r2, r2
 8003dc6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	e7a7      	b.n	8003d1c <HAL_I2C_Mem_Write+0xa4>
          hi2c->XferSize = hi2c->XferCount;
 8003dcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	e7cc      	b.n	8003d76 <HAL_I2C_Mem_Write+0xfe>
    return HAL_BUSY;
 8003ddc:	2002      	movs	r0, #2
 8003dde:	e764      	b.n	8003caa <HAL_I2C_Mem_Write+0x32>

08003de0 <HAL_I2C_Mem_Read>:
{
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003dea:	b085      	sub	sp, #20
 8003dec:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dee:	2b20      	cmp	r3, #32
{
 8003df0:	460f      	mov	r7, r1
 8003df2:	9203      	str	r2, [sp, #12]
 8003df4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003df8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	f040 80a6 	bne.w	8003f4c <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8003e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e02:	b113      	cbz	r3, 8003e0a <HAL_I2C_Mem_Read+0x2a>
 8003e04:	f1ba 0f00 	cmp.w	sl, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e0e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
}
 8003e12:	b005      	add	sp, #20
 8003e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003e18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f000 8095 	beq.w	8003f4c <HAL_I2C_Mem_Read+0x16c>
 8003e22:	2501      	movs	r5, #1
 8003e24:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003e28:	f7fe fe70 	bl	8002b0c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e2c:	2319      	movs	r3, #25
 8003e2e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003e30:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e32:	462a      	mov	r2, r5
 8003e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff fdfb 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4681      	mov	r9, r0
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d1e5      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e44:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8003e46:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e48:	9a03      	ldr	r2, [sp, #12]
 8003e4a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e50:	2340      	movs	r3, #64	; 0x40
 8003e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e58:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e5a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003e5c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e5e:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8003e60:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e64:	e9cd 8600 	strd	r8, r6, [sp]
 8003e68:	f7ff fe68 	bl	8003b3c <I2C_RequestMemoryRead>
 8003e6c:	b110      	cbz	r0, 8003e74 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8003e6e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003e72:	e7cd      	b.n	8003e10 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e76:	2bff      	cmp	r3, #255	; 0xff
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_I2C_Mem_Read+0x170>)
 8003e7a:	d957      	bls.n	8003f2c <HAL_I2C_Mem_Read+0x14c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e84:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e86:	4639      	mov	r1, r7
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f7ff fd5d 	bl	8003948 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e8e:	9600      	str	r6, [sp, #0]
 8003e90:	4643      	mov	r3, r8
 8003e92:	2200      	movs	r2, #0
 8003e94:	2104      	movs	r1, #4
 8003e96:	4620      	mov	r0, r4
 8003e98:	f7ff fdcc 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d1b7      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ea6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003eaa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003eac:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8003eae:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003eb0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003eb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003eb4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003eb6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003eb8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ebe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b1a3      	cbz	r3, 8003eee <HAL_I2C_Mem_Read+0x10e>
 8003ec4:	b99a      	cbnz	r2, 8003eee <HAL_I2C_Mem_Read+0x10e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	9600      	str	r6, [sp, #0]
 8003ec8:	4643      	mov	r3, r8
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff fdb1 	bl	8003a34 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d19c      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed8:	2bff      	cmp	r3, #255	; 0xff
 8003eda:	d92f      	bls.n	8003f3c <HAL_I2C_Mem_Read+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003edc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fd2d 	bl	8003948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003eee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1cb      	bne.n	8003e8e <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	4641      	mov	r1, r8
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff fd75 	bl	80039ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d185      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	2120      	movs	r1, #32
 8003f08:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003f10:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003f14:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f22:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f26:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003f2a:	e772      	b.n	8003e12 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8003f2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003f34:	b292      	uxth	r2, r2
 8003f36:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	e7a4      	b.n	8003e86 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8003f3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f42:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003f44:	b292      	uxth	r2, r2
 8003f46:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	e7cc      	b.n	8003ee6 <HAL_I2C_Mem_Read+0x106>
    return HAL_BUSY;
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	e760      	b.n	8003e12 <HAL_I2C_Mem_Read+0x32>
 8003f50:	80002400 	.word	0x80002400

08003f54 <HAL_I2C_GetState>:
  return hi2c->State;
 8003f54:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003f58:	4770      	bx	lr

08003f5a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003f5a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8003f5c:	4770      	bx	lr

08003f5e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	2a20      	cmp	r2, #32
{
 8003f66:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f68:	d11d      	bne.n	8003fa6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d019      	beq.n	8003fa6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f72:	2324      	movs	r3, #36	; 0x24
 8003f74:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	681c      	ldr	r4, [r3, #0]
 8003f7c:	f024 0401 	bic.w	r4, r4, #1
 8003f80:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f82:	681c      	ldr	r4, [r3, #0]
 8003f84:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003f88:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f8a:	681c      	ldr	r4, [r3, #0]
 8003f8c:	4321      	orrs	r1, r4
 8003f8e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f90:	6819      	ldr	r1, [r3, #0]
 8003f92:	f041 0101 	orr.w	r1, r1, #1
 8003f96:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003fa2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003fa4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003fa6:	2002      	movs	r0, #2
 8003fa8:	e7fc      	b.n	8003fa4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08003faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003faa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003fb0:	b2e4      	uxtb	r4, r4
 8003fb2:	2c20      	cmp	r4, #32
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d018      	beq.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbe:	2324      	movs	r3, #36	; 0x24
 8003fc0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc4:	6803      	ldr	r3, [r0, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fce:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fd0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fd4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fd8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003fe8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003fec:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003fee:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	e7fc      	b.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x44>

08003ff4 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ff4:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ff6:	f8d1 c000 	ldr.w	ip, [r1]
{
 8003ffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ffe:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004000:	6804      	ldr	r4, [r0, #0]
 8004002:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004004:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004008:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800400a:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800400c:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004010:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004014:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004016:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800401a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800401e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004020:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004022:	68e0      	ldr	r0, [r4, #12]
 8004024:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004028:	4430      	add	r0, r6
 800402a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800402e:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004030:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004032:	68e0      	ldr	r0, [r4, #12]
 8004034:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004038:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800403a:	6898      	ldr	r0, [r3, #8]
 800403c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004040:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004042:	6888      	ldr	r0, [r1, #8]
 8004044:	68e6      	ldr	r6, [r4, #12]
 8004046:	3001      	adds	r0, #1
 8004048:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800404c:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800404e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004050:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004054:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004056:	6918      	ldr	r0, [r3, #16]
 8004058:	f020 0007 	bic.w	r0, r0, #7
 800405c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800405e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004060:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004062:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004066:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800406a:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800406e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004072:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004076:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800407a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800407e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004080:	6958      	ldr	r0, [r3, #20]
 8004082:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004086:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004088:	6948      	ldr	r0, [r1, #20]
 800408a:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800408c:	69d8      	ldr	r0, [r3, #28]
 800408e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004092:	f020 0007 	bic.w	r0, r0, #7
 8004096:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004098:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 800409c:	4305      	orrs	r5, r0
 800409e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80040a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80040a2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80040a4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80040a8:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80040aa:	b31e      	cbz	r6, 80040f4 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80040ac:	2e01      	cmp	r6, #1
 80040ae:	d023      	beq.n	80040f8 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80040b0:	1eb0      	subs	r0, r6, #2
 80040b2:	2802      	cmp	r0, #2
 80040b4:	d922      	bls.n	80040fc <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80040b6:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80040b8:	bf0c      	ite	eq
 80040ba:	2002      	moveq	r0, #2
 80040bc:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80040be:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80040c0:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80040c4:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80040c8:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80040ca:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040cc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80040ce:	4345      	muls	r5, r0
 80040d0:	4378      	muls	r0, r7
 80040d2:	3007      	adds	r0, #7
 80040d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80040d8:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80040da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040dc:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80040e0:	f020 0007 	bic.w	r0, r0, #7
 80040e4:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040e6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040e8:	58a3      	ldr	r3, [r4, r2]
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	50a3      	str	r3, [r4, r2]
}
 80040f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80040f4:	2004      	movs	r0, #4
 80040f6:	e7e2      	b.n	80040be <LTDC_SetConfig+0xca>
    tmp = 3U;
 80040f8:	2003      	movs	r0, #3
 80040fa:	e7e0      	b.n	80040be <LTDC_SetConfig+0xca>
    tmp = 2U;
 80040fc:	2002      	movs	r0, #2
 80040fe:	e7de      	b.n	80040be <LTDC_SetConfig+0xca>

08004100 <HAL_LTDC_MspInit>:
}
 8004100:	4770      	bx	lr
	...

08004104 <HAL_LTDC_Init>:
{
 8004104:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004106:	4604      	mov	r4, r0
 8004108:	2800      	cmp	r0, #0
 800410a:	d063      	beq.n	80041d4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800410c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004110:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004114:	b91b      	cbnz	r3, 800411e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004116:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800411a:	f7ff fff1 	bl	8004100 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800412c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800412e:	6999      	ldr	r1, [r3, #24]
 8004130:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004134:	4302      	orrs	r2, r0
 8004136:	68e0      	ldr	r0, [r4, #12]
 8004138:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800413a:	6920      	ldr	r0, [r4, #16]
 800413c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800413e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004140:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004142:	4925      	ldr	r1, [pc, #148]	; (80041d8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004144:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	400a      	ands	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004152:	69a0      	ldr	r0, [r4, #24]
 8004154:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004156:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004158:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	400a      	ands	r2, r1
 800415e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004166:	6a20      	ldr	r0, [r4, #32]
 8004168:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800416a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800416c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	400a      	ands	r2, r1
 8004172:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800417a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800417c:	4302      	orrs	r2, r0
 800417e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	4011      	ands	r1, r2
 8004184:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004186:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800418e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004190:	430a      	orrs	r2, r1
 8004192:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004196:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800419a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800419e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80041a2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80041aa:	430a      	orrs	r2, r1
 80041ac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80041b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041b4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ba:	f042 0206 	orr.w	r2, r2, #6
 80041be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80041c8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041ca:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80041ce:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80041d4:	2001      	movs	r0, #1
 80041d6:	e7fc      	b.n	80041d2 <HAL_LTDC_Init+0xce>
 80041d8:	f000f800 	.word	0xf000f800

080041dc <HAL_LTDC_ConfigLayer>:
{
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80041de:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80041e2:	4606      	mov	r6, r0
 80041e4:	468c      	mov	ip, r1
 80041e6:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f04f 0002 	mov.w	r0, #2
 80041ee:	d01d      	beq.n	800422c <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041f0:	2434      	movs	r4, #52	; 0x34
 80041f2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041f4:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 80041f8:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041fa:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80041fe:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004202:	3438      	adds	r4, #56	; 0x38
 8004204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004210:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004212:	4630      	mov	r0, r6
 8004214:	4672      	mov	r2, lr
 8004216:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004218:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800421a:	f7ff feeb 	bl	8003ff4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800421e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004220:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004222:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004224:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004228:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800422c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800422e <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800422e:	b538      	push	{r3, r4, r5, lr}
 8004230:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004232:	f7fe fc6b 	bl	8002b0c <HAL_GetTick>
 8004236:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004238:	2c00      	cmp	r4, #0
 800423a:	d061      	beq.n	8004300 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800423c:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800423e:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8004240:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8004244:	2302      	movs	r3, #2
 8004246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800424a:	68d3      	ldr	r3, [r2, #12]
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	07d2      	lsls	r2, r2, #31
 8004258:	d448      	bmi.n	80042ec <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800425a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800425e:	430a      	orrs	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004262:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8004266:	430a      	orrs	r2, r1
 8004268:	69e1      	ldr	r1, [r4, #28]
 800426a:	430a      	orrs	r2, r1
 800426c:	6a21      	ldr	r1, [r4, #32]
 800426e:	430a      	orrs	r2, r1
 8004270:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004272:	430a      	orrs	r2, r1
 8004274:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004276:	430a      	orrs	r2, r1
 8004278:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800427a:	430a      	orrs	r2, r1
 800427c:	68a1      	ldr	r1, [r4, #8]
 800427e:	430a      	orrs	r2, r1
 8004280:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004282:	3901      	subs	r1, #1
 8004284:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004288:	6861      	ldr	r1, [r4, #4]
 800428a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800428e:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004290:	d103      	bne.n	800429a <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004298:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800429e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	da04      	bge.n	80042ae <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80042a4:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80042a6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80042a8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80042ac:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80042ae:	b292      	uxth	r2, r2
 80042b0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80042b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	da25      	bge.n	8004304 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80042b8:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80042ba:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80042bc:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 80042c0:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80042c2:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80042c4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80042c8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80042cc:	621a      	str	r2, [r3, #32]
 80042ce:	f04f 0200 	mov.w	r2, #0
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80042d2:	d019      	beq.n	8004308 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80042d4:	b2c9      	uxtb	r1, r1
 80042d6:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 80042da:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80042dc:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80042de:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80042e0:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80042e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80042e6:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80042ec:	f7fe fc0e 	bl	8002b0c <HAL_GetTick>
 80042f0:	1b40      	subs	r0, r0, r5
 80042f2:	2805      	cmp	r0, #5
 80042f4:	d9ad      	bls.n	8004252 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80042fa:	2303      	movs	r3, #3
 80042fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8004300:	2001      	movs	r0, #1
 8004302:	e7f2      	b.n	80042ea <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004304:	6a18      	ldr	r0, [r3, #32]
 8004306:	e7dd      	b.n	80042c4 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
 800430a:	e7e5      	b.n	80042d8 <HAL_MDMA_Init+0xaa>

0800430c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800430c:	b1d8      	cbz	r0, 8004346 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800430e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8004310:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8004312:	68d3      	ldr	r3, [r2, #12]
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800431e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8004320:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8004322:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8004324:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8004326:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8004328:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800432a:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800432e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8004330:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004332:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8004334:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8004336:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800433a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800433e:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8004342:	4618      	mov	r0, r3
 8004344:	4770      	bx	lr
    return HAL_ERROR;
 8004346:	2001      	movs	r0, #1
}
 8004348:	4770      	bx	lr
	...

0800434c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800434c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800434e:	4c10      	ldr	r4, [pc, #64]	; (8004390 <HAL_PWREx_ConfigSupply+0x44>)
 8004350:	68e3      	ldr	r3, [r4, #12]
 8004352:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004356:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004358:	d105      	bne.n	8004366 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800435a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800435e:	1a18      	subs	r0, r3, r0
 8004360:	bf18      	it	ne
 8004362:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004364:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	4318      	orrs	r0, r3
 800436c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800436e:	f7fe fbcd 	bl	8002b0c <HAL_GetTick>
 8004372:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	049b      	lsls	r3, r3, #18
 8004378:	d501      	bpl.n	800437e <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 800437a:	2000      	movs	r0, #0
 800437c:	e7f2      	b.n	8004364 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800437e:	f7fe fbc5 	bl	8002b0c <HAL_GetTick>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004388:	d9f4      	bls.n	8004374 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800438a:	2001      	movs	r0, #1
 800438c:	e7ea      	b.n	8004364 <HAL_PWREx_ConfigSupply+0x18>
 800438e:	bf00      	nop
 8004390:	58024800 	.word	0x58024800

08004394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004396:	4604      	mov	r4, r0
 8004398:	b908      	cbnz	r0, 800439e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800439a:	2001      	movs	r0, #1
 800439c:	e08e      	b.n	80044bc <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	6803      	ldr	r3, [r0, #0]
 80043a0:	07dd      	lsls	r5, r3, #31
 80043a2:	d45e      	bmi.n	8004462 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	0798      	lsls	r0, r3, #30
 80043a8:	f100 80b0 	bmi.w	800450c <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	06da      	lsls	r2, r3, #27
 80043b0:	d527      	bpl.n	8004402 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b2:	4baa      	ldr	r3, [pc, #680]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 80043b4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043bc:	2a08      	cmp	r2, #8
 80043be:	d007      	beq.n	80043d0 <HAL_RCC_OscConfig+0x3c>
 80043c0:	2a18      	cmp	r2, #24
 80043c2:	f040 810e 	bne.w	80045e2 <HAL_RCC_OscConfig+0x24e>
 80043c6:	f001 0203 	and.w	r2, r1, #3
 80043ca:	2a01      	cmp	r2, #1
 80043cc:	f040 8109 	bne.w	80045e2 <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	05db      	lsls	r3, r3, #23
 80043d4:	d502      	bpl.n	80043dc <HAL_RCC_OscConfig+0x48>
 80043d6:	69e3      	ldr	r3, [r4, #28]
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d1de      	bne.n	800439a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043dc:	f7fe fbae 	bl	8002b3c <HAL_GetREVID>
 80043e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80043e4:	6a21      	ldr	r1, [r4, #32]
 80043e6:	4298      	cmp	r0, r3
 80043e8:	4b9c      	ldr	r3, [pc, #624]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 80043ea:	f200 80f3 	bhi.w	80045d4 <HAL_RCC_OscConfig+0x240>
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	2920      	cmp	r1, #32
 80043f2:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80043f6:	bf0c      	ite	eq
 80043f8:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80043fc:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004400:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0719      	lsls	r1, r3, #28
 8004406:	f100 812d 	bmi.w	8004664 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	069a      	lsls	r2, r3, #26
 800440e:	f100 814e 	bmi.w	80046ae <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	075d      	lsls	r5, r3, #29
 8004416:	d51e      	bpl.n	8004456 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8004418:	4d91      	ldr	r5, [pc, #580]	; (8004660 <HAL_RCC_OscConfig+0x2cc>)
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004422:	f7fe fb73 	bl	8002b0c <HAL_GetTick>
 8004426:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	05da      	lsls	r2, r3, #23
 800442c:	f140 8164 	bpl.w	80046f8 <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004430:	68a3      	ldr	r3, [r4, #8]
 8004432:	4d8a      	ldr	r5, [pc, #552]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 8004434:	2b01      	cmp	r3, #1
 8004436:	f040 8166 	bne.w	8004706 <HAL_RCC_OscConfig+0x372>
 800443a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004446:	f7fe fb61 	bl	8002b0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800444a:	4e84      	ldr	r6, [pc, #528]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800444c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800444e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004450:	079b      	lsls	r3, r3, #30
 8004452:	f140 817e 	bpl.w	8004752 <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004456:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004458:	2800      	cmp	r0, #0
 800445a:	f040 8181 	bne.w	8004760 <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 800445e:	2000      	movs	r0, #0
 8004460:	e02c      	b.n	80044bc <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004462:	4b7e      	ldr	r3, [pc, #504]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 8004464:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004466:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004468:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800446c:	2a10      	cmp	r2, #16
 800446e:	d005      	beq.n	800447c <HAL_RCC_OscConfig+0xe8>
 8004470:	2a18      	cmp	r2, #24
 8004472:	d10a      	bne.n	800448a <HAL_RCC_OscConfig+0xf6>
 8004474:	f001 0203 	and.w	r2, r1, #3
 8004478:	2a02      	cmp	r2, #2
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0399      	lsls	r1, r3, #14
 8004480:	d590      	bpl.n	80043a4 <HAL_RCC_OscConfig+0x10>
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d18d      	bne.n	80043a4 <HAL_RCC_OscConfig+0x10>
 8004488:	e787      	b.n	800439a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	4d73      	ldr	r5, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004492:	d114      	bne.n	80044be <HAL_RCC_OscConfig+0x12a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449c:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80044a0:	f7fe fb34 	bl	8002b0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044a4:	4e6d      	ldr	r6, [pc, #436]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80044a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	039a      	lsls	r2, r3, #14
 80044ac:	f53f af7a 	bmi.w	80043a4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fe fb2c 	bl	8002b0c <HAL_GetTick>
 80044b4:	1bc0      	subs	r0, r0, r7
 80044b6:	42a8      	cmp	r0, r5
 80044b8:	d9f6      	bls.n	80044a8 <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 80044ba:	2003      	movs	r0, #3
}
 80044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044be:	b9b3      	cbnz	r3, 80044ee <HAL_RCC_OscConfig+0x15a>
 80044c0:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c2:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044d4:	f7fe fb1a 	bl	8002b0c <HAL_GetTick>
 80044d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044da:	682b      	ldr	r3, [r5, #0]
 80044dc:	039b      	lsls	r3, r3, #14
 80044de:	f57f af61 	bpl.w	80043a4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e2:	f7fe fb13 	bl	8002b0c <HAL_GetTick>
 80044e6:	1b80      	subs	r0, r0, r6
 80044e8:	42b8      	cmp	r0, r7
 80044ea:	d9f6      	bls.n	80044da <HAL_RCC_OscConfig+0x146>
 80044ec:	e7e5      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	d103      	bne.n	80044fe <HAL_RCC_OscConfig+0x16a>
 80044f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	e7ca      	b.n	8004494 <HAL_RCC_OscConfig+0x100>
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450a:	e7c6      	b.n	800449a <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 800450e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004510:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004512:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8004516:	d003      	beq.n	8004520 <HAL_RCC_OscConfig+0x18c>
 8004518:	2a18      	cmp	r2, #24
 800451a:	d120      	bne.n	800455e <HAL_RCC_OscConfig+0x1ca>
 800451c:	078e      	lsls	r6, r1, #30
 800451e:	d11e      	bne.n	800455e <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	075d      	lsls	r5, r3, #29
 8004524:	d503      	bpl.n	800452e <HAL_RCC_OscConfig+0x19a>
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f43f af36 	beq.w	800439a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	f7fe fb05 	bl	8002b3c <HAL_GetREVID>
 8004532:	f241 0303 	movw	r3, #4099	; 0x1003
 8004536:	6921      	ldr	r1, [r4, #16]
 8004538:	4298      	cmp	r0, r3
 800453a:	4b48      	ldr	r3, [pc, #288]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	d809      	bhi.n	8004554 <HAL_RCC_OscConfig+0x1c0>
 8004540:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8004544:	2940      	cmp	r1, #64	; 0x40
 8004546:	bf0c      	ite	eq
 8004548:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 800454c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e72b      	b.n	80043ac <HAL_RCC_OscConfig+0x18>
 8004554:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8004558:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800455c:	e7f8      	b.n	8004550 <HAL_RCC_OscConfig+0x1bc>
 800455e:	4d3f      	ldr	r5, [pc, #252]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004560:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004562:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004564:	b332      	cbz	r2, 80045b4 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004566:	f023 0319 	bic.w	r3, r3, #25
 800456a:	4313      	orrs	r3, r2
 800456c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800456e:	f7fe facd 	bl	8002b0c <HAL_GetTick>
 8004572:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	0758      	lsls	r0, r3, #29
 8004578:	d511      	bpl.n	800459e <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457a:	f7fe fadf 	bl	8002b3c <HAL_GetREVID>
 800457e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004582:	6922      	ldr	r2, [r4, #16]
 8004584:	4298      	cmp	r0, r3
 8004586:	686b      	ldr	r3, [r5, #4]
 8004588:	d80f      	bhi.n	80045aa <HAL_RCC_OscConfig+0x216>
 800458a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800458e:	2a40      	cmp	r2, #64	; 0x40
 8004590:	bf0c      	ite	eq
 8004592:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8004596:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800459a:	606b      	str	r3, [r5, #4]
 800459c:	e706      	b.n	80043ac <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459e:	f7fe fab5 	bl	8002b0c <HAL_GetTick>
 80045a2:	1b80      	subs	r0, r0, r6
 80045a4:	2802      	cmp	r0, #2
 80045a6:	d9e5      	bls.n	8004574 <HAL_RCC_OscConfig+0x1e0>
 80045a8:	e787      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80045b2:	e7f2      	b.n	800459a <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045ba:	f7fe faa7 	bl	8002b0c <HAL_GetTick>
 80045be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	0759      	lsls	r1, r3, #29
 80045c4:	f57f aef2 	bpl.w	80043ac <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fe faa0 	bl	8002b0c <HAL_GetTick>
 80045cc:	1b80      	subs	r0, r0, r6
 80045ce:	2802      	cmp	r0, #2
 80045d0:	d9f6      	bls.n	80045c0 <HAL_RCC_OscConfig+0x22c>
 80045d2:	e772      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80045da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e70f      	b.n	8004402 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80045e2:	69e3      	ldr	r3, [r4, #28]
 80045e4:	4d1d      	ldr	r5, [pc, #116]	; (800465c <HAL_RCC_OscConfig+0x2c8>)
 80045e6:	b343      	cbz	r3, 800463a <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045f0:	f7fe fa8c 	bl	8002b0c <HAL_GetTick>
 80045f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045f6:	682b      	ldr	r3, [r5, #0]
 80045f8:	05df      	lsls	r7, r3, #23
 80045fa:	d511      	bpl.n	8004620 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045fc:	f7fe fa9e 	bl	8002b3c <HAL_GetREVID>
 8004600:	f241 0303 	movw	r3, #4099	; 0x1003
 8004604:	6a22      	ldr	r2, [r4, #32]
 8004606:	4298      	cmp	r0, r3
 8004608:	d810      	bhi.n	800462c <HAL_RCC_OscConfig+0x298>
 800460a:	686b      	ldr	r3, [r5, #4]
 800460c:	2a20      	cmp	r2, #32
 800460e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004612:	bf0c      	ite	eq
 8004614:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004618:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800461c:	606b      	str	r3, [r5, #4]
 800461e:	e6f0      	b.n	8004402 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004620:	f7fe fa74 	bl	8002b0c <HAL_GetTick>
 8004624:	1b80      	subs	r0, r0, r6
 8004626:	2802      	cmp	r0, #2
 8004628:	d9e5      	bls.n	80045f6 <HAL_RCC_OscConfig+0x262>
 800462a:	e746      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800462c:	68eb      	ldr	r3, [r5, #12]
 800462e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004636:	60eb      	str	r3, [r5, #12]
 8004638:	e6e3      	b.n	8004402 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004640:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004642:	f7fe fa63 	bl	8002b0c <HAL_GetTick>
 8004646:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	05d8      	lsls	r0, r3, #23
 800464c:	f57f aed9 	bpl.w	8004402 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004650:	f7fe fa5c 	bl	8002b0c <HAL_GetTick>
 8004654:	1b80      	subs	r0, r0, r6
 8004656:	2802      	cmp	r0, #2
 8004658:	d9f6      	bls.n	8004648 <HAL_RCC_OscConfig+0x2b4>
 800465a:	e72e      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
 800465c:	58024400 	.word	0x58024400
 8004660:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004664:	6963      	ldr	r3, [r4, #20]
 8004666:	4d96      	ldr	r5, [pc, #600]	; (80048c0 <HAL_RCC_OscConfig+0x52c>)
 8004668:	b183      	cbz	r3, 800468c <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 800466a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004672:	f7fe fa4b 	bl	8002b0c <HAL_GetTick>
 8004676:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004678:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800467a:	079b      	lsls	r3, r3, #30
 800467c:	f53f aec5 	bmi.w	800440a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004680:	f7fe fa44 	bl	8002b0c <HAL_GetTick>
 8004684:	1b80      	subs	r0, r0, r6
 8004686:	2802      	cmp	r0, #2
 8004688:	d9f6      	bls.n	8004678 <HAL_RCC_OscConfig+0x2e4>
 800468a:	e716      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 800468c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004694:	f7fe fa3a 	bl	8002b0c <HAL_GetTick>
 8004698:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800469a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800469c:	079f      	lsls	r7, r3, #30
 800469e:	f57f aeb4 	bpl.w	800440a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fe fa33 	bl	8002b0c <HAL_GetTick>
 80046a6:	1b80      	subs	r0, r0, r6
 80046a8:	2802      	cmp	r0, #2
 80046aa:	d9f6      	bls.n	800469a <HAL_RCC_OscConfig+0x306>
 80046ac:	e705      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80046ae:	69a3      	ldr	r3, [r4, #24]
 80046b0:	4d83      	ldr	r5, [pc, #524]	; (80048c0 <HAL_RCC_OscConfig+0x52c>)
 80046b2:	b183      	cbz	r3, 80046d6 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80046bc:	f7fe fa26 	bl	8002b0c <HAL_GetTick>
 80046c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	0498      	lsls	r0, r3, #18
 80046c6:	f53f aea4 	bmi.w	8004412 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046ca:	f7fe fa1f 	bl	8002b0c <HAL_GetTick>
 80046ce:	1b80      	subs	r0, r0, r6
 80046d0:	2802      	cmp	r0, #2
 80046d2:	d9f6      	bls.n	80046c2 <HAL_RCC_OscConfig+0x32e>
 80046d4:	e6f1      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 80046d6:	682b      	ldr	r3, [r5, #0]
 80046d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80046de:	f7fe fa15 	bl	8002b0c <HAL_GetTick>
 80046e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	0499      	lsls	r1, r3, #18
 80046e8:	f57f ae93 	bpl.w	8004412 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046ec:	f7fe fa0e 	bl	8002b0c <HAL_GetTick>
 80046f0:	1b80      	subs	r0, r0, r6
 80046f2:	2802      	cmp	r0, #2
 80046f4:	d9f6      	bls.n	80046e4 <HAL_RCC_OscConfig+0x350>
 80046f6:	e6e0      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fe fa08 	bl	8002b0c <HAL_GetTick>
 80046fc:	1b80      	subs	r0, r0, r6
 80046fe:	2864      	cmp	r0, #100	; 0x64
 8004700:	f67f ae92 	bls.w	8004428 <HAL_RCC_OscConfig+0x94>
 8004704:	e6d9      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004706:	b9b3      	cbnz	r3, 8004736 <HAL_RCC_OscConfig+0x3a2>
 8004708:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	672b      	str	r3, [r5, #112]	; 0x70
 8004714:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004716:	f023 0304 	bic.w	r3, r3, #4
 800471a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800471c:	f7fe f9f6 	bl	8002b0c <HAL_GetTick>
 8004720:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004722:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004724:	0798      	lsls	r0, r3, #30
 8004726:	f57f ae96 	bpl.w	8004456 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fe f9ef 	bl	8002b0c <HAL_GetTick>
 800472e:	1b80      	subs	r0, r0, r6
 8004730:	42b8      	cmp	r0, r7
 8004732:	d9f6      	bls.n	8004722 <HAL_RCC_OscConfig+0x38e>
 8004734:	e6c1      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004736:	2b05      	cmp	r3, #5
 8004738:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800473a:	d103      	bne.n	8004744 <HAL_RCC_OscConfig+0x3b0>
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	672b      	str	r3, [r5, #112]	; 0x70
 8004742:	e67a      	b.n	800443a <HAL_RCC_OscConfig+0xa6>
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	672b      	str	r3, [r5, #112]	; 0x70
 800474a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	e676      	b.n	8004440 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004752:	f7fe f9db 	bl	8002b0c <HAL_GetTick>
 8004756:	1bc0      	subs	r0, r0, r7
 8004758:	42a8      	cmp	r0, r5
 800475a:	f67f ae78 	bls.w	800444e <HAL_RCC_OscConfig+0xba>
 800475e:	e6ac      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004760:	4d57      	ldr	r5, [pc, #348]	; (80048c0 <HAL_RCC_OscConfig+0x52c>)
 8004762:	692b      	ldr	r3, [r5, #16]
 8004764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004768:	2b18      	cmp	r3, #24
 800476a:	d07a      	beq.n	8004862 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 800476c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004774:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004776:	d167      	bne.n	8004848 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8004778:	f7fe f9c8 	bl	8002b0c <HAL_GetTick>
 800477c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	0199      	lsls	r1, r3, #6
 8004782:	d45b      	bmi.n	800483c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004784:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004788:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800478c:	f023 0303 	bic.w	r3, r3, #3
 8004790:	4313      	orrs	r3, r2
 8004792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004794:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004798:	62ab      	str	r3, [r5, #40]	; 0x28
 800479a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800479c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800479e:	3b01      	subs	r3, #1
 80047a0:	3a01      	subs	r2, #1
 80047a2:	025b      	lsls	r3, r3, #9
 80047a4:	0412      	lsls	r2, r2, #16
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80047ac:	4313      	orrs	r3, r2
 80047ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047b0:	3a01      	subs	r2, #1
 80047b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b6:	4313      	orrs	r3, r2
 80047b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80047ba:	3a01      	subs	r2, #1
 80047bc:	0612      	lsls	r2, r2, #24
 80047be:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80047c2:	4313      	orrs	r3, r2
 80047c4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80047c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80047d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80047d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80047da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80047de:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80047e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047e4:	f023 030c 	bic.w	r3, r3, #12
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80047ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80047f0:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047f4:	4c32      	ldr	r4, [pc, #200]	; (80048c0 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047f6:	4313      	orrs	r3, r2
 80047f8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004802:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800480a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800480c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004810:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8004812:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004820:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004822:	f7fe f973 	bl	8002b0c <HAL_GetTick>
 8004826:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	019a      	lsls	r2, r3, #6
 800482c:	f53f ae17 	bmi.w	800445e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fe f96c 	bl	8002b0c <HAL_GetTick>
 8004834:	1b40      	subs	r0, r0, r5
 8004836:	2802      	cmp	r0, #2
 8004838:	d9f6      	bls.n	8004828 <HAL_RCC_OscConfig+0x494>
 800483a:	e63e      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483c:	f7fe f966 	bl	8002b0c <HAL_GetTick>
 8004840:	1b80      	subs	r0, r0, r6
 8004842:	2802      	cmp	r0, #2
 8004844:	d99b      	bls.n	800477e <HAL_RCC_OscConfig+0x3ea>
 8004846:	e638      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 8004848:	f7fe f960 	bl	8002b0c <HAL_GetTick>
 800484c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800484e:	682b      	ldr	r3, [r5, #0]
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	f57f ae04 	bpl.w	800445e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004856:	f7fe f959 	bl	8002b0c <HAL_GetTick>
 800485a:	1b00      	subs	r0, r0, r4
 800485c:	2802      	cmp	r0, #2
 800485e:	d9f6      	bls.n	800484e <HAL_RCC_OscConfig+0x4ba>
 8004860:	e62b      	b.n	80044ba <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004862:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004864:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004866:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004868:	f43f ae28 	beq.w	80044bc <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004872:	4281      	cmp	r1, r0
 8004874:	f47f ad91 	bne.w	800439a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004878:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800487e:	428a      	cmp	r2, r1
 8004880:	f47f ad8b 	bne.w	800439a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004884:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004886:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800488a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800488c:	4291      	cmp	r1, r2
 800488e:	f47f ad84 	bne.w	800439a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004892:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004894:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8004898:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800489a:	4291      	cmp	r1, r2
 800489c:	f47f ad7d 	bne.w	800439a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048a2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80048a6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048a8:	4291      	cmp	r1, r2
 80048aa:	f47f ad76 	bne.w	800439a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80048b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80048b4:	3801      	subs	r0, #1
    return HAL_ERROR;
 80048b6:	1a18      	subs	r0, r3, r0
 80048b8:	bf18      	it	ne
 80048ba:	2001      	movne	r0, #1
 80048bc:	e5fe      	b.n	80044bc <HAL_RCC_OscConfig+0x128>
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400

080048c4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c4:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x11c>)
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80048cc:	2a10      	cmp	r2, #16
{
 80048ce:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	f000 8084 	beq.w	80049dc <HAL_RCC_GetSysClockFreq+0x118>
 80048d4:	2a18      	cmp	r2, #24
 80048d6:	d00c      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x2e>
 80048d8:	b10a      	cbz	r2, 80048de <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80048da:	4842      	ldr	r0, [pc, #264]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80048dc:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4841      	ldr	r0, [pc, #260]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x124>)
 80048e2:	f012 0f20 	tst.w	r2, #32
 80048e6:	d0f9      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048ee:	40d8      	lsrs	r0, r3
 80048f0:	e7f4      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80048f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80048f8:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80048fc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 80048fe:	2800      	cmp	r0, #0
 8004900:	d0ec      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x18>
 8004902:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004906:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800490a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 800490e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004912:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004916:	4342      	muls	r2, r0
 8004918:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800491c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8004920:	2a01      	cmp	r2, #1
 8004922:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8004926:	d002      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x6a>
 8004928:	d30f      	bcc.n	800494a <HAL_RCC_GetSysClockFreq+0x86>
 800492a:	2a02      	cmp	r2, #2
 800492c:	d048      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004934:	ee07 3a10 	vmov	s14, r3
 8004938:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800493c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004940:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004944:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80049ec <HAL_RCC_GetSysClockFreq+0x128>
 8004948:	e037      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	0692      	lsls	r2, r2, #26
 800494e:	d527      	bpl.n	80049a0 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x124>)
 8004954:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800495a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800495c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004960:	ee07 2a10 	vmov	s14, r2
 8004964:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004968:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800496c:	ee06 3a90 	vmov	s13, r3
 8004970:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004978:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800497c:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800497e:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004988:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800498a:	ee07 3a10 	vmov	s14, r3
 800498e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004992:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004996:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800499a:	ee17 0a90 	vmov	r0, s15
 800499e:	e79d      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a10 	vmov	s14, r3
 80049aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80049b6:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80049f0 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049ba:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80049be:	e7dd      	b.n	800497c <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a10 	vmov	s14, r3
 80049ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80049d6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80049f4 <HAL_RCC_GetSysClockFreq+0x130>
 80049da:	e7ee      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 80049dc:	4806      	ldr	r0, [pc, #24]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x134>)
 80049de:	e77d      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x18>
 80049e0:	58024400 	.word	0x58024400
 80049e4:	003d0900 	.word	0x003d0900
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	4a742400 	.word	0x4a742400
 80049f0:	4c742400 	.word	0x4c742400
 80049f4:	4bbebc20 	.word	0x4bbebc20
 80049f8:	017d7840 	.word	0x017d7840

080049fc <HAL_RCC_ClockConfig>:
{
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004a02:	4604      	mov	r4, r0
 8004a04:	b910      	cbnz	r0, 8004a0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004a06:	2001      	movs	r0, #1
}
 8004a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a0c:	4a88      	ldr	r2, [pc, #544]	; (8004c30 <HAL_RCC_ClockConfig+0x234>)
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	428b      	cmp	r3, r1
 8004a16:	f0c0 8093 	bcc.w	8004b40 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	075f      	lsls	r7, r3, #29
 8004a1e:	f100 809b 	bmi.w	8004b58 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a22:	071e      	lsls	r6, r3, #28
 8004a24:	d50b      	bpl.n	8004a3e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a26:	4983      	ldr	r1, [pc, #524]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004a28:	6966      	ldr	r6, [r4, #20]
 8004a2a:	69c8      	ldr	r0, [r1, #28]
 8004a2c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004a30:	4286      	cmp	r6, r0
 8004a32:	d904      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a34:	69ca      	ldr	r2, [r1, #28]
 8004a36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a3a:	4332      	orrs	r2, r6
 8004a3c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	06d8      	lsls	r0, r3, #27
 8004a40:	d50b      	bpl.n	8004a5a <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a42:	497c      	ldr	r1, [pc, #496]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004a44:	69a6      	ldr	r6, [r4, #24]
 8004a46:	69c8      	ldr	r0, [r1, #28]
 8004a48:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004a4c:	4286      	cmp	r6, r0
 8004a4e:	d904      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a50:	69ca      	ldr	r2, [r1, #28]
 8004a52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a56:	4332      	orrs	r2, r6
 8004a58:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a5a:	0699      	lsls	r1, r3, #26
 8004a5c:	d50b      	bpl.n	8004a76 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a5e:	4975      	ldr	r1, [pc, #468]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004a60:	69e6      	ldr	r6, [r4, #28]
 8004a62:	6a08      	ldr	r0, [r1, #32]
 8004a64:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004a68:	4286      	cmp	r6, r0
 8004a6a:	d904      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a6c:	6a0a      	ldr	r2, [r1, #32]
 8004a6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a72:	4332      	orrs	r2, r6
 8004a74:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	079a      	lsls	r2, r3, #30
 8004a78:	d50b      	bpl.n	8004a92 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a7a:	496e      	ldr	r1, [pc, #440]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004a7c:	68e6      	ldr	r6, [r4, #12]
 8004a7e:	6988      	ldr	r0, [r1, #24]
 8004a80:	f000 000f 	and.w	r0, r0, #15
 8004a84:	4286      	cmp	r6, r0
 8004a86:	d904      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	698a      	ldr	r2, [r1, #24]
 8004a8a:	f022 020f 	bic.w	r2, r2, #15
 8004a8e:	4332      	orrs	r2, r6
 8004a90:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	07df      	lsls	r7, r3, #31
 8004a94:	d46e      	bmi.n	8004b74 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	079e      	lsls	r6, r3, #30
 8004a9a:	f100 80a1 	bmi.w	8004be0 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9e:	4964      	ldr	r1, [pc, #400]	; (8004c30 <HAL_RCC_ClockConfig+0x234>)
 8004aa0:	680a      	ldr	r2, [r1, #0]
 8004aa2:	f002 020f 	and.w	r2, r2, #15
 8004aa6:	42aa      	cmp	r2, r5
 8004aa8:	f200 80a8 	bhi.w	8004bfc <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004aac:	0758      	lsls	r0, r3, #29
 8004aae:	f100 80b1 	bmi.w	8004c14 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab2:	0719      	lsls	r1, r3, #28
 8004ab4:	d50b      	bpl.n	8004ace <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ab6:	495f      	ldr	r1, [pc, #380]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004ab8:	6965      	ldr	r5, [r4, #20]
 8004aba:	69c8      	ldr	r0, [r1, #28]
 8004abc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004ac0:	4285      	cmp	r5, r0
 8004ac2:	d204      	bcs.n	8004ace <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ac4:	69ca      	ldr	r2, [r1, #28]
 8004ac6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004aca:	432a      	orrs	r2, r5
 8004acc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ace:	06da      	lsls	r2, r3, #27
 8004ad0:	d50b      	bpl.n	8004aea <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ad2:	4958      	ldr	r1, [pc, #352]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004ad4:	69a5      	ldr	r5, [r4, #24]
 8004ad6:	69c8      	ldr	r0, [r1, #28]
 8004ad8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004adc:	4285      	cmp	r5, r0
 8004ade:	d204      	bcs.n	8004aea <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ae0:	69ca      	ldr	r2, [r1, #28]
 8004ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ae6:	432a      	orrs	r2, r5
 8004ae8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aea:	069b      	lsls	r3, r3, #26
 8004aec:	d50b      	bpl.n	8004b06 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004aee:	4a51      	ldr	r2, [pc, #324]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004af0:	69e0      	ldr	r0, [r4, #28]
 8004af2:	6a11      	ldr	r1, [r2, #32]
 8004af4:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8004af8:	4288      	cmp	r0, r1
 8004afa:	d204      	bcs.n	8004b06 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004afc:	6a13      	ldr	r3, [r2, #32]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	4303      	orrs	r3, r0
 8004b04:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b06:	f7ff fedd 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004b0a:	494a      	ldr	r1, [pc, #296]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004b0c:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <HAL_RCC_ClockConfig+0x23c>)
 8004b0e:	698b      	ldr	r3, [r1, #24]
 8004b10:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004b14:	5cd3      	ldrb	r3, [r2, r3]
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b1c:	698b      	ldr	r3, [r1, #24]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	4a45      	ldr	r2, [pc, #276]	; (8004c3c <HAL_RCC_ClockConfig+0x240>)
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	fa20 f303 	lsr.w	r3, r0, r3
 8004b2e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004b30:	4b43      	ldr	r3, [pc, #268]	; (8004c40 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004b34:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCC_ClockConfig+0x248>)
}
 8004b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	f7fd bf88 	b.w	8002a50 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	f023 030f 	bic.w	r3, r3, #15
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	428b      	cmp	r3, r1
 8004b52:	f47f af58 	bne.w	8004a06 <HAL_RCC_ClockConfig+0xa>
 8004b56:	e760      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b58:	4936      	ldr	r1, [pc, #216]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004b5a:	6926      	ldr	r6, [r4, #16]
 8004b5c:	6988      	ldr	r0, [r1, #24]
 8004b5e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004b62:	4286      	cmp	r6, r0
 8004b64:	f67f af5d 	bls.w	8004a22 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b68:	698a      	ldr	r2, [r1, #24]
 8004b6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b6e:	4332      	orrs	r2, r6
 8004b70:	618a      	str	r2, [r1, #24]
 8004b72:	e756      	b.n	8004a22 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b74:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004b76:	68a1      	ldr	r1, [r4, #8]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b82:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b84:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b86:	2902      	cmp	r1, #2
 8004b88:	d11d      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b8e:	f43f af3a 	beq.w	8004a06 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b98:	4e26      	ldr	r6, [pc, #152]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b9a:	f022 0207 	bic.w	r2, r2, #7
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8004ba2:	f7fd ffb3 	bl	8002b0c <HAL_GetTick>
 8004ba6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba8:	6933      	ldr	r3, [r6, #16]
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004bb4:	f43f af6f 	beq.w	8004a96 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fd ffa8 	bl	8002b0c <HAL_GetTick>
 8004bbc:	1bc0      	subs	r0, r0, r7
 8004bbe:	4540      	cmp	r0, r8
 8004bc0:	d9f2      	bls.n	8004ba8 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	e720      	b.n	8004a08 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc6:	2903      	cmp	r1, #3
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004bce:	e7de      	b.n	8004b8e <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bd0:	2901      	cmp	r1, #1
 8004bd2:	d102      	bne.n	8004bda <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bd4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004bd8:	e7d9      	b.n	8004b8e <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bda:	f012 0f04 	tst.w	r2, #4
 8004bde:	e7d6      	b.n	8004b8e <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004be0:	4914      	ldr	r1, [pc, #80]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004be2:	68e6      	ldr	r6, [r4, #12]
 8004be4:	6988      	ldr	r0, [r1, #24]
 8004be6:	f000 000f 	and.w	r0, r0, #15
 8004bea:	4286      	cmp	r6, r0
 8004bec:	f4bf af57 	bcs.w	8004a9e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	698a      	ldr	r2, [r1, #24]
 8004bf2:	f022 020f 	bic.w	r2, r2, #15
 8004bf6:	4332      	orrs	r2, r6
 8004bf8:	618a      	str	r2, [r1, #24]
 8004bfa:	e750      	b.n	8004a9e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfc:	680a      	ldr	r2, [r1, #0]
 8004bfe:	f022 020f 	bic.w	r2, r2, #15
 8004c02:	432a      	orrs	r2, r5
 8004c04:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	680a      	ldr	r2, [r1, #0]
 8004c08:	f002 020f 	and.w	r2, r2, #15
 8004c0c:	42aa      	cmp	r2, r5
 8004c0e:	f47f aefa 	bne.w	8004a06 <HAL_RCC_ClockConfig+0xa>
 8004c12:	e74b      	b.n	8004aac <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c14:	4907      	ldr	r1, [pc, #28]	; (8004c34 <HAL_RCC_ClockConfig+0x238>)
 8004c16:	6925      	ldr	r5, [r4, #16]
 8004c18:	6988      	ldr	r0, [r1, #24]
 8004c1a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004c1e:	4285      	cmp	r5, r0
 8004c20:	f4bf af47 	bcs.w	8004ab2 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c24:	698a      	ldr	r2, [r1, #24]
 8004c26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c2a:	432a      	orrs	r2, r5
 8004c2c:	618a      	str	r2, [r1, #24]
 8004c2e:	e740      	b.n	8004ab2 <HAL_RCC_ClockConfig+0xb6>
 8004c30:	52002000 	.word	0x52002000
 8004c34:	58024400 	.word	0x58024400
 8004c38:	08006ec0 	.word	0x08006ec0
 8004c3c:	20000104 	.word	0x20000104
 8004c40:	20000100 	.word	0x20000100
 8004c44:	2000010c 	.word	0x2000010c

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c4a:	f7ff fe3b 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x34>)
 8004c50:	490b      	ldr	r1, [pc, #44]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x38>)
 8004c52:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c54:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c56:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c5a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c68:	5c88      	ldrb	r0, [r1, r2]
 8004c6a:	4a06      	ldr	r2, [pc, #24]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004c6c:	f000 001f 	and.w	r0, r0, #31
 8004c70:	fa23 f000 	lsr.w	r0, r3, r0
 8004c74:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x40>)
 8004c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004c7a:	bd08      	pop	{r3, pc}
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	08006ec0 	.word	0x08006ec0
 8004c84:	20000104 	.word	0x20000104
 8004c88:	20000100 	.word	0x20000100

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c8e:	f7ff ffdb 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c94:	4a05      	ldr	r2, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ca2:	40d8      	lsrs	r0, r3
 8004ca4:	bd08      	pop	{r3, pc}
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	08006ec0 	.word	0x08006ec0

08004cb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cb2:	4c3a      	ldr	r4, [pc, #232]	; (8004d9c <RCCEx_PLL2_Config+0xec>)
{
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d069      	beq.n	8004d96 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fd ff1f 	bl	8002b0c <HAL_GetTick>
 8004cce:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	011a      	lsls	r2, r3, #4
 8004cd4:	d44b      	bmi.n	8004d6e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cd8:	6832      	ldr	r2, [r6, #0]
 8004cda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004cde:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004ce2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ce4:	68b3      	ldr	r3, [r6, #8]
 8004ce6:	68f2      	ldr	r2, [r6, #12]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	3a01      	subs	r2, #1
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	0412      	lsls	r2, r2, #16
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	6872      	ldr	r2, [r6, #4]
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d00:	4313      	orrs	r3, r2
 8004d02:	6932      	ldr	r2, [r6, #16]
 8004d04:	3a01      	subs	r2, #1
 8004d06:	0612      	lsls	r2, r2, #24
 8004d08:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d12:	6972      	ldr	r2, [r6, #20]
 8004d14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d1e:	69b2      	ldr	r2, [r6, #24]
 8004d20:	f023 0320 	bic.w	r3, r3, #32
 8004d24:	4313      	orrs	r3, r2
 8004d26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d2a:	f023 0310 	bic.w	r3, r3, #16
 8004d2e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d32:	69f2      	ldr	r2, [r6, #28]
 8004d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d40:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d44:	f043 0310 	orr.w	r3, r3, #16
 8004d48:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004d4c:	b9b5      	cbnz	r5, 8004d7c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d52:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d54:	4c11      	ldr	r4, [pc, #68]	; (8004d9c <RCCEx_PLL2_Config+0xec>)
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d5c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5e:	f7fd fed5 	bl	8002b0c <HAL_GetTick>
 8004d62:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	d50f      	bpl.n	8004d8a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e005      	b.n	8004d7a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d6e:	f7fd fecd 	bl	8002b0c <HAL_GetTick>
 8004d72:	1bc0      	subs	r0, r0, r7
 8004d74:	2802      	cmp	r0, #2
 8004d76:	d9ab      	bls.n	8004cd0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8004d78:	2003      	movs	r0, #3
}
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d7c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d7e:	bf0c      	ite	eq
 8004d80:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d84:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004d88:	e7e3      	b.n	8004d52 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d8a:	f7fd febf 	bl	8002b0c <HAL_GetTick>
 8004d8e:	1b40      	subs	r0, r0, r5
 8004d90:	2802      	cmp	r0, #2
 8004d92:	d9e7      	bls.n	8004d64 <RCCEx_PLL2_Config+0xb4>
 8004d94:	e7f0      	b.n	8004d78 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8004d96:	2001      	movs	r0, #1
 8004d98:	e7ef      	b.n	8004d7a <RCCEx_PLL2_Config+0xca>
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400

08004da0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da2:	4c3a      	ldr	r4, [pc, #232]	; (8004e8c <RCCEx_PLL3_Config+0xec>)
{
 8004da4:	4606      	mov	r6, r0
 8004da6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d069      	beq.n	8004e86 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dba:	f7fd fea7 	bl	8002b0c <HAL_GetTick>
 8004dbe:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	009a      	lsls	r2, r3, #2
 8004dc4:	d44b      	bmi.n	8004e5e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dc8:	6832      	ldr	r2, [r6, #0]
 8004dca:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004dce:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004dd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dd4:	68b3      	ldr	r3, [r6, #8]
 8004dd6:	68f2      	ldr	r2, [r6, #12]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	025b      	lsls	r3, r3, #9
 8004dde:	0412      	lsls	r2, r2, #16
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004de6:	4313      	orrs	r3, r2
 8004de8:	6872      	ldr	r2, [r6, #4]
 8004dea:	3a01      	subs	r2, #1
 8004dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df0:	4313      	orrs	r3, r2
 8004df2:	6932      	ldr	r2, [r6, #16]
 8004df4:	3a01      	subs	r2, #1
 8004df6:	0612      	lsls	r2, r2, #24
 8004df8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e02:	6972      	ldr	r2, [r6, #20]
 8004e04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e0e:	69b2      	ldr	r2, [r6, #24]
 8004e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e14:	4313      	orrs	r3, r2
 8004e16:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e22:	69f2      	ldr	r2, [r6, #28]
 8004e24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e30:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e38:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004e3c:	b9b5      	cbnz	r5, 8004e6c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e42:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e44:	4c11      	ldr	r4, [pc, #68]	; (8004e8c <RCCEx_PLL3_Config+0xec>)
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4e:	f7fd fe5d 	bl	8002b0c <HAL_GetTick>
 8004e52:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	d50f      	bpl.n	8004e7a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e005      	b.n	8004e6a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e5e:	f7fd fe55 	bl	8002b0c <HAL_GetTick>
 8004e62:	1bc0      	subs	r0, r0, r7
 8004e64:	2802      	cmp	r0, #2
 8004e66:	d9ab      	bls.n	8004dc0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8004e68:	2003      	movs	r0, #3
}
 8004e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e6c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e6e:	bf0c      	ite	eq
 8004e70:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e74:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004e78:	e7e3      	b.n	8004e42 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e7a:	f7fd fe47 	bl	8002b0c <HAL_GetTick>
 8004e7e:	1b40      	subs	r0, r0, r5
 8004e80:	2802      	cmp	r0, #2
 8004e82:	d9e7      	bls.n	8004e54 <RCCEx_PLL3_Config+0xb4>
 8004e84:	e7f0      	b.n	8004e68 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8004e86:	2001      	movs	r0, #1
 8004e88:	e7ef      	b.n	8004e6a <RCCEx_PLL3_Config+0xca>
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400

08004e90 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e94:	6806      	ldr	r6, [r0, #0]
{
 8004e96:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e98:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8004e9c:	d023      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e9e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea4:	d018      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004ea6:	d802      	bhi.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ea8:	b183      	cbz	r3, 8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8004eaa:	2601      	movs	r6, #1
 8004eac:	e01b      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb2:	d023      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004eb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eb8:	d1f7      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004eba:	4a9f      	ldr	r2, [pc, #636]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004ec0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004ec2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	6513      	str	r3, [r2, #80]	; 0x50
 8004eca:	e00c      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ecc:	4a9a      	ldr	r2, [pc, #616]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004ece:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ed6:	e7f0      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ed8:	2102      	movs	r1, #2
 8004eda:	3004      	adds	r0, #4
 8004edc:	f7ff fee8 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ee0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0e9      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	05dd      	lsls	r5, r3, #23
 8004eea:	d534      	bpl.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004eec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d830      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004ef2:	e8df f003 	tbb	[pc, r3]
 8004ef6:	0f08      	.short	0x0f08
 8004ef8:	0d29      	.short	0x0d29
 8004efa:	0d          	.byte	0x0d
 8004efb:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004efc:	2102      	movs	r1, #2
 8004efe:	3024      	adds	r0, #36	; 0x24
 8004f00:	f7ff ff4e 	bl	8004da0 <RCCEx_PLL3_Config>
 8004f04:	e7ec      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f06:	4a8c      	ldr	r2, [pc, #560]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004f08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f10:	4635      	mov	r5, r6
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f14:	2100      	movs	r1, #0
 8004f16:	1d20      	adds	r0, r4, #4
 8004f18:	f7ff feca 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f1e:	b9e5      	cbnz	r5, 8004f5a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f20:	4a85      	ldr	r2, [pc, #532]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004f22:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004f24:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0598      	lsls	r0, r3, #22
 8004f32:	d521      	bpl.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f36:	2b80      	cmp	r3, #128	; 0x80
 8004f38:	d03b      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004f3a:	d810      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004f3c:	b36b      	cbz	r3, 8004f9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d031      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8004f42:	2601      	movs	r6, #1
 8004f44:	4635      	mov	r5, r6
 8004f46:	e017      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f4e:	f7ff ff27 	bl	8004da0 <RCCEx_PLL3_Config>
 8004f52:	e7e3      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8004f54:	2601      	movs	r6, #1
 8004f56:	4635      	mov	r5, r6
 8004f58:	e7e9      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004f5a:	462e      	mov	r6, r5
 8004f5c:	e7e7      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f60:	d002      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d1ec      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8004f68:	bb4d      	cbnz	r5, 8004fbe <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f6a:	4a73      	ldr	r2, [pc, #460]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004f6c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f6e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f70:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	0559      	lsls	r1, r3, #21
 8004f7c:	d530      	bpl.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f7e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f86:	d047      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004f88:	d81b      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d038      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f92:	d03b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8004f94:	2601      	movs	r6, #1
 8004f96:	4635      	mov	r5, r6
 8004f98:	e022      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f9a:	4a67      	ldr	r2, [pc, #412]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004f9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004fa4:	e7e0      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	1d20      	adds	r0, r4, #4
 8004faa:	f7ff fe81 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fae:	4605      	mov	r5, r0
      break;
 8004fb0:	e7da      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fb8:	f7ff fef2 	bl	8004da0 <RCCEx_PLL3_Config>
 8004fbc:	e7f7      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004fbe:	462e      	mov	r6, r5
 8004fc0:	e7da      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fc6:	d002      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fcc:	d1e2      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8004fce:	bb4d      	cbnz	r5, 8005024 <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fd0:	4a59      	ldr	r2, [pc, #356]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004fd2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004fd6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004fd8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	051a      	lsls	r2, r3, #20
 8004fe4:	d52f      	bpl.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004fe6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fee:	d041      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004ff0:	d81a      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004ff2:	b39b      	cbz	r3, 800505c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff8:	d036      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8004ffa:	2601      	movs	r6, #1
 8004ffc:	4635      	mov	r5, r6
 8004ffe:	e022      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4a4d      	ldr	r2, [pc, #308]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005008:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800500a:	e7e0      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800500c:	2100      	movs	r1, #0
 800500e:	1d20      	adds	r0, r4, #4
 8005010:	f7ff fe4e 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005014:	4605      	mov	r5, r0
      break;
 8005016:	e7da      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005018:	2100      	movs	r1, #0
 800501a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800501e:	f7ff febf 	bl	8004da0 <RCCEx_PLL3_Config>
 8005022:	e7f7      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8005024:	462e      	mov	r6, r5
 8005026:	e7db      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005028:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800502c:	d002      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800502e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005032:	d1e2      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8005034:	bb25      	cbnz	r5, 8005080 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005036:	4a40      	ldr	r2, [pc, #256]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005038:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800503c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800503e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005042:	430b      	orrs	r3, r1
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	d527      	bpl.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 800504c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800504e:	2b10      	cmp	r3, #16
 8005050:	d033      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005052:	d817      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8005054:	b1d3      	cbz	r3, 800508c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8005056:	2601      	movs	r6, #1
 8005058:	4635      	mov	r5, r6
 800505a:	e01f      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505c:	4a36      	ldr	r2, [pc, #216]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800505e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8005066:	e7e5      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005068:	2100      	movs	r1, #0
 800506a:	1d20      	adds	r0, r4, #4
 800506c:	f7ff fe20 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005070:	4605      	mov	r5, r0
      break;
 8005072:	e7df      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005074:	2100      	movs	r1, #0
 8005076:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800507a:	f7ff fe91 	bl	8004da0 <RCCEx_PLL3_Config>
 800507e:	e7f7      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8005080:	462e      	mov	r6, r5
 8005082:	e7e0      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8005084:	2b20      	cmp	r3, #32
 8005086:	d01e      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8005088:	2b30      	cmp	r3, #48	; 0x30
 800508a:	d1e4      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 800508c:	bb0d      	cbnz	r5, 80050d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800508e:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005092:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005094:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005098:	430b      	orrs	r3, r1
 800509a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	04df      	lsls	r7, r3, #19
 80050a0:	d527      	bpl.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 80050a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a8:	d03e      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050aa:	d814      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80050ac:	b383      	cbz	r3, 8005110 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	d033      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 80050b4:	2601      	movs	r6, #1
 80050b6:	4635      	mov	r5, r6
 80050b8:	e01b      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ba:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80050bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80050c4:	e7e2      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050c6:	2102      	movs	r1, #2
 80050c8:	1d20      	adds	r0, r4, #4
 80050ca:	f7ff fdf1 	bl	8004cb0 <RCCEx_PLL2_Config>
 80050ce:	4605      	mov	r5, r0
      break;
 80050d0:	e7dc      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80050d2:	462e      	mov	r6, r5
 80050d4:	e7e2      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80050d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050da:	d002      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80050dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e0:	d1e8      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80050e2:	bb3d      	cbnz	r5, 8005134 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80050e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	0498      	lsls	r0, r3, #18
 80050f6:	d532      	bpl.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 80050f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050fe:	d044      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005100:	d81c      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005102:	b323      	cbz	r3, 800514e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d039      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 800510a:	2601      	movs	r6, #1
 800510c:	4635      	mov	r5, r6
 800510e:	e026      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005110:	4a09      	ldr	r2, [pc, #36]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005112:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800511a:	e7e2      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800511c:	2100      	movs	r1, #0
 800511e:	1d20      	adds	r0, r4, #4
 8005120:	f7ff fdc6 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005124:	4605      	mov	r5, r0
      break;
 8005126:	e7dc      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005128:	2100      	movs	r1, #0
 800512a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800512e:	f7ff fe37 	bl	8004da0 <RCCEx_PLL3_Config>
 8005132:	e7f7      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8005134:	462e      	mov	r6, r5
 8005136:	e7dc      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005138:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 800513c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005140:	d005      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8005142:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005146:	d002      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8005148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800514c:	d1dd      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 800514e:	bb15      	cbnz	r5, 8005196 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005150:	4aa0      	ldr	r2, [pc, #640]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005152:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005154:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005156:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800515a:	430b      	orrs	r3, r1
 800515c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	0459      	lsls	r1, r3, #17
 8005162:	d52d      	bpl.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8005164:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8005168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800516c:	d04b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800516e:	d814      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005170:	b1e3      	cbz	r3, 80051ac <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005176:	d040      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8005178:	2601      	movs	r6, #1
 800517a:	4635      	mov	r5, r6
 800517c:	e020      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800517e:	2101      	movs	r1, #1
 8005180:	1d20      	adds	r0, r4, #4
 8005182:	f7ff fd95 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005186:	4605      	mov	r5, r0
      break;
 8005188:	e7e1      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800518a:	2101      	movs	r1, #1
 800518c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005190:	f7ff fe06 	bl	8004da0 <RCCEx_PLL3_Config>
 8005194:	e7f7      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8005196:	462e      	mov	r6, r5
 8005198:	e7e1      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d005      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80051a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051a4:	d002      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80051a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051aa:	d1e5      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	d130      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051b0:	4a88      	ldr	r2, [pc, #544]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80051b2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80051b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80051b8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80051bc:	430b      	orrs	r3, r1
 80051be:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	041a      	lsls	r2, r3, #16
 80051c4:	d50f      	bpl.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 80051c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80051c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051cc:	d023      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d2:	d026      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80051d4:	bb5b      	cbnz	r3, 800522e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 80051d6:	bb6d      	cbnz	r5, 8005234 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051d8:	4a7e      	ldr	r2, [pc, #504]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80051da:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80051dc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80051de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	01db      	lsls	r3, r3, #7
 80051ea:	d533      	bpl.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 80051ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d874      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80051f2:	e8df f003 	tbb	[pc, r3]
 80051f6:	2126      	.short	0x2126
 80051f8:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051fa:	2101      	movs	r1, #1
 80051fc:	1d20      	adds	r0, r4, #4
 80051fe:	f7ff fd57 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005202:	4605      	mov	r5, r0
      break;
 8005204:	e7d2      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005206:	2101      	movs	r1, #1
 8005208:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800520c:	f7ff fdc8 	bl	8004da0 <RCCEx_PLL3_Config>
 8005210:	e7f7      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005212:	462e      	mov	r6, r5
 8005214:	e7d4      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005216:	4a6f      	ldr	r2, [pc, #444]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005218:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800521a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8005220:	e7d9      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005222:	2101      	movs	r1, #1
 8005224:	1d20      	adds	r0, r4, #4
 8005226:	f7ff fd43 	bl	8004cb0 <RCCEx_PLL2_Config>
 800522a:	4605      	mov	r5, r0
      break;
 800522c:	e7d3      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 800522e:	2601      	movs	r6, #1
 8005230:	4635      	mov	r5, r6
 8005232:	e7d8      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005234:	462e      	mov	r6, r5
 8005236:	e7d6      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005238:	4a66      	ldr	r2, [pc, #408]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800523a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005242:	2d00      	cmp	r5, #0
 8005244:	d14d      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005246:	4a63      	ldr	r2, [pc, #396]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005248:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800524a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	430b      	orrs	r3, r1
 8005252:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	025f      	lsls	r7, r3, #9
 8005258:	d54d      	bpl.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525a:	4f5f      	ldr	r7, [pc, #380]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005262:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005264:	f7fd fc52 	bl	8002b0c <HAL_GetTick>
 8005268:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	05d8      	lsls	r0, r3, #23
 800526e:	d53a      	bpl.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 8005270:	2d00      	cmp	r5, #0
 8005272:	d161      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005274:	4b57      	ldr	r3, [pc, #348]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005276:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800527a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800527c:	4042      	eors	r2, r0
 800527e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8005282:	d00b      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005286:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005288:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800528c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005290:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005292:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005294:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005298:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800529a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800529c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80052a0:	d036      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80052a6:	494b      	ldr	r1, [pc, #300]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80052a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80052ac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80052b0:	d13e      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80052b2:	6908      	ldr	r0, [r1, #16]
 80052b4:	4a49      	ldr	r2, [pc, #292]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80052b6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80052ba:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80052be:	4302      	orrs	r2, r0
 80052c0:	610a      	str	r2, [r1, #16]
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	4a43      	ldr	r2, [pc, #268]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80052c8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80052ca:	430b      	orrs	r3, r1
 80052cc:	6713      	str	r3, [r2, #112]	; 0x70
 80052ce:	e012      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052d0:	2102      	movs	r1, #2
 80052d2:	1d20      	adds	r0, r4, #4
 80052d4:	f7ff fcec 	bl	8004cb0 <RCCEx_PLL2_Config>
 80052d8:	4605      	mov	r5, r0
      break;
 80052da:	e7b2      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 80052dc:	2601      	movs	r6, #1
 80052de:	4635      	mov	r5, r6
 80052e0:	e7b8      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80052e2:	462e      	mov	r6, r5
 80052e4:	e7b6      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fd fc11 	bl	8002b0c <HAL_GetTick>
 80052ea:	eba0 0008 	sub.w	r0, r0, r8
 80052ee:	2864      	cmp	r0, #100	; 0x64
 80052f0:	d9bb      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 80052f2:	2603      	movs	r6, #3
 80052f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	07da      	lsls	r2, r3, #31
 80052fa:	d52d      	bpl.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 80052fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d03b      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005302:	d81b      	bhi.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005304:	b303      	cbz	r3, 8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d031      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 800530a:	2601      	movs	r6, #1
 800530c:	4635      	mov	r5, r6
 800530e:	e023      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8005310:	f7fd fbfc 	bl	8002b0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005314:	4f2f      	ldr	r7, [pc, #188]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8005316:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800531c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800531e:	0799      	lsls	r1, r3, #30
 8005320:	d4bf      	bmi.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fd fbf3 	bl	8002b0c <HAL_GetTick>
 8005326:	eba0 0008 	sub.w	r0, r0, r8
 800532a:	4548      	cmp	r0, r9
 800532c:	d9f6      	bls.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800532e:	e7e0      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005330:	690a      	ldr	r2, [r1, #16]
 8005332:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005336:	e7c3      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005338:	462e      	mov	r6, r5
 800533a:	e7dc      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 800533c:	2b20      	cmp	r3, #32
 800533e:	d003      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8005340:	2b28      	cmp	r3, #40	; 0x28
 8005342:	d001      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8005344:	2b18      	cmp	r3, #24
 8005346:	d1e0      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8005348:	b9ed      	cbnz	r5, 8005386 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800534a:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800534c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800534e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005350:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005354:	430b      	orrs	r3, r1
 8005356:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	079b      	lsls	r3, r3, #30
 800535c:	d522      	bpl.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800535e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005360:	2b05      	cmp	r3, #5
 8005362:	d831      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005364:	e8df f003 	tbb	[pc, r3]
 8005368:	162a1116 	.word	0x162a1116
 800536c:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800536e:	2101      	movs	r1, #1
 8005370:	1d20      	adds	r0, r4, #4
 8005372:	f7ff fc9d 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005376:	4605      	mov	r5, r0
      break;
 8005378:	e7e6      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800537a:	2101      	movs	r1, #1
 800537c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005380:	f7ff fd0e 	bl	8004da0 <RCCEx_PLL3_Config>
 8005384:	e7f7      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005386:	462e      	mov	r6, r5
 8005388:	e7e6      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800538a:	2101      	movs	r1, #1
 800538c:	1d20      	adds	r0, r4, #4
 800538e:	f7ff fc8f 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005392:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005394:	b9dd      	cbnz	r5, 80053ce <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005396:	4a0f      	ldr	r2, [pc, #60]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005398:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800539a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	075f      	lsls	r7, r3, #29
 80053a8:	d528      	bpl.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80053aa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d83a      	bhi.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80053b2:	e8df f003 	tbb	[pc, r3]
 80053b6:	151a      	.short	0x151a
 80053b8:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053bc:	2101      	movs	r1, #1
 80053be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80053c2:	f7ff fced 	bl	8004da0 <RCCEx_PLL3_Config>
 80053c6:	e7e4      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 80053c8:	2601      	movs	r6, #1
 80053ca:	4635      	mov	r5, r6
 80053cc:	e7ea      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053ce:	462e      	mov	r6, r5
 80053d0:	e7e8      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400
 80053d8:	58024800 	.word	0x58024800
 80053dc:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053e0:	2101      	movs	r1, #1
 80053e2:	1d20      	adds	r0, r4, #4
 80053e4:	f7ff fc64 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053e8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80053ea:	bb05      	cbnz	r5, 800542e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ec:	4a98      	ldr	r2, [pc, #608]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80053ee:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80053f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80053f4:	f023 0307 	bic.w	r3, r3, #7
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	0698      	lsls	r0, r3, #26
 8005400:	d529      	bpl.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005402:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540a:	d03a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800540c:	d811      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800540e:	b1cb      	cbz	r3, 8005444 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005414:	d02f      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8005416:	2601      	movs	r6, #1
 8005418:	4635      	mov	r5, r6
 800541a:	e01c      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800541c:	2101      	movs	r1, #1
 800541e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005422:	f7ff fcbd 	bl	8004da0 <RCCEx_PLL3_Config>
 8005426:	e7df      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8005428:	2601      	movs	r6, #1
 800542a:	4635      	mov	r5, r6
 800542c:	e7e6      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800542e:	462e      	mov	r6, r5
 8005430:	e7e4      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d005      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800543c:	d002      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800543e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005442:	d1e8      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 8005444:	bb1d      	cbnz	r5, 800548e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005446:	4a82      	ldr	r2, [pc, #520]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005448:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800544c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800544e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005452:	430b      	orrs	r3, r1
 8005454:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0659      	lsls	r1, r3, #25
 800545a:	d52c      	bpl.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800545c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005464:	d03f      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8005466:	d814      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005468:	b1e3      	cbz	r3, 80054a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546e:	d034      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 8005470:	2601      	movs	r6, #1
 8005472:	4635      	mov	r5, r6
 8005474:	e01f      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005476:	2100      	movs	r1, #0
 8005478:	1d20      	adds	r0, r4, #4
 800547a:	f7ff fc19 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800547e:	4605      	mov	r5, r0
      break;
 8005480:	e7e0      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005482:	2102      	movs	r1, #2
 8005484:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005488:	f7ff fc8a 	bl	8004da0 <RCCEx_PLL3_Config>
 800548c:	e7f7      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800548e:	462e      	mov	r6, r5
 8005490:	e7e1      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	d005      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005498:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800549c:	d002      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800549e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a2:	d1e5      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 80054a4:	bb2d      	cbnz	r5, 80054f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a6:	4a6a      	ldr	r2, [pc, #424]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80054a8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80054ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80054ae:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80054b2:	430b      	orrs	r3, r1
 80054b4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	061a      	lsls	r2, r3, #24
 80054ba:	d530      	bpl.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c4:	f000 80a4 	beq.w	8005610 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80054c8:	d815      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x666>
 80054ca:	b1eb      	cbz	r3, 8005508 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80054cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d0:	f000 8098 	beq.w	8005604 <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 80054d4:	2601      	movs	r6, #1
 80054d6:	4635      	mov	r5, r6
 80054d8:	e021      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054da:	2100      	movs	r1, #0
 80054dc:	1d20      	adds	r0, r4, #4
 80054de:	f7ff fbe7 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054e2:	4605      	mov	r5, r0
      break;
 80054e4:	e7de      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054e6:	2102      	movs	r1, #2
 80054e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054ec:	f7ff fc58 	bl	8004da0 <RCCEx_PLL3_Config>
 80054f0:	e7f7      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80054f2:	462e      	mov	r6, r5
 80054f4:	e7df      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fa:	d005      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80054fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005500:	d002      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005502:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005506:	d1e5      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8005508:	2d00      	cmp	r5, #0
 800550a:	f040 8087 	bne.w	800561c <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800550e:	4a50      	ldr	r2, [pc, #320]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005510:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005514:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005516:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800551a:	430b      	orrs	r3, r1
 800551c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	071b      	lsls	r3, r3, #28
 8005522:	d514      	bpl.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005524:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	d107      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800552e:	2102      	movs	r1, #2
 8005530:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005534:	f7ff fc34 	bl	8004da0 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8005538:	2800      	cmp	r0, #0
 800553a:	bf18      	it	ne
 800553c:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800553e:	4a44      	ldr	r2, [pc, #272]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005540:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005544:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800554a:	430b      	orrs	r3, r1
 800554c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	06df      	lsls	r7, r3, #27
 8005552:	d514      	bpl.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005554:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555c:	d107      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800555e:	2102      	movs	r1, #2
 8005560:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005564:	f7ff fc1c 	bl	8004da0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005568:	2800      	cmp	r0, #0
 800556a:	bf18      	it	ne
 800556c:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005570:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005574:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	430b      	orrs	r3, r1
 800557c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	0318      	lsls	r0, r3, #12
 8005582:	d517      	bpl.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 8005584:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005588:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800558c:	d048      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800558e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005592:	d005      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8005594:	2900      	cmp	r1, #0
 8005596:	d149      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005598:	1d20      	adds	r0, r4, #4
 800559a:	f7ff fb89 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800559e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	d146      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a4:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80055a6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80055aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80055ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	0359      	lsls	r1, r3, #13
 80055b8:	d518      	bpl.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 80055ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80055be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c2:	d038      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80055c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055c8:	d007      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d139      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d0:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80055d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80055da:	bbb5      	cbnz	r5, 800564a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055dc:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80055de:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80055e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80055e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	03da      	lsls	r2, r3, #15
 80055f0:	d53e      	bpl.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 80055f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055f4:	b373      	cbz	r3, 8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	f000 808c 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 80055fe:	2601      	movs	r6, #1
 8005600:	4635      	mov	r5, r6
 8005602:	e035      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005604:	2100      	movs	r1, #0
 8005606:	1d20      	adds	r0, r4, #4
 8005608:	f7ff fb52 	bl	8004cb0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800560c:	4605      	mov	r5, r0
      break;
 800560e:	e77b      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005610:	2102      	movs	r1, #2
 8005612:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005616:	f7ff fbc3 	bl	8004da0 <RCCEx_PLL3_Config>
 800561a:	e7f7      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 800561c:	462e      	mov	r6, r5
 800561e:	e77e      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005620:	2102      	movs	r1, #2
 8005622:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005626:	f7ff fbbb 	bl	8004da0 <RCCEx_PLL3_Config>
 800562a:	e7b8      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 800562c:	2601      	movs	r6, #1
 800562e:	4635      	mov	r5, r6
 8005630:	e7c0      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x724>
 8005632:	462e      	mov	r6, r5
 8005634:	e7be      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005636:	2101      	movs	r1, #1
 8005638:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800563c:	f7ff fbb0 	bl	8004da0 <RCCEx_PLL3_Config>
 8005640:	4605      	mov	r5, r0
      break;
 8005642:	e7ca      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 8005644:	2601      	movs	r6, #1
 8005646:	4635      	mov	r5, r6
 8005648:	e7d0      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800564a:	462e      	mov	r6, r5
 800564c:	e7ce      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800564e:	bf00      	nop
 8005650:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005654:	4a3c      	ldr	r2, [pc, #240]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005656:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800565e:	2d00      	cmp	r5, #0
 8005660:	d15f      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005662:	4a39      	ldr	r2, [pc, #228]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005664:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005666:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566c:	430b      	orrs	r3, r1
 800566e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	d507      	bpl.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005676:	2102      	movs	r1, #2
 8005678:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800567c:	f7ff fb90 	bl	8004da0 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8005680:	2800      	cmp	r0, #0
 8005682:	bf18      	it	ne
 8005684:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	039f      	lsls	r7, r3, #14
 800568a:	d50e      	bpl.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 800568c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800568e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005692:	d050      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005694:	d847      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8005696:	2900      	cmp	r1, #0
 8005698:	d14b      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 800569a:	2d00      	cmp	r5, #0
 800569c:	d151      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800569e:	482a      	ldr	r0, [pc, #168]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80056a0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80056a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056a6:	430a      	orrs	r2, r1
 80056a8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056aa:	02dd      	lsls	r5, r3, #11
 80056ac:	d506      	bpl.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056ae:	4926      	ldr	r1, [pc, #152]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80056b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80056b2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80056b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056b8:	4302      	orrs	r2, r0
 80056ba:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056bc:	00d8      	lsls	r0, r3, #3
 80056be:	d507      	bpl.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056c0:	4921      	ldr	r1, [pc, #132]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80056c2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80056c6:	690a      	ldr	r2, [r1, #16]
 80056c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056cc:	4302      	orrs	r2, r0
 80056ce:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056d0:	0299      	lsls	r1, r3, #10
 80056d2:	d506      	bpl.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056d4:	491c      	ldr	r1, [pc, #112]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80056d6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80056d8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80056da:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80056de:	4302      	orrs	r2, r0
 80056e0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056e2:	005a      	lsls	r2, r3, #1
 80056e4:	d509      	bpl.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80056e8:	6911      	ldr	r1, [r2, #16]
 80056ea:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80056ee:	6111      	str	r1, [r2, #16]
 80056f0:	6911      	ldr	r1, [r2, #16]
 80056f2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80056f6:	4301      	orrs	r1, r0
 80056f8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da06      	bge.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005700:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005702:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005704:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005708:	430b      	orrs	r3, r1
 800570a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800570c:	1c30      	adds	r0, r6, #0
 800570e:	bf18      	it	ne
 8005710:	2001      	movne	r0, #1
 8005712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005716:	2102      	movs	r1, #2
 8005718:	1d20      	adds	r0, r4, #4
 800571a:	f7ff fac9 	bl	8004cb0 <RCCEx_PLL2_Config>
 800571e:	4605      	mov	r5, r0
      break;
 8005720:	e79d      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005722:	462e      	mov	r6, r5
 8005724:	e7a4      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 8005726:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800572a:	d0b6      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800572c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8005730:	d0b3      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 8005732:	2601      	movs	r6, #1
 8005734:	e7b9      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005736:	4804      	ldr	r0, [pc, #16]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8005738:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800573a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800573e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8005740:	e7ab      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005742:	462e      	mov	r6, r5
 8005744:	e7b1      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400

0800574c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800574c:	4770      	bx	lr
	...

08005750 <HAL_SDRAM_Init>:
{
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8005754:	4604      	mov	r4, r0
 8005756:	b1f0      	cbz	r0, 8005796 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005758:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800575c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005760:	b91b      	cbnz	r3, 800576a <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8005762:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005766:	f7ff fff1 	bl	800574c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800576a:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800576c:	1d21      	adds	r1, r4, #4
 800576e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005770:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005774:	f000 f84b 	bl	800580e <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005778:	6862      	ldr	r2, [r4, #4]
 800577a:	4629      	mov	r1, r5
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	f000 f881 	bl	8005884 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8005782:	4a06      	ldr	r2, [pc, #24]	; (800579c <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 8005784:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800578c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800578e:	2301      	movs	r3, #1
 8005790:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005794:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005796:	2001      	movs	r0, #1
 8005798:	e7fc      	b.n	8005794 <HAL_SDRAM_Init+0x44>
 800579a:	bf00      	nop
 800579c:	52004000 	.word	0x52004000

080057a0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80057a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80057a8:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80057aa:	b2c0      	uxtb	r0, r0
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80057ac:	2802      	cmp	r0, #2
 80057ae:	d010      	beq.n	80057d2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80057b0:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80057b4:	2c01      	cmp	r4, #1
 80057b6:	d110      	bne.n	80057da <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057b8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80057ba:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057bc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80057c0:	f000 f896 	bl	80058f0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d104      	bne.n	80057d4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80057ca:	2305      	movs	r3, #5
 80057cc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80057d0:	2000      	movs	r0, #0
}
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80057d4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80057d8:	e7fa      	b.n	80057d0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80057da:	2001      	movs	r0, #1
 80057dc:	e7f9      	b.n	80057d2 <HAL_SDRAM_SendCommand+0x32>

080057de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80057de:	b538      	push	{r3, r4, r5, lr}
 80057e0:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80057e2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80057e6:	b2c0      	uxtb	r0, r0
 80057e8:	2802      	cmp	r0, #2
 80057ea:	d00d      	beq.n	8005808 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80057ec:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 80057f0:	b2ed      	uxtb	r5, r5
 80057f2:	2d01      	cmp	r5, #1
 80057f4:	d109      	bne.n	800580a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057f6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80057f8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80057fe:	f000 f887 	bl	8005910 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005802:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005804:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8005808:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800580a:	2001      	movs	r0, #1
 800580c:	e7fc      	b.n	8005808 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800580e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800580e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005812:	680a      	ldr	r2, [r1, #0]
 8005814:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8005818:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800581c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8005820:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8005824:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8005828:	4323      	orrs	r3, r4
 800582a:	b9a2      	cbnz	r2, 8005856 <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800582c:	ea43 0209 	orr.w	r2, r3, r9
 8005830:	6801      	ldr	r1, [r0, #0]
 8005832:	432a      	orrs	r2, r5
 8005834:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005838:	ea42 0308 	orr.w	r3, r2, r8
 800583c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8005840:	ea43 030e 	orr.w	r3, r3, lr
 8005844:	ea43 030c 	orr.w	r3, r3, ip
 8005848:	433b      	orrs	r3, r7
 800584a:	4333      	orrs	r3, r6
 800584c:	430b      	orrs	r3, r1
 800584e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8005850:	2000      	movs	r0, #0
 8005852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005856:	6802      	ldr	r2, [r0, #0]
 8005858:	ea43 0309 	orr.w	r3, r3, r9
 800585c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005860:	4313      	orrs	r3, r2
 8005862:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005864:	ea45 0308 	orr.w	r3, r5, r8
 8005868:	6842      	ldr	r2, [r0, #4]
 800586a:	ea43 030e 	orr.w	r3, r3, lr
 800586e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8005872:	ea43 030c 	orr.w	r3, r3, ip
 8005876:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800587a:	433b      	orrs	r3, r7
 800587c:	4333      	orrs	r3, r6
 800587e:	4313      	orrs	r3, r2
 8005880:	6043      	str	r3, [r0, #4]
 8005882:	e7e5      	b.n	8005850 <FMC_SDRAM_Init+0x42>

08005884 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005884:	68cb      	ldr	r3, [r1, #12]
 8005886:	f103 3cff 	add.w	ip, r3, #4294967295
 800588a:	694b      	ldr	r3, [r1, #20]
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	3b01      	subs	r3, #1
 8005890:	680f      	ldr	r7, [r1, #0]
 8005892:	684c      	ldr	r4, [r1, #4]
 8005894:	688e      	ldr	r6, [r1, #8]
 8005896:	051b      	lsls	r3, r3, #20
 8005898:	690d      	ldr	r5, [r1, #16]
 800589a:	3c01      	subs	r4, #1
 800589c:	6989      	ldr	r1, [r1, #24]
 800589e:	3e01      	subs	r6, #1
 80058a0:	3d01      	subs	r5, #1
 80058a2:	3f01      	subs	r7, #1
 80058a4:	3901      	subs	r1, #1
 80058a6:	0124      	lsls	r4, r4, #4
 80058a8:	0236      	lsls	r6, r6, #8
 80058aa:	042d      	lsls	r5, r5, #16
 80058ac:	0609      	lsls	r1, r1, #24
 80058ae:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80058b2:	b95a      	cbnz	r2, 80058cc <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058b4:	433b      	orrs	r3, r7
 80058b6:	6882      	ldr	r2, [r0, #8]
 80058b8:	4323      	orrs	r3, r4
 80058ba:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80058be:	4333      	orrs	r3, r6
 80058c0:	432b      	orrs	r3, r5
 80058c2:	430b      	orrs	r3, r1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80058c8:	2000      	movs	r0, #0
 80058ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058cc:	6882      	ldr	r2, [r0, #8]
 80058ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80058d6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80058d8:	ea44 0306 	orr.w	r3, r4, r6
 80058dc:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058de:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80058e0:	68c2      	ldr	r2, [r0, #12]
 80058e2:	432b      	orrs	r3, r5
 80058e4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80058e8:	430b      	orrs	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60c3      	str	r3, [r0, #12]
 80058ee:	e7eb      	b.n	80058c8 <FMC_SDRAM_Timing_Init+0x44>

080058f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80058f0:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 80058f2:	e9d1 3400 	ldrd	r3, r4, [r1]
 80058f6:	6902      	ldr	r2, [r0, #16]
 80058f8:	4323      	orrs	r3, r4
 80058fa:	4313      	orrs	r3, r2
 80058fc:	68ca      	ldr	r2, [r1, #12]
 80058fe:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8005902:	688a      	ldr	r2, [r1, #8]
 8005904:	3a01      	subs	r2, #1
 8005906:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800590a:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800590c:	2000      	movs	r0, #0
 800590e:	bd10      	pop	{r4, pc}

08005910 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005910:	6943      	ldr	r3, [r0, #20]
 8005912:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005916:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800591a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800591e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8005920:	2000      	movs	r0, #0
 8005922:	4770      	bx	lr

08005924 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005924:	0189      	lsls	r1, r1, #6
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <USB_FlushTxFifo+0x20>)
 8005928:	f041 0120 	orr.w	r1, r1, #32
 800592c:	6101      	str	r1, [r0, #16]

  do
  {
    if (++count > 200000U)
 800592e:	3a01      	subs	r2, #1
 8005930:	d005      	beq.n	800593e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005932:	6903      	ldr	r3, [r0, #16]
 8005934:	f013 0320 	ands.w	r3, r3, #32
 8005938:	d1f9      	bne.n	800592e <USB_FlushTxFifo+0xa>

  return HAL_OK;
 800593a:	4618      	mov	r0, r3
 800593c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800593e:	2003      	movs	r0, #3
}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	00030d41 	.word	0x00030d41

08005948 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005948:	2310      	movs	r3, #16
 800594a:	4a06      	ldr	r2, [pc, #24]	; (8005964 <USB_FlushRxFifo+0x1c>)
 800594c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800594e:	3a01      	subs	r2, #1
 8005950:	d005      	beq.n	800595e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005952:	6903      	ldr	r3, [r0, #16]
 8005954:	f013 0310 	ands.w	r3, r3, #16
 8005958:	d1f9      	bne.n	800594e <USB_FlushRxFifo+0x6>

  return HAL_OK;
 800595a:	4618      	mov	r0, r3
 800595c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800595e:	2003      	movs	r0, #3
}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	00030d41 	.word	0x00030d41

08005968 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005968:	3203      	adds	r2, #3

  for (i = 0U; i < count32b; i++)
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800596a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800596e:	0892      	lsrs	r2, r2, #2
 8005970:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8005974:	4291      	cmp	r1, r2
 8005976:	d101      	bne.n	800597c <USB_ReadPacket+0x14>
    pDest++;
  }

  return ((void *)pDest);
}
 8005978:	4608      	mov	r0, r1
 800597a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800597c:	6803      	ldr	r3, [r0, #0]
 800597e:	f841 3b04 	str.w	r3, [r1], #4
 8005982:	e7f7      	b.n	8005974 <USB_ReadPacket+0xc>

08005984 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005984:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005986:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8005988:	4010      	ands	r0, r2
 800598a:	4770      	bx	lr

0800598c <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 800598c:	6940      	ldr	r0, [r0, #20]
}
 800598e:	f000 0001 	and.w	r0, r0, #1
 8005992:	4770      	bx	lr

08005994 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005994:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 8005998:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800599a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800599e:	f023 0303 	bic.w	r3, r3, #3
{
 80059a2:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059a4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059a8:	f001 0303 	and.w	r3, r1, #3
 80059ac:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80059b0:	ea43 0304 	orr.w	r3, r3, r4
 80059b4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80059b8:	d104      	bne.n	80059c4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 80059ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80059be:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80059c0:	2000      	movs	r0, #0
 80059c2:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80059c4:	2902      	cmp	r1, #2
 80059c6:	d1fb      	bne.n	80059c0 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 80059c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80059cc:	e7f7      	b.n	80059be <USB_InitFSLSPClkSel+0x2a>

080059ce <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059ce:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80059d2:	6940      	ldr	r0, [r0, #20]
}
 80059d4:	b280      	uxth	r0, r0
 80059d6:	4770      	bx	lr

080059d8 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059d8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80059dc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80059e0:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059e8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80059ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059f4:	d11e      	bne.n	8005a34 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80059f8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059fc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a00:	d137      	bne.n	8005a72 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a0a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a16:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a1e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005a22:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8005a26:	3b01      	subs	r3, #1
 8005a28:	d002      	beq.n	8005a30 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a2a:	6811      	ldr	r1, [r2, #0]
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	dbfa      	blt.n	8005a26 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005a30:	2000      	movs	r0, #0
 8005a32:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a34:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8005a38:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a3c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a40:	d117      	bne.n	8005a72 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a46:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a4a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a56:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005a5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a5e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005a62:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8005a66:	3b01      	subs	r3, #1
 8005a68:	d0e2      	beq.n	8005a30 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a6a:	6811      	ldr	r1, [r2, #0]
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	dbfa      	blt.n	8005a66 <USB_HC_Halt+0x8e>
 8005a70:	e7de      	b.n	8005a30 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a76:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005a7a:	e7d9      	b.n	8005a30 <USB_HC_Halt+0x58>

08005a7c <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a7c:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a7e:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a80:	f023 0301 	bic.w	r3, r3, #1
{
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a88:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a8a:	f7ff ff4b 	bl	8005924 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f7ff ff5a 	bl	8005948 <USB_FlushRxFifo>
 8005a94:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8005a98:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8005a9c:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005a9e:	6811      	ldr	r1, [r2, #0]
 8005aa0:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005aa4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8005aa8:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8005aac:	4282      	cmp	r2, r0
 8005aae:	d1f6      	bne.n	8005a9e <USB_StopHost+0x22>
  uint32_t count = 0U;
 8005ab0:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ab8:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005abc:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8005abe:	3001      	adds	r0, #1
 8005ac0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ac4:	d802      	bhi.n	8005acc <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ac6:	6819      	ldr	r1, [r3, #0]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	dbf8      	blt.n	8005abe <USB_StopHost+0x42>
 8005acc:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d1ef      	bne.n	8005ab2 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8005ad6:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ad8:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005adc:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	60a3      	str	r3, [r4, #8]
}
 8005ae6:	bd10      	pop	{r4, pc}

08005ae8 <configura_dimensioni_interfaccia>:
  * @param  None
  * @retval None
  */

void configura_dimensioni_interfaccia(struttura_d_int * d_int, uint32_t x_size, uint32_t y_size)
{
 8005ae8:	b530      	push	{r4, r5, lr}
	/*Variabile che controlla lo spessore del bordo delle figure.*/
  (*d_int).spessore_bordo = 5;

	/*Variabili relative al cerchio centrale.*/
  (*d_int).raggio_cerchio_centrale = (y_size/4);
 8005aea:	0894      	lsrs	r4, r2, #2
  (*d_int).spessore_bordo = 5;
 8005aec:	2305      	movs	r3, #5
  (*d_int).raggio_cerchio_centrale = (y_size/4);
 8005aee:	6044      	str	r4, [r0, #4]
  (*d_int).centro_x_cerchio_centrale = (x_size/2);
 8005af0:	084c      	lsrs	r4, r1, #1
  (*d_int).spessore_bordo = 5;
 8005af2:	6003      	str	r3, [r0, #0]
  (*d_int).centro_x_cerchio_centrale = (x_size/2);
 8005af4:	6084      	str	r4, [r0, #8]
  (*d_int).centro_y_cerchio_centrale = (y_size/2);
 8005af6:	0854      	lsrs	r4, r2, #1

	/*Variabili relative all'indicatore del cerchio.*/
  (*d_int).raggio_indicatore_cerchio = 5;
 8005af8:	e9c0 4303 	strd	r4, r3, [r0, #12]
  (*d_int).angolo = (2*M_PI)/3;
 8005afc:	a50c      	add	r5, pc, #48	; (adr r5, 8005b30 <configura_dimensioni_interfaccia+0x48>)
 8005afe:	e9d5 4500 	ldrd	r4, r5, [r5]

	/*Variabili relative ai rettangoli laterali.*/
  (*d_int).dim_barra_x = (x_size/8);
  (*d_int).dim_barra_y =  2*(y_size/3);
 8005b02:	2303      	movs	r3, #3
  (*d_int).angolo = (2*M_PI)/3;
 8005b04:	e9c0 4508 	strd	r4, r5, [r0, #32]
  (*d_int).dim_barra_y =  2*(y_size/3);
 8005b08:	fbb2 f4f3 	udiv	r4, r2, r3
  (*d_int).pan_barra_destra = ((x_size/3)-(*d_int).dim_barra_x)/2;
 8005b0c:	fbb1 f3f3 	udiv	r3, r1, r3
  (*d_int).dim_barra_x = (x_size/8);
 8005b10:	08cd      	lsrs	r5, r1, #3
  (*d_int).dim_barra_y =  2*(y_size/3);
 8005b12:	0064      	lsls	r4, r4, #1
  (*d_int).pan_barra_destra = ((x_size/3)-(*d_int).dim_barra_x)/2;
 8005b14:	1b5b      	subs	r3, r3, r5
  (*d_int).pan_barra_alto = (y_size-(*d_int).dim_barra_y)/2;

	/*Variabili relative ai pulsanti di controllo.*/
  (*d_int).dim_quadrato_piu_meno=(x_size/16);
 8005b16:	0909      	lsrs	r1, r1, #4
  (*d_int).pan_barra_alto = (y_size-(*d_int).dim_barra_y)/2;
 8005b18:	1b12      	subs	r2, r2, r4
  (*d_int).dim_barra_x = (x_size/8);
 8005b1a:	6285      	str	r5, [r0, #40]	; 0x28
  (*d_int).pan_barra_destra = ((x_size/3)-(*d_int).dim_barra_x)/2;
 8005b1c:	085b      	lsrs	r3, r3, #1
  (*d_int).dim_barra_y =  2*(y_size/3);
 8005b1e:	62c4      	str	r4, [r0, #44]	; 0x2c
  (*d_int).pan_barra_alto = (y_size-(*d_int).dim_barra_y)/2;
 8005b20:	0852      	lsrs	r2, r2, #1
  (*d_int).dim_riquadro_etichetta_x=(x_size/8);
  (*d_int).dim_riquadro_etichetta_y = (*d_int).dim_quadrato_piu_meno;
 8005b22:	6401      	str	r1, [r0, #64]	; 0x40
  (*d_int).pan_barra_destra = ((x_size/3)-(*d_int).dim_barra_x)/2;
 8005b24:	6303      	str	r3, [r0, #48]	; 0x30
  (*d_int).pan_barra_alto = (y_size-(*d_int).dim_barra_y)/2;
 8005b26:	6342      	str	r2, [r0, #52]	; 0x34
  (*d_int).dim_riquadro_etichetta_x=(x_size/8);
 8005b28:	e9c0 150e 	strd	r1, r5, [r0, #56]	; 0x38
}
 8005b2c:	bd30      	pop	{r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	382d7365 	.word	0x382d7365
 8005b34:	4000c152 	.word	0x4000c152

08005b38 <disegna_cerchio_centrale>:

void disegna_cerchio_centrale(uint32_t pos_x, uint32_t pos_y, uint32_t raggio)
{
	UTIL_LCD_DrawCircle(pos_x, pos_y, raggio, COLORE_INTERFACCIA_OK);
 8005b38:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8005b3c:	f000 b9ec 	b.w	8005f18 <UTIL_LCD_DrawCircle>

08005b40 <disegna_indicatore_cerchio>:
}

void disegna_indicatore_cerchio(uint32_t pos_x, uint32_t pos_y, double alfa, uint32_t raggio_dal_centro, uint32_t raggio_dimensione_indicatore)
{
 8005b40:	b510      	push	{r4, lr}
 8005b42:	ed2d 8b08 	vpush	{d8-d11}
 8005b46:	eeb0 bb40 	vmov.f64	d11, d0
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005b4a:	ee07 2a90 	vmov	s15, r2
{
 8005b4e:	ee08 0a10 	vmov	s16, r0
 8005b52:	ee08 1a90 	vmov	s17, r1
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005b56:	eeb8 9b67 	vcvt.f64.u32	d9, s15
{
 8005b5a:	461c      	mov	r4, r3
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005b5c:	f000 fb2c 	bl	80061b8 <cos>
 8005b60:	eeb0 ab40 	vmov.f64	d10, d0
 8005b64:	eeb0 0b4b 	vmov.f64	d0, d11
 8005b68:	f000 fb62 	bl	8006230 <sin>
 8005b6c:	eeb8 6b68 	vcvt.f64.u32	d6, s17
 8005b70:	eeb8 7b48 	vcvt.f64.u32	d7, s16
 8005b74:	4622      	mov	r2, r4
 8005b76:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8005b7a:	eea0 6b49 	vfms.f64	d6, d0, d9
 8005b7e:	eea9 7b0a 	vfma.f64	d7, d9, d10
}
 8005b82:	ecbd 8b08 	vpop	{d8-d11}
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005b86:	eefc 6bc6 	vcvt.u32.f64	s13, d6
}
 8005b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005b8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005b92:	ee16 1a90 	vmov	r1, s13
 8005b96:	ee17 0a90 	vmov	r0, s15
 8005b9a:	f000 ba7d 	b.w	8006098 <UTIL_LCD_FillCircle>

08005b9e <aggiorna_indicatore_cerchio>:

void aggiorna_indicatore_cerchio(uint32_t pos_x, uint32_t pos_y, double alfa_prec, double alfa, uint32_t raggio_dal_centro, uint32_t raggio_dimensione_indicatore)
{
	//Disegno un pallino bianco al posto del pallino precedente
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa_prec), pos_y + raggio_dal_centro *(-sin(alfa_prec)), raggio_dimensione_indicatore, COLORE_SFONDO);
 8005b9e:	ee07 0a90 	vmov	s15, r0
{
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	ed2d 8b0c 	vpush	{d8-d13}
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa_prec), pos_y + raggio_dal_centro *(-sin(alfa_prec)), raggio_dimensione_indicatore, COLORE_SFONDO);
 8005ba8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
{
 8005bac:	b084      	sub	sp, #16
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa_prec), pos_y + raggio_dal_centro *(-sin(alfa_prec)), raggio_dimensione_indicatore, COLORE_SFONDO);
 8005bae:	ee07 2a90 	vmov	s15, r2
{
 8005bb2:	eeb0 bb41 	vmov.f64	d11, d1
 8005bb6:	461c      	mov	r4, r3
 8005bb8:	9203      	str	r2, [sp, #12]
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa_prec), pos_y + raggio_dal_centro *(-sin(alfa_prec)), raggio_dimensione_indicatore, COLORE_SFONDO);
 8005bba:	eeb8 ab67 	vcvt.f64.u32	d10, s15
{
 8005bbe:	eeb0 db40 	vmov.f64	d13, d0
 8005bc2:	e9cd 0101 	strd	r0, r1, [sp, #4]
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa_prec), pos_y + raggio_dal_centro *(-sin(alfa_prec)), raggio_dimensione_indicatore, COLORE_SFONDO);
 8005bc6:	f000 faf7 	bl	80061b8 <cos>
 8005bca:	eddd 7a02 	vldr	s15, [sp, #8]
 8005bce:	eeb0 cb40 	vmov.f64	d12, d0
 8005bd2:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 8005bd6:	eeb0 0b4d 	vmov.f64	d0, d13
 8005bda:	f000 fb29 	bl	8006230 <sin>
 8005bde:	eeb0 7b48 	vmov.f64	d7, d8
 8005be2:	eeb0 6b49 	vmov.f64	d6, d9
 8005be6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005bea:	4622      	mov	r2, r4
 8005bec:	eeaa 7b0c 	vfma.f64	d7, d10, d12
 8005bf0:	eea0 6b4a 	vfms.f64	d6, d0, d10
 8005bf4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005bf8:	ee17 0a90 	vmov	r0, s15
 8005bfc:	eefc 6bc6 	vcvt.u32.f64	s13, d6
 8005c00:	ee16 1a90 	vmov	r1, s13
 8005c04:	f000 fa48 	bl	8006098 <UTIL_LCD_FillCircle>
	//Ridisegno il cerchio centrale
	disegna_cerchio_centrale(pos_x, pos_y, raggio_dal_centro);
 8005c08:	9801      	ldr	r0, [sp, #4]
 8005c0a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005c0e:	f7ff ff93 	bl	8005b38 <disegna_cerchio_centrale>
	//Disegno il pallino verde nella nuova posizione
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005c12:	eeb0 0b4b 	vmov.f64	d0, d11
 8005c16:	f000 facf 	bl	80061b8 <cos>
 8005c1a:	eeb0 cb40 	vmov.f64	d12, d0
 8005c1e:	eeb0 0b4b 	vmov.f64	d0, d11
 8005c22:	f000 fb05 	bl	8006230 <sin>
 8005c26:	eea0 9b4a 	vfms.f64	d9, d0, d10
 8005c2a:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8005c2e:	4622      	mov	r2, r4
 8005c30:	eeaa 8b0c 	vfma.f64	d8, d10, d12
 8005c34:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 8005c38:	ee17 1a90 	vmov	r1, s15
 8005c3c:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8005c40:	ee17 0a90 	vmov	r0, s15
}
 8005c44:	b004      	add	sp, #16
 8005c46:	ecbd 8b0c 	vpop	{d8-d13}
 8005c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UTIL_LCD_FillCircle(pos_x + raggio_dal_centro* cos(alfa), pos_y + raggio_dal_centro *(-sin(alfa)), raggio_dimensione_indicatore, COLORE_INTERFACCIA_OK);
 8005c4e:	f000 ba23 	b.w	8006098 <UTIL_LCD_FillCircle>

08005c52 <disegna_frame_barra_laterale>:

void disegna_frame_barra_laterale(uint32_t pos_x, uint32_t pos_y, uint32_t dim_x, uint32_t dim_y)
{
 8005c52:	b513      	push	{r0, r1, r4, lr}
	UTIL_LCD_DrawRect(pos_x-1, pos_y-1, dim_x+2, dim_y+2, COLORE_INTERFACCIA_OK);
 8005c54:	f04f 24ff 	mov.w	r4, #4278255360	; 0xff00ff00
 8005c58:	3302      	adds	r3, #2
 8005c5a:	3202      	adds	r2, #2
 8005c5c:	3901      	subs	r1, #1
 8005c5e:	3801      	subs	r0, #1
 8005c60:	9400      	str	r4, [sp, #0]
 8005c62:	f000 f937 	bl	8005ed4 <UTIL_LCD_DrawRect>
	  //UTIL_LCD_FillRect(pos_x, pos_y, dim_x, dim_y, COLORE_INTERFACCIA_OK);
	  //UTIL_LCD_FillRect(pos_x+spessore_bordo, pos_y+spessore_bordo, dim_x-2*spessore_bordo, dim_y-2*spessore_bordo, COLORE_SFONDO);
}
 8005c66:	b002      	add	sp, #8
 8005c68:	bd10      	pop	{r4, pc}

08005c6a <disegna_contenuto_barra_laterale>:

void disegna_contenuto_barra_laterale(uint32_t pos_x, uint32_t pos_y, uint32_t dim_x, uint32_t dim_y, double percentuale)
{
	//TODO: Correggere. verificare per percentuale = 0 e 100
	UTIL_LCD_FillRect(pos_x, pos_y+dim_y*percentuale, dim_x, dim_y*(1.0-percentuale), COLORE_SFONDO);
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005c72:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005c76:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
{
 8005c7a:	b530      	push	{r4, r5, lr}
	UTIL_LCD_FillRect(pos_x, pos_y+dim_y*percentuale, dim_x, dim_y*(1.0-percentuale), COLORE_SFONDO);
 8005c7c:	ee37 7b40 	vsub.f64	d7, d7, d0
{
 8005c80:	4604      	mov	r4, r0
 8005c82:	4615      	mov	r5, r2
 8005c84:	ed2d 8b04 	vpush	{d8-d9}
	UTIL_LCD_FillRect(pos_x, pos_y+dim_y*percentuale, dim_x, dim_y*(1.0-percentuale), COLORE_SFONDO);
 8005c88:	ee27 7b06 	vmul.f64	d7, d7, d6
{
 8005c8c:	b085      	sub	sp, #20
	UTIL_LCD_FillRect(pos_x, pos_y+dim_y*percentuale, dim_x, dim_y*(1.0-percentuale), COLORE_SFONDO);
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	ee26 9b00 	vmul.f64	d9, d6, d0
 8005c94:	ee06 1a90 	vmov	s13, r1
{
 8005c98:	9103      	str	r1, [sp, #12]
	UTIL_LCD_FillRect(pos_x, pos_y+dim_y*percentuale, dim_x, dim_y*(1.0-percentuale), COLORE_SFONDO);
 8005c9a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8005c9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
{
 8005ca2:	eeb0 8b40 	vmov.f64	d8, d0
	UTIL_LCD_FillRect(pos_x, pos_y+dim_y*percentuale, dim_x, dim_y*(1.0-percentuale), COLORE_SFONDO);
 8005ca6:	ee36 6b09 	vadd.f64	d6, d6, d9
 8005caa:	ee17 3a90 	vmov	r3, s15
 8005cae:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 8005cb2:	ee17 1a90 	vmov	r1, s15
 8005cb6:	f000 f9c1 	bl	800603c <UTIL_LCD_FillRect>
	if(percentuale>0)
 8005cba:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	dd0b      	ble.n	8005cdc <disegna_contenuto_barra_laterale+0x72>
		UTIL_LCD_FillRect(pos_x, pos_y, dim_x, dim_y*percentuale, UTIL_LCD_COLOR_YELLOW);
 8005cc4:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 8005cc8:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005ccc:	462a      	mov	r2, r5
 8005cce:	9903      	ldr	r1, [sp, #12]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	ee17 3a90 	vmov	r3, s15
 8005cd8:	f000 f9b0 	bl	800603c <UTIL_LCD_FillRect>
}
 8005cdc:	b005      	add	sp, #20
 8005cde:	ecbd 8b04 	vpop	{d8-d9}
 8005ce2:	bd30      	pop	{r4, r5, pc}

08005ce4 <disegna_pulsante_controllo>:

void disegna_pulsante_controllo(uint32_t pos_x, uint32_t pos_y, uint32_t dim_quadrato, uint32_t dim_riquadro_etichetta_x, uint32_t dim_riquadro_etichetta_y)
{
 8005ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ce8:	461e      	mov	r6, r3
/*
	  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKRED);
	  UTIL_LCD_SetFont(&Font20);
	  UTIL_LCD_DisplayStringAt(pos_x, pos_y, (uint8_t *)"+", LEFT_MODE);
*/
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_RED);
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <disegna_pulsante_controllo+0x44>)
{
 8005cec:	4615      	mov	r5, r2
 8005cee:	4604      	mov	r4, r0
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_RED);
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4613      	mov	r3, r2
{
 8005cf4:	460f      	mov	r7, r1
 8005cf6:	f8dd 8020 	ldr.w	r8, [sp, #32]
	  UTIL_LCD_FillRect(pos_x+dim_quadrato, pos_y, dim_riquadro_etichetta_x, dim_riquadro_etichetta_y, UTIL_LCD_COLOR_WHITE);
 8005cfa:	442c      	add	r4, r5
	  UTIL_LCD_FillRect(pos_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_RED);
 8005cfc:	f000 f99e 	bl	800603c <UTIL_LCD_FillRect>
	  UTIL_LCD_FillRect(pos_x+dim_quadrato, pos_y, dim_riquadro_etichetta_x, dim_riquadro_etichetta_y, UTIL_LCD_COLOR_WHITE);
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	4632      	mov	r2, r6
 8005d06:	4639      	mov	r1, r7
 8005d08:	4620      	mov	r0, r4
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	f000 f995 	bl	800603c <UTIL_LCD_FillRect>
	  UTIL_LCD_FillRect(pos_x+dim_quadrato+dim_riquadro_etichetta_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_BLUE);
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <disegna_pulsante_controllo+0x48>)
 8005d14:	462a      	mov	r2, r5
 8005d16:	4639      	mov	r1, r7
 8005d18:	9308      	str	r3, [sp, #32]
 8005d1a:	19a0      	adds	r0, r4, r6
 8005d1c:	462b      	mov	r3, r5
}
 8005d1e:	b002      	add	sp, #8
 8005d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  UTIL_LCD_FillRect(pos_x+dim_quadrato+dim_riquadro_etichetta_x, pos_y, dim_quadrato, dim_quadrato, UTIL_LCD_COLOR_BLUE);
 8005d24:	f000 b98a 	b.w	800603c <UTIL_LCD_FillRect>
 8005d28:	ffff0000 	.word	0xffff0000
 8005d2c:	ff0000ff 	.word	0xff0000ff

08005d30 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8005d30:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 8005d34:	3201      	adds	r2, #1
 8005d36:	f8c0 24c4 	str.w	r2, [r0, #1220]	; 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005d3a:	7802      	ldrb	r2, [r0, #0]
 8005d3c:	2a0b      	cmp	r2, #11
 8005d3e:	d104      	bne.n	8005d4a <USBH_LL_IncTimer+0x1a>
 8005d40:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8005d44:	b10b      	cbz	r3, 8005d4a <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	4718      	bx	r3
}
 8005d4a:	4770      	bx	lr

08005d4c <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8005d52:	4770      	bx	lr

08005d54 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 8005d5a:	4770      	bx	lr

08005d5c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8005d68:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4770      	bx	lr

08005d70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005d70:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005d72:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8005d74:	2500      	movs	r5, #0
{
 8005d76:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 8005d78:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 8005d7c:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 8005d80:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005d84:	f7fa fc8f 	bl	80006a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d88:	7921      	ldrb	r1, [r4, #4]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f806 	bl	8005d9c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d90:	7961      	ldrb	r1, [r4, #5]
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f802 	bl	8005d9c <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005d98:	4628      	mov	r0, r5
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}

08005d9c <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
  if (idx < 11U)
 8005d9c:	290a      	cmp	r1, #10
 8005d9e:	bf9f      	itttt	ls
 8005da0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005da4:	f8d0 3484 	ldrls.w	r3, [r0, #1156]	; 0x484
 8005da8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8005dac:	f8c0 3484 	strls.w	r3, [r0, #1156]	; 0x484
  }

  return USBH_OK;
}
 8005db0:	2000      	movs	r0, #0
 8005db2:	4770      	bx	lr

08005db4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8005db4:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8005db6:	6803      	ldr	r3, [r0, #0]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8005db8:	2500      	movs	r5, #0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8005dba:	4c14      	ldr	r4, [pc, #80]	; (8005e0c <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8005dbc:	6a02      	ldr	r2, [r0, #32]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8005dbe:	6023      	str	r3, [r4, #0]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005dc0:	f104 0140 	add.w	r1, r4, #64	; 0x40
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8005dc4:	6843      	ldr	r3, [r0, #4]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8005dc6:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8005dc8:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8005dca:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8005dcc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8005dce:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8005dd0:	68c3      	ldr	r3, [r0, #12]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8005dd2:	6262      	str	r2, [r4, #36]	; 0x24
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8005dd4:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8005dd6:	6903      	ldr	r3, [r0, #16]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8005dd8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  FuncDriver.FillRect       = pDrv->FillRect;
 8005dda:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8005ddc:	6943      	ldr	r3, [r0, #20]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8005dde:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8005de0:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8005de2:	6983      	ldr	r3, [r0, #24]
 8005de4:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8005de6:	69c3      	ldr	r3, [r0, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005de8:	4628      	mov	r0, r5
  DrawProp->LcdDevice = 0;
 8005dea:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8005dee:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8005df0:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8005df2:	6a23      	ldr	r3, [r4, #32]
 8005df4:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8005df8:	4628      	mov	r0, r5
 8005dfa:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8005dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dfe:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8005e02:	4628      	mov	r0, r5
}
 8005e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8005e08:	4718      	bx	r3
 8005e0a:	bf00      	nop
 8005e0c:	20000db4 	.word	0x20000db4

08005e10 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8005e10:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8005e12:	4c05      	ldr	r4, [pc, #20]	; (8005e28 <UTIL_LCD_SetLayer+0x18>)
{
 8005e14:	4605      	mov	r5, r0
  if(FuncDriver.SetLayer != NULL)
 8005e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e18:	b123      	cbz	r3, 8005e24 <UTIL_LCD_SetLayer+0x14>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005e1e:	4798      	blx	r3
 8005e20:	b900      	cbnz	r0, 8005e24 <UTIL_LCD_SetLayer+0x14>
    {
      DrawProp->LcdLayer = Layer;
 8005e22:	63a5      	str	r5, [r4, #56]	; 0x38
    }
  }
}
 8005e24:	bd38      	pop	{r3, r4, r5, pc}
 8005e26:	bf00      	nop
 8005e28:	20000db4 	.word	0x20000db4

08005e2c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2e:	4c0c      	ldr	r4, [pc, #48]	; (8005e60 <UTIL_LCD_DrawHLine+0x34>)
 8005e30:	4607      	mov	r7, r0
 8005e32:	68a6      	ldr	r6, [r4, #8]
 8005e34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005e36:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8005e38:	2c02      	cmp	r4, #2
 8005e3a:	d109      	bne.n	8005e50 <UTIL_LCD_DrawHLine+0x24>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8005e3c:	095c      	lsrs	r4, r3, #5
 8005e3e:	0a1d      	lsrs	r5, r3, #8
 8005e40:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005e44:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8005e48:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8005e4c:	432c      	orrs	r4, r5
 8005e4e:	4323      	orrs	r3, r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	460a      	mov	r2, r1
 8005e56:	4639      	mov	r1, r7
 8005e58:	47b0      	blx	r6
  }
}
 8005e5a:	b003      	add	sp, #12
 8005e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000db4 	.word	0x20000db4

08005e64 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e66:	4c0c      	ldr	r4, [pc, #48]	; (8005e98 <UTIL_LCD_DrawVLine+0x34>)
 8005e68:	4607      	mov	r7, r0
 8005e6a:	68e6      	ldr	r6, [r4, #12]
 8005e6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005e6e:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8005e70:	2c02      	cmp	r4, #2
 8005e72:	d109      	bne.n	8005e88 <UTIL_LCD_DrawVLine+0x24>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8005e74:	095c      	lsrs	r4, r3, #5
 8005e76:	0a1d      	lsrs	r5, r3, #8
 8005e78:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005e7c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8005e80:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8005e84:	432c      	orrs	r4, r5
 8005e86:	4323      	orrs	r3, r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	460a      	mov	r2, r1
 8005e8e:	4639      	mov	r1, r7
 8005e90:	47b0      	blx	r6
  }
}
 8005e92:	b003      	add	sp, #12
 8005e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000db4 	.word	0x20000db4

08005e9c <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <UTIL_LCD_SetPixel+0x34>)
 8005e9e:	b470      	push	{r4, r5, r6}
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	699d      	ldr	r5, [r3, #24]
 8005ea4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005ea8:	46ac      	mov	ip, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005eaa:	2b02      	cmp	r3, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8005eac:	bf09      	itett	eq
 8005eae:	0953      	lsreq	r3, r2, #5
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005eb0:	4613      	movne	r3, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8005eb2:	0a14      	lsreq	r4, r2, #8
 8005eb4:	f3c2 02c4 	ubfxeq	r2, r2, #3, #5
 8005eb8:	bf01      	itttt	eq
 8005eba:	f403 63fc 	andeq.w	r3, r3, #2016	; 0x7e0
 8005ebe:	f404 4478 	andeq.w	r4, r4, #63488	; 0xf800
 8005ec2:	4323      	orreq	r3, r4
 8005ec4:	4313      	orreq	r3, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	4631      	mov	r1, r6
  }
}
 8005eca:	bc70      	pop	{r4, r5, r6}
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8005ecc:	4760      	bx	ip
 8005ece:	bf00      	nop
 8005ed0:	20000db4 	.word	0x20000db4

08005ed4 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8005ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed8:	9d06      	ldr	r5, [sp, #24]
 8005eda:	4698      	mov	r8, r3
 8005edc:	460f      	mov	r7, r1
 8005ede:	4606      	mov	r6, r0
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8005ee0:	462b      	mov	r3, r5
{
 8005ee2:	4614      	mov	r4, r2
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8005ee4:	f7ff ffa2 	bl	8005e2c <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8005ee8:	f108 31ff 	add.w	r1, r8, #4294967295
 8005eec:	462b      	mov	r3, r5
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4439      	add	r1, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ff9a 	bl	8005e2c <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8005ef8:	462b      	mov	r3, r5
 8005efa:	4642      	mov	r2, r8
 8005efc:	4639      	mov	r1, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7ff ffb0 	bl	8005e64 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8005f04:	1e60      	subs	r0, r4, #1
 8005f06:	462b      	mov	r3, r5
 8005f08:	4642      	mov	r2, r8
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	4430      	add	r0, r6
}
 8005f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8005f12:	f7ff bfa7 	b.w	8005e64 <UTIL_LCD_DrawVLine>
	...

08005f18 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8005f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8005f1c:	0056      	lsls	r6, r2, #1
  current_x = 0;
  current_y = Radius;

  while (current_x <= current_y)
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8005f1e:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006038 <UTIL_LCD_DrawCircle+0x120>
{
 8005f22:	4680      	mov	r8, r0
 8005f24:	468a      	mov	sl, r1
 8005f26:	4615      	mov	r5, r2
 8005f28:	4699      	mov	r9, r3
  decision = 3 - (Radius << 1);
 8005f2a:	f1c6 0603 	rsb	r6, r6, #3
  current_x = 0;
 8005f2e:	2400      	movs	r4, #0
 8005f30:	465f      	mov	r7, fp
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8005f32:	ebaa 0305 	sub.w	r3, sl, r5
 8005f36:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d216      	bcs.n	8005f6c <UTIL_LCD_DrawCircle+0x54>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8005f3e:	eb08 0004 	add.w	r0, r8, r4
 8005f42:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 8005f46:	4290      	cmp	r0, r2
 8005f48:	d206      	bcs.n	8005f58 <UTIL_LCD_DrawCircle+0x40>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8005f4a:	b299      	uxth	r1, r3
 8005f4c:	464a      	mov	r2, r9
 8005f4e:	b280      	uxth	r0, r0
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	f7ff ffa3 	bl	8005e9c <UTIL_LCD_SetPixel>
 8005f56:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8005f58:	eba8 0004 	sub.w	r0, r8, r4
 8005f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5e:	4290      	cmp	r0, r2
 8005f60:	d204      	bcs.n	8005f6c <UTIL_LCD_DrawCircle+0x54>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8005f62:	464a      	mov	r2, r9
 8005f64:	b299      	uxth	r1, r3
 8005f66:	b280      	uxth	r0, r0
 8005f68:	f7ff ff98 	bl	8005e9c <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8005f6c:	ebaa 0304 	sub.w	r3, sl, r4
 8005f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d215      	bcs.n	8005fa2 <UTIL_LCD_DrawCircle+0x8a>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8005f76:	eb08 0005 	add.w	r0, r8, r5
 8005f7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f7c:	4290      	cmp	r0, r2
 8005f7e:	d206      	bcs.n	8005f8e <UTIL_LCD_DrawCircle+0x76>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8005f80:	b299      	uxth	r1, r3
 8005f82:	464a      	mov	r2, r9
 8005f84:	b280      	uxth	r0, r0
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	f7ff ff88 	bl	8005e9c <UTIL_LCD_SetPixel>
 8005f8c:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8005f8e:	eba8 0005 	sub.w	r0, r8, r5
 8005f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f94:	4290      	cmp	r0, r2
 8005f96:	d204      	bcs.n	8005fa2 <UTIL_LCD_DrawCircle+0x8a>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8005f98:	464a      	mov	r2, r9
 8005f9a:	b299      	uxth	r1, r3
 8005f9c:	b280      	uxth	r0, r0
 8005f9e:	f7ff ff7d 	bl	8005e9c <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8005fa2:	eb0a 0305 	add.w	r3, sl, r5
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d215      	bcs.n	8005fd8 <UTIL_LCD_DrawCircle+0xc0>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8005fac:	eb08 0004 	add.w	r0, r8, r4
 8005fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb2:	4290      	cmp	r0, r2
 8005fb4:	d206      	bcs.n	8005fc4 <UTIL_LCD_DrawCircle+0xac>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8005fb6:	b299      	uxth	r1, r3
 8005fb8:	464a      	mov	r2, r9
 8005fba:	b280      	uxth	r0, r0
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f7ff ff6d 	bl	8005e9c <UTIL_LCD_SetPixel>
 8005fc2:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8005fc4:	eba8 0004 	sub.w	r0, r8, r4
 8005fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fca:	4290      	cmp	r0, r2
 8005fcc:	d204      	bcs.n	8005fd8 <UTIL_LCD_DrawCircle+0xc0>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8005fce:	464a      	mov	r2, r9
 8005fd0:	b299      	uxth	r1, r3
 8005fd2:	b280      	uxth	r0, r0
 8005fd4:	f7ff ff62 	bl	8005e9c <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8005fd8:	eb0a 0304 	add.w	r3, sl, r4
 8005fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d215      	bcs.n	800600e <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8005fe2:	eb08 0005 	add.w	r0, r8, r5
 8005fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fe8:	4290      	cmp	r0, r2
 8005fea:	d206      	bcs.n	8005ffa <UTIL_LCD_DrawCircle+0xe2>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8005fec:	b299      	uxth	r1, r3
 8005fee:	464a      	mov	r2, r9
 8005ff0:	b280      	uxth	r0, r0
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	f7ff ff52 	bl	8005e9c <UTIL_LCD_SetPixel>
 8005ff8:	9b01      	ldr	r3, [sp, #4]
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8005ffa:	eba8 0005 	sub.w	r0, r8, r5
 8005ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006000:	4290      	cmp	r0, r2
 8006002:	d204      	bcs.n	800600e <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8006004:	464a      	mov	r2, r9
 8006006:	b299      	uxth	r1, r3
 8006008:	b280      	uxth	r0, r0
 800600a:	f7ff ff47 	bl	8005e9c <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 800600e:	2e00      	cmp	r6, #0
    {
      decision += (current_x << 2) + 6;
 8006010:	bfb1      	iteee	lt
 8006012:	3606      	addlt	r6, #6
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006014:	1b63      	subge	r3, r4, r5
 8006016:	360a      	addge	r6, #10
      current_y--;
 8006018:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 800601c:	bfb8      	it	lt
 800601e:	eb06 0684 	addlt.w	r6, r6, r4, lsl #2
    }
    current_x++;
 8006022:	f104 0401 	add.w	r4, r4, #1
      decision += ((current_x - current_y) << 2) + 10;
 8006026:	bfa8      	it	ge
 8006028:	eb06 0683 	addge.w	r6, r6, r3, lsl #2
  while (current_x <= current_y)
 800602c:	42a5      	cmp	r5, r4
 800602e:	d280      	bcs.n	8005f32 <UTIL_LCD_DrawCircle+0x1a>
  }
}
 8006030:	b003      	add	sp, #12
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	bf00      	nop
 8006038:	20000db4 	.word	0x20000db4

0800603c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800603c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800603e:	4c0e      	ldr	r4, [pc, #56]	; (8006078 <UTIL_LCD_FillRect+0x3c>)
 8006040:	4684      	mov	ip, r0
 8006042:	9d08      	ldr	r5, [sp, #32]
 8006044:	6927      	ldr	r7, [r4, #16]
 8006046:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8006048:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 800604a:	2c02      	cmp	r4, #2
 800604c:	d111      	bne.n	8006072 <UTIL_LCD_FillRect+0x36>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800604e:	096c      	lsrs	r4, r5, #5
 8006050:	0a2e      	lsrs	r6, r5, #8
 8006052:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8006056:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800605a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 800605e:	4334      	orrs	r4, r6
 8006060:	432c      	orrs	r4, r5
 8006062:	9401      	str	r4, [sp, #4]
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	460a      	mov	r2, r1
 800606a:	4661      	mov	r1, ip
 800606c:	47b8      	blx	r7
  }
}
 800606e:	b003      	add	sp, #12
 8006070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8006072:	9501      	str	r5, [sp, #4]
 8006074:	e7f6      	b.n	8006064 <UTIL_LCD_FillRect+0x28>
 8006076:	bf00      	nop
 8006078:	20000db4 	.word	0x20000db4

0800607c <UTIL_LCD_Clear>:
{
 800607c:	b507      	push	{r0, r1, r2, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800607e:	2100      	movs	r1, #0
 8006080:	4a04      	ldr	r2, [pc, #16]	; (8006094 <UTIL_LCD_Clear+0x18>)
 8006082:	9000      	str	r0, [sp, #0]
 8006084:	4608      	mov	r0, r1
 8006086:	e9d2 2310 	ldrd	r2, r3, [r2, #64]	; 0x40
 800608a:	f7ff ffd7 	bl	800603c <UTIL_LCD_FillRect>
}
 800608e:	b003      	add	sp, #12
 8006090:	f85d fb04 	ldr.w	pc, [sp], #4
 8006094:	20000db4 	.word	0x20000db4

08006098 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8006098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	461e      	mov	r6, r3
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 800609e:	0053      	lsls	r3, r2, #1
{
 80060a0:	4680      	mov	r8, r0
 80060a2:	4689      	mov	r9, r1
  decision = 3 - (Radius << 1);
 80060a4:	f1c3 0303 	rsb	r3, r3, #3

  current_x = 0;
  current_y = Radius;
 80060a8:	4615      	mov	r5, r2
  current_x = 0;
 80060aa:	2400      	movs	r4, #0
{
 80060ac:	9201      	str	r2, [sp, #4]
  decision = 3 - (Radius << 1);
 80060ae:	9300      	str	r3, [sp, #0]

  while (current_x <= current_y)
  {
    if(current_y > 0)
 80060b0:	b1a5      	cbz	r5, 80060dc <UTIL_LCD_FillCircle+0x44>
    {
      if(current_y >= Xpos)
 80060b2:	45a8      	cmp	r8, r5
 80060b4:	eb09 0104 	add.w	r1, r9, r4
 80060b8:	ea4f 0745 	mov.w	r7, r5, lsl #1
 80060bc:	eba9 0b04 	sub.w	fp, r9, r4
 80060c0:	d835      	bhi.n	800612e <UTIL_LCD_FillCircle+0x96>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 80060c2:	1b7f      	subs	r7, r7, r5
 80060c4:	4633      	mov	r3, r6
 80060c6:	2000      	movs	r0, #0
 80060c8:	4447      	add	r7, r8
 80060ca:	463a      	mov	r2, r7
 80060cc:	f7ff feae 	bl	8005e2c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 80060d0:	4633      	mov	r3, r6
 80060d2:	463a      	mov	r2, r7
 80060d4:	4659      	mov	r1, fp
 80060d6:	2000      	movs	r0, #0
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 80060d8:	f7ff fea8 	bl	8005e2c <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 80060dc:	b1a4      	cbz	r4, 8006108 <UTIL_LCD_FillCircle+0x70>
    {
      if(current_x >= Xpos)
 80060de:	45a0      	cmp	r8, r4
 80060e0:	eba9 0105 	sub.w	r1, r9, r5
 80060e4:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80060e8:	eb09 0a05 	add.w	sl, r9, r5
 80060ec:	d82b      	bhi.n	8006146 <UTIL_LCD_FillCircle+0xae>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 80060ee:	eb08 0704 	add.w	r7, r8, r4
 80060f2:	4633      	mov	r3, r6
 80060f4:	2000      	movs	r0, #0
 80060f6:	463a      	mov	r2, r7
 80060f8:	f7ff fe98 	bl	8005e2c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 80060fc:	4633      	mov	r3, r6
 80060fe:	463a      	mov	r2, r7
 8006100:	4651      	mov	r1, sl
 8006102:	2000      	movs	r0, #0
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8006104:	f7ff fe92 	bl	8005e2c <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	da27      	bge.n	800615e <UTIL_LCD_FillCircle+0xc6>
    {
      decision += (current_x << 2) + 6;
 800610e:	3306      	adds	r3, #6
 8006110:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006114:	9300      	str	r3, [sp, #0]
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
      current_y--;
    }
    current_x++;
 8006116:	3401      	adds	r4, #1
  while (current_x <= current_y)
 8006118:	42a5      	cmp	r5, r4
 800611a:	d2c9      	bcs.n	80060b0 <UTIL_LCD_FillCircle+0x18>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 800611c:	4633      	mov	r3, r6
 800611e:	9a01      	ldr	r2, [sp, #4]
 8006120:	4649      	mov	r1, r9
 8006122:	4640      	mov	r0, r8
}
 8006124:	b003      	add	sp, #12
 8006126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 800612a:	f7ff bef5 	b.w	8005f18 <UTIL_LCD_DrawCircle>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 800612e:	eba8 0a05 	sub.w	sl, r8, r5
 8006132:	4633      	mov	r3, r6
 8006134:	463a      	mov	r2, r7
 8006136:	4650      	mov	r0, sl
 8006138:	f7ff fe78 	bl	8005e2c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 800613c:	4633      	mov	r3, r6
 800613e:	463a      	mov	r2, r7
 8006140:	4659      	mov	r1, fp
 8006142:	4650      	mov	r0, sl
 8006144:	e7c8      	b.n	80060d8 <UTIL_LCD_FillCircle+0x40>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8006146:	eba8 0704 	sub.w	r7, r8, r4
 800614a:	4633      	mov	r3, r6
 800614c:	465a      	mov	r2, fp
 800614e:	4638      	mov	r0, r7
 8006150:	f7ff fe6c 	bl	8005e2c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8006154:	4633      	mov	r3, r6
 8006156:	465a      	mov	r2, fp
 8006158:	4651      	mov	r1, sl
 800615a:	4638      	mov	r0, r7
 800615c:	e7d2      	b.n	8006104 <UTIL_LCD_FillCircle+0x6c>
      decision += ((current_x - current_y) << 2) + 10;
 800615e:	9b00      	ldr	r3, [sp, #0]
 8006160:	1b62      	subs	r2, r4, r5
      current_y--;
 8006162:	3d01      	subs	r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 8006164:	330a      	adds	r3, #10
 8006166:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	e7d3      	b.n	8006116 <UTIL_LCD_FillCircle+0x7e>
	...

08006170 <__libc_init_array>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4e0d      	ldr	r6, [pc, #52]	; (80061a8 <__libc_init_array+0x38>)
 8006174:	4c0d      	ldr	r4, [pc, #52]	; (80061ac <__libc_init_array+0x3c>)
 8006176:	1ba4      	subs	r4, r4, r6
 8006178:	10a4      	asrs	r4, r4, #2
 800617a:	2500      	movs	r5, #0
 800617c:	42a5      	cmp	r5, r4
 800617e:	d109      	bne.n	8006194 <__libc_init_array+0x24>
 8006180:	4e0b      	ldr	r6, [pc, #44]	; (80061b0 <__libc_init_array+0x40>)
 8006182:	4c0c      	ldr	r4, [pc, #48]	; (80061b4 <__libc_init_array+0x44>)
 8006184:	f000 fe3e 	bl	8006e04 <_init>
 8006188:	1ba4      	subs	r4, r4, r6
 800618a:	10a4      	asrs	r4, r4, #2
 800618c:	2500      	movs	r5, #0
 800618e:	42a5      	cmp	r5, r4
 8006190:	d105      	bne.n	800619e <__libc_init_array+0x2e>
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006198:	4798      	blx	r3
 800619a:	3501      	adds	r5, #1
 800619c:	e7ee      	b.n	800617c <__libc_init_array+0xc>
 800619e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a2:	4798      	blx	r3
 80061a4:	3501      	adds	r5, #1
 80061a6:	e7f2      	b.n	800618e <__libc_init_array+0x1e>
 80061a8:	080070a8 	.word	0x080070a8
 80061ac:	080070a8 	.word	0x080070a8
 80061b0:	080070a8 	.word	0x080070a8
 80061b4:	080070ac 	.word	0x080070ac

080061b8 <cos>:
 80061b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ba:	eeb0 7b40 	vmov.f64	d7, d0
 80061be:	ee17 3a90 	vmov	r3, s15
 80061c2:	4a19      	ldr	r2, [pc, #100]	; (8006228 <cos+0x70>)
 80061c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061c8:	4293      	cmp	r3, r2
 80061ca:	dc04      	bgt.n	80061d6 <cos+0x1e>
 80061cc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006220 <cos+0x68>
 80061d0:	f000 f9a6 	bl	8006520 <__kernel_cos>
 80061d4:	e004      	b.n	80061e0 <cos+0x28>
 80061d6:	4a15      	ldr	r2, [pc, #84]	; (800622c <cos+0x74>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	dd04      	ble.n	80061e6 <cos+0x2e>
 80061dc:	ee30 0b40 	vsub.f64	d0, d0, d0
 80061e0:	b005      	add	sp, #20
 80061e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80061e6:	4668      	mov	r0, sp
 80061e8:	f000 f85e 	bl	80062a8 <__ieee754_rem_pio2>
 80061ec:	f000 0003 	and.w	r0, r0, #3
 80061f0:	2801      	cmp	r0, #1
 80061f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061f6:	ed9d 0b00 	vldr	d0, [sp]
 80061fa:	d007      	beq.n	800620c <cos+0x54>
 80061fc:	2802      	cmp	r0, #2
 80061fe:	d00a      	beq.n	8006216 <cos+0x5e>
 8006200:	2800      	cmp	r0, #0
 8006202:	d0e5      	beq.n	80061d0 <cos+0x18>
 8006204:	2001      	movs	r0, #1
 8006206:	f000 fc93 	bl	8006b30 <__kernel_sin>
 800620a:	e7e9      	b.n	80061e0 <cos+0x28>
 800620c:	f000 fc90 	bl	8006b30 <__kernel_sin>
 8006210:	eeb1 0b40 	vneg.f64	d0, d0
 8006214:	e7e4      	b.n	80061e0 <cos+0x28>
 8006216:	f000 f983 	bl	8006520 <__kernel_cos>
 800621a:	e7f9      	b.n	8006210 <cos+0x58>
 800621c:	f3af 8000 	nop.w
	...
 8006228:	3fe921fb 	.word	0x3fe921fb
 800622c:	7fefffff 	.word	0x7fefffff

08006230 <sin>:
 8006230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006232:	eeb0 7b40 	vmov.f64	d7, d0
 8006236:	ee17 3a90 	vmov	r3, s15
 800623a:	4a19      	ldr	r2, [pc, #100]	; (80062a0 <sin+0x70>)
 800623c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006240:	4293      	cmp	r3, r2
 8006242:	dc05      	bgt.n	8006250 <sin+0x20>
 8006244:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006298 <sin+0x68>
 8006248:	2000      	movs	r0, #0
 800624a:	f000 fc71 	bl	8006b30 <__kernel_sin>
 800624e:	e004      	b.n	800625a <sin+0x2a>
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <sin+0x74>)
 8006252:	4293      	cmp	r3, r2
 8006254:	dd04      	ble.n	8006260 <sin+0x30>
 8006256:	ee30 0b40 	vsub.f64	d0, d0, d0
 800625a:	b005      	add	sp, #20
 800625c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006260:	4668      	mov	r0, sp
 8006262:	f000 f821 	bl	80062a8 <__ieee754_rem_pio2>
 8006266:	f000 0003 	and.w	r0, r0, #3
 800626a:	2801      	cmp	r0, #1
 800626c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006270:	ed9d 0b00 	vldr	d0, [sp]
 8006274:	d004      	beq.n	8006280 <sin+0x50>
 8006276:	2802      	cmp	r0, #2
 8006278:	d005      	beq.n	8006286 <sin+0x56>
 800627a:	b950      	cbnz	r0, 8006292 <sin+0x62>
 800627c:	2001      	movs	r0, #1
 800627e:	e7e4      	b.n	800624a <sin+0x1a>
 8006280:	f000 f94e 	bl	8006520 <__kernel_cos>
 8006284:	e7e9      	b.n	800625a <sin+0x2a>
 8006286:	2001      	movs	r0, #1
 8006288:	f000 fc52 	bl	8006b30 <__kernel_sin>
 800628c:	eeb1 0b40 	vneg.f64	d0, d0
 8006290:	e7e3      	b.n	800625a <sin+0x2a>
 8006292:	f000 f945 	bl	8006520 <__kernel_cos>
 8006296:	e7f9      	b.n	800628c <sin+0x5c>
	...
 80062a0:	3fe921fb 	.word	0x3fe921fb
 80062a4:	7fefffff 	.word	0x7fefffff

080062a8 <__ieee754_rem_pio2>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	eeb0 7b40 	vmov.f64	d7, d0
 80062ae:	ee17 5a90 	vmov	r5, s15
 80062b2:	4b95      	ldr	r3, [pc, #596]	; (8006508 <__ieee754_rem_pio2+0x260>)
 80062b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80062b8:	429e      	cmp	r6, r3
 80062ba:	b088      	sub	sp, #32
 80062bc:	4604      	mov	r4, r0
 80062be:	dc07      	bgt.n	80062d0 <__ieee754_rem_pio2+0x28>
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	ed84 0b00 	vstr	d0, [r4]
 80062c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80062cc:	2000      	movs	r0, #0
 80062ce:	e01b      	b.n	8006308 <__ieee754_rem_pio2+0x60>
 80062d0:	4b8e      	ldr	r3, [pc, #568]	; (800650c <__ieee754_rem_pio2+0x264>)
 80062d2:	429e      	cmp	r6, r3
 80062d4:	dc3b      	bgt.n	800634e <__ieee754_rem_pio2+0xa6>
 80062d6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80062da:	2d00      	cmp	r5, #0
 80062dc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80064c8 <__ieee754_rem_pio2+0x220>
 80062e0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80062e4:	dd19      	ble.n	800631a <__ieee754_rem_pio2+0x72>
 80062e6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80062ea:	429e      	cmp	r6, r3
 80062ec:	d00e      	beq.n	800630c <__ieee754_rem_pio2+0x64>
 80062ee:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80064d0 <__ieee754_rem_pio2+0x228>
 80062f2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80062f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80062fa:	ed84 5b00 	vstr	d5, [r4]
 80062fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006302:	ed84 7b02 	vstr	d7, [r4, #8]
 8006306:	2001      	movs	r0, #1
 8006308:	b008      	add	sp, #32
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80064d8 <__ieee754_rem_pio2+0x230>
 8006310:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006314:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80064e0 <__ieee754_rem_pio2+0x238>
 8006318:	e7eb      	b.n	80062f2 <__ieee754_rem_pio2+0x4a>
 800631a:	429e      	cmp	r6, r3
 800631c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006320:	d00e      	beq.n	8006340 <__ieee754_rem_pio2+0x98>
 8006322:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80064d0 <__ieee754_rem_pio2+0x228>
 8006326:	ee37 5b06 	vadd.f64	d5, d7, d6
 800632a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800632e:	ed84 5b00 	vstr	d5, [r4]
 8006332:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	ed84 7b02 	vstr	d7, [r4, #8]
 800633e:	e7e3      	b.n	8006308 <__ieee754_rem_pio2+0x60>
 8006340:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80064d8 <__ieee754_rem_pio2+0x230>
 8006344:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006348:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80064e0 <__ieee754_rem_pio2+0x238>
 800634c:	e7eb      	b.n	8006326 <__ieee754_rem_pio2+0x7e>
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <__ieee754_rem_pio2+0x268>)
 8006350:	429e      	cmp	r6, r3
 8006352:	dc6c      	bgt.n	800642e <__ieee754_rem_pio2+0x186>
 8006354:	f000 fc44 	bl	8006be0 <fabs>
 8006358:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800635c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80064e8 <__ieee754_rem_pio2+0x240>
 8006360:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006364:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006368:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800636c:	ee17 0a90 	vmov	r0, s15
 8006370:	eeb1 5b44 	vneg.f64	d5, d4
 8006374:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80064c8 <__ieee754_rem_pio2+0x220>
 8006378:	eea5 0b07 	vfma.f64	d0, d5, d7
 800637c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80064d0 <__ieee754_rem_pio2+0x228>
 8006380:	281f      	cmp	r0, #31
 8006382:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006386:	ee30 6b47 	vsub.f64	d6, d0, d7
 800638a:	dc08      	bgt.n	800639e <__ieee754_rem_pio2+0xf6>
 800638c:	1e42      	subs	r2, r0, #1
 800638e:	4b61      	ldr	r3, [pc, #388]	; (8006514 <__ieee754_rem_pio2+0x26c>)
 8006390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006394:	42b3      	cmp	r3, r6
 8006396:	d002      	beq.n	800639e <__ieee754_rem_pio2+0xf6>
 8006398:	ed84 6b00 	vstr	d6, [r4]
 800639c:	e022      	b.n	80063e4 <__ieee754_rem_pio2+0x13c>
 800639e:	ee16 3a90 	vmov	r3, s13
 80063a2:	1536      	asrs	r6, r6, #20
 80063a4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80063a8:	1af3      	subs	r3, r6, r3
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	ddf4      	ble.n	8006398 <__ieee754_rem_pio2+0xf0>
 80063ae:	eeb0 6b40 	vmov.f64	d6, d0
 80063b2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 80064d8 <__ieee754_rem_pio2+0x230>
 80063b6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80063ba:	ee30 7b46 	vsub.f64	d7, d0, d6
 80063be:	eea5 7b03 	vfma.f64	d7, d5, d3
 80063c2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80064e0 <__ieee754_rem_pio2+0x238>
 80063c6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80063ca:	ee36 3b47 	vsub.f64	d3, d6, d7
 80063ce:	ee13 3a90 	vmov	r3, s7
 80063d2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80063d6:	1af6      	subs	r6, r6, r3
 80063d8:	2e31      	cmp	r6, #49	; 0x31
 80063da:	dc17      	bgt.n	800640c <__ieee754_rem_pio2+0x164>
 80063dc:	eeb0 0b46 	vmov.f64	d0, d6
 80063e0:	ed84 3b00 	vstr	d3, [r4]
 80063e4:	ed94 6b00 	vldr	d6, [r4]
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	ee30 0b46 	vsub.f64	d0, d0, d6
 80063ee:	ee30 7b47 	vsub.f64	d7, d0, d7
 80063f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80063f6:	da87      	bge.n	8006308 <__ieee754_rem_pio2+0x60>
 80063f8:	eeb1 6b46 	vneg.f64	d6, d6
 80063fc:	ed84 6b00 	vstr	d6, [r4]
 8006400:	eeb1 7b47 	vneg.f64	d7, d7
 8006404:	4240      	negs	r0, r0
 8006406:	ed84 7b02 	vstr	d7, [r4, #8]
 800640a:	e77d      	b.n	8006308 <__ieee754_rem_pio2+0x60>
 800640c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 80064f0 <__ieee754_rem_pio2+0x248>
 8006410:	eeb0 0b46 	vmov.f64	d0, d6
 8006414:	eea5 0b03 	vfma.f64	d0, d5, d3
 8006418:	ee36 7b40 	vsub.f64	d7, d6, d0
 800641c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80064f8 <__ieee754_rem_pio2+0x250>
 8006420:	eea5 7b03 	vfma.f64	d7, d5, d3
 8006424:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8006428:	ee30 6b47 	vsub.f64	d6, d0, d7
 800642c:	e7b4      	b.n	8006398 <__ieee754_rem_pio2+0xf0>
 800642e:	4b3a      	ldr	r3, [pc, #232]	; (8006518 <__ieee754_rem_pio2+0x270>)
 8006430:	429e      	cmp	r6, r3
 8006432:	dd06      	ble.n	8006442 <__ieee754_rem_pio2+0x19a>
 8006434:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006438:	ed80 7b02 	vstr	d7, [r0, #8]
 800643c:	ed80 7b00 	vstr	d7, [r0]
 8006440:	e744      	b.n	80062cc <__ieee754_rem_pio2+0x24>
 8006442:	1532      	asrs	r2, r6, #20
 8006444:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006448:	ee10 0a10 	vmov	r0, s0
 800644c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006450:	ec41 0b17 	vmov	d7, r0, r1
 8006454:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006458:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8006500 <__ieee754_rem_pio2+0x258>
 800645c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006460:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006464:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006468:	ee27 7b05 	vmul.f64	d7, d7, d5
 800646c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006470:	a908      	add	r1, sp, #32
 8006472:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006476:	ee37 7b46 	vsub.f64	d7, d7, d6
 800647a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800647e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006482:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006486:	2303      	movs	r3, #3
 8006488:	ed31 7b02 	vldmdb	r1!, {d7}
 800648c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006494:	f103 30ff 	add.w	r0, r3, #4294967295
 8006498:	d013      	beq.n	80064c2 <__ieee754_rem_pio2+0x21a>
 800649a:	4920      	ldr	r1, [pc, #128]	; (800651c <__ieee754_rem_pio2+0x274>)
 800649c:	9101      	str	r1, [sp, #4]
 800649e:	2102      	movs	r1, #2
 80064a0:	9100      	str	r1, [sp, #0]
 80064a2:	a802      	add	r0, sp, #8
 80064a4:	4621      	mov	r1, r4
 80064a6:	f000 f8a7 	bl	80065f8 <__kernel_rem_pio2>
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	f6bf af2c 	bge.w	8006308 <__ieee754_rem_pio2+0x60>
 80064b0:	ed94 7b00 	vldr	d7, [r4]
 80064b4:	eeb1 7b47 	vneg.f64	d7, d7
 80064b8:	ed84 7b00 	vstr	d7, [r4]
 80064bc:	ed94 7b02 	vldr	d7, [r4, #8]
 80064c0:	e79e      	b.n	8006400 <__ieee754_rem_pio2+0x158>
 80064c2:	4603      	mov	r3, r0
 80064c4:	e7e0      	b.n	8006488 <__ieee754_rem_pio2+0x1e0>
 80064c6:	bf00      	nop
 80064c8:	54400000 	.word	0x54400000
 80064cc:	3ff921fb 	.word	0x3ff921fb
 80064d0:	1a626331 	.word	0x1a626331
 80064d4:	3dd0b461 	.word	0x3dd0b461
 80064d8:	1a600000 	.word	0x1a600000
 80064dc:	3dd0b461 	.word	0x3dd0b461
 80064e0:	2e037073 	.word	0x2e037073
 80064e4:	3ba3198a 	.word	0x3ba3198a
 80064e8:	6dc9c883 	.word	0x6dc9c883
 80064ec:	3fe45f30 	.word	0x3fe45f30
 80064f0:	2e000000 	.word	0x2e000000
 80064f4:	3ba3198a 	.word	0x3ba3198a
 80064f8:	252049c1 	.word	0x252049c1
 80064fc:	397b839a 	.word	0x397b839a
 8006500:	00000000 	.word	0x00000000
 8006504:	41700000 	.word	0x41700000
 8006508:	3fe921fb 	.word	0x3fe921fb
 800650c:	4002d97b 	.word	0x4002d97b
 8006510:	413921fb 	.word	0x413921fb
 8006514:	08006ed0 	.word	0x08006ed0
 8006518:	7fefffff 	.word	0x7fefffff
 800651c:	08006f50 	.word	0x08006f50

08006520 <__kernel_cos>:
 8006520:	ee10 1a90 	vmov	r1, s1
 8006524:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8006528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800652c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006530:	da05      	bge.n	800653e <__kernel_cos+0x1e>
 8006532:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8006536:	ee16 3a90 	vmov	r3, s13
 800653a:	2b00      	cmp	r3, #0
 800653c:	d03d      	beq.n	80065ba <__kernel_cos+0x9a>
 800653e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8006542:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006546:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80065c0 <__kernel_cos+0xa0>
 800654a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800654e:	ee24 6b06 	vmul.f64	d6, d4, d6
 8006552:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80065c8 <__kernel_cos+0xa8>
 8006556:	eea4 5b03 	vfma.f64	d5, d4, d3
 800655a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80065d0 <__kernel_cos+0xb0>
 800655e:	eea5 3b04 	vfma.f64	d3, d5, d4
 8006562:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80065d8 <__kernel_cos+0xb8>
 8006566:	eea3 5b04 	vfma.f64	d5, d3, d4
 800656a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80065e0 <__kernel_cos+0xc0>
 800656e:	4b20      	ldr	r3, [pc, #128]	; (80065f0 <__kernel_cos+0xd0>)
 8006570:	eea5 3b04 	vfma.f64	d3, d5, d4
 8006574:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80065e8 <__kernel_cos+0xc8>
 8006578:	4299      	cmp	r1, r3
 800657a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800657e:	ee25 5b04 	vmul.f64	d5, d5, d4
 8006582:	eea4 1b05 	vfma.f64	d1, d4, d5
 8006586:	dc04      	bgt.n	8006592 <__kernel_cos+0x72>
 8006588:	ee36 6b41 	vsub.f64	d6, d6, d1
 800658c:	ee37 0b46 	vsub.f64	d0, d7, d6
 8006590:	4770      	bx	lr
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <__kernel_cos+0xd4>)
 8006594:	4299      	cmp	r1, r3
 8006596:	dc0d      	bgt.n	80065b4 <__kernel_cos+0x94>
 8006598:	2200      	movs	r2, #0
 800659a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800659e:	ec43 2b15 	vmov	d5, r2, r3
 80065a2:	ee37 0b45 	vsub.f64	d0, d7, d5
 80065a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80065aa:	ee36 6b41 	vsub.f64	d6, d6, d1
 80065ae:	ee30 0b46 	vsub.f64	d0, d0, d6
 80065b2:	4770      	bx	lr
 80065b4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80065b8:	e7f3      	b.n	80065a2 <__kernel_cos+0x82>
 80065ba:	eeb0 0b47 	vmov.f64	d0, d7
 80065be:	4770      	bx	lr
 80065c0:	be8838d4 	.word	0xbe8838d4
 80065c4:	bda8fae9 	.word	0xbda8fae9
 80065c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80065cc:	3e21ee9e 	.word	0x3e21ee9e
 80065d0:	809c52ad 	.word	0x809c52ad
 80065d4:	be927e4f 	.word	0xbe927e4f
 80065d8:	19cb1590 	.word	0x19cb1590
 80065dc:	3efa01a0 	.word	0x3efa01a0
 80065e0:	16c15177 	.word	0x16c15177
 80065e4:	bf56c16c 	.word	0xbf56c16c
 80065e8:	5555554c 	.word	0x5555554c
 80065ec:	3fa55555 	.word	0x3fa55555
 80065f0:	3fd33332 	.word	0x3fd33332
 80065f4:	3fe90000 	.word	0x3fe90000

080065f8 <__kernel_rem_pio2>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	ed2d 8b06 	vpush	{d8-d10}
 8006600:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006604:	469b      	mov	fp, r3
 8006606:	460e      	mov	r6, r1
 8006608:	4bc7      	ldr	r3, [pc, #796]	; (8006928 <__kernel_rem_pio2+0x330>)
 800660a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800660c:	9002      	str	r0, [sp, #8]
 800660e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8006612:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8006614:	1ed1      	subs	r1, r2, #3
 8006616:	2318      	movs	r3, #24
 8006618:	f06f 0417 	mvn.w	r4, #23
 800661c:	fb91 f1f3 	sdiv	r1, r1, r3
 8006620:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006624:	f10b 3aff 	add.w	sl, fp, #4294967295
 8006628:	fb01 4404 	mla	r4, r1, r4, r4
 800662c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8006910 <__kernel_rem_pio2+0x318>
 8006630:	4414      	add	r4, r2
 8006632:	eba1 050a 	sub.w	r5, r1, sl
 8006636:	aa1a      	add	r2, sp, #104	; 0x68
 8006638:	eb09 070a 	add.w	r7, r9, sl
 800663c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8006640:	4696      	mov	lr, r2
 8006642:	2300      	movs	r3, #0
 8006644:	42bb      	cmp	r3, r7
 8006646:	dd0f      	ble.n	8006668 <__kernel_rem_pio2+0x70>
 8006648:	af6a      	add	r7, sp, #424	; 0x1a8
 800664a:	2200      	movs	r2, #0
 800664c:	454a      	cmp	r2, r9
 800664e:	dc28      	bgt.n	80066a2 <__kernel_rem_pio2+0xaa>
 8006650:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8006654:	eb0b 0302 	add.w	r3, fp, r2
 8006658:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800665c:	9d02      	ldr	r5, [sp, #8]
 800665e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8006910 <__kernel_rem_pio2+0x318>
 8006662:	f04f 0c00 	mov.w	ip, #0
 8006666:	e016      	b.n	8006696 <__kernel_rem_pio2+0x9e>
 8006668:	42dd      	cmn	r5, r3
 800666a:	d409      	bmi.n	8006680 <__kernel_rem_pio2+0x88>
 800666c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8006670:	ee07 2a90 	vmov	s15, r2
 8006674:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006678:	ecae 7b02 	vstmia	lr!, {d7}
 800667c:	3301      	adds	r3, #1
 800667e:	e7e1      	b.n	8006644 <__kernel_rem_pio2+0x4c>
 8006680:	eeb0 7b46 	vmov.f64	d7, d6
 8006684:	e7f8      	b.n	8006678 <__kernel_rem_pio2+0x80>
 8006686:	ecb5 5b02 	vldmia	r5!, {d5}
 800668a:	ed33 6b02 	vldmdb	r3!, {d6}
 800668e:	f10c 0c01 	add.w	ip, ip, #1
 8006692:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006696:	45d4      	cmp	ip, sl
 8006698:	ddf5      	ble.n	8006686 <__kernel_rem_pio2+0x8e>
 800669a:	eca7 7b02 	vstmia	r7!, {d7}
 800669e:	3201      	adds	r2, #1
 80066a0:	e7d4      	b.n	800664c <__kernel_rem_pio2+0x54>
 80066a2:	ab06      	add	r3, sp, #24
 80066a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80066a8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8006918 <__kernel_rem_pio2+0x320>
 80066ac:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8006920 <__kernel_rem_pio2+0x328>
 80066b0:	9304      	str	r3, [sp, #16]
 80066b2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80066b6:	9303      	str	r3, [sp, #12]
 80066b8:	464d      	mov	r5, r9
 80066ba:	ab92      	add	r3, sp, #584	; 0x248
 80066bc:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 80066c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80066c4:	3f01      	subs	r7, #1
 80066c6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80066ca:	00ff      	lsls	r7, r7, #3
 80066cc:	ab92      	add	r3, sp, #584	; 0x248
 80066ce:	19da      	adds	r2, r3, r7
 80066d0:	3a98      	subs	r2, #152	; 0x98
 80066d2:	2300      	movs	r3, #0
 80066d4:	1ae9      	subs	r1, r5, r3
 80066d6:	2900      	cmp	r1, #0
 80066d8:	dc4e      	bgt.n	8006778 <__kernel_rem_pio2+0x180>
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fb04 	bl	8006ce8 <scalbn>
 80066e0:	eeb0 8b40 	vmov.f64	d8, d0
 80066e4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80066e8:	ee28 0b00 	vmul.f64	d0, d8, d0
 80066ec:	f000 fa84 	bl	8006bf8 <floor>
 80066f0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80066f4:	eea0 8b47 	vfms.f64	d8, d0, d7
 80066f8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	edcd 7a01 	vstr	s15, [sp, #4]
 8006702:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006706:	ee38 8b47 	vsub.f64	d8, d8, d7
 800670a:	dd4a      	ble.n	80067a2 <__kernel_rem_pio2+0x1aa>
 800670c:	1e69      	subs	r1, r5, #1
 800670e:	ab06      	add	r3, sp, #24
 8006710:	f1c4 0018 	rsb	r0, r4, #24
 8006714:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8006718:	9a01      	ldr	r2, [sp, #4]
 800671a:	fa4c f300 	asr.w	r3, ip, r0
 800671e:	441a      	add	r2, r3
 8006720:	4083      	lsls	r3, r0
 8006722:	9201      	str	r2, [sp, #4]
 8006724:	ebac 0203 	sub.w	r2, ip, r3
 8006728:	ab06      	add	r3, sp, #24
 800672a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800672e:	f1c4 0317 	rsb	r3, r4, #23
 8006732:	fa42 f803 	asr.w	r8, r2, r3
 8006736:	f1b8 0f00 	cmp.w	r8, #0
 800673a:	dd43      	ble.n	80067c4 <__kernel_rem_pio2+0x1cc>
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	2000      	movs	r0, #0
 8006740:	3301      	adds	r3, #1
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	4601      	mov	r1, r0
 8006746:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800674a:	4285      	cmp	r5, r0
 800674c:	dc6e      	bgt.n	800682c <__kernel_rem_pio2+0x234>
 800674e:	2c00      	cmp	r4, #0
 8006750:	dd04      	ble.n	800675c <__kernel_rem_pio2+0x164>
 8006752:	2c01      	cmp	r4, #1
 8006754:	d07f      	beq.n	8006856 <__kernel_rem_pio2+0x25e>
 8006756:	2c02      	cmp	r4, #2
 8006758:	f000 8087 	beq.w	800686a <__kernel_rem_pio2+0x272>
 800675c:	f1b8 0f02 	cmp.w	r8, #2
 8006760:	d130      	bne.n	80067c4 <__kernel_rem_pio2+0x1cc>
 8006762:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006766:	ee30 8b48 	vsub.f64	d8, d0, d8
 800676a:	b359      	cbz	r1, 80067c4 <__kernel_rem_pio2+0x1cc>
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fabb 	bl	8006ce8 <scalbn>
 8006772:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006776:	e025      	b.n	80067c4 <__kernel_rem_pio2+0x1cc>
 8006778:	ee20 7b09 	vmul.f64	d7, d0, d9
 800677c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006780:	a806      	add	r0, sp, #24
 8006782:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006786:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800678a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800678e:	ee10 1a10 	vmov	r1, s0
 8006792:	ed32 0b02 	vldmdb	r2!, {d0}
 8006796:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800679a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800679e:	3301      	adds	r3, #1
 80067a0:	e798      	b.n	80066d4 <__kernel_rem_pio2+0xdc>
 80067a2:	d106      	bne.n	80067b2 <__kernel_rem_pio2+0x1ba>
 80067a4:	1e6b      	subs	r3, r5, #1
 80067a6:	aa06      	add	r2, sp, #24
 80067a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067ac:	ea4f 58e2 	mov.w	r8, r2, asr #23
 80067b0:	e7c1      	b.n	8006736 <__kernel_rem_pio2+0x13e>
 80067b2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80067b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80067ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067be:	da32      	bge.n	8006826 <__kernel_rem_pio2+0x22e>
 80067c0:	f04f 0800 	mov.w	r8, #0
 80067c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	f040 80b0 	bne.w	8006930 <__kernel_rem_pio2+0x338>
 80067d0:	1e6b      	subs	r3, r5, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	2200      	movs	r2, #0
 80067d6:	4548      	cmp	r0, r9
 80067d8:	da4e      	bge.n	8006878 <__kernel_rem_pio2+0x280>
 80067da:	2a00      	cmp	r2, #0
 80067dc:	f000 8088 	beq.w	80068f0 <__kernel_rem_pio2+0x2f8>
 80067e0:	aa06      	add	r2, sp, #24
 80067e2:	3c18      	subs	r4, #24
 80067e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067e8:	2900      	cmp	r1, #0
 80067ea:	f000 808e 	beq.w	800690a <__kernel_rem_pio2+0x312>
 80067ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80067f2:	4620      	mov	r0, r4
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	f000 fa77 	bl	8006ce8 <scalbn>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	aa6a      	add	r2, sp, #424	; 0x1a8
 80067fe:	00d9      	lsls	r1, r3, #3
 8006800:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8006918 <__kernel_rem_pio2+0x320>
 8006804:	1850      	adds	r0, r2, r1
 8006806:	f100 0508 	add.w	r5, r0, #8
 800680a:	461c      	mov	r4, r3
 800680c:	2c00      	cmp	r4, #0
 800680e:	f280 80bd 	bge.w	800698c <__kernel_rem_pio2+0x394>
 8006812:	2500      	movs	r5, #0
 8006814:	1b5c      	subs	r4, r3, r5
 8006816:	2c00      	cmp	r4, #0
 8006818:	f2c0 80dd 	blt.w	80069d6 <__kernel_rem_pio2+0x3de>
 800681c:	4f43      	ldr	r7, [pc, #268]	; (800692c <__kernel_rem_pio2+0x334>)
 800681e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8006910 <__kernel_rem_pio2+0x318>
 8006822:	2400      	movs	r4, #0
 8006824:	e0cb      	b.n	80069be <__kernel_rem_pio2+0x3c6>
 8006826:	f04f 0802 	mov.w	r8, #2
 800682a:	e787      	b.n	800673c <__kernel_rem_pio2+0x144>
 800682c:	ab06      	add	r3, sp, #24
 800682e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006832:	b949      	cbnz	r1, 8006848 <__kernel_rem_pio2+0x250>
 8006834:	b12b      	cbz	r3, 8006842 <__kernel_rem_pio2+0x24a>
 8006836:	aa06      	add	r2, sp, #24
 8006838:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800683c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006840:	2301      	movs	r3, #1
 8006842:	3001      	adds	r0, #1
 8006844:	4619      	mov	r1, r3
 8006846:	e780      	b.n	800674a <__kernel_rem_pio2+0x152>
 8006848:	aa06      	add	r2, sp, #24
 800684a:	ebac 0303 	sub.w	r3, ip, r3
 800684e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006852:	460b      	mov	r3, r1
 8006854:	e7f5      	b.n	8006842 <__kernel_rem_pio2+0x24a>
 8006856:	1e68      	subs	r0, r5, #1
 8006858:	ab06      	add	r3, sp, #24
 800685a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800685e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006862:	aa06      	add	r2, sp, #24
 8006864:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006868:	e778      	b.n	800675c <__kernel_rem_pio2+0x164>
 800686a:	1e68      	subs	r0, r5, #1
 800686c:	ab06      	add	r3, sp, #24
 800686e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006872:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006876:	e7f4      	b.n	8006862 <__kernel_rem_pio2+0x26a>
 8006878:	a906      	add	r1, sp, #24
 800687a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800687e:	3801      	subs	r0, #1
 8006880:	430a      	orrs	r2, r1
 8006882:	e7a8      	b.n	80067d6 <__kernel_rem_pio2+0x1de>
 8006884:	f10c 0c01 	add.w	ip, ip, #1
 8006888:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800688c:	2a00      	cmp	r2, #0
 800688e:	d0f9      	beq.n	8006884 <__kernel_rem_pio2+0x28c>
 8006890:	eb0b 0305 	add.w	r3, fp, r5
 8006894:	aa1a      	add	r2, sp, #104	; 0x68
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	1898      	adds	r0, r3, r2
 800689a:	3008      	adds	r0, #8
 800689c:	1c69      	adds	r1, r5, #1
 800689e:	3708      	adds	r7, #8
 80068a0:	2200      	movs	r2, #0
 80068a2:	4465      	add	r5, ip
 80068a4:	9005      	str	r0, [sp, #20]
 80068a6:	428d      	cmp	r5, r1
 80068a8:	f6ff af07 	blt.w	80066ba <__kernel_rem_pio2+0xc2>
 80068ac:	a81a      	add	r0, sp, #104	; 0x68
 80068ae:	eb02 0c03 	add.w	ip, r2, r3
 80068b2:	4484      	add	ip, r0
 80068b4:	9803      	ldr	r0, [sp, #12]
 80068b6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80068ba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80068be:	9001      	str	r0, [sp, #4]
 80068c0:	ee07 0a90 	vmov	s15, r0
 80068c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80068c8:	9805      	ldr	r0, [sp, #20]
 80068ca:	ed8c 7b00 	vstr	d7, [ip]
 80068ce:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006910 <__kernel_rem_pio2+0x318>
 80068d2:	eb00 0802 	add.w	r8, r0, r2
 80068d6:	f04f 0c00 	mov.w	ip, #0
 80068da:	45d4      	cmp	ip, sl
 80068dc:	dd0c      	ble.n	80068f8 <__kernel_rem_pio2+0x300>
 80068de:	eb02 0c07 	add.w	ip, r2, r7
 80068e2:	a86a      	add	r0, sp, #424	; 0x1a8
 80068e4:	4484      	add	ip, r0
 80068e6:	ed8c 7b02 	vstr	d7, [ip, #8]
 80068ea:	3101      	adds	r1, #1
 80068ec:	3208      	adds	r2, #8
 80068ee:	e7da      	b.n	80068a6 <__kernel_rem_pio2+0x2ae>
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	f04f 0c01 	mov.w	ip, #1
 80068f6:	e7c7      	b.n	8006888 <__kernel_rem_pio2+0x290>
 80068f8:	ecbe 5b02 	vldmia	lr!, {d5}
 80068fc:	ed38 6b02 	vldmdb	r8!, {d6}
 8006900:	f10c 0c01 	add.w	ip, ip, #1
 8006904:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006908:	e7e7      	b.n	80068da <__kernel_rem_pio2+0x2e2>
 800690a:	3b01      	subs	r3, #1
 800690c:	e768      	b.n	80067e0 <__kernel_rem_pio2+0x1e8>
 800690e:	bf00      	nop
	...
 800691c:	3e700000 	.word	0x3e700000
 8006920:	00000000 	.word	0x00000000
 8006924:	41700000 	.word	0x41700000
 8006928:	08007098 	.word	0x08007098
 800692c:	08007058 	.word	0x08007058
 8006930:	4260      	negs	r0, r4
 8006932:	eeb0 0b48 	vmov.f64	d0, d8
 8006936:	f000 f9d7 	bl	8006ce8 <scalbn>
 800693a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006b18 <__kernel_rem_pio2+0x520>
 800693e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8006942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006946:	db18      	blt.n	800697a <__kernel_rem_pio2+0x382>
 8006948:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8006b20 <__kernel_rem_pio2+0x528>
 800694c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006950:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006954:	aa06      	add	r2, sp, #24
 8006956:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800695a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800695e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006962:	a906      	add	r1, sp, #24
 8006964:	ee10 3a10 	vmov	r3, s0
 8006968:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800696c:	1c6b      	adds	r3, r5, #1
 800696e:	ee17 2a10 	vmov	r2, s14
 8006972:	3418      	adds	r4, #24
 8006974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006978:	e739      	b.n	80067ee <__kernel_rem_pio2+0x1f6>
 800697a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800697e:	aa06      	add	r2, sp, #24
 8006980:	ee10 3a10 	vmov	r3, s0
 8006984:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006988:	462b      	mov	r3, r5
 800698a:	e730      	b.n	80067ee <__kernel_rem_pio2+0x1f6>
 800698c:	aa06      	add	r2, sp, #24
 800698e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	ee07 2a90 	vmov	s15, r2
 8006998:	3c01      	subs	r4, #1
 800699a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800699e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80069a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80069a6:	ed25 7b02 	vstmdb	r5!, {d7}
 80069aa:	e72f      	b.n	800680c <__kernel_rem_pio2+0x214>
 80069ac:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80069b0:	ecb7 5b02 	vldmia	r7!, {d5}
 80069b4:	ed9c 6b00 	vldr	d6, [ip]
 80069b8:	3401      	adds	r4, #1
 80069ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80069be:	454c      	cmp	r4, r9
 80069c0:	dc01      	bgt.n	80069c6 <__kernel_rem_pio2+0x3ce>
 80069c2:	42a5      	cmp	r5, r4
 80069c4:	daf2      	bge.n	80069ac <__kernel_rem_pio2+0x3b4>
 80069c6:	aa42      	add	r2, sp, #264	; 0x108
 80069c8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80069cc:	ed84 7b00 	vstr	d7, [r4]
 80069d0:	3501      	adds	r5, #1
 80069d2:	3808      	subs	r0, #8
 80069d4:	e71e      	b.n	8006814 <__kernel_rem_pio2+0x21c>
 80069d6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80069d8:	2a03      	cmp	r2, #3
 80069da:	d84e      	bhi.n	8006a7a <__kernel_rem_pio2+0x482>
 80069dc:	e8df f002 	tbb	[pc, r2]
 80069e0:	021f1f3e 	.word	0x021f1f3e
 80069e4:	3108      	adds	r1, #8
 80069e6:	aa42      	add	r2, sp, #264	; 0x108
 80069e8:	4411      	add	r1, r2
 80069ea:	4608      	mov	r0, r1
 80069ec:	461c      	mov	r4, r3
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	dc61      	bgt.n	8006ab6 <__kernel_rem_pio2+0x4be>
 80069f2:	4608      	mov	r0, r1
 80069f4:	461c      	mov	r4, r3
 80069f6:	2c01      	cmp	r4, #1
 80069f8:	dc6d      	bgt.n	8006ad6 <__kernel_rem_pio2+0x4de>
 80069fa:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006b28 <__kernel_rem_pio2+0x530>
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	dc79      	bgt.n	8006af6 <__kernel_rem_pio2+0x4fe>
 8006a02:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8006a06:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8006a0a:	f1b8 0f00 	cmp.w	r8, #0
 8006a0e:	d178      	bne.n	8006b02 <__kernel_rem_pio2+0x50a>
 8006a10:	ed86 5b00 	vstr	d5, [r6]
 8006a14:	ed86 6b02 	vstr	d6, [r6, #8]
 8006a18:	ed86 7b04 	vstr	d7, [r6, #16]
 8006a1c:	e02d      	b.n	8006a7a <__kernel_rem_pio2+0x482>
 8006a1e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8006b28 <__kernel_rem_pio2+0x530>
 8006a22:	3108      	adds	r1, #8
 8006a24:	aa42      	add	r2, sp, #264	; 0x108
 8006a26:	4411      	add	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	da34      	bge.n	8006a98 <__kernel_rem_pio2+0x4a0>
 8006a2e:	f1b8 0f00 	cmp.w	r8, #0
 8006a32:	d037      	beq.n	8006aa4 <__kernel_rem_pio2+0x4ac>
 8006a34:	eeb1 7b46 	vneg.f64	d7, d6
 8006a38:	ed86 7b00 	vstr	d7, [r6]
 8006a3c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8006a40:	a844      	add	r0, sp, #272	; 0x110
 8006a42:	2101      	movs	r1, #1
 8006a44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	da2e      	bge.n	8006aaa <__kernel_rem_pio2+0x4b2>
 8006a4c:	f1b8 0f00 	cmp.w	r8, #0
 8006a50:	d001      	beq.n	8006a56 <__kernel_rem_pio2+0x45e>
 8006a52:	eeb1 7b47 	vneg.f64	d7, d7
 8006a56:	ed86 7b02 	vstr	d7, [r6, #8]
 8006a5a:	e00e      	b.n	8006a7a <__kernel_rem_pio2+0x482>
 8006a5c:	aa92      	add	r2, sp, #584	; 0x248
 8006a5e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8006b28 <__kernel_rem_pio2+0x530>
 8006a62:	4411      	add	r1, r2
 8006a64:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da0f      	bge.n	8006a8c <__kernel_rem_pio2+0x494>
 8006a6c:	f1b8 0f00 	cmp.w	r8, #0
 8006a70:	d001      	beq.n	8006a76 <__kernel_rem_pio2+0x47e>
 8006a72:	eeb1 7b47 	vneg.f64	d7, d7
 8006a76:	ed86 7b00 	vstr	d7, [r6]
 8006a7a:	9b01      	ldr	r3, [sp, #4]
 8006a7c:	f003 0007 	and.w	r0, r3, #7
 8006a80:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006a84:	ecbd 8b06 	vpop	{d8-d10}
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	ed31 6b02 	vldmdb	r1!, {d6}
 8006a90:	3b01      	subs	r3, #1
 8006a92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a96:	e7e7      	b.n	8006a68 <__kernel_rem_pio2+0x470>
 8006a98:	ed31 7b02 	vldmdb	r1!, {d7}
 8006a9c:	3801      	subs	r0, #1
 8006a9e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006aa2:	e7c2      	b.n	8006a2a <__kernel_rem_pio2+0x432>
 8006aa4:	eeb0 7b46 	vmov.f64	d7, d6
 8006aa8:	e7c6      	b.n	8006a38 <__kernel_rem_pio2+0x440>
 8006aaa:	ecb0 6b02 	vldmia	r0!, {d6}
 8006aae:	3101      	adds	r1, #1
 8006ab0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ab4:	e7c8      	b.n	8006a48 <__kernel_rem_pio2+0x450>
 8006ab6:	ed10 7b04 	vldr	d7, [r0, #-16]
 8006aba:	ed30 5b02 	vldmdb	r0!, {d5}
 8006abe:	3c01      	subs	r4, #1
 8006ac0:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006ac4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ac8:	ed00 6b02 	vstr	d6, [r0, #-8]
 8006acc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006ad0:	ed80 7b00 	vstr	d7, [r0]
 8006ad4:	e78b      	b.n	80069ee <__kernel_rem_pio2+0x3f6>
 8006ad6:	ed10 7b04 	vldr	d7, [r0, #-16]
 8006ada:	ed30 5b02 	vldmdb	r0!, {d5}
 8006ade:	3c01      	subs	r4, #1
 8006ae0:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006ae4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ae8:	ed00 6b02 	vstr	d6, [r0, #-8]
 8006aec:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006af0:	ed80 7b00 	vstr	d7, [r0]
 8006af4:	e77f      	b.n	80069f6 <__kernel_rem_pio2+0x3fe>
 8006af6:	ed31 6b02 	vldmdb	r1!, {d6}
 8006afa:	3b01      	subs	r3, #1
 8006afc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b00:	e77d      	b.n	80069fe <__kernel_rem_pio2+0x406>
 8006b02:	eeb1 5b45 	vneg.f64	d5, d5
 8006b06:	eeb1 6b46 	vneg.f64	d6, d6
 8006b0a:	ed86 5b00 	vstr	d5, [r6]
 8006b0e:	eeb1 7b47 	vneg.f64	d7, d7
 8006b12:	ed86 6b02 	vstr	d6, [r6, #8]
 8006b16:	e77f      	b.n	8006a18 <__kernel_rem_pio2+0x420>
 8006b18:	00000000 	.word	0x00000000
 8006b1c:	41700000 	.word	0x41700000
 8006b20:	00000000 	.word	0x00000000
 8006b24:	3e700000 	.word	0x3e700000
	...

08006b30 <__kernel_sin>:
 8006b30:	ee10 3a90 	vmov	r3, s1
 8006b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006b3c:	da04      	bge.n	8006b48 <__kernel_sin+0x18>
 8006b3e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006b42:	ee17 3a90 	vmov	r3, s15
 8006b46:	b35b      	cbz	r3, 8006ba0 <__kernel_sin+0x70>
 8006b48:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006b4c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006b50:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006ba8 <__kernel_sin+0x78>
 8006b54:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006bb0 <__kernel_sin+0x80>
 8006b58:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006b5c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006bb8 <__kernel_sin+0x88>
 8006b60:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006b64:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006bc0 <__kernel_sin+0x90>
 8006b68:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006b6c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006bc8 <__kernel_sin+0x98>
 8006b70:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006b74:	b930      	cbnz	r0, 8006b84 <__kernel_sin+0x54>
 8006b76:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006bd0 <__kernel_sin+0xa0>
 8006b7a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006b7e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006b82:	4770      	bx	lr
 8006b84:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006b88:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006b8c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006b90:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006b94:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006bd8 <__kernel_sin+0xa8>
 8006b98:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006b9c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	5acfd57c 	.word	0x5acfd57c
 8006bac:	3de5d93a 	.word	0x3de5d93a
 8006bb0:	8a2b9ceb 	.word	0x8a2b9ceb
 8006bb4:	be5ae5e6 	.word	0xbe5ae5e6
 8006bb8:	57b1fe7d 	.word	0x57b1fe7d
 8006bbc:	3ec71de3 	.word	0x3ec71de3
 8006bc0:	19c161d5 	.word	0x19c161d5
 8006bc4:	bf2a01a0 	.word	0xbf2a01a0
 8006bc8:	1110f8a6 	.word	0x1110f8a6
 8006bcc:	3f811111 	.word	0x3f811111
 8006bd0:	55555549 	.word	0x55555549
 8006bd4:	bfc55555 	.word	0xbfc55555
 8006bd8:	55555549 	.word	0x55555549
 8006bdc:	3fc55555 	.word	0x3fc55555

08006be0 <fabs>:
 8006be0:	ec51 0b10 	vmov	r0, r1, d0
 8006be4:	ee10 2a10 	vmov	r2, s0
 8006be8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bec:	ec43 2b10 	vmov	d0, r2, r3
 8006bf0:	4770      	bx	lr
 8006bf2:	0000      	movs	r0, r0
 8006bf4:	0000      	movs	r0, r0
	...

08006bf8 <floor>:
 8006bf8:	ee10 1a90 	vmov	r1, s1
 8006bfc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c00:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006c04:	2b13      	cmp	r3, #19
 8006c06:	b530      	push	{r4, r5, lr}
 8006c08:	ee10 0a10 	vmov	r0, s0
 8006c0c:	ee10 5a10 	vmov	r5, s0
 8006c10:	dc33      	bgt.n	8006c7a <floor+0x82>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da17      	bge.n	8006c46 <floor+0x4e>
 8006c16:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006cd8 <floor+0xe0>
 8006c1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006c1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c26:	dd09      	ble.n	8006c3c <floor+0x44>
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	da50      	bge.n	8006cce <floor+0xd6>
 8006c2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c30:	4a2b      	ldr	r2, [pc, #172]	; (8006ce0 <floor+0xe8>)
 8006c32:	4303      	orrs	r3, r0
 8006c34:	2000      	movs	r0, #0
 8006c36:	4283      	cmp	r3, r0
 8006c38:	bf18      	it	ne
 8006c3a:	4611      	movne	r1, r2
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4602      	mov	r2, r0
 8006c40:	ec43 2b10 	vmov	d0, r2, r3
 8006c44:	e020      	b.n	8006c88 <floor+0x90>
 8006c46:	4a27      	ldr	r2, [pc, #156]	; (8006ce4 <floor+0xec>)
 8006c48:	411a      	asrs	r2, r3
 8006c4a:	ea01 0402 	and.w	r4, r1, r2
 8006c4e:	4304      	orrs	r4, r0
 8006c50:	d01a      	beq.n	8006c88 <floor+0x90>
 8006c52:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006cd8 <floor+0xe0>
 8006c56:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006c5a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c62:	ddeb      	ble.n	8006c3c <floor+0x44>
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfbe      	ittt	lt
 8006c68:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8006c6c:	fa40 f303 	asrlt.w	r3, r0, r3
 8006c70:	18c9      	addlt	r1, r1, r3
 8006c72:	ea21 0102 	bic.w	r1, r1, r2
 8006c76:	2000      	movs	r0, #0
 8006c78:	e7e0      	b.n	8006c3c <floor+0x44>
 8006c7a:	2b33      	cmp	r3, #51	; 0x33
 8006c7c:	dd05      	ble.n	8006c8a <floor+0x92>
 8006c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c82:	d101      	bne.n	8006c88 <floor+0x90>
 8006c84:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006c88:	bd30      	pop	{r4, r5, pc}
 8006c8a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c92:	40e2      	lsrs	r2, r4
 8006c94:	4202      	tst	r2, r0
 8006c96:	d0f7      	beq.n	8006c88 <floor+0x90>
 8006c98:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8006cd8 <floor+0xe0>
 8006c9c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006ca0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca8:	ddc8      	ble.n	8006c3c <floor+0x44>
 8006caa:	2900      	cmp	r1, #0
 8006cac:	da02      	bge.n	8006cb4 <floor+0xbc>
 8006cae:	2b14      	cmp	r3, #20
 8006cb0:	d103      	bne.n	8006cba <floor+0xc2>
 8006cb2:	3101      	adds	r1, #1
 8006cb4:	ea20 0002 	bic.w	r0, r0, r2
 8006cb8:	e7c0      	b.n	8006c3c <floor+0x44>
 8006cba:	2401      	movs	r4, #1
 8006cbc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006cc0:	fa04 f303 	lsl.w	r3, r4, r3
 8006cc4:	4418      	add	r0, r3
 8006cc6:	42a8      	cmp	r0, r5
 8006cc8:	bf38      	it	cc
 8006cca:	1909      	addcc	r1, r1, r4
 8006ccc:	e7f2      	b.n	8006cb4 <floor+0xbc>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	e7b3      	b.n	8006c3c <floor+0x44>
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	8800759c 	.word	0x8800759c
 8006cdc:	7e37e43c 	.word	0x7e37e43c
 8006ce0:	bff00000 	.word	0xbff00000
 8006ce4:	000fffff 	.word	0x000fffff

08006ce8 <scalbn>:
 8006ce8:	b500      	push	{lr}
 8006cea:	ed2d 8b02 	vpush	{d8}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	ed8d 0b00 	vstr	d0, [sp]
 8006cf4:	9b01      	ldr	r3, [sp, #4]
 8006cf6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006cfa:	b9a2      	cbnz	r2, 8006d26 <scalbn+0x3e>
 8006cfc:	9a00      	ldr	r2, [sp, #0]
 8006cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d03a      	beq.n	8006d7c <scalbn+0x94>
 8006d06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006dc0 <scalbn+0xd8>
 8006d0a:	4b35      	ldr	r3, [pc, #212]	; (8006de0 <scalbn+0xf8>)
 8006d0c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006d10:	4298      	cmp	r0, r3
 8006d12:	ed8d 7b00 	vstr	d7, [sp]
 8006d16:	da11      	bge.n	8006d3c <scalbn+0x54>
 8006d18:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8006dc8 <scalbn+0xe0>
 8006d1c:	ed9d 6b00 	vldr	d6, [sp]
 8006d20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d24:	e007      	b.n	8006d36 <scalbn+0x4e>
 8006d26:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006d2a:	428a      	cmp	r2, r1
 8006d2c:	d10a      	bne.n	8006d44 <scalbn+0x5c>
 8006d2e:	ed9d 7b00 	vldr	d7, [sp]
 8006d32:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006d36:	ed8d 7b00 	vstr	d7, [sp]
 8006d3a:	e01f      	b.n	8006d7c <scalbn+0x94>
 8006d3c:	9b01      	ldr	r3, [sp, #4]
 8006d3e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006d42:	3a36      	subs	r2, #54	; 0x36
 8006d44:	4402      	add	r2, r0
 8006d46:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006d4a:	428a      	cmp	r2, r1
 8006d4c:	dd0a      	ble.n	8006d64 <scalbn+0x7c>
 8006d4e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8006dd0 <scalbn+0xe8>
 8006d52:	eeb0 0b48 	vmov.f64	d0, d8
 8006d56:	ed9d 1b00 	vldr	d1, [sp]
 8006d5a:	f000 f843 	bl	8006de4 <copysign>
 8006d5e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8006d62:	e7e8      	b.n	8006d36 <scalbn+0x4e>
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	dd10      	ble.n	8006d8a <scalbn+0xa2>
 8006d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d74:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006d78:	e9cd 0100 	strd	r0, r1, [sp]
 8006d7c:	ed9d 0b00 	vldr	d0, [sp]
 8006d80:	b003      	add	sp, #12
 8006d82:	ecbd 8b02 	vpop	{d8}
 8006d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d8a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d8e:	da06      	bge.n	8006d9e <scalbn+0xb6>
 8006d90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d94:	4298      	cmp	r0, r3
 8006d96:	dcda      	bgt.n	8006d4e <scalbn+0x66>
 8006d98:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8006dc8 <scalbn+0xe0>
 8006d9c:	e7d9      	b.n	8006d52 <scalbn+0x6a>
 8006d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006da6:	3236      	adds	r2, #54	; 0x36
 8006da8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006dac:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006db0:	ec41 0b17 	vmov	d7, r0, r1
 8006db4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8006dd8 <scalbn+0xf0>
 8006db8:	e7b2      	b.n	8006d20 <scalbn+0x38>
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w
 8006dc0:	00000000 	.word	0x00000000
 8006dc4:	43500000 	.word	0x43500000
 8006dc8:	c2f8f359 	.word	0xc2f8f359
 8006dcc:	01a56e1f 	.word	0x01a56e1f
 8006dd0:	8800759c 	.word	0x8800759c
 8006dd4:	7e37e43c 	.word	0x7e37e43c
 8006dd8:	00000000 	.word	0x00000000
 8006ddc:	3c900000 	.word	0x3c900000
 8006de0:	ffff3cb0 	.word	0xffff3cb0

08006de4 <copysign>:
 8006de4:	ec51 0b10 	vmov	r0, r1, d0
 8006de8:	ee11 0a90 	vmov	r0, s3
 8006dec:	ee10 2a10 	vmov	r2, s0
 8006df0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006df8:	ea41 0300 	orr.w	r3, r1, r0
 8006dfc:	ec43 2b10 	vmov	d0, r2, r3
 8006e00:	4770      	bx	lr
	...

08006e04 <_init>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

08006e10 <_fini>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr
